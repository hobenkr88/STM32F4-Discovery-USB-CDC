
prog.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
080084dc l    d  .rodata	00000000 .rodata
08008598 l    d  .init_array	00000000 .init_array
080085a0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
200009a0 l    d  .bss	00000000 .bss
20001424 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 /tmp/ccSMpayZ.o
080061d8 l       .text	00000000 LoopCopyDataInit
080061d0 l       .text	00000000 CopyDataInit
080061ec l       .text	00000000 LoopFillZerobss
080061e6 l       .text	00000000 FillZerobss
08006218 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f4xx_hal.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim.c
08001b6c l     F .text	00000060 TIM_OC1_SetConfig
08001bcc l     F .text	00000064 TIM_OC3_SetConfig
08001c30 l     F .text	00000050 TIM_OC4_SetConfig
08001c80 l     F .text	000000b0 TIM_SlaveTimer_SetConfig
08003174 l     F .text	00000010 TIM_DMAPeriodElapsedCplt
08003380 l     F .text	00000010 TIM_DMATriggerCplt
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim_ex.c
00000000 l    df *ABS*	00000000 stm32f4xx_ll_usb.c
08004cf0 l     F .text	00000034 USB_CoreReset
200009a0 l     O .bss	00000004 debug.8417
00000000 l    df *ABS*	00000000 stm32f4xx_hal_dma.c
080084ec l     O .rodata	00000008 flagBitshiftOffset.8481
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 crtstuff.c
080084c4 l     O .text	00000000 __EH_FRAME_BEGIN__
08005fdc l     F .text	00000000 __do_global_dtors_aux
200009a4 l     O .bss	00000000 completed.9630
080085a0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08006000 l     F .text	00000000 frame_dummy
200009a8 l     O .bss	00000000 object.9635
0800859c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08006168 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 syscalls.c
200009c0 l     O .bss	00000004 heap_end.7228
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_msp.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 usb_device.c
00000000 l    df *ABS*	00000000 usb_usr.c
00000000 l    df *ABS*	00000000 usbd_cdc_if.c
08006c02 l     F .text	00000004 CDC_DeInit_FS
08006c08 l     F .text	00000028 CDC_Receive_FS
08006c30 l     F .text	00000028 CDC_Init_FS
08006c58 l     F .text	00000020 CDC_Control_FS
00000000 l    df *ABS*	00000000 usbd_conf.c
00000000 l    df *ABS*	00000000 usbd_desc.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
08007252 l     F .text	00000016 USBD_CtlError.constprop.0
200009c8 l     O .bss	00000001 cfgidx.9162
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
08007636 l     F .text	00000012 USBD_CDC_DataIn
08007648 l     F .text	00000028 USBD_CDC_EP0_RxReady
08007670 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800767c l     F .text	0000000c USBD_CDC_GetHSCfgDesc
08007688 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
080076a0 l     F .text	0000002e USBD_CDC_DataOut
080076d0 l     F .text	00000068 USBD_CDC_Setup
08007738 l     F .text	0000003a USBD_CDC_DeInit
08007772 l     F .text	0000008c USBD_CDC_Init
200009c9 l     O .bss	00000001 ifalt.9157
20000540 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/6.2.0/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/6.2.0/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080085a4 l       .fini_array	00000000 __fini_array_end
200009a0 l       .bss	00000000 __bss_start__
20001424 l       .bss	00000000 __bss_end__
080085a0 l       .fini_array	00000000 __fini_array_start
080085a0 l       .init_array	00000000 __init_array_end
08008598 l       .init_array	00000000 __preinit_array_end
08008598 l       .init_array	00000000 __init_array_start
08008598 l       .init_array	00000000 __preinit_array_start
08006218  w    F .text	00000002 RTC_Alarm_IRQHandler
080084dc g     O .rodata	00000010 APBAHBPrescTable
08006218  w    F .text	00000002 EXTI2_IRQHandler
080020d4 g     F .text	00000004 HAL_TIM_OC_Start_IT
080007fc g     F .text	00000164 HAL_GPIO_DeInit
080038ec g     F .text	000000d4 HAL_TIM_PWM_ConfigChannel
080002f0 g     F .text	00000010 HAL_DBGMCU_EnableDBGStandbyMode
080012f8 g     F .text	0000004e HAL_PCD_EP_ClrStall
08006218  w    F .text	00000002 DebugMon_Handler
08005c88 g     F .text	0000006a HAL_DMA_UnRegisterCallback
08006d82 g     F .text	00000020 HAL_PCD_ResetCallback
08001d74 g     F .text	00000020 HAL_TIM_Base_Start
08001d94 g     F .text	0000002e HAL_TIM_Base_Stop
08001e64 g     F .text	00000030 HAL_TIM_Base_Stop_DMA
08003ad8  w    F .text	00000002 HAL_TIMEx_HallSensor_MspInit
08006218  w    F .text	00000002 SPI4_IRQHandler
08004c74 g     F .text	00000036 USB_ActivateSetup
08004008 g     F .text	00000004 HAL_TIMEx_OCN_Stop_DMA
08001384 g     F .text	0000001a HAL_PCD_ActivateRemoteWakeup
20000b2c g     O .bss	00000224 hUsbDeviceFS
0800560c g     F .text	00000130 HAL_DMA_Init
0800218c g     F .text	00000004 HAL_TIM_OC_Stop_IT
0800116c g     F .text	0000004a HAL_PCD_EP_Close
08003088 g     F .text	00000010 HAL_TIM_ConfigTI1Input
08003118 g     F .text	00000058 HAL_TIM_ReadCapturedValue
08006af0 g     F .text	00000028 USB_Init
08002b4c g     F .text	0000007e HAL_TIM_Encoder_Stop_DMA
08006df4 g     F .text	00000008 HAL_PCD_DisconnectCallback
08007036 g     F .text	00000016 USBD_SetClassConfig
080019c8 g     F .text	00000030 HAL_RCC_GetPCLK1Freq
08000368 g     F .text	0000006c HAL_NVIC_SetPriority
08006218  w    F .text	00000002 TIM1_CC_IRQHandler
080019f8 g     F .text	00000030 HAL_RCC_GetPCLK2Freq
08006d6a g     F .text	00000010 HAL_PCD_DataInStageCallback
08006218  w    F .text	00000002 DMA2_Stream5_IRQHandler
08006218  w    F .text	00000002 HardFault_Handler
08006218  w    F .text	00000002 DMA1_Stream5_IRQHandler
08007e0c g     F .text	00000002 __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08004c64 g     F .text	00000008 USB_ClearInterrupts
08003560 g     F .text	00000036 HAL_TIM_IC_Init
08006974 g     F .text	0000000e SysTick_Handler
08004088 g     F .text	00000004 HAL_TIMEx_OCN_Stop
20000438 g     O .data	00000010 USBD_Interface_fops_FS
0800096c g     F .text	00000008 HAL_GPIO_WritePin
08007856 g     F .text	00000026 USBD_CDC_ReceivePacket
08006218  w    F .text	00000002 PVD_IRQHandler
08006218  w    F .text	00000002 SDIO_IRQHandler
08006d7a g     F .text	00000008 HAL_PCD_SOFCallback
080083fc g     F .text	000000c6 memmove
0800322c g     F .text	00000152 HAL_TIM_IRQHandler
08006218  w    F .text	00000002 TAMP_STAMP_IRQHandler
080085a4 g       *ABS*	00000000 _sidata
080019bc g     F .text	0000000c HAL_RCC_GetHCLKFreq
08006218  w    F .text	00000002 PendSV_Handler
08006218  w    F .text	00000002 NMI_Handler
080003d4 g     F .text	00000018 HAL_NVIC_EnableIRQ
08008598 g       .init_array	00000000 __exidx_end
08006218  w    F .text	00000002 EXTI3_IRQHandler
080071fa g     F .text	00000012 USBD_LL_Suspend
080017d8  w    F .text	00000074 HAL_RCC_GetSysClockFreq
08003cd0 g     F .text	00000038 HAL_TIMEx_HallSensor_Stop_DMA
0800787c g     F .text	0000000c __errno
08001d38 g     F .text	0000003a HAL_TIM_Base_DeInit
080057b0 g     F .text	0000005a HAL_DMA_Start
080001a8 g     F .text	0000002c HAL_DeInit
080010a4 g     F .text	00000024 HAL_PCD_DevDisconnect
08007268 g     F .text	000001f4 USBD_StdDevReq
08006bf8 g     F .text	0000000a USB_DataReceivedCallback3
08004084 g     F .text	00000004 HAL_TIMEx_PWMN_Stop
080009ac g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
080045d0 g     F .text	0000008e USB_ActivateEndpoint
08006796 g     F .text	00000070 HAL_MspInit
08006ea8 g     F .text	00000026 USBD_LL_IsStallEP
08006e5c g     F .text	0000000e USBD_LL_Start
080005ac  w    F .text	00000002 HAL_SYSTICK_Callback
08006218  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
0800702c g     F .text	0000000a USBD_Start
08000974 g     F .text	00000008 HAL_GPIO_TogglePin
08002a04 g     F .text	00000148 HAL_TIM_Encoder_Start_DMA
20001420 g     O .bss	00000004 errno
080047d8 g     F .text	000001bc USB_EPStartXfer
080084dc g       .text	00000000 _etext
200009a0 g       .bss	00000000 _sbss
0800097c g     F .text	0000002a HAL_GPIO_LockPin
08001e94  w    F .text	00000002 HAL_TIM_OC_MspInit
08004660 g     F .text	000000c0 USB_ActivateDedicatedEndpoint
20000d50 g     O .bss	00000004 transmission
20000d54 g     O .bss	00000004 transmission_length
08003c08 g     F .text	00000024 HAL_TIMEx_HallSensor_Start_IT
080033b4 g     F .text	00000006 HAL_TIM_PWM_GetState
08004ae4 g     F .text	0000003a USB_EPSetStall
08000294 g     F .text	0000000c HAL_GetREVID
08004eb4 g     F .text	00000044 USB_DriveVbus
0800140c  w    F .text	00000002 HAL_RCC_DeInit
08006218  w    F .text	00000002 I2C3_ER_IRQHandler
08004588 g     F .text	00000010 USB_SetDevSpeed
0800437c g     F .text	0000000e USB_EnableGlobalInt
0800580c g     F .text	00000082 HAL_DMA_Start_IT
20000430 g     O .data	00000004 __heap_limit
0800701e g     F .text	0000000e USBD_RegisterClass
08001e9c g     F .text	0000003a HAL_TIM_OC_DeInit
080005b8 g     F .text	00000244 HAL_GPIO_Init
080071f4 g     F .text	00000006 USBD_LL_SetSpeed
08004568 g     F .text	00000020 USB_FlushRxFifo
08006a18 g     F .text	00000020 Queue_Create
20000e64 g     O .bss	000003b8 hpcd_USB_OTG_FS
080002a0 g     F .text	00000010 HAL_GetDEVID
08003f64 g     F .text	000000a2 HAL_TIMEx_PWMN_Stop_DMA
08006dd4 g     F .text	00000008 HAL_PCD_ResumeCallback
08002bcc g     F .text	000000e4 HAL_TIM_DMABurst_WriteStart
080042ec  w    F .text	00000002 HAL_TIMEx_CommutationCallback
08006a38 g     F .text	00000068 Queue_PushBack
0800548c g     F .text	00000078 USB_DoPing
0800748c g     F .text	000000c6 USBD_StdEPReq
0800236c  w    F .text	00000002 HAL_TIM_IC_MspDeInit
08006984 g     F .text	00000010 EXTI0_IRQHandler
08005cf4 g     F .text	00000006 HAL_DMA_GetState
08006218  w    F .text	00000002 I2C2_EV_IRQHandler
08007234 g     F .text	00000004 USBD_LL_IsoOUTIncomplete
08006218  w    F .text	00000002 DMA1_Stream2_IRQHandler
0800760a g     F .text	00000016 USBD_CtlSendStatus
08000250  w    F .text	0000001c HAL_Delay
08006218  w    F .text	00000002 FPU_IRQHandler
0800745c g     F .text	00000030 USBD_StdItfReq
2000047c g     O .data	00000004 SystemCoreClock
08001238 g     F .text	00000062 HAL_PCD_EP_Transmit
08007552 g     F .text	00000028 USBD_ParseSetupRequest
08003c64 g     F .text	0000006c HAL_TIMEx_HallSensor_Start_DMA
080033bc g     F .text	00000006 HAL_TIM_IC_GetState
08007888 g     F .text	00000010 malloc
08003b80 g     F .text	0000003a HAL_TIMEx_HallSensor_DeInit
0800055c g     F .text	0000001c HAL_NVIC_ClearPendingIRQ
200009c4 g     O .bss	00000004 queue
08004ef8 g     F .text	00000012 USB_GetHostSpeed
08006218  w    F .text	00000002 UsageFault_Handler
080033cc g     F .text	00000006 HAL_TIM_Encoder_GetState
08002e0c g     F .text	00000004 HAL_TIM_DMABurst_WriteStop
200009fc g     O .bss	00000004 __malloc_top_pad
08006218  w    F .text	00000002 DMA2_Stream2_IRQHandler
08001fd0 g     F .text	00000004 HAL_TIM_OC_Start
08000960 g     F .text	0000000c HAL_GPIO_ReadPin
080022ac g     F .text	000000b8 HAL_TIM_PWM_Stop_DMA
08003598 g     F .text	00000048 HAL_TIM_OnePulse_Init
08007218 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08006218  w    F .text	00000002 SPI1_IRQHandler
080004b4 g     F .text	00000010 HAL_NVIC_GetPriorityGrouping
0800816c g     F .text	00000024 _sbrk_r
08003d38 g     F .text	00000078 HAL_TIMEx_PWMN_Start_IT
08003184  w    F .text	00000002 HAL_TIM_OC_DelayElapsedCallback
0800626c g     F .text	000000b4 ProcessUSBCommand
08006ca4 g     F .text	00000074 HAL_PCD_MspInit
080043d0 g     F .text	00000174 USB_DevInit
0800129c g     F .text	0000005c HAL_PCD_EP_SetStall
080028b0 g     F .text	00000054 HAL_TIM_Encoder_Stop
08002e3c g     F .text	000000ca HAL_TIM_ConfigOCrefClear
08006994 g     F .text	0000001c TIM1_BRK_TIM9_IRQHandler
08006ff4 g     F .text	0000002a USBD_Init
2000141c g     O .bss	00000004 uwTick
08006320 g     F .text	000000a8 SystemClock_Config
200009f4 g     O .bss	00000004 __malloc_max_sbrked_mem
0800042c g     F .text	00000034 HAL_SYSTICK_Config
08008598 g       .init_array	00000000 __exidx_start
08006218  w    F .text	00000002 DMA2_Stream3_IRQHandler
08001b48  w    F .text	00000002 HAL_RCC_CSSCallback
2000054c g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080084f4 g     O .rodata	00000004 _global_impure_ptr
08000408 g     F .text	00000024 HAL_NVIC_SystemReset
08007e20 g     F .text	0000034c _realloc_r
08004e80 g     F .text	00000034 USB_ResetPort
08006074 g     F .text	00000050 __libc_init_array
08001e98  w    F .text	00000002 HAL_TIM_OC_MspDeInit
080075fa g     F .text	00000010 USBD_CtlContinueRx
08006b4e g     F .text	0000000a USB_Send
20000a00 g     O .bss	0000003c htim5
080010ec g     F .text	0000007e HAL_PCD_EP_Open
08000b74 g     F .text	0000050c HAL_PCD_IRQHandler
080020d8 g     F .text	000000b4 HAL_TIM_PWM_Stop_IT
20000e59 g     O .bss	00000004 UserRxBufferFS
0800617c  w    F .text	0000004c _sbrk
08006b18 g     F .text	00000036 USB_Transmit
08006c78 g     F .text	0000002c CDC_Transmit_FS
08006218  w    F .text	00000002 USART6_IRQHandler
080084c4 g     F .text	00000000 _init
20000a3c g     O .bss	0000003c htim3
08006dec g     F .text	00000008 HAL_PCD_ConnectCallback
08003bbc g     F .text	0000001c HAL_TIMEx_HallSensor_Start
08006e8c g     F .text	0000000e USBD_LL_StallEP
0800027c  w    F .text	00000010 HAL_ResumeTick
08006040 g     F .text	00000034 __libc_fini_array
08001a28  w    F .text	000000dc HAL_RCC_GetOscConfig
08001f48  w    F .text	00000002 HAL_TIM_PWM_MspDeInit
08002904 g     F .text	0000007e HAL_TIM_Encoder_Start_IT
20001424 g       .bss	00000000 _ebss
08003390  w    F .text	00000002 HAL_TIM_ErrorCallback
08002658  w    F .text	00000002 HAL_TIM_OnePulse_MspDeInit
08004ac8 g     F .text	0000001c USB_ReadPacket
08004174 g     F .text	00000058 HAL_TIMEx_ConfigCommutationEvent_IT
080061c8  w    F .text	00000038 Reset_Handler
200004b8 g     O .data	00000043 USBD_CDC_CfgFSDesc
08004bd4 g     F .text	00000018 USB_DevConnect
08006ddc g     F .text	00000008 HAL_PCD_ISOOUTIncompleteCallback
080033d4 g     F .text	000000e4 TIM_Base_SetConfig
08002370 g     F .text	0000003a HAL_TIM_IC_DeInit
08004c04 g     F .text	00000008 USB_ReadInterrupts
08006de4 g     F .text	00000008 HAL_PCD_ISOINIncompleteCallback
0800573c g     F .text	00000074 HAL_DMA_DeInit
08001dc4 g     F .text	00000016 HAL_TIM_Base_Start_IT
20000464 g     O .data	00000012 USBD_FS_DeviceDesc
08004b20 g     F .text	00000030 USB_EPClearStall
08006218  w    F .text	00000002 DMA2_Stream0_IRQHandler
08001ddc g     F .text	0000002a HAL_TIM_Base_Stop_IT
08000200 g     F .text	00000034 HAL_Init
20000434 g     O .data	00000004 mystring
080040c0 g     F .text	00000062 HAL_TIMEx_OnePulseN_Stop_IT
080075dc g     F .text	0000001e USBD_CtlPrepareRx
08006218  w    F .text	00000002 TIM4_IRQHandler
080002c0 g     F .text	00000010 HAL_DBGMCU_DisableDBGSleepMode
08006d18 g     F .text	00000034 HAL_PCD_MspDeInit
08007828 g     F .text	0000002e USBD_CDC_TransmitPacket
08002404 g     F .text	00000068 HAL_TIM_IC_Start_IT
08002654  w    F .text	00000002 HAL_TIM_OnePulse_MspInit
08006aa0 g     F .text	00000034 Queue_PopFront
080002e0 g     F .text	00000010 HAL_DBGMCU_DisableDBGStopMode
080009a8  w    F .text	00000002 HAL_GPIO_EXTI_Callback
08007620 g     F .text	00000016 USBD_CtlReceiveStatus
20001424 g       ._user_heap_stack	00000000 end
08006218  w    F .text	00000002 I2C1_EV_IRQHandler
08002698 g     F .text	00000048 HAL_TIM_OnePulse_Start
08006218  w    F .text	00000002 DMA1_Stream6_IRQHandler
08006e6a g     F .text	00000014 USBD_LL_OpenEP
08004c6c g     F .text	00000008 USB_GetMode
080017c0 g     F .text	0000000c HAL_RCC_EnableCSS
08007118 g     F .text	0000009e USBD_LL_DataInStage
08001fd4 g     F .text	00000070 HAL_TIM_PWM_Stop
08006dfc g     F .text	00000060 USBD_LL_Init
08005504 g     F .text	00000108 USB_StopHost
08006218  w    F .text	00000002 DMA1_Stream1_IRQHandler
08004c2c g     F .text	00000014 USB_ReadDevOutEPInterrupt
080069e0 g     F .text	00000038 MX_USB_DEVICE_Init
20000480 g     O .data	00000038 USBD_CDC
0800704c g     F .text	0000000e USBD_ClrClassConfig
080077fe g     F .text	0000000e USBD_CDC_RegisterInterface
080033a4 g     F .text	00000006 HAL_TIM_Base_GetState
08008230 g     F .text	000001cc _free_r
08002cb0 g     F .text	000000e4 HAL_TIM_DMABurst_ReadStart
080069bc g     F .text	0000000c TIM3_IRQHandler
08006982 g     F .text	00000002 RCC_IRQHandler
080013bc g     F .text	00000048 HAL_PCDEx_SetTxFiFo
08003684 g     F .text	0000007c TIM_TI1_SetConfig
00000200 g       *ABS*	00000000 _Min_Heap_Size
08003c2c g     F .text	00000038 HAL_TIMEx_HallSensor_Stop_IT
08006d58 g     F .text	00000012 HAL_PCD_DataOutStageCallback
08006218 g       .text	00000002 Default_Handler
20000998 g     O .data	00000004 __malloc_sbrk_base
08001224 g     F .text	00000012 HAL_PCD_EP_GetRxCount
0800026c  w    F .text	00000010 HAL_SuspendTick
20000e5d g     O .bss	00000004 UserTxBufferFS
08007230 g     F .text	00000004 USBD_LL_IsoINIncomplete
08005890 g     F .text	0000008e HAL_DMA_Abort
08006e9a g     F .text	0000000e USBD_LL_ClearStallEP
08004b50 g     F .text	00000064 USB_StopDevice
08006218  w    F .text	00000002 EXTI15_10_IRQHandler
08003db4 g     F .text	000000a8 HAL_TIMEx_PWMN_Stop_IT
080060c4 g     F .text	000000a4 __register_exitproc
080013b4 g     F .text	00000006 HAL_PCD_GetState
08003f60 g     F .text	00000004 HAL_TIMEx_OCN_Start_DMA
080010c8 g     F .text	00000024 HAL_PCD_SetAddress
08006218  w    F .text	00000002 ADC_IRQHandler
080022a8 g     F .text	00000004 HAL_TIM_OC_Start_DMA
08004f18 g     F .text	00000104 USB_HC_Init
08003adc g     F .text	000000a0 HAL_TIMEx_HallSensor_Init
0800184c g     F .text	00000170 HAL_RCC_ClockConfig
0800621a g     F .text	00000002 EXTI0_IRQ_Callback
08000344 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200009cc g     O .bss	00000028 __malloc_current_mallinfo
08002828 g     F .text	0000003a HAL_TIM_Encoder_DeInit
08006218  w    F .text	00000002 DMA1_Stream7_IRQHandler
08006f10 g     F .text	0000000c USBD_FS_LangIDStrDescriptor
0800318c g     F .text	0000004a TIM_DMACaptureCplt
08003d34 g     F .text	00000004 HAL_TIMEx_OCN_Start
08007e10 g     F .text	00000010 realloc
080003ec g     F .text	0000001c HAL_NVIC_DisableIRQ
08004d24 g     F .text	00000120 USB_HostInit
08006da4 g     F .text	00000030 HAL_PCD_SuspendCallback
08000b18 g     F .text	00000030 HAL_PCD_Stop
08007694 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
080069c8 g     F .text	0000000c TIM5_IRQHandler
08006b58 g     F .text	000000a0 USB_AssembleTransmission
08006218  w    F .text	00000002 DMA2_Stream7_IRQHandler
080034b8 g     F .text	00000036 HAL_TIM_Base_Init
0800621c g     F .text	00000050 HAL_TIM_PeriodElapsedCallback
08006218  w    F .text	00000002 I2C3_EV_IRQHandler
080035e0 g     F .text	000000a4 HAL_TIM_Encoder_Init
08002864 g     F .text	0000004c HAL_TIM_Encoder_Start
08003e5c g     F .text	00000004 HAL_TIMEx_OCN_Stop_IT
08006f04 g     F .text	0000000c USBD_FS_DeviceDescriptor
08006218  w    F .text	00000002 EXTI9_5_IRQHandler
08007238 g     F .text	00000004 USBD_LL_DevConnected
080025cc g     F .text	00000086 HAL_TIM_IC_Stop_DMA
08003394 g     F .text	00000010 TIM_DMAError
08006218  w    F .text	00000002 RTC_WKUP_IRQHandler
20000590 g     O .data	00000408 __malloc_av_
08004598 g     F .text	00000036 USB_GetDevSpeed
0800028c g     F .text	00000008 HAL_GetHalVersion
20000448 g     O .data	0000001c FS_Desc
08000244  w    F .text	0000000c HAL_GetTick
08007e08 g     F .text	00000002 __malloc_lock
08001404 g     F .text	00000008 HAL_PCDEx_SetRxFiFo
08006218  w    F .text	00000002 SPI2_IRQHandler
080042f0 g     F .text	00000010 TIMEx_DMACommutationCplt
08002f08 g     F .text	00000180 HAL_TIM_ConfigClockSource
08006218  w    F .text	00000002 MemManage_Handler
08006424 g     F .text	00000370 main
08001ed8 g     F .text	0000006c HAL_TIM_OC_Stop
080068f4 g     F .text	00000080 HAL_TIM_Base_MspDeInit
080026e0 g     F .text	0000006c HAL_TIM_OnePulse_Stop
08000578 g     F .text	0000001c HAL_NVIC_GetActive
200009f8 g     O .bss	00000004 __malloc_max_total_mem
08006f8c g     F .text	0000001c USBD_FS_InterfaceStrDescriptor
08006218  w    F .text	00000002 DMA1_Stream0_IRQHandler
0800265c g     F .text	0000003a HAL_TIM_OnePulse_DeInit
08006f38 g     F .text	0000001c USBD_FS_ProductStrDescriptor
08008f44 g       *ABS*	00000000 _siccmram
20000a78 g     O .bss	0000003c htim1
08003528 g     F .text	00000036 HAL_TIM_PWM_Init
08006218  w    F .text	00000002 SVC_Handler
08002364 g     F .text	00000004 HAL_TIM_OC_Stop_DMA
08002044 g     F .text	00000090 HAL_TIM_PWM_Start_IT
0800388c g     F .text	0000005e HAL_TIM_OC_ConfigChannel
08000aa8 g     F .text	00000044 HAL_PCD_DeInit
080078a8 g     F .text	00000560 _malloc_r
08001b04 g     F .text	00000044 HAL_RCC_GetClockConfig
08003188  w    F .text	00000002 HAL_TIM_IC_CaptureCallback
08002368  w    F .text	00000002 HAL_TIM_IC_MspInit
08000328 g     F .text	0000001c HAL_DisableCompensationCell
20000ab4 g     O .bss	0000003c htim9
0800246c g     F .text	0000007a HAL_TIM_IC_Stop_IT
080042c4 g     F .text	00000028 HAL_TIMEx_RemapConfig
080071b6 g     F .text	0000003e USBD_LL_Reset
08006ef8 g     F .text	0000000c USBD_LL_GetRxDataSize
08003098 g     F .text	00000040 HAL_TIM_SlaveConfigSynchronization
20000478 g     O .data	00000004 USBD_LangIDDesc
08006218  w    F .text	00000002 EXTI4_IRQHandler
080070b4 g     F .text	00000064 USBD_LL_DataOutStage
08008190 g     F .text	000000a0 _malloc_trim_r
08003e60 g     F .text	00000100 HAL_TIMEx_PWMN_Start_DMA
0800430c g     F .text	00000070 USB_CoreInit
08005d08 g     F .text	000002dc strcmp
08005c28 g     F .text	00000060 HAL_DMA_RegisterCallback
08006fa8 g     F .text	0000004c SystemInit
0800438c g     F .text	0000000e USB_DisableGlobalInt
080084d0 g     F .text	00000000 _fini
08000aec g     F .text	0000002a HAL_PCD_Start
0800439c g     F .text	00000034 USB_SetCurrentMode
08002e10 g     F .text	0000002c HAL_TIM_GenerateEvent
080031d8  w    F .text	00000002 HAL_TIM_PWM_PulseFinishedCallback
08004994 g     F .text	00000106 USB_EP0StartXfer
08000540 g     F .text	0000001c HAL_NVIC_GetPendingIRQ
08006034 g     F .text	0000000c atexit
20000d58 g     O .bss	00000001 new_transmission
0800274c g     F .text	00000058 HAL_TIM_OnePulse_Start_IT
10000000 g       .ccmram	00000000 _eccmram
080041cc g     F .text	00000068 HAL_TIMEx_ConfigCommutationEvent_DMA
080001d4  w    F .text	0000002c HAL_InitTick
08006ece g     F .text	0000000e USBD_LL_SetUSBAddress
20000000 g     O .data	00000004 _impure_ptr
08000234  w    F .text	00000010 HAL_IncTick
08006f70 g     F .text	0000001c USBD_FS_ConfigStrDescriptor
08006e7e g     F .text	0000000e USBD_LL_CloseEP
08005a80 g     F .text	000001a8 HAL_DMA_IRQHandler
08004304 g     F .text	00000006 HAL_TIMEx_HallSensor_GetState
080013a0 g     F .text	00000012 HAL_PCD_DeActivateRemoteWakeup
08001348 g     F .text	0000003a HAL_PCD_EP_Flush
080075cc g     F .text	00000010 USBD_CtlContinueSendData
0800720c g     F .text	0000000c USBD_LL_Resume
08006218  w    F .text	00000002 WWDG_IRQHandler
08003db0 g     F .text	00000004 HAL_TIMEx_OCN_Start_IT
08005cfc g     F .text	00000004 HAL_DMA_GetError
08003228  w    F .text	00000002 HAL_TIM_TriggerCallback
08006edc g     F .text	0000000e USBD_LL_Transmit
080069b0 g     F .text	0000000c TIM2_IRQHandler
080009c8 g     F .text	000000da HAL_PCD_Init
200004fc g     O .data	00000043 USBD_CDC_CfgHSDesc
08004234 g     F .text	0000004a HAL_TIMEx_MasterConfigSynchronization
080030d8 g     F .text	00000040 HAL_TIM_SlaveConfigSynchronization_IT
080002d0 g     F .text	00000010 HAL_DBGMCU_EnableDBGStopMode
08006218  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
20000af0 g     O .bss	0000003c htim2
08003828 g     F .text	00000064 TIM_OC2_SetConfig
08006218  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
0800757a g     F .text	00000038 USBD_GetString
08002190 g     F .text	00000118 HAL_TIM_PWM_Start_DMA
08006d4c g     F .text	0000000c HAL_PCD_SetupStageCallback
08000594 g     F .text	00000018 HAL_SYSTICK_CLKSourceConfig
20000d59 g     O .bss	00000100 command_buffer
08001080 g     F .text	00000024 HAL_PCD_DevConnect
2001ffff g       *ABS*	00000000 _estack
080031dc g     F .text	0000004a TIM_DMADelayPulseCplt
08003bd8 g     F .text	00000030 HAL_TIMEx_HallSensor_Stop
08006218  w    F .text	00000002 EXTI1_IRQHandler
08005298 g     F .text	0000001e USB_HC_ReadInterrupt
08006f1c g     F .text	0000001c USBD_FS_ManufacturerStrDescriptor
080001a4  w    F .text	00000002 HAL_MspDeInit
08001e08 g     F .text	0000005c HAL_TIM_Base_Start_DMA
200009a0 g       .data	00000000 _edata
080002b0 g     F .text	00000010 HAL_DBGMCU_EnableDBGSleepMode
080023d0 g     F .text	00000034 HAL_TIM_IC_Stop
10000000 g       .ccmram	00000000 _sccmram
080052b8 g     F .text	000001d2 USB_HC_Halt
08001f88 g     F .text	00000048 HAL_TIM_PWM_Start
08004280 g     F .text	00000044 HAL_TIMEx_ConfigBreakDeadTime
08004c40 g     F .text	00000024 USB_ReadDevInEPInterrupt
08006808 g     F .text	000000ec HAL_TIM_Base_MspInit
080017cc g     F .text	0000000c HAL_RCC_DisableCSS
08002d94 g     F .text	00000076 HAL_TIM_DMABurst_ReadStop
08004c1c g     F .text	00000010 USB_ReadDevAllInEpInterrupt
08003b7c  w    F .text	00000002 HAL_TIMEx_HallSensor_MspDeInit
08006f54 g     F .text	0000001c USBD_FS_SerialStrDescriptor
080033ac g     F .text	00000006 HAL_TIM_OC_GetState
08006218  w    F .text	00000002 USART2_IRQHandler
08001410  w    F .text	0000030c HAL_RCC_OscConfig
0800400c g     F .text	00000022 HAL_TIMEx_OnePulseN_Start
2000099c g     O .data	00000004 __malloc_trim_threshold
08000000 g     O .isr_vector	00000000 g_pfnVectors
08003700 g     F .text	00000128 HAL_TIM_IC_ConfigChannel
080075b2 g     F .text	0000001a USBD_CtlSendData
080063c8 g     F .text	0000005c LEDsInit
08004124 g     F .text	00000050 HAL_TIMEx_ConfigCommutationEvent
080023ac g     F .text	00000022 HAL_TIM_IC_Start
08006218  w    F .text	00000002 I2C2_ER_IRQHandler
08003d08 g     F .text	0000002a HAL_TIMEx_PWMN_Start
08000460 g     F .text	00000054 HAL_MPU_ConfigRegion
08002820  w    F .text	00000002 HAL_TIM_Encoder_MspInit
08006218  w    F .text	00000002 DMA2_Stream1_IRQHandler
08004720 g     F .text	0000005a USB_DeactivateEndpoint
08004a9c g     F .text	0000002c USB_WritePacket
080004c4 g     F .text	00000060 HAL_NVIC_GetPriority
08003abc g     F .text	0000001c TIM_CCxChannelCmd
08006ad4 g     F .text	0000001c Queue_Front
08006218  w    F .text	00000002 FLASH_IRQHandler
08002984 g     F .text	0000007e HAL_TIM_Encoder_Stop_IT
08004c0c g     F .text	00000010 USB_ReadDevAllOutEpInterrupt
2000121c g     O .bss	00000200 USBD_StrDesc
08006218  w    F .text	00000002 DMA2_Stream4_IRQHandler
08006218  w    F .text	00000002 BusFault_Handler
08006218  w    F .text	00000002 USART1_IRQHandler
0800723c g     F .text	00000016 USBD_LL_DevDisconnected
080005b0 g     F .text	00000008 HAL_SYSTICK_IRQHandler
080069d4 g     F .text	0000000c OTG_FS_IRQHandler
08006218  w    F .text	00000002 SPI3_IRQHandler
08001b4c g     F .text	00000020 HAL_RCC_NMI_IRQHandler
08004bec g     F .text	00000018 USB_DevDisconnect
08006218  w    F .text	00000002 DMA1_Stream4_IRQHandler
08000310 g     F .text	00000018 HAL_EnableCompensationCell
08001f44  w    F .text	00000002 HAL_TIM_PWM_MspInit
080039c0 g     F .text	000000fc HAL_TIM_OnePulse_ConfigChannel
0800171c g     F .text	000000a4 HAL_RCC_MCOConfig
08006218  w    F .text	00000002 I2C1_ER_IRQHandler
08000300 g     F .text	00000010 HAL_DBGMCU_DisableDBGStandbyMode
080033c4 g     F .text	00000006 HAL_TIM_OnePulse_GetState
080034f0 g     F .text	00000036 HAL_TIM_OC_Init
08006eea g     F .text	0000000e USBD_LL_PrepareReceive
080027a4 g     F .text	0000007c HAL_TIM_OnePulse_Stop_IT
08004e44 g     F .text	0000003a USB_InitFSLSPClkSel
08004300  w    F .text	00000002 HAL_TIMEx_BreakCallback
08002824  w    F .text	00000002 HAL_TIM_Encoder_MspDeInit
0800501c g     F .text	0000027c USB_HC_StartXfer
08005944 g     F .text	0000013c HAL_DMA_PollForTransfer
0800477c g     F .text	0000005c USB_DeactivateDedicatedEndpoint
08001f4c g     F .text	0000003a HAL_TIM_PWM_DeInit
0800781c g     F .text	0000000c USBD_CDC_SetRxBuffer
08004030 g     F .text	00000052 HAL_TIMEx_OnePulseN_Stop
08004544 g     F .text	00000024 USB_FlushTxFifo
08004bb4 g     F .text	00000020 USB_SetDevAddress
08000524 g     F .text	0000001c HAL_NVIC_SetPendingIRQ
080011b8 g     F .text	0000006a HAL_PCD_EP_Receive
08006218  w    F .text	00000002 DMA2_Stream6_IRQHandler
08004f0c g     F .text	0000000a USB_GetCurrentFrame
0800408c g     F .text	00000032 HAL_TIMEx_OnePulseN_Start_IT
08004cac g     F .text	00000044 USB_EP0_OutStart
08005920 g     F .text	00000024 HAL_DMA_Abort_IT
080024e8 g     F .text	000000e4 HAL_TIM_IC_Start_DMA
08006218  w    F .text	00000002 DMA1_Stream3_IRQHandler
0800780c g     F .text	00000010 USBD_CDC_SetTxBuffer
08007898 g     F .text	00000010 free
0800705a g     F .text	0000005a USBD_LL_SetupStage
08006794 g     F .text	00000002 Error_Handler



Disassembly of section .text:

080001a0 <HAL_MspDeInit-0x4>:
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop

080001a4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop

080001a8 <HAL_DeInit>:
{
 80001a8:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80001aa:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <HAL_DeInit+0x28>)
 80001ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  __HAL_RCC_APB1_RELEASE_RESET();
 80001b0:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 80001b2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80001b4:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 80001b6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80001b8:	625c      	str	r4, [r3, #36]	; 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 80001ba:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80001bc:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 80001be:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80001c0:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 80001c2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80001c4:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 80001c6:	f7ff ffed 	bl	80001a4 <HAL_MspDeInit>
}
 80001ca:	4620      	mov	r0, r4
 80001cc:	bd10      	pop	{r4, pc}
 80001ce:	bf00      	nop
 80001d0:	40023800 	.word	0x40023800

080001d4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
 80001d6:	4a09      	ldr	r2, [pc, #36]	; (80001fc <HAL_InitTick+0x28>)
 80001d8:	681b      	ldr	r3, [r3, #0]
{
 80001da:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
{
 80001e0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001e2:	0998      	lsrs	r0, r3, #6
 80001e4:	f000 f922 	bl	800042c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001e8:	4621      	mov	r1, r4
 80001ea:	2200      	movs	r2, #0
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001f0:	f000 f8ba 	bl	8000368 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000047c 	.word	0x2000047c
 80001fc:	10624dd3 	.word	0x10624dd3

08000200 <HAL_Init>:
{
 8000200:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <HAL_Init+0x30>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800020a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000212:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800021a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f891 	bl	8000344 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd6 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f006 fab5 	bl	8006796 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40023c00 	.word	0x40023c00

08000234 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000234:	4a02      	ldr	r2, [pc, #8]	; (8000240 <HAL_IncTick+0xc>)
 8000236:	6813      	ldr	r3, [r2, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	6013      	str	r3, [r2, #0]
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	2000141c 	.word	0x2000141c

08000244 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000244:	4b01      	ldr	r3, [pc, #4]	; (800024c <HAL_GetTick+0x8>)
 8000246:	6818      	ldr	r0, [r3, #0]
}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	2000141c 	.word	0x2000141c

08000250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000250:	b510      	push	{r4, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000256:	f7ff fff5 	bl	8000244 <HAL_GetTick>
 800025a:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800025c:	f7ff fff2 	bl	8000244 <HAL_GetTick>
 8000260:	9b01      	ldr	r3, [sp, #4]
 8000262:	1b00      	subs	r0, r0, r4
 8000264:	4298      	cmp	r0, r3
 8000266:	d3f9      	bcc.n	800025c <HAL_Delay+0xc>
  {
  }
}
 8000268:	b002      	add	sp, #8
 800026a:	bd10      	pop	{r4, pc}

0800026c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800026c:	4a02      	ldr	r2, [pc, #8]	; (8000278 <HAL_SuspendTick+0xc>)
 800026e:	6813      	ldr	r3, [r2, #0]
 8000270:	f023 0302 	bic.w	r3, r3, #2
 8000274:	6013      	str	r3, [r2, #0]
 8000276:	4770      	bx	lr
 8000278:	e000e010 	.word	0xe000e010

0800027c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800027c:	4a02      	ldr	r2, [pc, #8]	; (8000288 <HAL_ResumeTick+0xc>)
 800027e:	6813      	ldr	r3, [r2, #0]
 8000280:	f043 0302 	orr.w	r3, r3, #2
 8000284:	6013      	str	r3, [r2, #0]
 8000286:	4770      	bx	lr
 8000288:	e000e010 	.word	0xe000e010

0800028c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F4xx_HAL_VERSION;
}
 800028c:	4800      	ldr	r0, [pc, #0]	; (8000290 <HAL_GetHalVersion+0x4>)
 800028e:	4770      	bx	lr
 8000290:	01050000 	.word	0x01050000

08000294 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <HAL_GetREVID+0x8>)
 8000296:	6818      	ldr	r0, [r3, #0]
}
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	4770      	bx	lr
 800029c:	e0042000 	.word	0xe0042000

080002a0 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80002a0:	4b02      	ldr	r3, [pc, #8]	; (80002ac <HAL_GetDEVID+0xc>)
 80002a2:	6818      	ldr	r0, [r3, #0]
}
 80002a4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e0042000 	.word	0xe0042000

080002b0 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80002b0:	4a02      	ldr	r2, [pc, #8]	; (80002bc <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80002b2:	6853      	ldr	r3, [r2, #4]
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6053      	str	r3, [r2, #4]
 80002ba:	4770      	bx	lr
 80002bc:	e0042000 	.word	0xe0042000

080002c0 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80002c0:	4a02      	ldr	r2, [pc, #8]	; (80002cc <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80002c2:	6853      	ldr	r3, [r2, #4]
 80002c4:	f023 0301 	bic.w	r3, r3, #1
 80002c8:	6053      	str	r3, [r2, #4]
 80002ca:	4770      	bx	lr
 80002cc:	e0042000 	.word	0xe0042000

080002d0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80002d2:	6853      	ldr	r3, [r2, #4]
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6053      	str	r3, [r2, #4]
 80002da:	4770      	bx	lr
 80002dc:	e0042000 	.word	0xe0042000

080002e0 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80002e0:	4a02      	ldr	r2, [pc, #8]	; (80002ec <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80002e2:	6853      	ldr	r3, [r2, #4]
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6053      	str	r3, [r2, #4]
 80002ea:	4770      	bx	lr
 80002ec:	e0042000 	.word	0xe0042000

080002f0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80002f0:	4a02      	ldr	r2, [pc, #8]	; (80002fc <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80002f2:	6853      	ldr	r3, [r2, #4]
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	6053      	str	r3, [r2, #4]
 80002fa:	4770      	bx	lr
 80002fc:	e0042000 	.word	0xe0042000

08000300 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000300:	4a02      	ldr	r2, [pc, #8]	; (800030c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8000302:	6853      	ldr	r3, [r2, #4]
 8000304:	f023 0304 	bic.w	r3, r3, #4
 8000308:	6053      	str	r3, [r2, #4]
 800030a:	4770      	bx	lr
 800030c:	e0042000 	.word	0xe0042000

08000310 <HAL_EnableCompensationCell>:
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000310:	2101      	movs	r1, #1
 8000312:	fa91 f2a1 	rbit	r2, r1
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8000316:	4b03      	ldr	r3, [pc, #12]	; (8000324 <HAL_EnableCompensationCell+0x14>)
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	4413      	add	r3, r2
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	6019      	str	r1, [r3, #0]
 8000322:	4770      	bx	lr
 8000324:	1089c100 	.word	0x1089c100

08000328 <HAL_DisableCompensationCell>:
 8000328:	2201      	movs	r2, #1
 800032a:	fa92 f2a2 	rbit	r2, r2
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <HAL_DisableCompensationCell+0x18>)
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	4413      	add	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	1089c100 	.word	0x1089c100

08000344 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000344:	4a07      	ldr	r2, [pc, #28]	; (8000364 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000346:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000348:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800034c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800034e:	0200      	lsls	r0, r0, #8
 8000350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000354:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800035c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800035e:	60d3      	str	r3, [r2, #12]
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800036a:	b470      	push	{r4, r5, r6}
 800036c:	68dc      	ldr	r4, [r3, #12]
 800036e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000372:	f1c4 0607 	rsb	r6, r4, #7
 8000376:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000378:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	bf28      	it	cs
 800037e:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000380:	2b06      	cmp	r3, #6
 8000382:	d917      	bls.n	80003b4 <HAL_NVIC_SetPriority+0x4c>
 8000384:	3c03      	subs	r4, #3
 8000386:	2501      	movs	r5, #1
 8000388:	40a5      	lsls	r5, r4
 800038a:	3d01      	subs	r5, #1
 800038c:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800038e:	2301      	movs	r3, #1
 8000390:	40b3      	lsls	r3, r6
 8000392:	3b01      	subs	r3, #1
 8000394:	4019      	ands	r1, r3
 8000396:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000398:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800039e:	db0c      	blt.n	80003ba <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80003a4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80003a8:	0109      	lsls	r1, r1, #4
 80003aa:	b2c9      	uxtb	r1, r1
 80003ac:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80003b0:	bc70      	pop	{r4, r5, r6}
 80003b2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b4:	2200      	movs	r2, #0
 80003b6:	4614      	mov	r4, r2
 80003b8:	e7e9      	b.n	800038e <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <HAL_NVIC_SetPriority+0x68>)
 80003bc:	f000 000f 	and.w	r0, r0, #15
 80003c0:	0109      	lsls	r1, r1, #4
 80003c2:	4403      	add	r3, r0
 80003c4:	b2c9      	uxtb	r1, r1
 80003c6:	7619      	strb	r1, [r3, #24]
 80003c8:	bc70      	pop	{r4, r5, r6}
 80003ca:	4770      	bx	lr
 80003cc:	e000ed00 	.word	0xe000ed00
 80003d0:	e000ecfc 	.word	0xe000ecfc

080003d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003d4:	f000 011f 	and.w	r1, r0, #31
 80003d8:	2301      	movs	r3, #1
 80003da:	0940      	lsrs	r0, r0, #5
 80003dc:	4a02      	ldr	r2, [pc, #8]	; (80003e8 <HAL_NVIC_EnableIRQ+0x14>)
 80003de:	408b      	lsls	r3, r1
 80003e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	e000e100 	.word	0xe000e100

080003ec <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003ec:	0943      	lsrs	r3, r0, #5
 80003ee:	3320      	adds	r3, #32
 80003f0:	f000 001f 	and.w	r0, r0, #31
 80003f4:	2201      	movs	r2, #1
 80003f6:	4903      	ldr	r1, [pc, #12]	; (8000404 <HAL_NVIC_DisableIRQ+0x18>)
 80003f8:	fa02 f000 	lsl.w	r0, r2, r0
 80003fc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000e100 	.word	0xe000e100

08000408 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8000408:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800040c:	4905      	ldr	r1, [pc, #20]	; (8000424 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000410:	68ca      	ldr	r2, [r1, #12]
 8000412:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000416:	4313      	orrs	r3, r2
 8000418:	60cb      	str	r3, [r1, #12]
 800041a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800041e:	bf00      	nop
 8000420:	e7fd      	b.n	800041e <HAL_NVIC_SystemReset+0x16>
 8000422:	bf00      	nop
 8000424:	e000ed00 	.word	0xe000ed00
 8000428:	05fa0004 	.word	0x05fa0004

0800042c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800042c:	3801      	subs	r0, #1
 800042e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000432:	d20e      	bcs.n	8000452 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000438:	4c08      	ldr	r4, [pc, #32]	; (800045c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800043a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	20f0      	movs	r0, #240	; 0xf0
 800043e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000442:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000444:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000446:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800044a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800044c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000450:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000452:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000e010 	.word	0xe000e010
 800045c:	e000ed00 	.word	0xe000ed00

08000460 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000460:	4913      	ldr	r1, [pc, #76]	; (80004b0 <HAL_MPU_ConfigRegion+0x50>)
 8000462:	7843      	ldrb	r3, [r0, #1]
{
 8000464:	b4f0      	push	{r4, r5, r6, r7}
  MPU->RNR = MPU_Init->Number;
 8000466:	608b      	str	r3, [r1, #8]

  if ((MPU_Init->Enable) != RESET)
 8000468:	7804      	ldrb	r4, [r0, #0]
 800046a:	b91c      	cbnz	r4, 8000474 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00U;
 800046c:	60cc      	str	r4, [r1, #12]
    MPU->RASR = 0x00U;
 800046e:	610c      	str	r4, [r1, #16]
  }
}
 8000470:	bcf0      	pop	{r4, r5, r6, r7}
 8000472:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8000474:	6843      	ldr	r3, [r0, #4]
 8000476:	60cb      	str	r3, [r1, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000478:	7ac2      	ldrb	r2, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800047a:	7b03      	ldrb	r3, [r0, #12]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800047c:	7a87      	ldrb	r7, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800047e:	7b45      	ldrb	r5, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000480:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000482:	0612      	lsls	r2, r2, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000484:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000488:	4323      	orrs	r3, r4
 800048a:	ea43 43c7 	orr.w	r3, r3, r7, lsl #19
 800048e:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000492:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000494:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000496:	7a02      	ldrb	r2, [r0, #8]
 8000498:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800049c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80004a0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80004a4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80004a8:	610b      	str	r3, [r1, #16]
}
 80004aa:	bcf0      	pop	{r4, r5, r6, r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed90 	.word	0xe000ed90

080004b4 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004b4:	4b02      	ldr	r3, [pc, #8]	; (80004c0 <HAL_NVIC_GetPriorityGrouping+0xc>)
 80004b6:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 80004b8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <HAL_NVIC_GetPriority>:
  if ((int32_t)(IRQn) < 0)
 80004c4:	2800      	cmp	r0, #0
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80004c6:	b470      	push	{r4, r5, r6}
 80004c8:	db22      	blt.n	8000510 <HAL_NVIC_GetPriority+0x4c>
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80004ca:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80004ce:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80004d2:	f890 4300 	ldrb.w	r4, [r0, #768]	; 0x300
 80004d6:	0924      	lsrs	r4, r4, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004d8:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004dc:	f1c1 0607 	rsb	r6, r1, #7
 80004e0:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004e2:	f101 0004 	add.w	r0, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004e6:	bf28      	it	cs
 80004e8:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ea:	2806      	cmp	r0, #6
 80004ec:	d90d      	bls.n	800050a <HAL_NVIC_GetPriority+0x46>
 80004ee:	3903      	subs	r1, #3
 80004f0:	2501      	movs	r5, #1
 80004f2:	408d      	lsls	r5, r1
 80004f4:	3d01      	subs	r5, #1
 80004f6:	4025      	ands	r5, r4
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80004f8:	2001      	movs	r0, #1
 80004fa:	40b0      	lsls	r0, r6
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	1e41      	subs	r1, r0, #1
 8000500:	4021      	ands	r1, r4
 8000502:	6011      	str	r1, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000504:	601d      	str	r5, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 8000506:	bc70      	pop	{r4, r5, r6}
 8000508:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800050a:	2500      	movs	r5, #0
 800050c:	4629      	mov	r1, r5
 800050e:	e7f3      	b.n	80004f8 <HAL_NVIC_GetPriority+0x34>
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000510:	4c03      	ldr	r4, [pc, #12]	; (8000520 <HAL_NVIC_GetPriority+0x5c>)
 8000512:	f000 000f 	and.w	r0, r0, #15
 8000516:	4404      	add	r4, r0
 8000518:	7e24      	ldrb	r4, [r4, #24]
 800051a:	0924      	lsrs	r4, r4, #4
 800051c:	e7dc      	b.n	80004d8 <HAL_NVIC_GetPriority+0x14>
 800051e:	bf00      	nop
 8000520:	e000ecfc 	.word	0xe000ecfc

08000524 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000524:	0943      	lsrs	r3, r0, #5
 8000526:	3340      	adds	r3, #64	; 0x40
 8000528:	f000 001f 	and.w	r0, r0, #31
 800052c:	2201      	movs	r2, #1
 800052e:	4903      	ldr	r1, [pc, #12]	; (800053c <HAL_NVIC_SetPendingIRQ+0x18>)
 8000530:	fa02 f000 	lsl.w	r0, r2, r0
 8000534:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000e100 	.word	0xe000e100

08000540 <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000540:	0943      	lsrs	r3, r0, #5
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <HAL_NVIC_GetPendingIRQ+0x18>)
 8000544:	3340      	adds	r3, #64	; 0x40
 8000546:	f000 001f 	and.w	r0, r0, #31
 800054a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054e:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8000552:	f000 0001 	and.w	r0, r0, #1
 8000556:	4770      	bx	lr
 8000558:	e000e100 	.word	0xe000e100

0800055c <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800055c:	0943      	lsrs	r3, r0, #5
 800055e:	3360      	adds	r3, #96	; 0x60
 8000560:	f000 001f 	and.w	r0, r0, #31
 8000564:	2201      	movs	r2, #1
 8000566:	4903      	ldr	r1, [pc, #12]	; (8000574 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8000568:	fa02 f000 	lsl.w	r0, r2, r0
 800056c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000e100 	.word	0xe000e100

08000578 <HAL_NVIC_GetActive>:
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000578:	0943      	lsrs	r3, r0, #5
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <HAL_NVIC_GetActive+0x18>)
 800057c:	3380      	adds	r3, #128	; 0x80
 800057e:	f000 001f 	and.w	r0, r0, #31
 8000582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000586:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 800058a:	f000 0001 	and.w	r0, r0, #1
 800058e:	4770      	bx	lr
 8000590:	e000e100 	.word	0xe000e100

08000594 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000596:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000598:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800059a:	bf0c      	ite	eq
 800059c:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80005a0:	f023 0304 	bicne.w	r3, r3, #4
 80005a4:	6013      	str	r3, [r2, #0]
 80005a6:	4770      	bx	lr
 80005a8:	e000e010 	.word	0xe000e010

080005ac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_SYSTICK_IRQHandler>:
{
 80005b0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80005b2:	f7ff fffb 	bl	80005ac <HAL_SYSTICK_Callback>
 80005b6:	bd08      	pop	{r3, pc}

080005b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005bc:	f8d1 c000 	ldr.w	ip, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c0:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80007ec <HAL_GPIO_Init+0x234>
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005c4:	f8df e228 	ldr.w	lr, [pc, #552]	; 80007f0 <HAL_GPIO_Init+0x238>
{
 80005c8:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005ca:	2500      	movs	r5, #0
 80005cc:	e003      	b.n	80005d6 <HAL_GPIO_Init+0x1e>
 80005ce:	3501      	adds	r5, #1
 80005d0:	2d10      	cmp	r5, #16
 80005d2:	f000 80a0 	beq.w	8000716 <HAL_GPIO_Init+0x15e>
    ioposition = ((uint32_t)0x01U) << position;
 80005d6:	2301      	movs	r3, #1
 80005d8:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005da:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d1f5      	bne.n	80005ce <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005e2:	684e      	ldr	r6, [r1, #4]
 80005e4:	f026 0a10 	bic.w	sl, r6, #16
 80005e8:	f1ba 0f02 	cmp.w	sl, #2
 80005ec:	f000 8096 	beq.w	800071c <HAL_GPIO_Init+0x164>
 80005f0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005f4:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80005f6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005fa:	fa04 f409 	lsl.w	r4, r4, r9
 80005fe:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000600:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000604:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000608:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800060c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000610:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000614:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000618:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800061a:	f240 80a5 	bls.w	8000768 <HAL_GPIO_Init+0x1b0>
      temp = GPIOx->PUPDR;
 800061e:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000620:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000622:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000624:	fa03 f309 	lsl.w	r3, r3, r9
 8000628:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 800062a:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800062c:	00f3      	lsls	r3, r6, #3
 800062e:	d5ce      	bpl.n	80005ce <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000630:	f04f 0900 	mov.w	r9, #0
 8000634:	f8cd 9004 	str.w	r9, [sp, #4]
 8000638:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000640:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8000644:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8000648:	f025 0303 	bic.w	r3, r5, #3
 800064c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000650:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000654:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000658:	9401      	str	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800065a:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000660:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000664:	00a4      	lsls	r4, r4, #2
 8000666:	270f      	movs	r7, #15
 8000668:	40a7      	lsls	r7, r4
 800066a:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800066e:	4f59      	ldr	r7, [pc, #356]	; (80007d4 <HAL_GPIO_Init+0x21c>)
 8000670:	42b8      	cmp	r0, r7
 8000672:	d027      	beq.n	80006c4 <HAL_GPIO_Init+0x10c>
 8000674:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000678:	42b8      	cmp	r0, r7
 800067a:	f000 8088 	beq.w	800078e <HAL_GPIO_Init+0x1d6>
 800067e:	4f56      	ldr	r7, [pc, #344]	; (80007d8 <HAL_GPIO_Init+0x220>)
 8000680:	42b8      	cmp	r0, r7
 8000682:	f000 8089 	beq.w	8000798 <HAL_GPIO_Init+0x1e0>
 8000686:	4f55      	ldr	r7, [pc, #340]	; (80007dc <HAL_GPIO_Init+0x224>)
 8000688:	42b8      	cmp	r0, r7
 800068a:	f000 808a 	beq.w	80007a2 <HAL_GPIO_Init+0x1ea>
 800068e:	4f54      	ldr	r7, [pc, #336]	; (80007e0 <HAL_GPIO_Init+0x228>)
 8000690:	42b8      	cmp	r0, r7
 8000692:	f000 808b 	beq.w	80007ac <HAL_GPIO_Init+0x1f4>
 8000696:	4f53      	ldr	r7, [pc, #332]	; (80007e4 <HAL_GPIO_Init+0x22c>)
 8000698:	42b8      	cmp	r0, r7
 800069a:	f000 808c 	beq.w	80007b6 <HAL_GPIO_Init+0x1fe>
 800069e:	4f52      	ldr	r7, [pc, #328]	; (80007e8 <HAL_GPIO_Init+0x230>)
 80006a0:	42b8      	cmp	r0, r7
 80006a2:	f000 808d 	beq.w	80007c0 <HAL_GPIO_Init+0x208>
 80006a6:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80007f4 <HAL_GPIO_Init+0x23c>
 80006aa:	4548      	cmp	r0, r9
 80006ac:	f000 808d 	beq.w	80007ca <HAL_GPIO_Init+0x212>
 80006b0:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80007f8 <HAL_GPIO_Init+0x240>
 80006b4:	4548      	cmp	r0, r9
 80006b6:	bf0c      	ite	eq
 80006b8:	f04f 0908 	moveq.w	r9, #8
 80006bc:	f04f 0909 	movne.w	r9, #9
 80006c0:	fa09 f904 	lsl.w	r9, r9, r4
 80006c4:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006c8:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 80006ca:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 80006ce:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d0:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 80006d2:	bf54      	ite	pl
 80006d4:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80006d6:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 80006d8:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80006dc:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e0:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80006e2:	bf54      	ite	pl
 80006e4:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80006e6:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 80006e8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ec:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006f0:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 80006f2:	bf54      	ite	pl
 80006f4:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80006f6:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 80006f8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80006fc:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000700:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000702:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8000706:	bf54      	ite	pl
 8000708:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800070a:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800070c:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 800070e:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000712:	f47f af60 	bne.w	80005d6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8000716:	b003      	add	sp, #12
 8000718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 800071c:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8000720:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000724:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8000728:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800072c:	00bf      	lsls	r7, r7, #2
 800072e:	f04f 0b0f 	mov.w	fp, #15
 8000732:	fa0b fb07 	lsl.w	fp, fp, r7
 8000736:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800073a:	690c      	ldr	r4, [r1, #16]
 800073c:	40bc      	lsls	r4, r7
 800073e:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000742:	f8c9 4020 	str.w	r4, [r9, #32]
 8000746:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074a:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 800074c:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000750:	fa04 f409 	lsl.w	r4, r4, r9
 8000754:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000756:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800075a:	ea0a 0a04 	and.w	sl, sl, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800075e:	fa07 f709 	lsl.w	r7, r7, r9
 8000762:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 8000766:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8000768:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800076a:	ea07 0a04 	and.w	sl, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800076e:	68cf      	ldr	r7, [r1, #12]
 8000770:	fa07 f709 	lsl.w	r7, r7, r9
 8000774:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000778:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800077a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800077e:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000782:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000786:	40af      	lsls	r7, r5
 8000788:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 800078a:	6047      	str	r7, [r0, #4]
 800078c:	e747      	b.n	800061e <HAL_GPIO_Init+0x66>
 800078e:	f04f 0901 	mov.w	r9, #1
 8000792:	fa09 f904 	lsl.w	r9, r9, r4
 8000796:	e795      	b.n	80006c4 <HAL_GPIO_Init+0x10c>
 8000798:	f04f 0902 	mov.w	r9, #2
 800079c:	fa09 f904 	lsl.w	r9, r9, r4
 80007a0:	e790      	b.n	80006c4 <HAL_GPIO_Init+0x10c>
 80007a2:	f04f 0903 	mov.w	r9, #3
 80007a6:	fa09 f904 	lsl.w	r9, r9, r4
 80007aa:	e78b      	b.n	80006c4 <HAL_GPIO_Init+0x10c>
 80007ac:	f04f 0904 	mov.w	r9, #4
 80007b0:	fa09 f904 	lsl.w	r9, r9, r4
 80007b4:	e786      	b.n	80006c4 <HAL_GPIO_Init+0x10c>
 80007b6:	f04f 0905 	mov.w	r9, #5
 80007ba:	fa09 f904 	lsl.w	r9, r9, r4
 80007be:	e781      	b.n	80006c4 <HAL_GPIO_Init+0x10c>
 80007c0:	f04f 0906 	mov.w	r9, #6
 80007c4:	fa09 f904 	lsl.w	r9, r9, r4
 80007c8:	e77c      	b.n	80006c4 <HAL_GPIO_Init+0x10c>
 80007ca:	f04f 0907 	mov.w	r9, #7
 80007ce:	fa09 f904 	lsl.w	r9, r9, r4
 80007d2:	e777      	b.n	80006c4 <HAL_GPIO_Init+0x10c>
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40021400 	.word	0x40021400
 80007e8:	40021800 	.word	0x40021800
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40013c00 	.word	0x40013c00
 80007f4:	40021c00 	.word	0x40021c00
 80007f8:	40022000 	.word	0x40022000

080007fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80007fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000800:	2300      	movs	r3, #0
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000802:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8000954 <HAL_GPIO_DeInit+0x158>
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000806:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8000958 <HAL_GPIO_DeInit+0x15c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800080a:	f8df a150 	ldr.w	sl, [pc, #336]	; 800095c <HAL_GPIO_DeInit+0x160>
 800080e:	e002      	b.n	8000816 <HAL_GPIO_DeInit+0x1a>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000810:	3301      	adds	r3, #1
 8000812:	2b10      	cmp	r3, #16
 8000814:	d070      	beq.n	80008f8 <HAL_GPIO_DeInit+0xfc>
    ioposition = ((uint32_t)0x01U) << position;
 8000816:	2601      	movs	r6, #1
 8000818:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 800081c:	ea32 0401 	bics.w	r4, r2, r1
 8000820:	d1f6      	bne.n	8000810 <HAL_GPIO_DeInit+0x14>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000822:	f04f 0c03 	mov.w	ip, #3
 8000826:	fa03 f406 	lsl.w	r4, r3, r6
 800082a:	6805      	ldr	r5, [r0, #0]
 800082c:	fa0c f404 	lsl.w	r4, ip, r4
 8000830:	43e4      	mvns	r4, r4
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000832:	fa23 f70c 	lsr.w	r7, r3, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000836:	4025      	ands	r5, r4
 8000838:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800083c:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800083e:	f003 0507 	and.w	r5, r3, #7
 8000842:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8000846:	f04f 0e0f 	mov.w	lr, #15
 800084a:	00ad      	lsls	r5, r5, #2
 800084c:	fa0e f505 	lsl.w	r5, lr, r5
 8000850:	ea2b 0505 	bic.w	r5, fp, r5
 8000854:	623d      	str	r5, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000856:	6885      	ldr	r5, [r0, #8]
 8000858:	4025      	ands	r5, r4
 800085a:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800085c:	6845      	ldr	r5, [r0, #4]
 800085e:	43d2      	mvns	r2, r2
 8000860:	4015      	ands	r5, r2
 8000862:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000864:	68c7      	ldr	r7, [r0, #12]
 8000866:	f023 0503 	bic.w	r5, r3, #3
 800086a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800086e:	403c      	ands	r4, r7
 8000870:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
 8000874:	60c4      	str	r4, [r0, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000876:	ea03 040c 	and.w	r4, r3, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 800087a:	68af      	ldr	r7, [r5, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800087c:	00a4      	lsls	r4, r4, #2
 800087e:	fa0e fe04 	lsl.w	lr, lr, r4
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000882:	4548      	cmp	r0, r9
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000884:	ea07 070e 	and.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000888:	d03c      	beq.n	8000904 <HAL_GPIO_DeInit+0x108>
 800088a:	4550      	cmp	r0, sl
 800088c:	d037      	beq.n	80008fe <HAL_GPIO_DeInit+0x102>
 800088e:	4e2a      	ldr	r6, [pc, #168]	; (8000938 <HAL_GPIO_DeInit+0x13c>)
 8000890:	42b0      	cmp	r0, r6
 8000892:	d039      	beq.n	8000908 <HAL_GPIO_DeInit+0x10c>
 8000894:	4e29      	ldr	r6, [pc, #164]	; (800093c <HAL_GPIO_DeInit+0x140>)
 8000896:	42b0      	cmp	r0, r6
 8000898:	d03a      	beq.n	8000910 <HAL_GPIO_DeInit+0x114>
 800089a:	4e29      	ldr	r6, [pc, #164]	; (8000940 <HAL_GPIO_DeInit+0x144>)
 800089c:	42b0      	cmp	r0, r6
 800089e:	d03a      	beq.n	8000916 <HAL_GPIO_DeInit+0x11a>
 80008a0:	4e28      	ldr	r6, [pc, #160]	; (8000944 <HAL_GPIO_DeInit+0x148>)
 80008a2:	42b0      	cmp	r0, r6
 80008a4:	d03b      	beq.n	800091e <HAL_GPIO_DeInit+0x122>
 80008a6:	4e28      	ldr	r6, [pc, #160]	; (8000948 <HAL_GPIO_DeInit+0x14c>)
 80008a8:	42b0      	cmp	r0, r6
 80008aa:	d03c      	beq.n	8000926 <HAL_GPIO_DeInit+0x12a>
 80008ac:	4e27      	ldr	r6, [pc, #156]	; (800094c <HAL_GPIO_DeInit+0x150>)
 80008ae:	42b0      	cmp	r0, r6
 80008b0:	d03d      	beq.n	800092e <HAL_GPIO_DeInit+0x132>
 80008b2:	4e27      	ldr	r6, [pc, #156]	; (8000950 <HAL_GPIO_DeInit+0x154>)
 80008b4:	42b0      	cmp	r0, r6
 80008b6:	d021      	beq.n	80008fc <HAL_GPIO_DeInit+0x100>
 80008b8:	2609      	movs	r6, #9
 80008ba:	fa06 f404 	lsl.w	r4, r6, r4
 80008be:	42a7      	cmp	r7, r4
 80008c0:	d1a6      	bne.n	8000810 <HAL_GPIO_DeInit+0x14>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80008c2:	68ac      	ldr	r4, [r5, #8]
 80008c4:	ea24 040e 	bic.w	r4, r4, lr
 80008c8:	60ac      	str	r4, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80008ca:	f8d8 4000 	ldr.w	r4, [r8]
 80008ce:	4014      	ands	r4, r2
 80008d0:	f8c8 4000 	str.w	r4, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80008d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80008d8:	4014      	ands	r4, r2
 80008da:	f8c8 4004 	str.w	r4, [r8, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80008de:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80008e2:	4014      	ands	r4, r2
 80008e4:	f8c8 4008 	str.w	r4, [r8, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80008e8:	f8d8 400c 	ldr.w	r4, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ec:	3301      	adds	r3, #1
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80008ee:	4022      	ands	r2, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008f0:	2b10      	cmp	r3, #16
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80008f2:	f8c8 200c 	str.w	r2, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008f6:	d18e      	bne.n	8000816 <HAL_GPIO_DeInit+0x1a>
      }
    }
  }
}
 80008f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008fc:	2608      	movs	r6, #8
 80008fe:	fa06 f404 	lsl.w	r4, r6, r4
 8000902:	e7dc      	b.n	80008be <HAL_GPIO_DeInit+0xc2>
 8000904:	2400      	movs	r4, #0
 8000906:	e7da      	b.n	80008be <HAL_GPIO_DeInit+0xc2>
 8000908:	2602      	movs	r6, #2
 800090a:	fa06 f404 	lsl.w	r4, r6, r4
 800090e:	e7d6      	b.n	80008be <HAL_GPIO_DeInit+0xc2>
 8000910:	fa0c f404 	lsl.w	r4, ip, r4
 8000914:	e7d3      	b.n	80008be <HAL_GPIO_DeInit+0xc2>
 8000916:	2604      	movs	r6, #4
 8000918:	fa06 f404 	lsl.w	r4, r6, r4
 800091c:	e7cf      	b.n	80008be <HAL_GPIO_DeInit+0xc2>
 800091e:	2605      	movs	r6, #5
 8000920:	fa06 f404 	lsl.w	r4, r6, r4
 8000924:	e7cb      	b.n	80008be <HAL_GPIO_DeInit+0xc2>
 8000926:	2606      	movs	r6, #6
 8000928:	fa06 f404 	lsl.w	r4, r6, r4
 800092c:	e7c7      	b.n	80008be <HAL_GPIO_DeInit+0xc2>
 800092e:	2607      	movs	r6, #7
 8000930:	fa06 f404 	lsl.w	r4, r6, r4
 8000934:	e7c3      	b.n	80008be <HAL_GPIO_DeInit+0xc2>
 8000936:	bf00      	nop
 8000938:	40020800 	.word	0x40020800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40021000 	.word	0x40021000
 8000944:	40021400 	.word	0x40021400
 8000948:	40021800 	.word	0x40021800
 800094c:	40021c00 	.word	0x40021c00
 8000950:	40022000 	.word	0x40022000
 8000954:	40020000 	.word	0x40020000
 8000958:	40013c00 	.word	0x40013c00
 800095c:	40020400 	.word	0x40020400

08000960 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000960:	6903      	ldr	r3, [r0, #16]
 8000962:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000964:	bf14      	ite	ne
 8000966:	2001      	movne	r0, #1
 8000968:	2000      	moveq	r0, #0
 800096a:	4770      	bx	lr

0800096c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800096c:	b902      	cbnz	r2, 8000970 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800096e:	0409      	lsls	r1, r1, #16
 8000970:	6181      	str	r1, [r0, #24]
 8000972:	4770      	bx	lr

08000974 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000974:	6943      	ldr	r3, [r0, #20]
 8000976:	4059      	eors	r1, r3
 8000978:	6141      	str	r1, [r0, #20]
 800097a:	4770      	bx	lr

0800097c <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800097c:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800097e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000982:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8000984:	9b01      	ldr	r3, [sp, #4]
 8000986:	430b      	orrs	r3, r1
 8000988:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800098a:	9b01      	ldr	r3, [sp, #4]
 800098c:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800098e:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000990:	9b01      	ldr	r3, [sp, #4]
 8000992:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000994:	69c3      	ldr	r3, [r0, #28]
 8000996:	9301      	str	r3, [sp, #4]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8000998:	69c0      	ldr	r0, [r0, #28]
 800099a:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 800099e:	f3c0 4000 	ubfx	r0, r0, #16, #1
 80009a2:	b002      	add	sp, #8
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80009ae:	6951      	ldr	r1, [r2, #20]
 80009b0:	4201      	tst	r1, r0
 80009b2:	d100      	bne.n	80009b6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80009b4:	4770      	bx	lr
{
 80009b6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009b8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009ba:	f7ff fff5 	bl	80009a8 <HAL_GPIO_EXTI_Callback>
 80009be:	bd08      	pop	{r3, pc}
 80009c0:	40013c00 	.word	0x40013c00
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d068      	beq.n	8000a9e <HAL_PCD_Init+0xd6>
{ 
 80009cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80009ce:	2303      	movs	r3, #3
 80009d0:	4605      	mov	r5, r0
{ 
 80009d2:	b08b      	sub	sp, #44	; 0x2c
  hpcd->State = HAL_PCD_STATE_BUSY;
 80009d4:	f880 3381 	strb.w	r3, [r0, #897]	; 0x381

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80009d8:	4604      	mov	r4, r0
  HAL_PCD_MspInit(hpcd);
 80009da:	f006 f963 	bl	8006ca4 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 80009de:	6828      	ldr	r0, [r5, #0]
 80009e0:	f003 fcd4 	bl	800438c <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80009e4:	f854 eb10 	ldr.w	lr, [r4], #16
 80009e8:	4627      	mov	r7, r4
 80009ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80009ec:	466e      	mov	r6, sp
 80009ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80009f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009f4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80009f8:	e886 0003 	stmia.w	r6, {r0, r1}
 80009fc:	1d2e      	adds	r6, r5, #4
 80009fe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000a02:	4670      	mov	r0, lr
 8000a04:	f003 fc82 	bl	800430c <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	6828      	ldr	r0, [r5, #0]
 8000a0c:	f003 fcc6 	bl	800439c <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000a10:	2100      	movs	r1, #0
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a12:	4608      	mov	r0, r1
 8000a14:	462b      	mov	r3, r5
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000a16:	462a      	mov	r2, r5
   hpcd->IN_ep[i].is_in = 1U;
 8000a18:	2701      	movs	r7, #1
   hpcd->IN_ep[i].num = i;
 8000a1a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000a1e:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 8000a20:	3101      	adds	r1, #1
 8000a22:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8000a24:	f882 7039 	strb.w	r7, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a28:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8000a2c:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000a2e:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8000a30:	64d0      	str	r0, [r2, #76]	; 0x4c
 8000a32:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8000a36:	d1f0      	bne.n	8000a1a <HAL_PCD_Init+0x52>
 8000a38:	2200      	movs	r2, #0
 8000a3a:	682f      	ldr	r7, [r5, #0]
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000a3c:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000a3e:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8000a42:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000a46:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000a48:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 8000a4c:	3201      	adds	r2, #1
 8000a4e:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 8000a50:	f883 11dd 	strb.w	r1, [r3, #477]	; 0x1dd
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a54:	f883 11df 	strb.w	r1, [r3, #479]	; 0x1df
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000a58:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a5c:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000a60:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
 8000a64:	f103 031c 	add.w	r3, r3, #28
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000a68:	6041      	str	r1, [r0, #4]
 for (i = 0U; i < 15U; i++)
 8000a6a:	d1e8      	bne.n	8000a3e <HAL_PCD_Init+0x76>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6e:	46ee      	mov	lr, sp
 8000a70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a76:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a7e:	e88e 0003 	stmia.w	lr, {r0, r1}
 8000a82:	4638      	mov	r0, r7
 8000a84:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000a88:	f003 fca2 	bl	80043d0 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f885 3381 	strb.w	r3, [r5, #897]	; 0x381
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000a92:	6828      	ldr	r0, [r5, #0]
 8000a94:	f004 f8aa 	bl	8004bec <USB_DevDisconnect>
 return HAL_OK;
 8000a98:	2000      	movs	r0, #0
}
 8000a9a:	b00b      	add	sp, #44	; 0x2c
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <HAL_PCD_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000aa8:	b1f0      	cbz	r0, 8000ae8 <HAL_PCD_DeInit+0x40>
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000aaa:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000aae:	2203      	movs	r2, #3
  __HAL_LOCK(hpcd); 
 8000ab0:	2b01      	cmp	r3, #1
{
 8000ab2:	b510      	push	{r4, lr}
 8000ab4:	4604      	mov	r4, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ab6:	f880 2381 	strb.w	r2, [r0, #897]	; 0x381
  __HAL_LOCK(hpcd); 
 8000aba:	d00e      	beq.n	8000ada <HAL_PCD_DeInit+0x32>
 8000abc:	2301      	movs	r3, #1
 8000abe:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  __HAL_PCD_DISABLE(hpcd);
 8000ac2:	6800      	ldr	r0, [r0, #0]
 8000ac4:	f003 fc62 	bl	800438c <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8000ac8:	6820      	ldr	r0, [r4, #0]
 8000aca:	f004 f841 	bl	8004b50 <USB_StopDevice>
  USB_DevDisconnect(hpcd->Instance);
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	f004 f88c 	bl	8004bec <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
  HAL_PCD_MspDeInit(hpcd);
 8000ada:	4620      	mov	r0, r4
 8000adc:	f006 f91c 	bl	8006d18 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f884 0381 	strb.w	r0, [r4, #897]	; 0x381
  return HAL_OK;
 8000ae6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ae8:	2001      	movs	r0, #1
 8000aea:	4770      	bx	lr

08000aec <HAL_PCD_Start>:
  __HAL_LOCK(hpcd); 
 8000aec:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d101      	bne.n	8000af8 <HAL_PCD_Start+0xc>
 8000af4:	2002      	movs	r0, #2
 8000af6:	4770      	bx	lr
{ 
 8000af8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8000afa:	2301      	movs	r3, #1
 8000afc:	4604      	mov	r4, r0
 8000afe:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_DevConnect (hpcd->Instance);  
 8000b02:	6800      	ldr	r0, [r0, #0]
 8000b04:	f004 f866 	bl	8004bd4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000b08:	6820      	ldr	r0, [r4, #0]
 8000b0a:	f003 fc37 	bl	800437c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	bf00      	nop

08000b18 <HAL_PCD_Stop>:
  __HAL_LOCK(hpcd); 
 8000b18:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <HAL_PCD_Stop+0xc>
 8000b20:	2002      	movs	r0, #2
 8000b22:	4770      	bx	lr
{ 
 8000b24:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8000b26:	2301      	movs	r3, #1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  __HAL_PCD_DISABLE(hpcd);
 8000b2e:	6800      	ldr	r0, [r0, #0]
 8000b30:	f003 fc2c 	bl	800438c <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8000b34:	6820      	ldr	r0, [r4, #0]
 8000b36:	f004 f80b 	bl	8004b50 <USB_StopDevice>
  USB_DevDisconnect(hpcd->Instance);
 8000b3a:	6820      	ldr	r0, [r4, #0]
 8000b3c:	f004 f856 	bl	8004bec <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8000b40:	2000      	movs	r0, #0
 8000b42:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
 8000b46:	bd10      	pop	{r4, pc}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number  
  * @retval None
  */
 __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
  * @brief  Disconnection event callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <HAL_PCD_IRQHandler>:
{
 8000b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b78:	6807      	ldr	r7, [r0, #0]
{
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	4604      	mov	r4, r0
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000b7e:	4638      	mov	r0, r7
 8000b80:	f004 f874 	bl	8004c6c <USB_GetMode>
 8000b84:	b110      	cbz	r0, 8000b8c <HAL_PCD_IRQHandler+0x18>
}
 8000b86:	b009      	add	sp, #36	; 0x24
 8000b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8c:	4606      	mov	r6, r0
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000b8e:	6820      	ldr	r0, [r4, #0]
 8000b90:	f004 f838 	bl	8004c04 <USB_ReadInterrupts>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d0f6      	beq.n	8000b86 <HAL_PCD_IRQHandler+0x12>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000b98:	6820      	ldr	r0, [r4, #0]
 8000b9a:	f004 f833 	bl	8004c04 <USB_ReadInterrupts>
 8000b9e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000ba2:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000ba4:	d003      	beq.n	8000bae <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000ba6:	6943      	ldr	r3, [r0, #20]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	6143      	str	r3, [r0, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000bae:	f004 f829 	bl	8004c04 <USB_ReadInterrupts>
 8000bb2:	0303      	lsls	r3, r0, #12
 8000bb4:	f100 81a5 	bmi.w	8000f02 <HAL_PCD_IRQHandler+0x38e>
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000bb8:	f04f 0a00 	mov.w	sl, #0
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	f004 f821 	bl	8004c04 <USB_ReadInterrupts>
 8000bc2:	0345      	lsls	r5, r0, #13
 8000bc4:	f100 80cf 	bmi.w	8000d66 <HAL_PCD_IRQHandler+0x1f2>
 8000bc8:	6823      	ldr	r3, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 f81a 	bl	8004c04 <USB_ReadInterrupts>
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	f2c0 8215 	blt.w	8001000 <HAL_PCD_IRQHandler+0x48c>
 8000bd6:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000bd8:	f004 f814 	bl	8004c04 <USB_ReadInterrupts>
 8000bdc:	0501      	lsls	r1, r0, #20
 8000bde:	d448      	bmi.n	8000c72 <HAL_PCD_IRQHandler+0xfe>
 8000be0:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000be2:	f004 f80f 	bl	8004c04 <USB_ReadInterrupts>
 8000be6:	04c3      	lsls	r3, r0, #19
 8000be8:	d47f      	bmi.n	8000cea <HAL_PCD_IRQHandler+0x176>
 8000bea:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000bec:	f004 f80a 	bl	8004c04 <USB_ReadInterrupts>
 8000bf0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      USB_ActivateSetup(hpcd->Instance);
 8000bf4:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000bf6:	d15a      	bne.n	8000cae <HAL_PCD_IRQHandler+0x13a>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000bf8:	f004 f804 	bl	8004c04 <USB_ReadInterrupts>
 8000bfc:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c00:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000c02:	d011      	beq.n	8000c28 <HAL_PCD_IRQHandler+0xb4>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c04:	6983      	ldr	r3, [r0, #24]
 8000c06:	f023 0310 	bic.w	r3, r3, #16
 8000c0a:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8000c0c:	6a3d      	ldr	r5, [r7, #32]
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000c0e:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8000c12:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000c14:	f005 060f 	and.w	r6, r5, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000c18:	f000 81d5 	beq.w	8000fc6 <HAL_PCD_IRQHandler+0x452>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000c1c:	2b06      	cmp	r3, #6
 8000c1e:	d033      	beq.n	8000c88 <HAL_PCD_IRQHandler+0x114>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c20:	6983      	ldr	r3, [r0, #24]
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6183      	str	r3, [r0, #24]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000c28:	f003 ffec 	bl	8004c04 <USB_ReadInterrupts>
 8000c2c:	0707      	lsls	r7, r0, #28
 8000c2e:	f100 815f 	bmi.w	8000ef0 <HAL_PCD_IRQHandler+0x37c>
 8000c32:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000c34:	f003 ffe6 	bl	8004c04 <USB_ReadInterrupts>
 8000c38:	02c6      	lsls	r6, r0, #11
 8000c3a:	f100 814e 	bmi.w	8000eda <HAL_PCD_IRQHandler+0x366>
 8000c3e:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000c40:	f003 ffe0 	bl	8004c04 <USB_ReadInterrupts>
 8000c44:	0285      	lsls	r5, r0, #10
 8000c46:	f100 813d 	bmi.w	8000ec4 <HAL_PCD_IRQHandler+0x350>
 8000c4a:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000c4c:	f003 ffda 	bl	8004c04 <USB_ReadInterrupts>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	f100 812e 	bmi.w	8000eb2 <HAL_PCD_IRQHandler+0x33e>
 8000c56:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000c58:	f003 ffd4 	bl	8004c04 <USB_ReadInterrupts>
 8000c5c:	0741      	lsls	r1, r0, #29
 8000c5e:	d592      	bpl.n	8000b86 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8000c60:	6823      	ldr	r3, [r4, #0]
 8000c62:	685d      	ldr	r5, [r3, #4]
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000c64:	076a      	lsls	r2, r5, #29
 8000c66:	f100 8193 	bmi.w	8000f90 <HAL_PCD_IRQHandler+0x41c>
      hpcd->Instance->GOTGINT |= temp;
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	4315      	orrs	r5, r2
 8000c6e:	605d      	str	r5, [r3, #4]
 8000c70:	e789      	b.n	8000b86 <HAL_PCD_IRQHandler+0x12>
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000c72:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000c76:	07da      	lsls	r2, r3, #31
 8000c78:	f100 8198 	bmi.w	8000fac <HAL_PCD_IRQHandler+0x438>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000c7c:	6820      	ldr	r0, [r4, #0]
 8000c7e:	6943      	ldr	r3, [r0, #20]
 8000c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c84:	6143      	str	r3, [r0, #20]
 8000c86:	e7ac      	b.n	8000be2 <HAL_PCD_IRQHandler+0x6e>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000c88:	2208      	movs	r2, #8
 8000c8a:	f504 7161 	add.w	r1, r4, #900	; 0x384
 8000c8e:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000c90:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000c94:	f003 ff18 	bl	8004ac8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000c98:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 8000c9c:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8000ca0:	f8d2 11f4 	ldr.w	r1, [r2, #500]	; 0x1f4
 8000ca4:	6820      	ldr	r0, [r4, #0]
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f8c2 31f4 	str.w	r3, [r2, #500]	; 0x1f4
 8000cac:	e7b8      	b.n	8000c20 <HAL_PCD_IRQHandler+0xac>
      USB_ActivateSetup(hpcd->Instance);
 8000cae:	f003 ffe1 	bl	8004c74 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000cb2:	6820      	ldr	r0, [r4, #0]
 8000cb4:	68c3      	ldr	r3, [r0, #12]
 8000cb6:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000cba:	60c3      	str	r3, [r0, #12]
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000cbc:	f003 fc6c 	bl	8004598 <USB_GetDevSpeed>
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000cc0:	6822      	ldr	r2, [r4, #0]
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	f040 8169 	bne.w	8000f9a <HAL_PCD_IRQHandler+0x426>
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000cc8:	68d3      	ldr	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000cca:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000cd0:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000cd4:	6161      	str	r1, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000cd6:	60d3      	str	r3, [r2, #12]
      HAL_PCD_ResetCallback(hpcd);
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f006 f852 	bl	8006d82 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000cde:	6820      	ldr	r0, [r4, #0]
 8000ce0:	6943      	ldr	r3, [r0, #20]
 8000ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce6:	6143      	str	r3, [r0, #20]
 8000ce8:	e786      	b.n	8000bf8 <HAL_PCD_IRQHandler+0x84>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000cea:	f507 6500 	add.w	r5, r7, #2048	; 0x800
 8000cee:	686b      	ldr	r3, [r5, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 8000cf0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000cf2:	f023 0301 	bic.w	r3, r3, #1
      USB_FlushTxFifo(hpcd->Instance , 0U);
 8000cf6:	2100      	movs	r1, #0
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000cf8:	606b      	str	r3, [r5, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 8000cfa:	f003 fc23 	bl	8004544 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cfe:	6860      	ldr	r0, [r4, #4]
 8000d00:	b150      	cbz	r0, 8000d18 <HAL_PCD_IRQHandler+0x1a4>
 8000d02:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000d06:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d08:	3601      	adds	r6, #1
 8000d0a:	4286      	cmp	r6, r0
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000d0c:	609a      	str	r2, [r3, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000d0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8000d12:	f103 0320 	add.w	r3, r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d16:	d1f7      	bne.n	8000d08 <HAL_PCD_IRQHandler+0x194>
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d1c:	61ab      	str	r3, [r5, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000d1e:	69eb      	ldr	r3, [r5, #28]
      if(hpcd->Init.use_dedicated_ep1)
 8000d20:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000d22:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000d26:	61eb      	str	r3, [r5, #28]
      if(hpcd->Init.use_dedicated_ep1)
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f000 8143 	beq.w	8000fb4 <HAL_PCD_IRQHandler+0x440>
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000d2e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8000d32:	f043 030b 	orr.w	r3, r3, #11
 8000d36:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000d3a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000d3c:	f043 030b 	orr.w	r3, r3, #11
 8000d40:	646b      	str	r3, [r5, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000d42:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000d46:	7c21      	ldrb	r1, [r4, #16]
 8000d48:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000d4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000d4e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000d52:	f504 7261 	add.w	r2, r4, #900	; 0x384
 8000d56:	f003 ffa9 	bl	8004cac <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000d5a:	6820      	ldr	r0, [r4, #0]
 8000d5c:	6943      	ldr	r3, [r0, #20]
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	6143      	str	r3, [r0, #20]
 8000d64:	e742      	b.n	8000bec <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	f003 ff58 	bl	8004c1c <USB_ReadDevAllInEpInterrupt>
      while ( ep_intr )
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	f000 8184 	beq.w	800107c <HAL_PCD_IRQHandler+0x508>
 8000d74:	6823      	ldr	r3, [r4, #0]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d76:	9703      	str	r7, [sp, #12]
 8000d78:	f507 6910 	add.w	r9, r7, #2304	; 0x900
 8000d7c:	4625      	mov	r5, r4
      while ( ep_intr )
 8000d7e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d82:	9604      	str	r6, [sp, #16]
 8000d84:	461f      	mov	r7, r3
 8000d86:	e009      	b.n	8000d9c <HAL_PCD_IRQHandler+0x228>
      while ( ep_intr )
 8000d88:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
        epnum++;
 8000d8c:	f10a 0a01 	add.w	sl, sl, #1
 8000d90:	f105 051c 	add.w	r5, r5, #28
 8000d94:	f109 0920 	add.w	r9, r9, #32
      while ( ep_intr )
 8000d98:	f000 80ef 	beq.w	8000f7a <HAL_PCD_IRQHandler+0x406>
        if (ep_intr & 0x1U) /* In ITR */
 8000d9c:	f01b 0f01 	tst.w	fp, #1
 8000da0:	d0f2      	beq.n	8000d88 <HAL_PCD_IRQHandler+0x214>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000da2:	fa5f f88a 	uxtb.w	r8, sl
 8000da6:	4638      	mov	r0, r7
 8000da8:	4641      	mov	r1, r8
 8000daa:	f003 ff49 	bl	8004c40 <USB_ReadDevInEPInterrupt>
 8000dae:	4606      	mov	r6, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000db0:	07f0      	lsls	r0, r6, #31
 8000db2:	d518      	bpl.n	8000de6 <HAL_PCD_IRQHandler+0x272>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000db4:	9b03      	ldr	r3, [sp, #12]
            if (hpcd->Init.dma_enable == 1U)
 8000db6:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000db8:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	fa02 f20a 	lsl.w	r2, r2, sl
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000dc2:	ea21 0202 	bic.w	r2, r1, r2
 8000dc6:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000dca:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 8000dcc:	4298      	cmp	r0, r3
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000dce:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000dd2:	f000 8132 	beq.w	800103a <HAL_PCD_IRQHandler+0x4c6>
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f005 ffc6 	bl	8006d6a <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000dde:	6921      	ldr	r1, [r4, #16]
 8000de0:	2901      	cmp	r1, #1
 8000de2:	f000 811c 	beq.w	800101e <HAL_PCD_IRQHandler+0x4aa>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000de6:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000de8:	bf44      	itt	mi
 8000dea:	2308      	movmi	r3, #8
 8000dec:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000df0:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000df2:	bf44      	itt	mi
 8000df4:	2310      	movmi	r3, #16
 8000df6:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000dfa:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000dfc:	bf44      	itt	mi
 8000dfe:	2340      	movmi	r3, #64	; 0x40
 8000e00:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000e04:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000e06:	bf44      	itt	mi
 8000e08:	2302      	movmi	r3, #2
 8000e0a:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000e0e:	0630      	lsls	r0, r6, #24
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000e10:	6827      	ldr	r7, [r4, #0]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000e12:	d5b9      	bpl.n	8000d88 <HAL_PCD_IRQHandler+0x214>
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e14:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8000e18:	eb03 134a 	add.w	r3, r3, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 8000e1c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8000e1e:	f8d5 c050 	ldr.w	ip, [r5, #80]	; 0x50
  if (len > ep->maxpacket)
 8000e22:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e24:	9706      	str	r7, [sp, #24]
 8000e26:	4619      	mov	r1, r3
  len = ep->xfer_len - ep->xfer_count;
 8000e28:	eba0 030c 	sub.w	r3, r0, ip
 8000e2c:	4293      	cmp	r3, r2
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e2e:	9105      	str	r1, [sp, #20]
 8000e30:	6989      	ldr	r1, [r1, #24]
 8000e32:	461e      	mov	r6, r3
 8000e34:	bf28      	it	cs
 8000e36:	4616      	movcs	r6, r2
 8000e38:	b289      	uxth	r1, r1
  len32b = (len + 3U) / 4U;
 8000e3a:	f106 0e03 	add.w	lr, r6, #3
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e3e:	ebb1 0f9e 	cmp.w	r1, lr, lsr #2
 8000e42:	d928      	bls.n	8000e96 <HAL_PCD_IRQHandler+0x322>
 8000e44:	4560      	cmp	r0, ip
 8000e46:	d926      	bls.n	8000e96 <HAL_PCD_IRQHandler+0x322>
          ep->xfer_count < ep->xfer_len &&
 8000e48:	b328      	cbz	r0, 8000e96 <HAL_PCD_IRQHandler+0x322>
 8000e4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8000e4e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8000e50:	f8dd a014 	ldr.w	sl, [sp, #20]
 8000e54:	461e      	mov	r6, r3
 8000e56:	e004      	b.n	8000e62 <HAL_PCD_IRQHandler+0x2ee>
 8000e58:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d918      	bls.n	8000e90 <HAL_PCD_IRQHandler+0x31c>
 8000e5e:	1ad6      	subs	r6, r2, r3
 8000e60:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000e62:	7c23      	ldrb	r3, [r4, #16]
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4296      	cmp	r6, r2
 8000e68:	bf28      	it	cs
 8000e6a:	4616      	movcs	r6, r2
 8000e6c:	b2b3      	uxth	r3, r6
 8000e6e:	4642      	mov	r2, r8
 8000e70:	4638      	mov	r0, r7
 8000e72:	f003 fe13 	bl	8004a9c <USB_WritePacket>
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e76:	f8da 2018 	ldr.w	r2, [sl, #24]
    
    ep->xfer_buff  += len;
 8000e7a:	6c69      	ldr	r1, [r5, #68]	; 0x44
    ep->xfer_count += len;
 8000e7c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000e7e:	1cf0      	adds	r0, r6, #3
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e80:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8000e82:	4431      	add	r1, r6
    ep->xfer_count += len;
 8000e84:	4433      	add	r3, r6
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e86:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 8000e8a:	6469      	str	r1, [r5, #68]	; 0x44
    ep->xfer_count += len;
 8000e8c:	652b      	str	r3, [r5, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000e8e:	d8e3      	bhi.n	8000e58 <HAL_PCD_IRQHandler+0x2e4>
 8000e90:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8000e94:	6827      	ldr	r7, [r4, #0]
  }
  
  if(len <= 0U)
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	f47f af76 	bne.w	8000d88 <HAL_PCD_IRQHandler+0x214>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e9c:	9b06      	ldr	r3, [sp, #24]
    fifoemptymsk = 0x1U << epnum;
 8000e9e:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ea0:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000ea4:	fa02 f20a 	lsl.w	r2, r2, sl
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ea8:	ea21 0202 	bic.w	r2, r1, r2
 8000eac:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8000eb0:	e76a      	b.n	8000d88 <HAL_PCD_IRQHandler+0x214>
      HAL_PCD_ConnectCallback(hpcd);
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f005 ff9a 	bl	8006dec <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000eb8:	6820      	ldr	r0, [r4, #0]
 8000eba:	6943      	ldr	r3, [r0, #20]
 8000ebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ec0:	6143      	str	r3, [r0, #20]
 8000ec2:	e6c9      	b.n	8000c58 <HAL_PCD_IRQHandler+0xe4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	fa5f f18a 	uxtb.w	r1, sl
 8000eca:	f005 ff87 	bl	8006ddc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000ece:	6820      	ldr	r0, [r4, #0]
 8000ed0:	6943      	ldr	r3, [r0, #20]
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	6143      	str	r3, [r0, #20]
 8000ed8:	e6b8      	b.n	8000c4c <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000eda:	4620      	mov	r0, r4
 8000edc:	fa5f f18a 	uxtb.w	r1, sl
 8000ee0:	f005 ff80 	bl	8006de4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	6943      	ldr	r3, [r0, #20]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eec:	6143      	str	r3, [r0, #20]
 8000eee:	e6a7      	b.n	8000c40 <HAL_PCD_IRQHandler+0xcc>
      HAL_PCD_SOFCallback(hpcd);
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f005 ff42 	bl	8006d7a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000ef6:	6820      	ldr	r0, [r4, #0]
 8000ef8:	6943      	ldr	r3, [r0, #20]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	6143      	str	r3, [r0, #20]
 8000f00:	e698      	b.n	8000c34 <HAL_PCD_IRQHandler+0xc0>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f02:	6820      	ldr	r0, [r4, #0]
 8000f04:	f003 fe82 	bl	8004c0c <USB_ReadDevAllOutEpInterrupt>
      while ( ep_intr )
 8000f08:	4605      	mov	r5, r0
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	f43f ae54 	beq.w	8000bb8 <HAL_PCD_IRQHandler+0x44>
 8000f10:	f507 6830 	add.w	r8, r7, #2816	; 0xb00
 8000f14:	46a1      	mov	r9, r4
 8000f16:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f1a:	9603      	str	r6, [sp, #12]
 8000f1c:	e007      	b.n	8000f2e <HAL_PCD_IRQHandler+0x3ba>
      while ( ep_intr )
 8000f1e:	086d      	lsrs	r5, r5, #1
        epnum++;
 8000f20:	f10a 0a01 	add.w	sl, sl, #1
 8000f24:	f108 0820 	add.w	r8, r8, #32
 8000f28:	f109 091c 	add.w	r9, r9, #28
      while ( ep_intr )
 8000f2c:	d023      	beq.n	8000f76 <HAL_PCD_IRQHandler+0x402>
        if (ep_intr & 0x1U)
 8000f2e:	07ee      	lsls	r6, r5, #31
 8000f30:	d5f5      	bpl.n	8000f1e <HAL_PCD_IRQHandler+0x3aa>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000f32:	fa5f f68a 	uxtb.w	r6, sl
 8000f36:	4631      	mov	r1, r6
 8000f38:	6820      	ldr	r0, [r4, #0]
 8000f3a:	f003 fe77 	bl	8004c2c <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f3e:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000f42:	4683      	mov	fp, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f44:	d00d      	beq.n	8000f62 <HAL_PCD_IRQHandler+0x3ee>
            if(hpcd->Init.dma_enable == 1U)
 8000f46:	6922      	ldr	r2, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f48:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000f4a:	429a      	cmp	r2, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f4c:	f8c8 3008 	str.w	r3, [r8, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000f50:	f000 8085 	beq.w	800105e <HAL_PCD_IRQHandler+0x4ea>
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000f54:	4631      	mov	r1, r6
 8000f56:	4620      	mov	r0, r4
 8000f58:	f005 fefe 	bl	8006d58 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000f5c:	6921      	ldr	r1, [r4, #16]
 8000f5e:	2901      	cmp	r1, #1
 8000f60:	d070      	beq.n	8001044 <HAL_PCD_IRQHandler+0x4d0>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f62:	f01b 0f08 	tst.w	fp, #8
 8000f66:	d10c      	bne.n	8000f82 <HAL_PCD_IRQHandler+0x40e>
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f68:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f6c:	bf1c      	itt	ne
 8000f6e:	2310      	movne	r3, #16
 8000f70:	f8c8 3008 	strne.w	r3, [r8, #8]
 8000f74:	e7d3      	b.n	8000f1e <HAL_PCD_IRQHandler+0x3aa>
 8000f76:	9e03      	ldr	r6, [sp, #12]
 8000f78:	e620      	b.n	8000bbc <HAL_PCD_IRQHandler+0x48>
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	9e04      	ldr	r6, [sp, #16]
 8000f7e:	9f03      	ldr	r7, [sp, #12]
 8000f80:	e623      	b.n	8000bca <HAL_PCD_IRQHandler+0x56>
            HAL_PCD_SetupStageCallback(hpcd);
 8000f82:	4620      	mov	r0, r4
 8000f84:	f005 fee2 	bl	8006d4c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f88:	2308      	movs	r3, #8
 8000f8a:	f8c8 3008 	str.w	r3, [r8, #8]
 8000f8e:	e7eb      	b.n	8000f68 <HAL_PCD_IRQHandler+0x3f4>
        HAL_PCD_DisconnectCallback(hpcd);
 8000f90:	4620      	mov	r0, r4
 8000f92:	f005 ff2f 	bl	8006df4 <HAL_PCD_DisconnectCallback>
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	e667      	b.n	8000c6a <HAL_PCD_IRQHandler+0xf6>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8000f9a:	68d3      	ldr	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000f9c:	2003      	movs	r0, #3
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8000f9e:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000fa2:	2140      	movs	r1, #64	; 0x40
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000fa4:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000fa6:	6161      	str	r1, [r4, #20]
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8000fa8:	60d3      	str	r3, [r2, #12]
 8000faa:	e695      	b.n	8000cd8 <HAL_PCD_IRQHandler+0x164>
        HAL_PCD_SuspendCallback(hpcd);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f005 fef9 	bl	8006da4 <HAL_PCD_SuspendCallback>
 8000fb2:	e663      	b.n	8000c7c <HAL_PCD_IRQHandler+0x108>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000fb4:	696b      	ldr	r3, [r5, #20]
 8000fb6:	f043 030b 	orr.w	r3, r3, #11
 8000fba:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000fbc:	692b      	ldr	r3, [r5, #16]
 8000fbe:	f043 030b 	orr.w	r3, r3, #11
 8000fc2:	612b      	str	r3, [r5, #16]
 8000fc4:	e6bd      	b.n	8000d42 <HAL_PCD_IRQHandler+0x1ce>
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000fc6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000fca:	421d      	tst	r5, r3
 8000fcc:	f43f ae28 	beq.w	8000c20 <HAL_PCD_IRQHandler+0xac>
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000fd0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8000fd4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000fd8:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8000fdc:	462a      	mov	r2, r5
 8000fde:	4638      	mov	r0, r7
 8000fe0:	f8d6 11e8 	ldr.w	r1, [r6, #488]	; 0x1e8
 8000fe4:	f003 fd70 	bl	8004ac8 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000fe8:	f8d6 21e8 	ldr.w	r2, [r6, #488]	; 0x1e8
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000fec:	f8d6 31f4 	ldr.w	r3, [r6, #500]	; 0x1f4
 8000ff0:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000ff2:	442a      	add	r2, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000ff4:	442b      	add	r3, r5
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000ff6:	f8c6 21e8 	str.w	r2, [r6, #488]	; 0x1e8
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000ffa:	f8c6 31f4 	str.w	r3, [r6, #500]	; 0x1f4
 8000ffe:	e60f      	b.n	8000c20 <HAL_PCD_IRQHandler+0xac>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001000:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8001004:	f022 0201 	bic.w	r2, r2, #1
        HAL_PCD_ResumeCallback(hpcd);
 8001008:	4620      	mov	r0, r4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800100a:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
        HAL_PCD_ResumeCallback(hpcd);
 800100e:	f005 fee1 	bl	8006dd4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001012:	6820      	ldr	r0, [r4, #0]
 8001014:	6943      	ldr	r3, [r0, #20]
 8001016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800101a:	6143      	str	r3, [r0, #20]
 800101c:	e5dc      	b.n	8000bd8 <HAL_PCD_IRQHandler+0x64>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800101e:	f1ba 0f00 	cmp.w	sl, #0
 8001022:	f47f aee0 	bne.w	8000de6 <HAL_PCD_IRQHandler+0x272>
 8001026:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001028:	2b00      	cmp	r3, #0
 800102a:	f47f aedc 	bne.w	8000de6 <HAL_PCD_IRQHandler+0x272>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800102e:	f504 7261 	add.w	r2, r4, #900	; 0x384
 8001032:	6820      	ldr	r0, [r4, #0]
 8001034:	f003 fe3a 	bl	8004cac <USB_EP0_OutStart>
 8001038:	e6d5      	b.n	8000de6 <HAL_PCD_IRQHandler+0x272>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 800103a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800103c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800103e:	4413      	add	r3, r2
 8001040:	646b      	str	r3, [r5, #68]	; 0x44
 8001042:	e6c8      	b.n	8000dd6 <HAL_PCD_IRQHandler+0x262>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001044:	f1ba 0f00 	cmp.w	sl, #0
 8001048:	d18b      	bne.n	8000f62 <HAL_PCD_IRQHandler+0x3ee>
 800104a:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d187      	bne.n	8000f62 <HAL_PCD_IRQHandler+0x3ee>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001052:	f504 7261 	add.w	r2, r4, #900	; 0x384
 8001056:	6820      	ldr	r0, [r4, #0]
 8001058:	f003 fe28 	bl	8004cac <USB_EP0_OutStart>
 800105c:	e781      	b.n	8000f62 <HAL_PCD_IRQHandler+0x3ee>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 800105e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8001062:	f8d9 01e4 	ldr.w	r0, [r9, #484]	; 0x1e4
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001066:	f8d9 11e8 	ldr.w	r1, [r9, #488]	; 0x1e8
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 800106a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800106e:	1a82      	subs	r2, r0, r2
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001070:	4401      	add	r1, r0
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001072:	f8c9 21f4 	str.w	r2, [r9, #500]	; 0x1f4
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001076:	f8c9 11e8 	str.w	r1, [r9, #488]	; 0x1e8
 800107a:	e76b      	b.n	8000f54 <HAL_PCD_IRQHandler+0x3e0>
      epnum = 0U;
 800107c:	4682      	mov	sl, r0
 800107e:	e5a3      	b.n	8000bc8 <HAL_PCD_IRQHandler+0x54>

08001080 <HAL_PCD_DevConnect>:
  __HAL_LOCK(hpcd); 
 8001080:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_PCD_DevConnect+0xc>
 8001088:	2002      	movs	r0, #2
 800108a:	4770      	bx	lr
{
 800108c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 800108e:	2301      	movs	r3, #1
 8001090:	4604      	mov	r4, r0
 8001092:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_DevConnect(hpcd->Instance);
 8001096:	6800      	ldr	r0, [r0, #0]
 8001098:	f003 fd9c 	bl	8004bd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd); 
 800109c:	2000      	movs	r0, #0
 800109e:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 80010a2:	bd10      	pop	{r4, pc}

080010a4 <HAL_PCD_DevDisconnect>:
  __HAL_LOCK(hpcd); 
 80010a4:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_PCD_DevDisconnect+0xc>
 80010ac:	2002      	movs	r0, #2
 80010ae:	4770      	bx	lr
{
 80010b0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 80010b2:	2301      	movs	r3, #1
 80010b4:	4604      	mov	r4, r0
 80010b6:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_DevDisconnect(hpcd->Instance);
 80010ba:	6800      	ldr	r0, [r0, #0]
 80010bc:	f003 fd96 	bl	8004bec <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 80010c0:	2000      	movs	r0, #0
 80010c2:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 80010c6:	bd10      	pop	{r4, pc}

080010c8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 80010c8:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_PCD_SetAddress+0xc>
 80010d0:	2002      	movs	r0, #2
 80010d2:	4770      	bx	lr
{
 80010d4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 80010d6:	2301      	movs	r3, #1
 80010d8:	4604      	mov	r4, r0
 80010da:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_SetDevAddress(hpcd->Instance, address);
 80010de:	6800      	ldr	r0, [r0, #0]
 80010e0:	f003 fd68 	bl	8004bb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80010e4:	2000      	movs	r0, #0
 80010e6:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 80010ea:	bd10      	pop	{r4, pc}

080010ec <HAL_PCD_EP_Open>:
{
 80010ec:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80010ee:	060c      	lsls	r4, r1, #24
 80010f0:	d41b      	bmi.n	800112a <HAL_PCD_EP_Open+0x3e>
  ep->num   = ep_addr & 0x7FU;
 80010f2:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 80010f6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80010fa:	241c      	movs	r4, #28
  ep->is_in = (0x80U & ep_addr) != 0U;
 80010fc:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80010fe:	fb04 0401 	mla	r4, r4, r1, r0
  ep->num   = ep_addr & 0x7FU;
 8001102:	f885 11dc 	strb.w	r1, [r5, #476]	; 0x1dc
  ep->maxpacket = ep_mps;
 8001106:	f8c5 21e4 	str.w	r2, [r5, #484]	; 0x1e4
  ep->type = ep_type;
 800110a:	f885 31df 	strb.w	r3, [r5, #479]	; 0x1df
  ep->is_in = (0x80U & ep_addr) != 0U;
 800110e:	f885 61dd 	strb.w	r6, [r5, #477]	; 0x1dd
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001112:	f504 71ee 	add.w	r1, r4, #476	; 0x1dc
  if (ep_type == EP_TYPE_BULK )
 8001116:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001118:	bf04      	itt	eq
 800111a:	2300      	moveq	r3, #0
 800111c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd); 
 800111e:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 8001122:	2b01      	cmp	r3, #1
 8001124:	d116      	bne.n	8001154 <HAL_PCD_EP_Open+0x68>
 8001126:	2002      	movs	r0, #2
}
 8001128:	bd70      	pop	{r4, r5, r6, pc}
 800112a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->num   = ep_addr & 0x7FU;
 800112e:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 8001132:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001136:	241c      	movs	r4, #28
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001138:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800113a:	fb04 0401 	mla	r4, r4, r1, r0
  ep->num   = ep_addr & 0x7FU;
 800113e:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
    ep->tx_fifo_num = ep->num;
 8001142:	87e9      	strh	r1, [r5, #62]	; 0x3e
  ep->maxpacket = ep_mps;
 8001144:	642a      	str	r2, [r5, #64]	; 0x40
  ep->type = ep_type;
 8001146:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
  ep->is_in = (0x80U & ep_addr) != 0U;
 800114a:	f885 6039 	strb.w	r6, [r5, #57]	; 0x39
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800114e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8001152:	e7e0      	b.n	8001116 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd); 
 8001154:	2301      	movs	r3, #1
 8001156:	4604      	mov	r4, r0
 8001158:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800115c:	6800      	ldr	r0, [r0, #0]
 800115e:	f003 fa37 	bl	80045d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001162:	2000      	movs	r0, #0
 8001164:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return ret;
 8001168:	bd70      	pop	{r4, r5, r6, pc}
 800116a:	bf00      	nop

0800116c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800116c:	b24a      	sxtb	r2, r1
 800116e:	2a00      	cmp	r2, #0
{  
 8001170:	b510      	push	{r4, lr}
 8001172:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001174:	db18      	blt.n	80011a8 <HAL_PCD_EP_Close+0x3c>
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001176:	231c      	movs	r3, #28
 8001178:	fb03 0301 	mla	r3, r3, r1, r0
 800117c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001180:	0fd2      	lsrs	r2, r2, #31
 8001182:	705a      	strb	r2, [r3, #1]
  ep->num   = ep_addr & 0x7FU;
 8001184:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd); 
 8001186:	f894 2380 	ldrb.w	r2, [r4, #896]	; 0x380
 800118a:	2a01      	cmp	r2, #1
 800118c:	d101      	bne.n	8001192 <HAL_PCD_EP_Close+0x26>
 800118e:	2002      	movs	r0, #2
}
 8001190:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001192:	2201      	movs	r2, #1
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001194:	4619      	mov	r1, r3
  __HAL_LOCK(hpcd); 
 8001196:	f884 2380 	strb.w	r2, [r4, #896]	; 0x380
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800119a:	6820      	ldr	r0, [r4, #0]
 800119c:	f003 fac0 	bl	8004720 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80011a0:	2000      	movs	r0, #0
 80011a2:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 80011a6:	bd10      	pop	{r4, pc}
 80011a8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80011ac:	231c      	movs	r3, #28
 80011ae:	fb03 0301 	mla	r3, r3, r1, r0
 80011b2:	3338      	adds	r3, #56	; 0x38
 80011b4:	e7e4      	b.n	8001180 <HAL_PCD_EP_Close+0x14>
 80011b6:	bf00      	nop

080011b8 <HAL_PCD_EP_Receive>:
{
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80011be:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 80011c2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 80011c6:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;  
 80011c8:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
  ep->xfer_len = len;
 80011cc:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
  ep->num = ep_addr & 0x7FU;
 80011d0:	f884 51dc 	strb.w	r5, [r4, #476]	; 0x1dc
  ep->xfer_count = 0U;
 80011d4:	f8c4 11f4 	str.w	r1, [r4, #500]	; 0x1f4
  ep->is_in = 0U;
 80011d8:	f884 11dd 	strb.w	r1, [r4, #477]	; 0x1dd
  if (hpcd->Init.dma_enable == 1U)
 80011dc:	6903      	ldr	r3, [r0, #16]
 80011de:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80011e0:	bf08      	it	eq
 80011e2:	f8c4 21ec 	streq.w	r2, [r4, #492]	; 0x1ec
  __HAL_LOCK(hpcd); 
 80011e6:	f890 2380 	ldrb.w	r2, [r0, #896]	; 0x380
 80011ea:	2a01      	cmp	r2, #1
 80011ec:	d017      	beq.n	800121e <HAL_PCD_EP_Receive+0x66>
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80011ee:	211c      	movs	r1, #28
 80011f0:	fb01 0105 	mla	r1, r1, r5, r0
  __HAL_LOCK(hpcd); 
 80011f4:	2201      	movs	r2, #1
 80011f6:	f880 2380 	strb.w	r2, [r0, #896]	; 0x380
 80011fa:	4604      	mov	r4, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80011fc:	f501 71ee 	add.w	r1, r1, #476	; 0x1dc
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001200:	b2da      	uxtb	r2, r3
 8001202:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x7FU) == 0U)
 8001204:	b12d      	cbz	r5, 8001212 <HAL_PCD_EP_Receive+0x5a>
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001206:	f003 fae7 	bl	80047d8 <USB_EPStartXfer>
  __HAL_UNLOCK(hpcd); 
 800120a:	2000      	movs	r0, #0
 800120c:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 8001210:	bd38      	pop	{r3, r4, r5, pc}
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001212:	f003 fbbf 	bl	8004994 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd); 
 8001216:	2000      	movs	r0, #0
 8001218:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 800121c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800121e:	2002      	movs	r0, #2
}
 8001220:	bd38      	pop	{r3, r4, r5, pc}
 8001222:	bf00      	nop

08001224 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8001224:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001228:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800122c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8001230:	f8b1 01f4 	ldrh.w	r0, [r1, #500]	; 0x1f4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <HAL_PCD_EP_Transmit>:
{
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 800123e:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8001242:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 8001246:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 8001248:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;  
 800124a:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_len = len;
 800124c:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->num = ep_addr & 0x7FU;
 800124e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  ep->xfer_count = 0U;
 8001252:	6526      	str	r6, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8001254:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  if (hpcd->Init.dma_enable == 1U)
 8001258:	6903      	ldr	r3, [r0, #16]
 800125a:	428b      	cmp	r3, r1
    ep->dma_addr = (uint32_t)pBuf;  
 800125c:	bf08      	it	eq
 800125e:	64a2      	streq	r2, [r4, #72]	; 0x48
  __HAL_LOCK(hpcd); 
 8001260:	f890 2380 	ldrb.w	r2, [r0, #896]	; 0x380
 8001264:	2a01      	cmp	r2, #1
 8001266:	d016      	beq.n	8001296 <HAL_PCD_EP_Transmit+0x5e>
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001268:	211c      	movs	r1, #28
 800126a:	fb01 0105 	mla	r1, r1, r5, r0
  __HAL_LOCK(hpcd); 
 800126e:	2201      	movs	r2, #1
 8001270:	f880 2380 	strb.w	r2, [r0, #896]	; 0x380
 8001274:	4604      	mov	r4, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001276:	3138      	adds	r1, #56	; 0x38
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001278:	b2da      	uxtb	r2, r3
 800127a:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x7FU) == 0U)
 800127c:	b12d      	cbz	r5, 800128a <HAL_PCD_EP_Transmit+0x52>
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800127e:	f003 faab 	bl	80047d8 <USB_EPStartXfer>
  __HAL_UNLOCK(hpcd);
 8001282:	2000      	movs	r0, #0
 8001284:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 8001288:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800128a:	f003 fb83 	bl	8004994 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 800128e:	2000      	movs	r0, #0
 8001290:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 8001294:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8001296:	2002      	movs	r0, #2
}
 8001298:	bd70      	pop	{r4, r5, r6, pc}
 800129a:	bf00      	nop

0800129c <HAL_PCD_EP_SetStall>:
{
 800129c:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800129e:	b24b      	sxtb	r3, r1
 80012a0:	2b00      	cmp	r3, #0
{
 80012a2:	460c      	mov	r4, r1
 80012a4:	4605      	mov	r5, r0
  if ((0x80U & ep_addr) == 0x80U)
 80012a6:	db19      	blt.n	80012dc <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 80012a8:	211c      	movs	r1, #28
 80012aa:	fb01 0104 	mla	r1, r1, r4, r0
 80012ae:	f501 71ee 	add.w	r1, r1, #476	; 0x1dc
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80012b2:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 1U;
 80012b4:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80012b6:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & 0x7FU;
 80012b8:	700c      	strb	r4, [r1, #0]
  ep->is_stall = 1U;
 80012ba:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd); 
 80012bc:	f895 3380 	ldrb.w	r3, [r5, #896]	; 0x380
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_PCD_EP_SetStall+0x2c>
 80012c4:	2002      	movs	r0, #2
}
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80012c8:	f885 2380 	strb.w	r2, [r5, #896]	; 0x380
  USB_EPSetStall(hpcd->Instance , ep);
 80012cc:	6828      	ldr	r0, [r5, #0]
 80012ce:	f003 fc09 	bl	8004ae4 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80012d2:	b154      	cbz	r4, 80012ea <HAL_PCD_EP_SetStall+0x4e>
  __HAL_UNLOCK(hpcd); 
 80012d4:	2000      	movs	r0, #0
 80012d6:	f885 0380 	strb.w	r0, [r5, #896]	; 0x380
  return HAL_OK;
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80012e0:	211c      	movs	r1, #28
 80012e2:	fb01 0104 	mla	r1, r1, r4, r0
 80012e6:	3138      	adds	r1, #56	; 0x38
 80012e8:	e7e3      	b.n	80012b2 <HAL_PCD_EP_SetStall+0x16>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80012ea:	f505 7261 	add.w	r2, r5, #900	; 0x384
 80012ee:	7c29      	ldrb	r1, [r5, #16]
 80012f0:	6828      	ldr	r0, [r5, #0]
 80012f2:	f003 fcdb 	bl	8004cac <USB_EP0_OutStart>
 80012f6:	e7ed      	b.n	80012d4 <HAL_PCD_EP_SetStall+0x38>

080012f8 <HAL_PCD_EP_ClrStall>:
  if ((0x80U & ep_addr) == 0x80U)
 80012f8:	b24a      	sxtb	r2, r1
 80012fa:	2a00      	cmp	r2, #0
{
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4605      	mov	r5, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001300:	db1a      	blt.n	8001338 <HAL_PCD_EP_ClrStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 8001302:	231c      	movs	r3, #28
 8001304:	fb03 0301 	mla	r3, r3, r1, r0
 8001308:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800130c:	0fd2      	lsrs	r2, r2, #31
  ep->is_stall = 0U;
 800130e:	2400      	movs	r4, #0
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001310:	705a      	strb	r2, [r3, #1]
  ep->num   = ep_addr & 0x7FU;
 8001312:	7019      	strb	r1, [r3, #0]
  ep->is_stall = 0U;
 8001314:	709c      	strb	r4, [r3, #2]
  __HAL_LOCK(hpcd); 
 8001316:	f895 2380 	ldrb.w	r2, [r5, #896]	; 0x380
 800131a:	2a01      	cmp	r2, #1
 800131c:	d101      	bne.n	8001322 <HAL_PCD_EP_ClrStall+0x2a>
 800131e:	2002      	movs	r0, #2
}
 8001320:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001322:	2201      	movs	r2, #1
  USB_EPClearStall(hpcd->Instance , ep);
 8001324:	4619      	mov	r1, r3
  __HAL_LOCK(hpcd); 
 8001326:	f885 2380 	strb.w	r2, [r5, #896]	; 0x380
  USB_EPClearStall(hpcd->Instance , ep);
 800132a:	6828      	ldr	r0, [r5, #0]
 800132c:	f003 fbf8 	bl	8004b20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001330:	f885 4380 	strb.w	r4, [r5, #896]	; 0x380
  return HAL_OK;
 8001334:	4620      	mov	r0, r4
 8001336:	bd38      	pop	{r3, r4, r5, pc}
 8001338:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800133c:	231c      	movs	r3, #28
 800133e:	fb03 0301 	mla	r3, r3, r1, r0
 8001342:	3338      	adds	r3, #56	; 0x38
 8001344:	e7e2      	b.n	800130c <HAL_PCD_EP_ClrStall+0x14>
 8001346:	bf00      	nop

08001348 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 8001348:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 800134c:	2b01      	cmp	r3, #1
 800134e:	d00d      	beq.n	800136c <HAL_PCD_EP_Flush+0x24>
 8001350:	2301      	movs	r3, #1
{
 8001352:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001354:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  if ((ep_addr & 0x80U) == 0x80U)
 8001358:	060b      	lsls	r3, r1, #24
 800135a:	4604      	mov	r4, r0
 800135c:	d408      	bmi.n	8001370 <HAL_PCD_EP_Flush+0x28>
    USB_FlushRxFifo(hpcd->Instance);
 800135e:	6800      	ldr	r0, [r0, #0]
 8001360:	f003 f902 	bl	8004568 <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd); 
 8001364:	2000      	movs	r0, #0
 8001366:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 800136a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800136c:	2002      	movs	r0, #2
 800136e:	4770      	bx	lr
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 8001370:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001374:	6800      	ldr	r0, [r0, #0]
 8001376:	f003 f8e5 	bl	8004544 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 800137a:	2000      	movs	r0, #0
 800137c:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 8001380:	bd10      	pop	{r4, pc}
 8001382:	bf00      	nop

08001384 <HAL_PCD_ActivateRemoteWakeup>:
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001384:	6803      	ldr	r3, [r0, #0]
 8001386:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800138a:	07d2      	lsls	r2, r2, #31
 800138c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001390:	d503      	bpl.n	800139a <HAL_PCD_ActivateRemoteWakeup+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	605a      	str	r2, [r3, #4]
}
 800139a:	2000      	movs	r0, #0
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <HAL_PCD_DeActivateRemoteWakeup>:
  USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 80013a6:	f022 0201 	bic.w	r2, r2, #1
}
 80013aa:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
 80013ac:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop

080013b4 <HAL_PCD_GetState>:
  return hpcd->State;
 80013b4:	f890 0381 	ldrb.w	r0, [r0, #897]	; 0x381
}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80013bc:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80013be:	6805      	ldr	r5, [r0, #0]
 80013c0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  
  if(fifo == 0U)
 80013c2:	b1c9      	cbz	r1, 80013f8 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80013c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80013c6:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80013c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80013cc:	d00b      	beq.n	80013e6 <HAL_PCDEx_SetTxFiFo+0x2a>
 80013ce:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80013d0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80013d4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80013d8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80013da:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80013e0:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80013e4:	d3f4      	bcc.n	80013d0 <HAL_PCDEx_SetTxFiFo+0x14>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80013e6:	3140      	adds	r1, #64	; 0x40
 80013e8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80013ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80013f0:	604c      	str	r4, [r1, #4]
  }
  
  return HAL_OK;
}
 80013f2:	2000      	movs	r0, #0
 80013f4:	bc30      	pop	{r4, r5}
 80013f6:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80013f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80013fc:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80013fe:	2000      	movs	r0, #0
 8001400:	bc30      	pop	{r4, r5}
 8001402:	4770      	bx	lr

08001404 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001404:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8001406:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001408:	6259      	str	r1, [r3, #36]	; 0x24
}
 800140a:	4770      	bx	lr

0800140c <HAL_RCC_DeInit>:
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001412:	6803      	ldr	r3, [r0, #0]
 8001414:	07dd      	lsls	r5, r3, #31
{
 8001416:	b083      	sub	sp, #12
 8001418:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141a:	d522      	bpl.n	8001462 <HAL_RCC_OscConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800141c:	49aa      	ldr	r1, [pc, #680]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
 800141e:	688a      	ldr	r2, [r1, #8]
 8001420:	f002 020c 	and.w	r2, r2, #12
 8001424:	2a04      	cmp	r2, #4
 8001426:	f000 80e9 	beq.w	80015fc <HAL_RCC_OscConfig+0x1ec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142a:	688a      	ldr	r2, [r1, #8]
 800142c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001430:	2a08      	cmp	r2, #8
 8001432:	f000 80df 	beq.w	80015f4 <HAL_RCC_OscConfig+0x1e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	4ba5      	ldr	r3, [pc, #660]	; (80016cc <HAL_RCC_OscConfig+0x2bc>)
 8001438:	7922      	ldrb	r2, [r4, #4]
 800143a:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800143c:	6863      	ldr	r3, [r4, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80ca 	beq.w	80015d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7fe fefe 	bl	8000244 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001448:	4d9f      	ldr	r5, [pc, #636]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 800144a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144c:	e005      	b.n	800145a <HAL_RCC_OscConfig+0x4a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144e:	f7fe fef9 	bl	8000244 <HAL_GetTick>
 8001452:	1b80      	subs	r0, r0, r6
 8001454:	2864      	cmp	r0, #100	; 0x64
 8001456:	f200 809e 	bhi.w	8001596 <HAL_RCC_OscConfig+0x186>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	682b      	ldr	r3, [r5, #0]
 800145c:	039a      	lsls	r2, r3, #14
 800145e:	d5f6      	bpl.n	800144e <HAL_RCC_OscConfig+0x3e>
 8001460:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	079f      	lsls	r7, r3, #30
 8001464:	d52c      	bpl.n	80014c0 <HAL_RCC_OscConfig+0xb0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	4a98      	ldr	r2, [pc, #608]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
 8001468:	6891      	ldr	r1, [r2, #8]
 800146a:	f011 0f0c 	tst.w	r1, #12
 800146e:	f000 8099 	beq.w	80015a4 <HAL_RCC_OscConfig+0x194>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001472:	6891      	ldr	r1, [r2, #8]
 8001474:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001478:	2908      	cmp	r1, #8
 800147a:	f000 808f 	beq.w	800159c <HAL_RCC_OscConfig+0x18c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800147e:	68e3      	ldr	r3, [r4, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80d6 	beq.w	8001632 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001486:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x2c0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	4d8f      	ldr	r5, [pc, #572]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800148e:	f7fe fed9 	bl	8000244 <HAL_GetTick>
 8001492:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e004      	b.n	80014a0 <HAL_RCC_OscConfig+0x90>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001496:	f7fe fed5 	bl	8000244 <HAL_GetTick>
 800149a:	1b80      	subs	r0, r0, r6
 800149c:	2802      	cmp	r0, #2
 800149e:	d87a      	bhi.n	8001596 <HAL_RCC_OscConfig+0x186>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	0798      	lsls	r0, r3, #30
 80014a4:	d5f7      	bpl.n	8001496 <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	22f8      	movs	r2, #248	; 0xf8
 80014aa:	fa92 f2a2 	rbit	r2, r2
 80014ae:	6923      	ldr	r3, [r4, #16]
 80014b0:	fab2 f282 	clz	r2, r2
 80014b4:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80014b8:	4093      	lsls	r3, r2
 80014ba:	430b      	orrs	r3, r1
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	6823      	ldr	r3, [r4, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c0:	071a      	lsls	r2, r3, #28
 80014c2:	d420      	bmi.n	8001506 <HAL_RCC_OscConfig+0xf6>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c4:	0759      	lsls	r1, r3, #29
 80014c6:	d434      	bmi.n	8001532 <HAL_RCC_OscConfig+0x122>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c8:	69a3      	ldr	r3, [r4, #24]
 80014ca:	b1cb      	cbz	r3, 8001500 <HAL_RCC_OscConfig+0xf0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014cc:	4d7e      	ldr	r5, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
 80014ce:	68aa      	ldr	r2, [r5, #8]
 80014d0:	f002 020c 	and.w	r2, r2, #12
 80014d4:	2a08      	cmp	r2, #8
 80014d6:	d06c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1a2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d8:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b7e      	ldr	r3, [pc, #504]	; (80016d4 <HAL_RCC_OscConfig+0x2c4>)
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e2:	f000 80b7 	beq.w	8001654 <HAL_RCC_OscConfig+0x244>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7fe fead 	bl	8000244 <HAL_GetTick>
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80014ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	e004      	b.n	80014fa <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7fe fea8 	bl	8000244 <HAL_GetTick>
 80014f4:	1b40      	subs	r0, r0, r5
 80014f6:	2802      	cmp	r0, #2
 80014f8:	d84d      	bhi.n	8001596 <HAL_RCC_OscConfig+0x186>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	d4f7      	bmi.n	80014f0 <HAL_RCC_OscConfig+0xe0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001500:	2000      	movs	r0, #0
}
 8001502:	b003      	add	sp, #12
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001506:	6963      	ldr	r3, [r4, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d055      	beq.n	80015b8 <HAL_RCC_OscConfig+0x1a8>
      __HAL_RCC_LSI_ENABLE();
 800150c:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <HAL_RCC_OscConfig+0x2c8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	4d6e      	ldr	r5, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001514:	f7fe fe96 	bl	8000244 <HAL_GetTick>
 8001518:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	e004      	b.n	8001526 <HAL_RCC_OscConfig+0x116>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151c:	f7fe fe92 	bl	8000244 <HAL_GetTick>
 8001520:	1b80      	subs	r0, r0, r6
 8001522:	2802      	cmp	r0, #2
 8001524:	d837      	bhi.n	8001596 <HAL_RCC_OscConfig+0x186>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001526:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001528:	079f      	lsls	r7, r3, #30
 800152a:	d5f7      	bpl.n	800151c <HAL_RCC_OscConfig+0x10c>
 800152c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152e:	0759      	lsls	r1, r3, #29
 8001530:	d5ca      	bpl.n	80014c8 <HAL_RCC_OscConfig+0xb8>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
    PWR->CR |= PWR_CR_DBP;
 8001534:	4d69      	ldr	r5, [pc, #420]	; (80016dc <HAL_RCC_OscConfig+0x2cc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2200      	movs	r2, #0
 8001538:	9201      	str	r2, [sp, #4]
 800153a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001552:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001554:	f7fe fe76 	bl	8000244 <HAL_GetTick>
 8001558:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800155a:	e004      	b.n	8001566 <HAL_RCC_OscConfig+0x156>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7fe fe72 	bl	8000244 <HAL_GetTick>
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	2802      	cmp	r0, #2
 8001564:	d817      	bhi.n	8001596 <HAL_RCC_OscConfig+0x186>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001566:	682b      	ldr	r3, [r5, #0]
 8001568:	05da      	lsls	r2, r3, #23
 800156a:	d5f7      	bpl.n	800155c <HAL_RCC_OscConfig+0x14c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <HAL_RCC_OscConfig+0x2d0>)
 800156e:	7a22      	ldrb	r2, [r4, #8]
 8001570:	701a      	strb	r2, [r3, #0]
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001572:	68a3      	ldr	r3, [r4, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80bf 	beq.w	80016f8 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 800157a:	f7fe fe63 	bl	8000244 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4d52      	ldr	r5, [pc, #328]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8001580:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001588:	079b      	lsls	r3, r3, #30
 800158a:	d49d      	bmi.n	80014c8 <HAL_RCC_OscConfig+0xb8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7fe fe5a 	bl	8000244 <HAL_GetTick>
 8001590:	1bc0      	subs	r0, r0, r7
 8001592:	42b0      	cmp	r0, r6
 8001594:	d9f7      	bls.n	8001586 <HAL_RCC_OscConfig+0x176>
            return HAL_TIMEOUT;
 8001596:	2003      	movs	r0, #3
}
 8001598:	b003      	add	sp, #12
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159c:	6852      	ldr	r2, [r2, #4]
 800159e:	0256      	lsls	r6, r2, #9
 80015a0:	f53f af6d 	bmi.w	800147e <HAL_RCC_OscConfig+0x6e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a4:	4a48      	ldr	r2, [pc, #288]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	0795      	lsls	r5, r2, #30
 80015aa:	d531      	bpl.n	8001610 <HAL_RCC_OscConfig+0x200>
 80015ac:	68e2      	ldr	r2, [r4, #12]
 80015ae:	2a01      	cmp	r2, #1
 80015b0:	d02e      	beq.n	8001610 <HAL_RCC_OscConfig+0x200>
        return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
}
 80015b4:	b003      	add	sp, #12
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4a47      	ldr	r2, [pc, #284]	; (80016d8 <HAL_RCC_OscConfig+0x2c8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ba:	4d43      	ldr	r5, [pc, #268]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 80015bc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015be:	f7fe fe41 	bl	8000244 <HAL_GetTick>
 80015c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e004      	b.n	80015d0 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7fe fe3d 	bl	8000244 <HAL_GetTick>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d8e2      	bhi.n	8001596 <HAL_RCC_OscConfig+0x186>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015d2:	0798      	lsls	r0, r3, #30
 80015d4:	d4f7      	bmi.n	80015c6 <HAL_RCC_OscConfig+0x1b6>
 80015d6:	e7a9      	b.n	800152c <HAL_RCC_OscConfig+0x11c>
        tickstart = HAL_GetTick();
 80015d8:	f7fe fe34 	bl	8000244 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015dc:	4d3a      	ldr	r5, [pc, #232]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 80015de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e0:	e004      	b.n	80015ec <HAL_RCC_OscConfig+0x1dc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e2:	f7fe fe2f 	bl	8000244 <HAL_GetTick>
 80015e6:	1b80      	subs	r0, r0, r6
 80015e8:	2864      	cmp	r0, #100	; 0x64
 80015ea:	d8d4      	bhi.n	8001596 <HAL_RCC_OscConfig+0x186>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	039b      	lsls	r3, r3, #14
 80015f0:	d4f7      	bmi.n	80015e2 <HAL_RCC_OscConfig+0x1d2>
 80015f2:	e735      	b.n	8001460 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f4:	684a      	ldr	r2, [r1, #4]
 80015f6:	0250      	lsls	r0, r2, #9
 80015f8:	f57f af1d 	bpl.w	8001436 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	0391      	lsls	r1, r2, #14
 8001602:	f57f af2e 	bpl.w	8001462 <HAL_RCC_OscConfig+0x52>
 8001606:	6862      	ldr	r2, [r4, #4]
 8001608:	2a00      	cmp	r2, #0
 800160a:	f47f af2a 	bne.w	8001462 <HAL_RCC_OscConfig+0x52>
 800160e:	e7d0      	b.n	80015b2 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4d2d      	ldr	r5, [pc, #180]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
 8001612:	21f8      	movs	r1, #248	; 0xf8
 8001614:	6828      	ldr	r0, [r5, #0]
 8001616:	fa91 f1a1 	rbit	r1, r1
 800161a:	6922      	ldr	r2, [r4, #16]
 800161c:	fab1 f181 	clz	r1, r1
 8001620:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8001624:	408a      	lsls	r2, r1
 8001626:	4302      	orrs	r2, r0
 8001628:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162a:	071a      	lsls	r2, r3, #28
 800162c:	f57f af4a 	bpl.w	80014c4 <HAL_RCC_OscConfig+0xb4>
 8001630:	e769      	b.n	8001506 <HAL_RCC_OscConfig+0xf6>
        __HAL_RCC_HSI_DISABLE();
 8001632:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x2c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001634:	4d24      	ldr	r5, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_DISABLE();
 8001636:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001638:	f7fe fe04 	bl	8000244 <HAL_GetTick>
 800163c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	e004      	b.n	800164a <HAL_RCC_OscConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001640:	f7fe fe00 	bl	8000244 <HAL_GetTick>
 8001644:	1b80      	subs	r0, r0, r6
 8001646:	2802      	cmp	r0, #2
 8001648:	d8a5      	bhi.n	8001596 <HAL_RCC_OscConfig+0x186>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	0799      	lsls	r1, r3, #30
 800164e:	d4f7      	bmi.n	8001640 <HAL_RCC_OscConfig+0x230>
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	e735      	b.n	80014c0 <HAL_RCC_OscConfig+0xb0>
        tickstart = HAL_GetTick();
 8001654:	f7fe fdf6 	bl	8000244 <HAL_GetTick>
 8001658:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	e004      	b.n	8001666 <HAL_RCC_OscConfig+0x256>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165c:	f7fe fdf2 	bl	8000244 <HAL_GetTick>
 8001660:	1b80      	subs	r0, r0, r6
 8001662:	2802      	cmp	r0, #2
 8001664:	d897      	bhi.n	8001596 <HAL_RCC_OscConfig+0x186>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	0199      	lsls	r1, r3, #6
 800166a:	d4f7      	bmi.n	800165c <HAL_RCC_OscConfig+0x24c>
 800166c:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8001670:	fa96 f6a6 	rbit	r6, r6
 8001674:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001678:	fab6 f686 	clz	r6, r6
 800167c:	fa92 f2a2 	rbit	r2, r2
 8001680:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001684:	fab2 f082 	clz	r0, r2
 8001688:	fa91 f1a1 	rbit	r1, r1
 800168c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800168e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8001690:	69e3      	ldr	r3, [r4, #28]
 8001692:	f8d4 e020 	ldr.w	lr, [r4, #32]
 8001696:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8001698:	0852      	lsrs	r2, r2, #1
 800169a:	ea43 030e 	orr.w	r3, r3, lr
 800169e:	fa07 f606 	lsl.w	r6, r7, r6
 80016a2:	3a01      	subs	r2, #1
 80016a4:	4082      	lsls	r2, r0
 80016a6:	fab1 f181 	clz	r1, r1
 80016aa:	4333      	orrs	r3, r6
 80016ac:	fa04 f101 	lsl.w	r1, r4, r1
 80016b0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_RCC_OscConfig+0x2c4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b4:	4c04      	ldr	r4, [pc, #16]	; (80016c8 <HAL_RCC_OscConfig+0x2b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b6:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 80016b8:	2101      	movs	r1, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016bc:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80016be:	f7fe fdc1 	bl	8000244 <HAL_GetTick>
 80016c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x2e0>
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40023802 	.word	0x40023802
 80016d0:	42470000 	.word	0x42470000
 80016d4:	42470060 	.word	0x42470060
 80016d8:	42470e80 	.word	0x42470e80
 80016dc:	40007000 	.word	0x40007000
 80016e0:	40023870 	.word	0x40023870
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7fe fdae 	bl	8000244 <HAL_GetTick>
 80016e8:	1b40      	subs	r0, r0, r5
 80016ea:	2802      	cmp	r0, #2
 80016ec:	f63f af53 	bhi.w	8001596 <HAL_RCC_OscConfig+0x186>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	019a      	lsls	r2, r3, #6
 80016f4:	d5f6      	bpl.n	80016e4 <HAL_RCC_OscConfig+0x2d4>
 80016f6:	e703      	b.n	8001500 <HAL_RCC_OscConfig+0xf0>
      tickstart = HAL_GetTick();
 80016f8:	f7fe fda4 	bl	8000244 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	4d06      	ldr	r5, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x308>)
      tickstart = HAL_GetTick();
 80016fe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001706:	0798      	lsls	r0, r3, #30
 8001708:	f57f aede 	bpl.w	80014c8 <HAL_RCC_OscConfig+0xb8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7fe fd9a 	bl	8000244 <HAL_GetTick>
 8001710:	1bc0      	subs	r0, r0, r7
 8001712:	42b0      	cmp	r0, r6
 8001714:	d9f6      	bls.n	8001704 <HAL_RCC_OscConfig+0x2f4>
 8001716:	e73e      	b.n	8001596 <HAL_RCC_OscConfig+0x186>
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	460c      	mov	r4, r1
 8001720:	b089      	sub	sp, #36	; 0x24
 8001722:	4616      	mov	r6, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001724:	b310      	cbz	r0, 800176c <HAL_RCC_MCOConfig+0x50>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8001726:	4d23      	ldr	r5, [pc, #140]	; (80017b4 <HAL_RCC_MCOConfig+0x98>)
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001728:	4823      	ldr	r0, [pc, #140]	; (80017b8 <HAL_RCC_MCOConfig+0x9c>)
    __MCO2_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001730:	f042 0204 	orr.w	r2, r2, #4
 8001734:	632a      	str	r2, [r5, #48]	; 0x30
 8001736:	6b29      	ldr	r1, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	9305      	str	r3, [sp, #20]
    __MCO2_CLK_ENABLE();
 800173a:	f001 0104 	and.w	r1, r1, #4
 800173e:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001740:	f44f 7e00 	mov.w	lr, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2203      	movs	r2, #3
    __MCO2_CLK_ENABLE();
 8001746:	9902      	ldr	r1, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2702      	movs	r7, #2
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800174c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800174e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001750:	f8cd e00c 	str.w	lr, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001756:	f7fe ff2f 	bl	80005b8 <HAL_GPIO_Init>
    
    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800175a:	68aa      	ldr	r2, [r5, #8]
 800175c:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
 8001760:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001764:	4314      	orrs	r4, r2
 8001766:	60ac      	str	r4, [r5, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001768:	b009      	add	sp, #36	; 0x24
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __MCO1_CLK_ENABLE();
 800176c:	4d11      	ldr	r5, [pc, #68]	; (80017b4 <HAL_RCC_MCOConfig+0x98>)
 800176e:	9001      	str	r0, [sp, #4]
 8001770:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	632a      	str	r2, [r5, #48]	; 0x30
 8001778:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800177a:	f002 0201 	and.w	r2, r2, #1
 800177e:	9201      	str	r2, [sp, #4]
 8001780:	4603      	mov	r3, r0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001782:	f44f 7e80 	mov.w	lr, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2203      	movs	r2, #3
    __MCO1_CLK_ENABLE();
 8001788:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <HAL_RCC_MCOConfig+0xa0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2702      	movs	r7, #2
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001790:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001792:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001796:	f8cd e00c 	str.w	lr, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800179c:	f7fe ff0c 	bl	80005b8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80017a0:	68ab      	ldr	r3, [r5, #8]
 80017a2:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80017a6:	ea43 0206 	orr.w	r2, r3, r6
 80017aa:	4314      	orrs	r4, r2
 80017ac:	60ac      	str	r4, [r5, #8]
}
 80017ae:	b009      	add	sp, #36	; 0x24
 80017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020000 	.word	0x40020000

080017c0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80017c0:	4b01      	ldr	r3, [pc, #4]	; (80017c8 <HAL_RCC_EnableCSS+0x8>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	4770      	bx	lr
 80017c8:	4247004c 	.word	0x4247004c

080017cc <HAL_RCC_DisableCSS>:
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80017cc:	4b01      	ldr	r3, [pc, #4]	; (80017d4 <HAL_RCC_DisableCSS+0x8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	4770      	bx	lr
 80017d4:	4247004c 	.word	0x4247004c

080017d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_RCC_GetSysClockFreq+0x68>)
 80017da:	6893      	ldr	r3, [r2, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d02b      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x64>
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d127      	bne.n	8001838 <HAL_RCC_GetSysClockFreq+0x60>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e8:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ea:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80017f4:	6853      	ldr	r3, [r2, #4]
 80017f6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80017fa:	fa92 f0a2 	rbit	r0, r2
 80017fe:	fab0 f080 	clz	r0, r0
 8001802:	ea03 0302 	and.w	r3, r3, r2
 8001806:	fa23 f300 	lsr.w	r3, r3, r0
 800180a:	bf14      	ite	ne
 800180c:	480d      	ldrne	r0, [pc, #52]	; (8001844 <HAL_RCC_GetSysClockFreq+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800180e:	480e      	ldreq	r0, [pc, #56]	; (8001848 <HAL_RCC_GetSysClockFreq+0x70>)
 8001810:	fbb0 f0f1 	udiv	r0, r0, r1
 8001814:	fb00 f003 	mul.w	r0, r0, r3
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_GetSysClockFreq+0x68>)
 800181a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	fa92 f2a2 	rbit	r2, r2
 8001824:	fab2 f282 	clz	r2, r2
 8001828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182c:	40d3      	lsrs	r3, r2
 800182e:	3301      	adds	r3, #1
 8001830:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8001832:	fbb0 f0f3 	udiv	r0, r0, r3
 8001836:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800183a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800183c:	4801      	ldr	r0, [pc, #4]	; (8001844 <HAL_RCC_GetSysClockFreq+0x6c>)
 800183e:	4770      	bx	lr
 8001840:	40023800 	.word	0x40023800
 8001844:	007a1200 	.word	0x007a1200
 8001848:	00f42400 	.word	0x00f42400

0800184c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_RCC_ClockConfig+0x160>)
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	428b      	cmp	r3, r1
 8001856:	d208      	bcs.n	800186a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001858:	b2cb      	uxtb	r3, r1
 800185a:	7013      	strb	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	4299      	cmp	r1, r3
 8001864:	d001      	beq.n	800186a <HAL_RCC_ClockConfig+0x1e>
      return HAL_ERROR;
 8001866:	2001      	movs	r0, #1
}
 8001868:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186a:	6803      	ldr	r3, [r0, #0]
 800186c:	079a      	lsls	r2, r3, #30
{
 800186e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001872:	d506      	bpl.n	8001882 <HAL_RCC_ClockConfig+0x36>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001874:	4c4e      	ldr	r4, [pc, #312]	; (80019b0 <HAL_RCC_ClockConfig+0x164>)
 8001876:	6885      	ldr	r5, [r0, #8]
 8001878:	68a2      	ldr	r2, [r4, #8]
 800187a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800187e:	432a      	orrs	r2, r5
 8001880:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001882:	07df      	lsls	r7, r3, #31
 8001884:	4606      	mov	r6, r0
 8001886:	460c      	mov	r4, r1
 8001888:	d526      	bpl.n	80018d8 <HAL_RCC_ClockConfig+0x8c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	6842      	ldr	r2, [r0, #4]
 800188c:	2a01      	cmp	r2, #1
 800188e:	f000 8087 	beq.w	80019a0 <HAL_RCC_ClockConfig+0x154>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001892:	1e93      	subs	r3, r2, #2
 8001894:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_ClockConfig+0x164>)
 8001898:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800189a:	d97b      	bls.n	8001994 <HAL_RCC_ClockConfig+0x148>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	0799      	lsls	r1, r3, #30
 800189e:	d528      	bpl.n	80018f2 <HAL_RCC_ClockConfig+0xa6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a0:	4d43      	ldr	r5, [pc, #268]	; (80019b0 <HAL_RCC_ClockConfig+0x164>)
 80018a2:	68ab      	ldr	r3, [r5, #8]
 80018a4:	f023 0303 	bic.w	r3, r3, #3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80018ac:	f7fe fcca 	bl	8000244 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b0:	6873      	ldr	r3, [r6, #4]
 80018b2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80018b4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b6:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	d04f      	beq.n	800195c <HAL_RCC_ClockConfig+0x110>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d058      	beq.n	8001972 <HAL_RCC_ClockConfig+0x126>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x84>
 80018c4:	e060      	b.n	8001988 <HAL_RCC_ClockConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c6:	f7fe fcbd 	bl	8000244 <HAL_GetTick>
 80018ca:	1bc0      	subs	r0, r0, r7
 80018cc:	4540      	cmp	r0, r8
 80018ce:	d864      	bhi.n	800199a <HAL_RCC_ClockConfig+0x14e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d0:	68ab      	ldr	r3, [r5, #8]
 80018d2:	f013 0f0c 	tst.w	r3, #12
 80018d6:	d1f6      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80018d8:	4a34      	ldr	r2, [pc, #208]	; (80019ac <HAL_RCC_ClockConfig+0x160>)
 80018da:	6813      	ldr	r3, [r2, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	429c      	cmp	r4, r3
 80018e2:	d209      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0xac>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e4:	b2e3      	uxtb	r3, r4
 80018e6:	7013      	strb	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e8:	6813      	ldr	r3, [r2, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	429c      	cmp	r4, r3
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_ClockConfig+0xac>
      return HAL_ERROR;
 80018f2:	2001      	movs	r0, #1
 80018f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	075a      	lsls	r2, r3, #29
 80018fc:	d506      	bpl.n	800190c <HAL_RCC_ClockConfig+0xc0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fe:	492c      	ldr	r1, [pc, #176]	; (80019b0 <HAL_RCC_ClockConfig+0x164>)
 8001900:	68f0      	ldr	r0, [r6, #12]
 8001902:	688a      	ldr	r2, [r1, #8]
 8001904:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001908:	4302      	orrs	r2, r0
 800190a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	071b      	lsls	r3, r3, #28
 800190e:	d507      	bpl.n	8001920 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001910:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <HAL_RCC_ClockConfig+0x164>)
 8001912:	6931      	ldr	r1, [r6, #16]
 8001914:	6893      	ldr	r3, [r2, #8]
 8001916:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800191a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800191e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001920:	f7ff ff5a 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_RCC_ClockConfig+0x164>)
 8001926:	4601      	mov	r1, r0
 8001928:	22f0      	movs	r2, #240	; 0xf0
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	fa92 f2a2 	rbit	r2, r2
 8001930:	fab2 f282 	clz	r2, r2
 8001934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001938:	40d3      	lsrs	r3, r2
 800193a:	481e      	ldr	r0, [pc, #120]	; (80019b4 <HAL_RCC_ClockConfig+0x168>)
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_RCC_ClockConfig+0x16c>)
 800193e:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001940:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001942:	fa21 f303 	lsr.w	r3, r1, r3
 8001946:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001948:	f7fe fc44 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 800194c:	2000      	movs	r0, #0
}
 800194e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001952:	f7fe fc77 	bl	8000244 <HAL_GetTick>
 8001956:	1bc0      	subs	r0, r0, r7
 8001958:	4540      	cmp	r0, r8
 800195a:	d81e      	bhi.n	800199a <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800195c:	68ab      	ldr	r3, [r5, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b04      	cmp	r3, #4
 8001964:	d1f5      	bne.n	8001952 <HAL_RCC_ClockConfig+0x106>
 8001966:	e7b7      	b.n	80018d8 <HAL_RCC_ClockConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7fe fc6c 	bl	8000244 <HAL_GetTick>
 800196c:	1bc0      	subs	r0, r0, r7
 800196e:	4540      	cmp	r0, r8
 8001970:	d813      	bhi.n	800199a <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001972:	68ab      	ldr	r3, [r5, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d1f5      	bne.n	8001968 <HAL_RCC_ClockConfig+0x11c>
 800197c:	e7ac      	b.n	80018d8 <HAL_RCC_ClockConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7fe fc61 	bl	8000244 <HAL_GetTick>
 8001982:	1bc0      	subs	r0, r0, r7
 8001984:	4540      	cmp	r0, r8
 8001986:	d808      	bhi.n	800199a <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001988:	68ab      	ldr	r3, [r5, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d1f5      	bne.n	800197e <HAL_RCC_ClockConfig+0x132>
 8001992:	e7a1      	b.n	80018d8 <HAL_RCC_ClockConfig+0x8c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001994:	0198      	lsls	r0, r3, #6
 8001996:	d483      	bmi.n	80018a0 <HAL_RCC_ClockConfig+0x54>
 8001998:	e7ab      	b.n	80018f2 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 800199a:	2003      	movs	r0, #3
 800199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_RCC_ClockConfig+0x164>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	039d      	lsls	r5, r3, #14
 80019a6:	f53f af7b 	bmi.w	80018a0 <HAL_RCC_ClockConfig+0x54>
 80019aa:	e7a2      	b.n	80018f2 <HAL_RCC_ClockConfig+0xa6>
 80019ac:	40023c00 	.word	0x40023c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	080084dc 	.word	0x080084dc
 80019b8:	2000047c 	.word	0x2000047c

080019bc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2000047c 	.word	0x2000047c

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ca:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	fa92 f2a2 	rbit	r2, r2
 80019d4:	fab2 f282 	clz	r2, r2
 80019d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80019dc:	40d3      	lsrs	r3, r2
 80019de:	4904      	ldr	r1, [pc, #16]	; (80019f0 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	6810      	ldr	r0, [r2, #0]
}
 80019e6:	40d8      	lsrs	r0, r3
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	080084dc 	.word	0x080084dc
 80019f4:	2000047c 	.word	0x2000047c

080019f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fa:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	fa92 f2a2 	rbit	r2, r2
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001a0c:	40d3      	lsrs	r3, r2
 8001a0e:	4904      	ldr	r1, [pc, #16]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	6810      	ldr	r0, [r2, #0]
} 
 8001a16:	40d8      	lsrs	r0, r3
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	080084dc 	.word	0x080084dc
 8001a24:	2000047c 	.word	0x2000047c

08001a28 <HAL_RCC_GetOscConfig>:
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8001a28:	220f      	movs	r2, #15
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_GetOscConfig+0xd8>)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8001a2c:	6002      	str	r2, [r0, #0]
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	0351      	lsls	r1, r2, #13
{
 8001a32:	b410      	push	{r4}
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001a34:	d555      	bpl.n	8001ae2 <HAL_RCC_GetOscConfig+0xba>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8001a36:	2305      	movs	r3, #5
 8001a38:	6043      	str	r3, [r0, #4]
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
  
  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_RCC_GetOscConfig+0xd8>)
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8001a3c:	4930      	ldr	r1, [pc, #192]	; (8001b00 <HAL_RCC_GetOscConfig+0xd8>)
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f013 0301 	ands.w	r3, r3, #1
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8001a44:	bf18      	it	ne
 8001a46:	2301      	movne	r3, #1
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8001a48:	60c3      	str	r3, [r0, #12]
 8001a4a:	22f8      	movs	r2, #248	; 0xf8
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8001a4c:	680b      	ldr	r3, [r1, #0]
 8001a4e:	fa92 f2a2 	rbit	r2, r2
 8001a52:	fab2 f282 	clz	r2, r2
 8001a56:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001a5a:	40d3      	lsrs	r3, r2
 8001a5c:	6103      	str	r3, [r0, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8001a5e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001a60:	075a      	lsls	r2, r3, #29
 8001a62:	d545      	bpl.n	8001af0 <HAL_RCC_GetOscConfig+0xc8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8001a64:	2305      	movs	r3, #5
 8001a66:	6083      	str	r3, [r0, #8]
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_RCC_GetOscConfig+0xd8>)
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a6a:	4a25      	ldr	r2, [pc, #148]	; (8001b00 <HAL_RCC_GetOscConfig+0xd8>)
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	f013 0301 	ands.w	r3, r3, #1
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8001a72:	bf18      	it	ne
 8001a74:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8001a76:	6143      	str	r3, [r0, #20]
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_RCC_GetOscConfig+0xd8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	01db      	lsls	r3, r3, #7
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8001a7e:	bf4c      	ite	mi
 8001a80:	2302      	movmi	r3, #2
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8001a82:	2301      	movpl	r3, #1
 8001a84:	6183      	str	r3, [r0, #24]
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a86:	6853      	ldr	r3, [r2, #4]
 8001a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8c:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8001a8e:	6853      	ldr	r3, [r2, #4]
 8001a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a94:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001a96:	6853      	ldr	r3, [r2, #4]
 8001a98:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 8001a9c:	fa94 f1a4 	rbit	r1, r4
 8001aa0:	fab1 f181 	clz	r1, r1
 8001aa4:	4023      	ands	r3, r4
 8001aa6:	40cb      	lsrs	r3, r1
 8001aa8:	6243      	str	r3, [r0, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
 8001aaa:	6853      	ldr	r3, [r2, #4]
 8001aac:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8001ab0:	fa91 f1a1 	rbit	r1, r1
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001abc:	fab1 f181 	clz	r1, r1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	40cb      	lsrs	r3, r1
 8001ac4:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
 8001ac6:	6853      	ldr	r3, [r2, #4]
 8001ac8:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001acc:	fa92 f2a2 	rbit	r2, r2
 8001ad0:	fab2 f282 	clz	r2, r2
 8001ad4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001ad8:	40d3      	lsrs	r3, r2
 8001ada:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8001adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ae0:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8001ae8:	bf18      	it	ne
 8001aea:	2301      	movne	r3, #1
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8001aec:	6043      	str	r3, [r0, #4]
 8001aee:	e7a4      	b.n	8001a3a <HAL_RCC_GetOscConfig+0x12>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8001af0:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001af2:	f013 0301 	ands.w	r3, r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8001af6:	bf18      	it	ne
 8001af8:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8001afa:	6083      	str	r3, [r0, #8]
 8001afc:	e7b4      	b.n	8001a68 <HAL_RCC_GetOscConfig+0x40>
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b06:	220f      	movs	r2, #15
 8001b08:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	f002 0203 	and.w	r2, r2, #3
 8001b10:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001b18:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001b20:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	08db      	lsrs	r3, r3, #3
{
 8001b26:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b28:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001b2c:	4c05      	ldr	r4, [pc, #20]	; (8001b44 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b2e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001b30:	6823      	ldr	r3, [r4, #0]
}
 8001b32:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	600b      	str	r3, [r1, #0]
}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <HAL_RCC_NMI_IRQHandler>:
{
 8001b4c:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_NMI_IRQHandler+0x18>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	061b      	lsls	r3, r3, #24
 8001b54:	d504      	bpl.n	8001b60 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 8001b56:	f7ff fff7 	bl	8001b48 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001b5a:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	bd08      	pop	{r3, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	4002380e 	.word	0x4002380e

08001b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b6e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b70:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8001b74:	680e      	ldr	r6, [r1, #0]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001b76:	4d13      	ldr	r5, [pc, #76]	; (8001bc4 <TIM_OC1_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b78:	f024 0401 	bic.w	r4, r4, #1
 8001b7c:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8001b7e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001b80:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b82:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8001b84:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b88:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001b8c:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8001b8e:	ea43 030e 	orr.w	r3, r3, lr
  tmpccmrx |= OC_Config->OCMode;
 8001b92:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001b96:	d008      	beq.n	8001baa <TIM_OC1_SetConfig+0x3e>
 8001b98:	4c0b      	ldr	r4, [pc, #44]	; (8001bc8 <TIM_OC1_SetConfig+0x5c>)
 8001b9a:	42a0      	cmp	r0, r4
 8001b9c:	d005      	beq.n	8001baa <TIM_OC1_SetConfig+0x3e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b9e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001ba0:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ba2:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ba4:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001ba6:	6203      	str	r3, [r0, #32]
} 
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001baa:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bac:	694d      	ldr	r5, [r1, #20]
 8001bae:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bb0:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bb4:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8001bb8:	4333      	orrs	r3, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bba:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bc0:	4327      	orrs	r7, r4
 8001bc2:	e7ec      	b.n	8001b9e <TIM_OC1_SetConfig+0x32>
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40010400 	.word	0x40010400

08001bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bce:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bd0:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8001bd4:	680e      	ldr	r6, [r1, #0]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001bd6:	4d14      	ldr	r5, [pc, #80]	; (8001c28 <TIM_OC3_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bd8:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8001bdc:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8001bde:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001be0:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001be2:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8001be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001be8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001bec:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bee:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8001bf2:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001bf6:	d008      	beq.n	8001c0a <TIM_OC3_SetConfig+0x3e>
 8001bf8:	4c0c      	ldr	r4, [pc, #48]	; (8001c2c <TIM_OC3_SetConfig+0x60>)
 8001bfa:	42a0      	cmp	r0, r4
 8001bfc:	d005      	beq.n	8001c0a <TIM_OC3_SetConfig+0x3e>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001bfe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c00:	6047      	str	r7, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c02:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001c04:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c06:	6203      	str	r3, [r0, #32]
}
 8001c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c0a:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c0c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c0e:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c14:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c18:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c1c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c22:	ea47 1704 	orr.w	r7, r7, r4, lsl #4
 8001c26:	e7ea      	b.n	8001bfe <TIM_OC3_SetConfig+0x32>
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40010400 	.word	0x40010400

08001c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c30:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c32:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c34:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c36:	680e      	ldr	r6, [r1, #0]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c38:	4d10      	ldr	r5, [pc, #64]	; (8001c7c <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c3a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001c3e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c40:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001c42:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c44:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c4a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c4e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c50:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c54:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c58:	d00a      	beq.n	8001c70 <TIM_OC4_SetConfig+0x40>
 8001c5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c5e:	42a8      	cmp	r0, r5
 8001c60:	d006      	beq.n	8001c70 <TIM_OC4_SetConfig+0x40>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c62:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c64:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c66:	61c3      	str	r3, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001c68:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8001c6a:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001c6c:	6202      	str	r2, [r0, #32]
}
 8001c6e:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c70:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c72:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c76:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001c7a:	e7f2      	b.n	8001c62 <TIM_OC4_SetConfig+0x32>
 8001c7c:	40010000 	.word	0x40010000

08001c80 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c80:	6802      	ldr	r2, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001c82:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001c84:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
{
 8001c8a:	b470      	push	{r4, r5, r6}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001c8c:	4303      	orrs	r3, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001c8e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001c90:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001c94:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001c96:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001c98:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8001c9a:	d036      	beq.n	8001d0a <TIM_SlaveTimer_SetConfig+0x8a>
 8001c9c:	d924      	bls.n	8001ce8 <TIM_SlaveTimer_SetConfig+0x68>
 8001c9e:	2860      	cmp	r0, #96	; 0x60
 8001ca0:	d00e      	beq.n	8001cc0 <TIM_SlaveTimer_SetConfig+0x40>
 8001ca2:	2870      	cmp	r0, #112	; 0x70
 8001ca4:	d10a      	bne.n	8001cbc <TIM_SlaveTimer_SetConfig+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ca6:	68cb      	ldr	r3, [r1, #12]
 8001ca8:	688c      	ldr	r4, [r1, #8]
 8001caa:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8001cac:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001cae:	4323      	orrs	r3, r4
 8001cb0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cb4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001cb8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cba:	6093      	str	r3, [r2, #8]
}
 8001cbc:	bc70      	pop	{r4, r5, r6}
 8001cbe:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cc0:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cc2:	688c      	ldr	r4, [r1, #8]
 8001cc4:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cc6:	f020 0010 	bic.w	r0, r0, #16
 8001cca:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ccc:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8001cce:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cd0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cd8:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cdc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001ce0:	6191      	str	r1, [r2, #24]
}
 8001ce2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8001ce4:	6213      	str	r3, [r2, #32]
}
 8001ce6:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8001ce8:	2840      	cmp	r0, #64	; 0x40
 8001cea:	d1e7      	bne.n	8001cbc <TIM_SlaveTimer_SetConfig+0x3c>
      tmpccer = htim->Instance->CCER;
 8001cec:	6a14      	ldr	r4, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001cee:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001cf0:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001cf2:	f020 0001 	bic.w	r0, r0, #1
 8001cf6:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8001cf8:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001cfe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001d02:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;                               
 8001d04:	6214      	str	r4, [r2, #32]
}
 8001d06:	bc70      	pop	{r4, r5, r6}
 8001d08:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8001d0a:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d0c:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d0e:	690e      	ldr	r6, [r1, #16]
 8001d10:	6888      	ldr	r0, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d12:	f025 0501 	bic.w	r5, r5, #1
 8001d16:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001d18:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d1a:	f024 010a 	bic.w	r1, r4, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d22:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d26:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001d28:	6193      	str	r3, [r2, #24]
}
 8001d2a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8001d2c:	6211      	str	r1, [r2, #32]
}
 8001d2e:	4770      	bx	lr
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <HAL_TIM_Base_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 8001d3a:	6803      	ldr	r3, [r0, #0]
{  
 8001d3c:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8001d42:	6a19      	ldr	r1, [r3, #32]
 8001d44:	f241 1211 	movw	r2, #4369	; 0x1111
 8001d48:	4211      	tst	r1, r2
{  
 8001d4a:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8001d4c:	d108      	bne.n	8001d60 <HAL_TIM_Base_DeInit+0x28>
 8001d4e:	6a19      	ldr	r1, [r3, #32]
 8001d50:	f240 4244 	movw	r2, #1092	; 0x444
 8001d54:	4211      	tst	r1, r2
 8001d56:	d103      	bne.n	8001d60 <HAL_TIM_Base_DeInit+0x28>
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8001d60:	4620      	mov	r0, r4
 8001d62:	f004 fdc7 	bl	80068f4 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 8001d66:	2000      	movs	r0, #0
 8001d68:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001d6c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	bf00      	nop

08001d74 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8001d74:	6801      	ldr	r1, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001d76:	2202      	movs	r2, #2
{
 8001d78:	b410      	push	{r4}
  htim->State= HAL_TIM_STATE_BUSY;
 8001d7a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8001d7e:	680a      	ldr	r2, [r1, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001d80:	2401      	movs	r4, #1
{
 8001d82:	4603      	mov	r3, r0
  __HAL_TIM_ENABLE(htim);
 8001d84:	4322      	orrs	r2, r4
 8001d86:	600a      	str	r2, [r1, #0]
}
 8001d88:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001d8a:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
}
 8001d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001d94:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 8001d96:	6803      	ldr	r3, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001d98:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8001d9c:	6a19      	ldr	r1, [r3, #32]
 8001d9e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001da2:	4211      	tst	r1, r2
 8001da4:	d108      	bne.n	8001db8 <HAL_TIM_Base_Stop+0x24>
 8001da6:	6a19      	ldr	r1, [r3, #32]
 8001da8:	f240 4244 	movw	r2, #1092	; 0x444
 8001dac:	4211      	tst	r1, r2
 8001dae:	d103      	bne.n	8001db8 <HAL_TIM_Base_Stop+0x24>
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop

08001dc4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc4:	6803      	ldr	r3, [r0, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001ddc:	6803      	ldr	r3, [r0, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8001de6:	6a19      	ldr	r1, [r3, #32]
 8001de8:	f241 1211 	movw	r2, #4369	; 0x1111
 8001dec:	4211      	tst	r1, r2
 8001dee:	d108      	bne.n	8001e02 <HAL_TIM_Base_Stop_IT+0x26>
 8001df0:	6a19      	ldr	r1, [r3, #32]
 8001df2:	f240 4244 	movw	r2, #1092	; 0x444
 8001df6:	4211      	tst	r1, r2
 8001df8:	d103      	bne.n	8001e02 <HAL_TIM_Base_Stop_IT+0x26>
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	2000      	movs	r0, #0
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <HAL_TIM_Base_Start_DMA>:
{
 8001e08:	b570      	push	{r4, r5, r6, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001e0a:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8001e0e:	b2e4      	uxtb	r4, r4
 8001e10:	2c02      	cmp	r4, #2
 8001e12:	d021      	beq.n	8001e58 <HAL_TIM_Base_Start_DMA+0x50>
  else if((htim->State == HAL_TIM_STATE_READY))
 8001e14:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8001e18:	b2e4      	uxtb	r4, r4
 8001e1a:	2c01      	cmp	r4, #1
 8001e1c:	d015      	beq.n	8001e4a <HAL_TIM_Base_Start_DMA+0x42>
 8001e1e:	4604      	mov	r4, r0
 8001e20:	4613      	mov	r3, r2
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8001e22:	69c0      	ldr	r0, [r0, #28]
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 8001e24:	6822      	ldr	r2, [r4, #0]
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8001e26:	4e0d      	ldr	r6, [pc, #52]	; (8001e5c <HAL_TIM_Base_Start_DMA+0x54>)
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8001e28:	4d0d      	ldr	r5, [pc, #52]	; (8001e60 <HAL_TIM_Base_Start_DMA+0x58>)
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8001e2a:	63c6      	str	r6, [r0, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8001e2c:	64c5      	str	r5, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 8001e2e:	322c      	adds	r2, #44	; 0x2c
 8001e30:	f003 fcec 	bl	800580c <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);  
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001e46:	2000      	movs	r0, #0
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == 0U) && (Length > 0U)) 
 8001e4a:	b119      	cbz	r1, 8001e54 <HAL_TIM_Base_Start_DMA+0x4c>
      htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8001e52:	e7e4      	b.n	8001e1e <HAL_TIM_Base_Start_DMA+0x16>
    if((pData == 0U) && (Length > 0U)) 
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d0f9      	beq.n	8001e4c <HAL_TIM_Base_Start_DMA+0x44>
      return HAL_ERROR;                                    
 8001e58:	4620      	mov	r0, r4
}
 8001e5a:	bd70      	pop	{r4, r5, r6, pc}
 8001e5c:	08003175 	.word	0x08003175
 8001e60:	08003395 	.word	0x08003395

08001e64 <HAL_TIM_Base_Stop_DMA>:
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8001e64:	6803      	ldr	r3, [r0, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8001e6e:	6a1a      	ldr	r2, [r3, #32]
 8001e70:	f241 1111 	movw	r1, #4369	; 0x1111
 8001e74:	420a      	tst	r2, r1
 8001e76:	d108      	bne.n	8001e8a <HAL_TIM_Base_Stop_DMA+0x26>
 8001e78:	6a19      	ldr	r1, [r3, #32]
 8001e7a:	f240 4244 	movw	r2, #1092	; 0x444
 8001e7e:	4211      	tst	r1, r2
 8001e80:	d103      	bne.n	8001e8a <HAL_TIM_Base_Stop_DMA+0x26>
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001e90:	2000      	movs	r0, #0
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_OC_MspInit>:
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop

08001e98 <HAL_TIM_OC_MspDeInit>:
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <HAL_TIM_OC_DeInit>:
   htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 8001e9e:	6803      	ldr	r3, [r0, #0]
{
 8001ea0:	b510      	push	{r4, lr}
   htim->State = HAL_TIM_STATE_BUSY;
 8001ea2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8001ea6:	6a19      	ldr	r1, [r3, #32]
 8001ea8:	f241 1211 	movw	r2, #4369	; 0x1111
 8001eac:	4211      	tst	r1, r2
{
 8001eae:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8001eb0:	d108      	bne.n	8001ec4 <HAL_TIM_OC_DeInit+0x28>
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	f240 4244 	movw	r2, #1092	; 0x444
 8001eb8:	4211      	tst	r1, r2
 8001eba:	d103      	bne.n	8001ec4 <HAL_TIM_OC_DeInit+0x28>
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f7ff ffe7 	bl	8001e98 <HAL_TIM_OC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001ed0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	bf00      	nop

08001ed8 <HAL_TIM_OC_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ed8:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << Channel;
 8001eda:	2001      	movs	r0, #1
  TIMx->CCER &= ~tmp;
 8001edc:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001ede:	fa00 f101 	lsl.w	r1, r0, r1
{
 8001ee2:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8001ee4:	ea22 0201 	bic.w	r2, r2, r1
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001ee8:	4c14      	ldr	r4, [pc, #80]	; (8001f3c <HAL_TIM_OC_Stop+0x64>)
  TIMx->CCER &= ~tmp;
 8001eea:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	621a      	str	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001ef0:	42a3      	cmp	r3, r4
 8001ef2:	d014      	beq.n	8001f1e <HAL_TIM_OC_Stop+0x46>
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_TIM_OC_Stop+0x68>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d011      	beq.n	8001f1e <HAL_TIM_OC_Stop+0x46>
  __HAL_TIM_DISABLE(htim);  
 8001efa:	6a19      	ldr	r1, [r3, #32]
 8001efc:	f241 1211 	movw	r2, #4369	; 0x1111
 8001f00:	4211      	tst	r1, r2
 8001f02:	d108      	bne.n	8001f16 <HAL_TIM_OC_Stop+0x3e>
 8001f04:	6a19      	ldr	r1, [r3, #32]
 8001f06:	f240 4244 	movw	r2, #1092	; 0x444
 8001f0a:	4211      	tst	r1, r2
 8001f0c:	d103      	bne.n	8001f16 <HAL_TIM_OC_Stop+0x3e>
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
}  
 8001f16:	2000      	movs	r0, #0
 8001f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f1c:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8001f1e:	6a19      	ldr	r1, [r3, #32]
 8001f20:	f241 1211 	movw	r2, #4369	; 0x1111
 8001f24:	4211      	tst	r1, r2
 8001f26:	d1e8      	bne.n	8001efa <HAL_TIM_OC_Stop+0x22>
 8001f28:	6a19      	ldr	r1, [r3, #32]
 8001f2a:	f240 4244 	movw	r2, #1092	; 0x444
 8001f2e:	4211      	tst	r1, r2
 8001f30:	d1e3      	bne.n	8001efa <HAL_TIM_OC_Stop+0x22>
 8001f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
 8001f3a:	e7de      	b.n	8001efa <HAL_TIM_OC_Stop+0x22>
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_TIM_PWM_MspInit>:
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <HAL_TIM_PWM_MspDeInit>:
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 8001f4e:	6803      	ldr	r3, [r0, #0]
{
 8001f50:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8001f52:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8001f56:	6a19      	ldr	r1, [r3, #32]
 8001f58:	f241 1211 	movw	r2, #4369	; 0x1111
 8001f5c:	4211      	tst	r1, r2
{
 8001f5e:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8001f60:	d108      	bne.n	8001f74 <HAL_TIM_PWM_DeInit+0x28>
 8001f62:	6a19      	ldr	r1, [r3, #32]
 8001f64:	f240 4244 	movw	r2, #1092	; 0x444
 8001f68:	4211      	tst	r1, r2
 8001f6a:	d103      	bne.n	8001f74 <HAL_TIM_PWM_DeInit+0x28>
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff ffe7 	bl	8001f48 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001f80:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001f84:	bd10      	pop	{r4, pc}
 8001f86:	bf00      	nop

08001f88 <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f88:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << Channel;
 8001f8a:	2201      	movs	r2, #1
  TIMx->CCER &= ~tmp;
 8001f8c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001f8e:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8001f92:	ea20 0001 	bic.w	r0, r0, r1
{
 8001f96:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8001f98:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001f9c:	4c0a      	ldr	r4, [pc, #40]	; (8001fc8 <HAL_TIM_PWM_Start+0x40>)
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f9e:	4311      	orrs	r1, r2
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001fa0:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001fa2:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001fa4:	d00a      	beq.n	8001fbc <HAL_TIM_PWM_Start+0x34>
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_TIM_PWM_Start+0x44>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <HAL_TIM_PWM_Start+0x34>
  __HAL_TIM_ENABLE(htim);
 8001fac:	681a      	ldr	r2, [r3, #0]
} 
 8001fae:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
} 
 8001fb6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001fb8:	601a      	str	r2, [r3, #0]
} 
 8001fba:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8001fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
 8001fc4:	e7f2      	b.n	8001fac <HAL_TIM_PWM_Start+0x24>
 8001fc6:	bf00      	nop
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_TIM_OC_Start>:
 8001fd0:	f7ff bfda 	b.w	8001f88 <HAL_TIM_PWM_Start>

08001fd4 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001fd4:	6803      	ldr	r3, [r0, #0]
{ 
 8001fd6:	b430      	push	{r4, r5}
  TIMx->CCER &= ~tmp;
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001fda:	4d18      	ldr	r5, [pc, #96]	; (800203c <HAL_TIM_PWM_Stop+0x68>)
  tmp = TIM_CCER_CC1E << Channel;
 8001fdc:	2401      	movs	r4, #1
 8001fde:	fa04 f101 	lsl.w	r1, r4, r1
  TIMx->CCER &= ~tmp;
 8001fe2:	ea22 0201 	bic.w	r2, r2, r1
 8001fe6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	621a      	str	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001fec:	42ab      	cmp	r3, r5
 8001fee:	d016      	beq.n	800201e <HAL_TIM_PWM_Stop+0x4a>
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <HAL_TIM_PWM_Stop+0x6c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_TIM_PWM_Stop+0x4a>
  __HAL_TIM_DISABLE(htim);
 8001ff6:	6a19      	ldr	r1, [r3, #32]
 8001ff8:	f241 1211 	movw	r2, #4369	; 0x1111
 8001ffc:	4211      	tst	r1, r2
 8001ffe:	d108      	bne.n	8002012 <HAL_TIM_PWM_Stop+0x3e>
 8002000:	6a19      	ldr	r1, [r3, #32]
 8002002:	f240 4244 	movw	r2, #1092	; 0x444
 8002006:	4211      	tst	r1, r2
 8002008:	d103      	bne.n	8002012 <HAL_TIM_PWM_Stop+0x3e>
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002012:	2301      	movs	r3, #1
 8002014:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
} 
 8002018:	bc30      	pop	{r4, r5}
 800201a:	2000      	movs	r0, #0
 800201c:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 800201e:	6a19      	ldr	r1, [r3, #32]
 8002020:	f241 1211 	movw	r2, #4369	; 0x1111
 8002024:	4211      	tst	r1, r2
 8002026:	d1e6      	bne.n	8001ff6 <HAL_TIM_PWM_Stop+0x22>
 8002028:	6a19      	ldr	r1, [r3, #32]
 800202a:	f240 4244 	movw	r2, #1092	; 0x444
 800202e:	4211      	tst	r1, r2
 8002030:	d1e1      	bne.n	8001ff6 <HAL_TIM_PWM_Stop+0x22>
 8002032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
 800203a:	e7dc      	b.n	8001ff6 <HAL_TIM_PWM_Stop+0x22>
 800203c:	40010000 	.word	0x40010000
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_TIM_PWM_Start_IT>:
{
 8002044:	b410      	push	{r4}
  switch (Channel)
 8002046:	290c      	cmp	r1, #12
 8002048:	d838      	bhi.n	80020bc <HAL_TIM_PWM_Start_IT+0x78>
 800204a:	e8df f001 	tbb	[pc, r1]
 800204e:	372b      	.short	0x372b
 8002050:	37313737 	.word	0x37313737
 8002054:	37253737 	.word	0x37253737
 8002058:	3737      	.short	0x3737
 800205a:	07          	.byte	0x07
 800205b:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800205c:	6803      	ldr	r3, [r0, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	f042 0210 	orr.w	r2, r2, #16
 8002064:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8002066:	6a18      	ldr	r0, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002068:	4c18      	ldr	r4, [pc, #96]	; (80020cc <HAL_TIM_PWM_Start_IT+0x88>)
  tmp = TIM_CCER_CC1E << Channel;
 800206a:	2201      	movs	r2, #1
 800206c:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8002070:	ea20 0001 	bic.w	r0, r0, r1
 8002074:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002076:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002078:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800207a:	ea41 0102 	orr.w	r1, r1, r2
 800207e:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002080:	d01e      	beq.n	80020c0 <HAL_TIM_PWM_Start_IT+0x7c>
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_TIM_PWM_Start_IT+0x8c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01b      	beq.n	80020c0 <HAL_TIM_PWM_Start_IT+0x7c>
  __HAL_TIM_ENABLE(htim);
 8002088:	681a      	ldr	r2, [r3, #0]
} 
 800208a:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 800208e:	f042 0201 	orr.w	r2, r2, #1
} 
 8002092:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002094:	601a      	str	r2, [r3, #0]
} 
 8002096:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	f042 0208 	orr.w	r2, r2, #8
 80020a0:	60da      	str	r2, [r3, #12]
    break;
 80020a2:	e7e0      	b.n	8002066 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020a4:	6803      	ldr	r3, [r0, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	f042 0202 	orr.w	r2, r2, #2
 80020ac:	60da      	str	r2, [r3, #12]
    break;
 80020ae:	e7da      	b.n	8002066 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020b0:	6803      	ldr	r3, [r0, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	f042 0204 	orr.w	r2, r2, #4
 80020b8:	60da      	str	r2, [r3, #12]
    break;
 80020ba:	e7d4      	b.n	8002066 <HAL_TIM_PWM_Start_IT+0x22>
 80020bc:	6803      	ldr	r3, [r0, #0]
 80020be:	e7d2      	b.n	8002066 <HAL_TIM_PWM_Start_IT+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 80020c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c6:	645a      	str	r2, [r3, #68]	; 0x44
 80020c8:	e7de      	b.n	8002088 <HAL_TIM_PWM_Start_IT+0x44>
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40010400 	.word	0x40010400

080020d4 <HAL_TIM_OC_Start_IT>:
 80020d4:	f7ff bfb6 	b.w	8002044 <HAL_TIM_PWM_Start_IT>

080020d8 <HAL_TIM_PWM_Stop_IT>:
{
 80020d8:	b410      	push	{r4}
  switch (Channel)
 80020da:	290c      	cmp	r1, #12
 80020dc:	d840      	bhi.n	8002160 <HAL_TIM_PWM_Stop_IT+0x88>
 80020de:	e8df f001 	tbb	[pc, r1]
 80020e2:	3f39      	.short	0x3f39
 80020e4:	3f333f3f 	.word	0x3f333f3f
 80020e8:	3f2d3f3f 	.word	0x3f2d3f3f
 80020ec:	3f3f      	.short	0x3f3f
 80020ee:	07          	.byte	0x07
 80020ef:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80020f0:	6803      	ldr	r3, [r0, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	f022 0210 	bic.w	r2, r2, #16
 80020f8:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80020fa:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80020fc:	4c21      	ldr	r4, [pc, #132]	; (8002184 <HAL_TIM_PWM_Stop_IT+0xac>)
  tmp = TIM_CCER_CC1E << Channel;
 80020fe:	2001      	movs	r0, #1
 8002100:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 8002104:	ea22 0101 	bic.w	r1, r2, r1
 8002108:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	621a      	str	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800210e:	42a3      	cmp	r3, r4
 8002110:	d028      	beq.n	8002164 <HAL_TIM_PWM_Stop_IT+0x8c>
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_TIM_PWM_Stop_IT+0xb0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d025      	beq.n	8002164 <HAL_TIM_PWM_Stop_IT+0x8c>
  __HAL_TIM_DISABLE(htim);
 8002118:	6a19      	ldr	r1, [r3, #32]
 800211a:	f241 1211 	movw	r2, #4369	; 0x1111
 800211e:	4211      	tst	r1, r2
 8002120:	d108      	bne.n	8002134 <HAL_TIM_PWM_Stop_IT+0x5c>
 8002122:	6a19      	ldr	r1, [r3, #32]
 8002124:	f240 4244 	movw	r2, #1092	; 0x444
 8002128:	4211      	tst	r1, r2
 800212a:	d103      	bne.n	8002134 <HAL_TIM_PWM_Stop_IT+0x5c>
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
} 
 8002134:	2000      	movs	r0, #0
 8002136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800213a:	4770      	bx	lr
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800213c:	6803      	ldr	r3, [r0, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	f022 0208 	bic.w	r2, r2, #8
 8002144:	60da      	str	r2, [r3, #12]
    break;
 8002146:	e7d8      	b.n	80020fa <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002148:	6803      	ldr	r3, [r0, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	f022 0204 	bic.w	r2, r2, #4
 8002150:	60da      	str	r2, [r3, #12]
    break;
 8002152:	e7d2      	b.n	80020fa <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002154:	6803      	ldr	r3, [r0, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	f022 0202 	bic.w	r2, r2, #2
 800215c:	60da      	str	r2, [r3, #12]
    break;
 800215e:	e7cc      	b.n	80020fa <HAL_TIM_PWM_Stop_IT+0x22>
 8002160:	6803      	ldr	r3, [r0, #0]
 8002162:	e7ca      	b.n	80020fa <HAL_TIM_PWM_Stop_IT+0x22>
    __HAL_TIM_MOE_DISABLE(htim);
 8002164:	6a19      	ldr	r1, [r3, #32]
 8002166:	f241 1211 	movw	r2, #4369	; 0x1111
 800216a:	4211      	tst	r1, r2
 800216c:	d1d4      	bne.n	8002118 <HAL_TIM_PWM_Stop_IT+0x40>
 800216e:	6a19      	ldr	r1, [r3, #32]
 8002170:	f240 4244 	movw	r2, #1092	; 0x444
 8002174:	4211      	tst	r1, r2
 8002176:	d1cf      	bne.n	8002118 <HAL_TIM_PWM_Stop_IT+0x40>
 8002178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800217a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
 8002180:	e7ca      	b.n	8002118 <HAL_TIM_PWM_Stop_IT+0x40>
 8002182:	bf00      	nop
 8002184:	40010000 	.word	0x40010000
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_TIM_OC_Stop_IT>:
 800218c:	f7ff bfa4 	b.w	80020d8 <HAL_TIM_PWM_Stop_IT>

08002190 <HAL_TIM_PWM_Start_DMA>:
{
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8002192:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8002196:	b2e4      	uxtb	r4, r4
 8002198:	2c02      	cmp	r4, #2
 800219a:	d015      	beq.n	80021c8 <HAL_TIM_PWM_Start_DMA+0x38>
  else if((htim->State == HAL_TIM_STATE_READY))
 800219c:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80021a0:	b2e4      	uxtb	r4, r4
 80021a2:	2c01      	cmp	r4, #1
 80021a4:	d00c      	beq.n	80021c0 <HAL_TIM_PWM_Start_DMA+0x30>
 80021a6:	460d      	mov	r5, r1
 80021a8:	4604      	mov	r4, r0
  switch (Channel)
 80021aa:	2d0c      	cmp	r5, #12
 80021ac:	d868      	bhi.n	8002280 <HAL_TIM_PWM_Start_DMA+0xf0>
 80021ae:	e8df f005 	tbb	[pc, r5]
 80021b2:	670d      	.short	0x670d
 80021b4:	67456767 	.word	0x67456767
 80021b8:	67346767 	.word	0x67346767
 80021bc:	6767      	.short	0x6767
 80021be:	56          	.byte	0x56
 80021bf:	00          	.byte	0x00
    if(((uint32_t)pData == 0U) && (Length > 0U)) 
 80021c0:	2a00      	cmp	r2, #0
 80021c2:	d15f      	bne.n	8002284 <HAL_TIM_PWM_Start_DMA+0xf4>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d05d      	beq.n	8002284 <HAL_TIM_PWM_Start_DMA+0xf4>
      return HAL_ERROR;                                    
 80021c8:	4620      	mov	r0, r4
 80021ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80021cc:	6826      	ldr	r6, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80021ce:	6a00      	ldr	r0, [r0, #32]
 80021d0:	4931      	ldr	r1, [pc, #196]	; (8002298 <HAL_TIM_PWM_Start_DMA+0x108>)
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80021d2:	4f32      	ldr	r7, [pc, #200]	; (800229c <HAL_TIM_PWM_Start_DMA+0x10c>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80021d4:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80021d6:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80021d8:	4611      	mov	r1, r2
 80021da:	f106 0234 	add.w	r2, r6, #52	; 0x34
 80021de:	f003 fb15 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ea:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80021ec:	6a18      	ldr	r0, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80021ee:	4c2c      	ldr	r4, [pc, #176]	; (80022a0 <HAL_TIM_PWM_Start_DMA+0x110>)
  tmp = TIM_CCER_CC1E << Channel;
 80021f0:	2201      	movs	r2, #1
 80021f2:	fa02 f105 	lsl.w	r1, r2, r5
  TIMx->CCER &= ~tmp;
 80021f6:	ea20 0001 	bic.w	r0, r0, r1
 80021fa:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80021fc:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80021fe:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002200:	ea41 0102 	orr.w	r1, r1, r2
 8002204:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002206:	d041      	beq.n	800228c <HAL_TIM_PWM_Start_DMA+0xfc>
 8002208:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <HAL_TIM_PWM_Start_DMA+0x114>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d03e      	beq.n	800228c <HAL_TIM_PWM_Start_DMA+0xfc>
  __HAL_TIM_ENABLE(htim); 
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002216:	2000      	movs	r0, #0
 8002218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800221a:	6826      	ldr	r6, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800221c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800221e:	491e      	ldr	r1, [pc, #120]	; (8002298 <HAL_TIM_PWM_Start_DMA+0x108>)
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002220:	4f1e      	ldr	r7, [pc, #120]	; (800229c <HAL_TIM_PWM_Start_DMA+0x10c>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002222:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002224:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8002226:	4611      	mov	r1, r2
 8002228:	f106 023c 	add.w	r2, r6, #60	; 0x3c
 800222c:	f003 faee 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002238:	60da      	str	r2, [r3, #12]
    break;
 800223a:	e7d7      	b.n	80021ec <HAL_TIM_PWM_Start_DMA+0x5c>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800223c:	6826      	ldr	r6, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800223e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002240:	4915      	ldr	r1, [pc, #84]	; (8002298 <HAL_TIM_PWM_Start_DMA+0x108>)
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002242:	4f16      	ldr	r7, [pc, #88]	; (800229c <HAL_TIM_PWM_Start_DMA+0x10c>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002244:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002246:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8002248:	4611      	mov	r1, r2
 800224a:	f106 0238 	add.w	r2, r6, #56	; 0x38
 800224e:	f003 fadd 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800225a:	60da      	str	r2, [r3, #12]
    break;
 800225c:	e7c6      	b.n	80021ec <HAL_TIM_PWM_Start_DMA+0x5c>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800225e:	6826      	ldr	r6, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002260:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002262:	490d      	ldr	r1, [pc, #52]	; (8002298 <HAL_TIM_PWM_Start_DMA+0x108>)
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002264:	4f0d      	ldr	r7, [pc, #52]	; (800229c <HAL_TIM_PWM_Start_DMA+0x10c>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002266:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002268:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800226a:	4611      	mov	r1, r2
 800226c:	f106 0240 	add.w	r2, r6, #64	; 0x40
 8002270:	f003 facc 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800227c:	60da      	str	r2, [r3, #12]
    break;
 800227e:	e7b5      	b.n	80021ec <HAL_TIM_PWM_Start_DMA+0x5c>
 8002280:	6803      	ldr	r3, [r0, #0]
 8002282:	e7b3      	b.n	80021ec <HAL_TIM_PWM_Start_DMA+0x5c>
      htim->State = HAL_TIM_STATE_BUSY;
 8002284:	2402      	movs	r4, #2
 8002286:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 800228a:	e78c      	b.n	80021a6 <HAL_TIM_PWM_Start_DMA+0x16>
    __HAL_TIM_MOE_ENABLE(htim);
 800228c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
 8002294:	e7bb      	b.n	800220e <HAL_TIM_PWM_Start_DMA+0x7e>
 8002296:	bf00      	nop
 8002298:	080031dd 	.word	0x080031dd
 800229c:	08003395 	.word	0x08003395
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010400 	.word	0x40010400

080022a8 <HAL_TIM_OC_Start_DMA>:
 80022a8:	f7ff bf72 	b.w	8002190 <HAL_TIM_PWM_Start_DMA>

080022ac <HAL_TIM_PWM_Stop_DMA>:
{
 80022ac:	b430      	push	{r4, r5}
  switch (Channel)
 80022ae:	290c      	cmp	r1, #12
 80022b0:	d842      	bhi.n	8002338 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80022b2:	e8df f001 	tbb	[pc, r1]
 80022b6:	413b      	.short	0x413b
 80022b8:	41354141 	.word	0x41354141
 80022bc:	412f4141 	.word	0x412f4141
 80022c0:	4141      	.short	0x4141
 80022c2:	07          	.byte	0x07
 80022c3:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80022c4:	6803      	ldr	r3, [r0, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022cc:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80022ce:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80022d0:	4d22      	ldr	r5, [pc, #136]	; (800235c <HAL_TIM_PWM_Stop_DMA+0xb0>)
  tmp = TIM_CCER_CC1E << Channel;
 80022d2:	2401      	movs	r4, #1
 80022d4:	fa04 f101 	lsl.w	r1, r4, r1
  TIMx->CCER &= ~tmp;
 80022d8:	ea22 0101 	bic.w	r1, r2, r1
 80022dc:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	621a      	str	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80022e2:	42ab      	cmp	r3, r5
 80022e4:	d02a      	beq.n	800233c <HAL_TIM_PWM_Stop_DMA+0x90>
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <HAL_TIM_PWM_Stop_DMA+0xb4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d027      	beq.n	800233c <HAL_TIM_PWM_Stop_DMA+0x90>
  __HAL_TIM_DISABLE(htim);
 80022ec:	6a19      	ldr	r1, [r3, #32]
 80022ee:	f241 1211 	movw	r2, #4369	; 0x1111
 80022f2:	4211      	tst	r1, r2
 80022f4:	d108      	bne.n	8002308 <HAL_TIM_PWM_Stop_DMA+0x5c>
 80022f6:	6a19      	ldr	r1, [r3, #32]
 80022f8:	f240 4244 	movw	r2, #1092	; 0x444
 80022fc:	4211      	tst	r1, r2
 80022fe:	d103      	bne.n	8002308 <HAL_TIM_PWM_Stop_DMA+0x5c>
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002308:	2301      	movs	r3, #1
 800230a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 800230e:	bc30      	pop	{r4, r5}
 8002310:	2000      	movs	r0, #0
 8002312:	4770      	bx	lr
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002314:	6803      	ldr	r3, [r0, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231c:	60da      	str	r2, [r3, #12]
    break;
 800231e:	e7d6      	b.n	80022ce <HAL_TIM_PWM_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002320:	6803      	ldr	r3, [r0, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002328:	60da      	str	r2, [r3, #12]
    break;
 800232a:	e7d0      	b.n	80022ce <HAL_TIM_PWM_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800232c:	6803      	ldr	r3, [r0, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002334:	60da      	str	r2, [r3, #12]
    break;
 8002336:	e7ca      	b.n	80022ce <HAL_TIM_PWM_Stop_DMA+0x22>
 8002338:	6803      	ldr	r3, [r0, #0]
 800233a:	e7c8      	b.n	80022ce <HAL_TIM_PWM_Stop_DMA+0x22>
    __HAL_TIM_MOE_DISABLE(htim);
 800233c:	6a19      	ldr	r1, [r3, #32]
 800233e:	f241 1211 	movw	r2, #4369	; 0x1111
 8002342:	4211      	tst	r1, r2
 8002344:	d1d2      	bne.n	80022ec <HAL_TIM_PWM_Stop_DMA+0x40>
 8002346:	6a19      	ldr	r1, [r3, #32]
 8002348:	f240 4244 	movw	r2, #1092	; 0x444
 800234c:	4211      	tst	r1, r2
 800234e:	d1cd      	bne.n	80022ec <HAL_TIM_PWM_Stop_DMA+0x40>
 8002350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
 8002358:	e7c8      	b.n	80022ec <HAL_TIM_PWM_Stop_DMA+0x40>
 800235a:	bf00      	nop
 800235c:	40010000 	.word	0x40010000
 8002360:	40010400 	.word	0x40010400

08002364 <HAL_TIM_OC_Stop_DMA>:
 8002364:	f7ff bfa2 	b.w	80022ac <HAL_TIM_PWM_Stop_DMA>

08002368 <HAL_TIM_IC_MspInit>:
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop

0800236c <HAL_TIM_IC_MspDeInit>:
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <HAL_TIM_IC_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 8002372:	6803      	ldr	r3, [r0, #0]
{
 8002374:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002376:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 800237a:	6a19      	ldr	r1, [r3, #32]
 800237c:	f241 1211 	movw	r2, #4369	; 0x1111
 8002380:	4211      	tst	r1, r2
{
 8002382:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8002384:	d108      	bne.n	8002398 <HAL_TIM_IC_DeInit+0x28>
 8002386:	6a19      	ldr	r1, [r3, #32]
 8002388:	f240 4244 	movw	r2, #1092	; 0x444
 800238c:	4211      	tst	r1, r2
 800238e:	d103      	bne.n	8002398 <HAL_TIM_IC_DeInit+0x28>
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_MspDeInit(htim);
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff ffe7 	bl	800236c <HAL_TIM_IC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800239e:	2000      	movs	r0, #0
 80023a0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80023a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	bf00      	nop

080023ac <HAL_TIM_IC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ac:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << Channel;
 80023ae:	2201      	movs	r2, #1
  TIMx->CCER &= ~tmp;
 80023b0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80023b2:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80023b6:	ea20 0001 	bic.w	r0, r0, r1
 80023ba:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	4311      	orrs	r1, r2
 80023c0:	6219      	str	r1, [r3, #32]
  __HAL_TIM_ENABLE(htim);  
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
} 
 80023ca:	2000      	movs	r0, #0
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <HAL_TIM_IC_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023d0:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << Channel;
 80023d2:	2001      	movs	r0, #1
  TIMx->CCER &= ~tmp;
 80023d4:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80023d6:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 80023da:	ea22 0201 	bic.w	r2, r2, r1
 80023de:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim); 
 80023e4:	6a19      	ldr	r1, [r3, #32]
 80023e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80023ea:	4211      	tst	r1, r2
 80023ec:	d108      	bne.n	8002400 <HAL_TIM_IC_Stop+0x30>
 80023ee:	6a19      	ldr	r1, [r3, #32]
 80023f0:	f240 4244 	movw	r2, #1092	; 0x444
 80023f4:	4211      	tst	r1, r2
 80023f6:	d103      	bne.n	8002400 <HAL_TIM_IC_Stop+0x30>
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	2000      	movs	r0, #0
 8002402:	4770      	bx	lr

08002404 <HAL_TIM_IC_Start_IT>:
  switch (Channel)
 8002404:	290c      	cmp	r1, #12
 8002406:	d82f      	bhi.n	8002468 <HAL_TIM_IC_Start_IT+0x64>
 8002408:	e8df f001 	tbb	[pc, r1]
 800240c:	2e2e2e28 	.word	0x2e2e2e28
 8002410:	2e2e2e22 	.word	0x2e2e2e22
 8002414:	2e2e2e1c 	.word	0x2e2e2e1c
 8002418:	07          	.byte	0x07
 8002419:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	f042 0210 	orr.w	r2, r2, #16
 8002422:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8002424:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002426:	2201      	movs	r2, #1
 8002428:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800242c:	ea20 0001 	bic.w	r0, r0, r1
 8002430:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002432:	6a1a      	ldr	r2, [r3, #32]
 8002434:	4311      	orrs	r1, r2
 8002436:	6219      	str	r1, [r3, #32]
  __HAL_TIM_ENABLE(htim);  
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
} 
 8002440:	2000      	movs	r0, #0
 8002442:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002444:	6803      	ldr	r3, [r0, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	f042 0208 	orr.w	r2, r2, #8
 800244c:	60da      	str	r2, [r3, #12]
    break;
 800244e:	e7e9      	b.n	8002424 <HAL_TIM_IC_Start_IT+0x20>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002450:	6803      	ldr	r3, [r0, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	f042 0204 	orr.w	r2, r2, #4
 8002458:	60da      	str	r2, [r3, #12]
    break;
 800245a:	e7e3      	b.n	8002424 <HAL_TIM_IC_Start_IT+0x20>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800245c:	6803      	ldr	r3, [r0, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	f042 0202 	orr.w	r2, r2, #2
 8002464:	60da      	str	r2, [r3, #12]
    break;
 8002466:	e7dd      	b.n	8002424 <HAL_TIM_IC_Start_IT+0x20>
 8002468:	6803      	ldr	r3, [r0, #0]
 800246a:	e7db      	b.n	8002424 <HAL_TIM_IC_Start_IT+0x20>

0800246c <HAL_TIM_IC_Stop_IT>:
  switch (Channel)
 800246c:	290c      	cmp	r1, #12
 800246e:	d838      	bhi.n	80024e2 <HAL_TIM_IC_Stop_IT+0x76>
 8002470:	e8df f001 	tbb	[pc, r1]
 8002474:	37373731 	.word	0x37373731
 8002478:	3737372b 	.word	0x3737372b
 800247c:	37373725 	.word	0x37373725
 8002480:	07          	.byte	0x07
 8002481:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002482:	6803      	ldr	r3, [r0, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	f022 0210 	bic.w	r2, r2, #16
 800248a:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 800248c:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800248e:	2001      	movs	r0, #1
 8002490:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 8002494:	ea22 0101 	bic.w	r1, r2, r1
 8002498:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim); 
 800249e:	6a19      	ldr	r1, [r3, #32]
 80024a0:	f241 1211 	movw	r2, #4369	; 0x1111
 80024a4:	4211      	tst	r1, r2
 80024a6:	d108      	bne.n	80024ba <HAL_TIM_IC_Stop_IT+0x4e>
 80024a8:	6a19      	ldr	r1, [r3, #32]
 80024aa:	f240 4244 	movw	r2, #1092	; 0x444
 80024ae:	4211      	tst	r1, r2
 80024b0:	d103      	bne.n	80024ba <HAL_TIM_IC_Stop_IT+0x4e>
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
}
 80024ba:	2000      	movs	r0, #0
 80024bc:	4770      	bx	lr
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	f022 0208 	bic.w	r2, r2, #8
 80024c6:	60da      	str	r2, [r3, #12]
    break;
 80024c8:	e7e0      	b.n	800248c <HAL_TIM_IC_Stop_IT+0x20>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80024ca:	6803      	ldr	r3, [r0, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	f022 0204 	bic.w	r2, r2, #4
 80024d2:	60da      	str	r2, [r3, #12]
    break;
 80024d4:	e7da      	b.n	800248c <HAL_TIM_IC_Stop_IT+0x20>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80024d6:	6803      	ldr	r3, [r0, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	f022 0202 	bic.w	r2, r2, #2
 80024de:	60da      	str	r2, [r3, #12]
    break;
 80024e0:	e7d4      	b.n	800248c <HAL_TIM_IC_Stop_IT+0x20>
 80024e2:	6803      	ldr	r3, [r0, #0]
 80024e4:	e7d2      	b.n	800248c <HAL_TIM_IC_Stop_IT+0x20>
 80024e6:	bf00      	nop

080024e8 <HAL_TIM_IC_Start_DMA>:
{
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 80024ea:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80024ee:	b2e4      	uxtb	r4, r4
 80024f0:	2c02      	cmp	r4, #2
 80024f2:	d012      	beq.n	800251a <HAL_TIM_IC_Start_DMA+0x32>
  else if((htim->State == HAL_TIM_STATE_READY))
 80024f4:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80024f8:	b2e4      	uxtb	r4, r4
 80024fa:	2c01      	cmp	r4, #1
 80024fc:	d00f      	beq.n	800251e <HAL_TIM_IC_Start_DMA+0x36>
 80024fe:	460d      	mov	r5, r1
 8002500:	4604      	mov	r4, r0
  switch (Channel)
 8002502:	2d0c      	cmp	r5, #12
 8002504:	d85c      	bhi.n	80025c0 <HAL_TIM_IC_Start_DMA+0xd8>
 8002506:	e8df f005 	tbb	[pc, r5]
 800250a:	5b10      	.short	0x5b10
 800250c:	5b2e5b5b 	.word	0x5b2e5b5b
 8002510:	5b3d5b5b 	.word	0x5b3d5b5b
 8002514:	5b5b      	.short	0x5b5b
 8002516:	4c          	.byte	0x4c
 8002517:	00          	.byte	0x00
    if((pData == 0U) && (Length > 0U)) 
 8002518:	b11b      	cbz	r3, 8002522 <HAL_TIM_IC_Start_DMA+0x3a>
      return HAL_ERROR;                                    
 800251a:	4620      	mov	r0, r4
}
 800251c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == 0U) && (Length > 0U)) 
 800251e:	2a00      	cmp	r2, #0
 8002520:	d0fa      	beq.n	8002518 <HAL_TIM_IC_Start_DMA+0x30>
      htim->State = HAL_TIM_STATE_BUSY;
 8002522:	2402      	movs	r4, #2
 8002524:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8002528:	e7e9      	b.n	80024fe <HAL_TIM_IC_Start_DMA+0x16>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length); 
 800252a:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800252c:	6a00      	ldr	r0, [r0, #32]
 800252e:	4f25      	ldr	r7, [pc, #148]	; (80025c4 <HAL_TIM_IC_Start_DMA+0xdc>)
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002530:	4e25      	ldr	r6, [pc, #148]	; (80025c8 <HAL_TIM_IC_Start_DMA+0xe0>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002532:	63c7      	str	r7, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002534:	64c6      	str	r6, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length); 
 8002536:	3134      	adds	r1, #52	; 0x34
 8002538:	f003 f968 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	68c3      	ldr	r3, [r0, #12]
 8002540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002544:	60c3      	str	r3, [r0, #12]
  TIMx->CCER &= ~tmp;
 8002546:	6a02      	ldr	r2, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002548:	2301      	movs	r3, #1
 800254a:	fa03 f105 	lsl.w	r1, r3, r5
  TIMx->CCER &= ~tmp;
 800254e:	ea22 0201 	bic.w	r2, r2, r1
 8002552:	6202      	str	r2, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002554:	6a03      	ldr	r3, [r0, #32]
 8002556:	4319      	orrs	r1, r3
 8002558:	6201      	str	r1, [r0, #32]
  __HAL_TIM_ENABLE(htim); 
 800255a:	6803      	ldr	r3, [r0, #0]
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6003      	str	r3, [r0, #0]
  return HAL_OK;
 8002562:	2000      	movs	r0, #0
 8002564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8002566:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002568:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800256a:	4f16      	ldr	r7, [pc, #88]	; (80025c4 <HAL_TIM_IC_Start_DMA+0xdc>)
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800256c:	4e16      	ldr	r6, [pc, #88]	; (80025c8 <HAL_TIM_IC_Start_DMA+0xe0>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800256e:	63c7      	str	r7, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002570:	64c6      	str	r6, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8002572:	3138      	adds	r1, #56	; 0x38
 8002574:	f003 f94a 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002578:	6820      	ldr	r0, [r4, #0]
 800257a:	68c3      	ldr	r3, [r0, #12]
 800257c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002580:	60c3      	str	r3, [r0, #12]
    break;
 8002582:	e7e0      	b.n	8002546 <HAL_TIM_IC_Start_DMA+0x5e>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8002584:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002586:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002588:	4f0e      	ldr	r7, [pc, #56]	; (80025c4 <HAL_TIM_IC_Start_DMA+0xdc>)
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800258a:	4e0f      	ldr	r6, [pc, #60]	; (80025c8 <HAL_TIM_IC_Start_DMA+0xe0>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800258c:	63c7      	str	r7, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800258e:	64c6      	str	r6, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8002590:	313c      	adds	r1, #60	; 0x3c
 8002592:	f003 f93b 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002596:	6820      	ldr	r0, [r4, #0]
 8002598:	68c3      	ldr	r3, [r0, #12]
 800259a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800259e:	60c3      	str	r3, [r0, #12]
    break;
 80025a0:	e7d1      	b.n	8002546 <HAL_TIM_IC_Start_DMA+0x5e>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 80025a2:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80025a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80025a6:	4f07      	ldr	r7, [pc, #28]	; (80025c4 <HAL_TIM_IC_Start_DMA+0xdc>)
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80025a8:	4e07      	ldr	r6, [pc, #28]	; (80025c8 <HAL_TIM_IC_Start_DMA+0xe0>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80025aa:	63c7      	str	r7, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80025ac:	64c6      	str	r6, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 80025ae:	3140      	adds	r1, #64	; 0x40
 80025b0:	f003 f92c 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	68c3      	ldr	r3, [r0, #12]
 80025b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025bc:	60c3      	str	r3, [r0, #12]
    break;
 80025be:	e7c2      	b.n	8002546 <HAL_TIM_IC_Start_DMA+0x5e>
 80025c0:	6800      	ldr	r0, [r0, #0]
 80025c2:	e7c0      	b.n	8002546 <HAL_TIM_IC_Start_DMA+0x5e>
 80025c4:	0800318d 	.word	0x0800318d
 80025c8:	08003395 	.word	0x08003395

080025cc <HAL_TIM_IC_Stop_DMA>:
{
 80025cc:	b410      	push	{r4}
  switch (Channel)
 80025ce:	290c      	cmp	r1, #12
 80025d0:	d83d      	bhi.n	800264e <HAL_TIM_IC_Stop_DMA+0x82>
 80025d2:	e8df f001 	tbb	[pc, r1]
 80025d6:	3c36      	.short	0x3c36
 80025d8:	3c303c3c 	.word	0x3c303c3c
 80025dc:	3c2a3c3c 	.word	0x3c2a3c3c
 80025e0:	3c3c      	.short	0x3c3c
 80025e2:	07          	.byte	0x07
 80025e3:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80025e4:	6803      	ldr	r3, [r0, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025ec:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80025ee:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80025f0:	2401      	movs	r4, #1
 80025f2:	fa04 f101 	lsl.w	r1, r4, r1
  TIMx->CCER &= ~tmp;
 80025f6:	ea22 0101 	bic.w	r1, r2, r1
 80025fa:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim); 
 8002600:	6a19      	ldr	r1, [r3, #32]
 8002602:	f241 1211 	movw	r2, #4369	; 0x1111
 8002606:	4211      	tst	r1, r2
 8002608:	d108      	bne.n	800261c <HAL_TIM_IC_Stop_DMA+0x50>
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	f240 4244 	movw	r2, #1092	; 0x444
 8002610:	4211      	tst	r1, r2
 8002612:	d103      	bne.n	800261c <HAL_TIM_IC_Stop_DMA+0x50>
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800261c:	2301      	movs	r3, #1
 800261e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}  
 8002622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002626:	2000      	movs	r0, #0
 8002628:	4770      	bx	lr
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800262a:	6803      	ldr	r3, [r0, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002632:	60da      	str	r2, [r3, #12]
    break;
 8002634:	e7db      	b.n	80025ee <HAL_TIM_IC_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263e:	60da      	str	r2, [r3, #12]
    break;
 8002640:	e7d5      	b.n	80025ee <HAL_TIM_IC_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002642:	6803      	ldr	r3, [r0, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800264a:	60da      	str	r2, [r3, #12]
    break;
 800264c:	e7cf      	b.n	80025ee <HAL_TIM_IC_Stop_DMA+0x22>
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	e7cd      	b.n	80025ee <HAL_TIM_IC_Stop_DMA+0x22>
 8002652:	bf00      	nop

08002654 <HAL_TIM_OnePulse_MspInit>:
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <HAL_TIM_OnePulse_MspDeInit>:
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop

0800265c <HAL_TIM_OnePulse_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 800265e:	6803      	ldr	r3, [r0, #0]
{
 8002660:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002662:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8002666:	6a19      	ldr	r1, [r3, #32]
 8002668:	f241 1211 	movw	r2, #4369	; 0x1111
 800266c:	4211      	tst	r1, r2
{
 800266e:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8002670:	d108      	bne.n	8002684 <HAL_TIM_OnePulse_DeInit+0x28>
 8002672:	6a19      	ldr	r1, [r3, #32]
 8002674:	f240 4244 	movw	r2, #1092	; 0x444
 8002678:	4211      	tst	r1, r2
 800267a:	d103      	bne.n	8002684 <HAL_TIM_OnePulse_DeInit+0x28>
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
  HAL_TIM_OnePulse_MspDeInit(htim);
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff ffe7 	bl	8002658 <HAL_TIM_OnePulse_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800268a:	2000      	movs	r0, #0
 800268c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002690:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002694:	bd10      	pop	{r4, pc}
 8002696:	bf00      	nop

08002698 <HAL_TIM_OnePulse_Start>:
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 8002698:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800269a:	490f      	ldr	r1, [pc, #60]	; (80026d8 <HAL_TIM_OnePulse_Start+0x40>)
  TIMx->CCER &= ~tmp;
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026a4:	6a1a      	ldr	r2, [r3, #32]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	f022 0210 	bic.w	r2, r2, #16
 80026b2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026b4:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80026b6:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026b8:	f042 0210 	orr.w	r2, r2, #16
 80026bc:	621a      	str	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80026be:	d004      	beq.n	80026ca <HAL_TIM_OnePulse_Start+0x32>
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <HAL_TIM_OnePulse_Start+0x44>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d001      	beq.n	80026ca <HAL_TIM_OnePulse_Start+0x32>
}
 80026c6:	2000      	movs	r0, #0
 80026c8:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80026ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
}
 80026d2:	2000      	movs	r0, #0
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_TIM_OnePulse_Stop>:
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 80026e0:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80026e2:	4918      	ldr	r1, [pc, #96]	; (8002744 <HAL_TIM_OnePulse_Stop+0x64>)
  TIMx->CCER &= ~tmp;
 80026e4:	6a1a      	ldr	r2, [r3, #32]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	f022 0210 	bic.w	r2, r2, #16
 80026f6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	621a      	str	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d012      	beq.n	8002726 <HAL_TIM_OnePulse_Stop+0x46>
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_TIM_OnePulse_Stop+0x68>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00f      	beq.n	8002726 <HAL_TIM_OnePulse_Stop+0x46>
  __HAL_TIM_DISABLE(htim); 
 8002706:	6a19      	ldr	r1, [r3, #32]
 8002708:	f241 1211 	movw	r2, #4369	; 0x1111
 800270c:	4211      	tst	r1, r2
 800270e:	d108      	bne.n	8002722 <HAL_TIM_OnePulse_Stop+0x42>
 8002710:	6a19      	ldr	r1, [r3, #32]
 8002712:	f240 4244 	movw	r2, #1092	; 0x444
 8002716:	4211      	tst	r1, r2
 8002718:	d103      	bne.n	8002722 <HAL_TIM_OnePulse_Stop+0x42>
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
}
 8002722:	2000      	movs	r0, #0
 8002724:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8002726:	6a19      	ldr	r1, [r3, #32]
 8002728:	f241 1211 	movw	r2, #4369	; 0x1111
 800272c:	4211      	tst	r1, r2
 800272e:	d1ea      	bne.n	8002706 <HAL_TIM_OnePulse_Stop+0x26>
 8002730:	6a19      	ldr	r1, [r3, #32]
 8002732:	f240 4244 	movw	r2, #1092	; 0x444
 8002736:	4211      	tst	r1, r2
 8002738:	d1e5      	bne.n	8002706 <HAL_TIM_OnePulse_Stop+0x26>
 800273a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
 8002742:	e7e0      	b.n	8002706 <HAL_TIM_OnePulse_Stop+0x26>
 8002744:	40010000 	.word	0x40010000
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_TIM_OnePulse_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800274c:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800274e:	4913      	ldr	r1, [pc, #76]	; (800279c <HAL_TIM_OnePulse_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	f042 0204 	orr.w	r2, r2, #4
 800275e:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002768:	6a1a      	ldr	r2, [r3, #32]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	f022 0210 	bic.w	r2, r2, #16
 8002776:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002778:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800277a:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800277c:	f042 0210 	orr.w	r2, r2, #16
 8002780:	621a      	str	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002782:	d004      	beq.n	800278e <HAL_TIM_OnePulse_Start_IT+0x42>
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <HAL_TIM_OnePulse_Start_IT+0x54>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d001      	beq.n	800278e <HAL_TIM_OnePulse_Start_IT+0x42>
}
 800278a:	2000      	movs	r0, #0
 800278c:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 800278e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002796:	2000      	movs	r0, #0
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40010000 	.word	0x40010000
 80027a0:	40010400 	.word	0x40010400

080027a4 <HAL_TIM_OnePulse_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  
 80027a4:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80027a6:	491c      	ldr	r1, [pc, #112]	; (8002818 <HAL_TIM_OnePulse_Stop_IT+0x74>)
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	f022 0202 	bic.w	r2, r2, #2
 80027ae:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	f022 0204 	bic.w	r2, r2, #4
 80027b6:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80027b8:	6a1a      	ldr	r2, [r3, #32]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80027c0:	6a1a      	ldr	r2, [r3, #32]
 80027c2:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	f022 0210 	bic.w	r2, r2, #16
 80027ca:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80027cc:	6a1a      	ldr	r2, [r3, #32]
 80027ce:	621a      	str	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d012      	beq.n	80027fa <HAL_TIM_OnePulse_Stop_IT+0x56>
 80027d4:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_TIM_OnePulse_Stop_IT+0x78>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00f      	beq.n	80027fa <HAL_TIM_OnePulse_Stop_IT+0x56>
   __HAL_TIM_DISABLE(htim);  
 80027da:	6a19      	ldr	r1, [r3, #32]
 80027dc:	f241 1211 	movw	r2, #4369	; 0x1111
 80027e0:	4211      	tst	r1, r2
 80027e2:	d108      	bne.n	80027f6 <HAL_TIM_OnePulse_Stop_IT+0x52>
 80027e4:	6a19      	ldr	r1, [r3, #32]
 80027e6:	f240 4244 	movw	r2, #1092	; 0x444
 80027ea:	4211      	tst	r1, r2
 80027ec:	d103      	bne.n	80027f6 <HAL_TIM_OnePulse_Stop_IT+0x52>
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	2000      	movs	r0, #0
 80027f8:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 80027fa:	6a19      	ldr	r1, [r3, #32]
 80027fc:	f241 1211 	movw	r2, #4369	; 0x1111
 8002800:	4211      	tst	r1, r2
 8002802:	d1ea      	bne.n	80027da <HAL_TIM_OnePulse_Stop_IT+0x36>
 8002804:	6a19      	ldr	r1, [r3, #32]
 8002806:	f240 4244 	movw	r2, #1092	; 0x444
 800280a:	4211      	tst	r1, r2
 800280c:	d1e5      	bne.n	80027da <HAL_TIM_OnePulse_Stop_IT+0x36>
 800280e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
 8002816:	e7e0      	b.n	80027da <HAL_TIM_OnePulse_Stop_IT+0x36>
 8002818:	40010000 	.word	0x40010000
 800281c:	40010400 	.word	0x40010400

08002820 <HAL_TIM_Encoder_MspInit>:
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop

08002824 <HAL_TIM_Encoder_MspDeInit>:
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <HAL_TIM_Encoder_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 800282a:	6803      	ldr	r3, [r0, #0]
{
 800282c:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 800282e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8002832:	6a19      	ldr	r1, [r3, #32]
 8002834:	f241 1211 	movw	r2, #4369	; 0x1111
 8002838:	4211      	tst	r1, r2
{
 800283a:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 800283c:	d108      	bne.n	8002850 <HAL_TIM_Encoder_DeInit+0x28>
 800283e:	6a19      	ldr	r1, [r3, #32]
 8002840:	f240 4244 	movw	r2, #1092	; 0x444
 8002844:	4211      	tst	r1, r2
 8002846:	d103      	bne.n	8002850 <HAL_TIM_Encoder_DeInit+0x28>
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_MspDeInit(htim);
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff ffe7 	bl	8002824 <HAL_TIM_Encoder_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8002856:	2000      	movs	r0, #0
 8002858:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800285c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002860:	bd10      	pop	{r4, pc}
 8002862:	bf00      	nop

08002864 <HAL_TIM_Encoder_Start>:
  switch (Channel)
 8002864:	b1d1      	cbz	r1, 800289c <HAL_TIM_Encoder_Start+0x38>
 8002866:	2904      	cmp	r1, #4
 8002868:	d016      	beq.n	8002898 <HAL_TIM_Encoder_Start+0x34>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800286a:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	f022 0210 	bic.w	r2, r2, #16
 8002882:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002884:	6a1a      	ldr	r2, [r3, #32]
 8002886:	f042 0210 	orr.w	r2, r2, #16
 800288a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	2000      	movs	r0, #0
 8002896:	4770      	bx	lr
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8002898:	6803      	ldr	r3, [r0, #0]
 800289a:	e7ef      	b.n	800287c <HAL_TIM_Encoder_Start+0x18>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800289c:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80028a6:	6a1a      	ldr	r2, [r3, #32]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	621a      	str	r2, [r3, #32]
 80028ae:	e7ed      	b.n	800288c <HAL_TIM_Encoder_Start+0x28>

080028b0 <HAL_TIM_Encoder_Stop>:
  switch (Channel)
 80028b0:	b301      	cbz	r1, 80028f4 <HAL_TIM_Encoder_Stop+0x44>
 80028b2:	2904      	cmp	r1, #4
 80028b4:	d01c      	beq.n	80028f0 <HAL_TIM_Encoder_Stop+0x40>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80028b6:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80028c4:	6a1a      	ldr	r2, [r3, #32]
 80028c6:	f022 0210 	bic.w	r2, r2, #16
 80028ca:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 80028d0:	6a19      	ldr	r1, [r3, #32]
 80028d2:	f241 1211 	movw	r2, #4369	; 0x1111
 80028d6:	4211      	tst	r1, r2
 80028d8:	d108      	bne.n	80028ec <HAL_TIM_Encoder_Stop+0x3c>
 80028da:	6a19      	ldr	r1, [r3, #32]
 80028dc:	f240 4244 	movw	r2, #1092	; 0x444
 80028e0:	4211      	tst	r1, r2
 80028e2:	d103      	bne.n	80028ec <HAL_TIM_Encoder_Stop+0x3c>
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
}
 80028ec:	2000      	movs	r0, #0
 80028ee:	4770      	bx	lr
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 80028f0:	6803      	ldr	r3, [r0, #0]
 80028f2:	e7e7      	b.n	80028c4 <HAL_TIM_Encoder_Stop+0x14>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80028f4:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	621a      	str	r2, [r3, #32]
 8002902:	e7e5      	b.n	80028d0 <HAL_TIM_Encoder_Stop+0x20>

08002904 <HAL_TIM_Encoder_Start_IT>:
  switch (Channel)
 8002904:	2900      	cmp	r1, #0
 8002906:	d02e      	beq.n	8002966 <HAL_TIM_Encoder_Start_IT+0x62>
 8002908:	2904      	cmp	r1, #4
 800290a:	d01e      	beq.n	800294a <HAL_TIM_Encoder_Start_IT+0x46>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800290c:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800290e:	6a1a      	ldr	r2, [r3, #32]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800291e:	6a1a      	ldr	r2, [r3, #32]
 8002920:	f022 0210 	bic.w	r2, r2, #16
 8002924:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	f042 0210 	orr.w	r2, r2, #16
 800292c:	621a      	str	r2, [r3, #32]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	f042 0202 	orr.w	r2, r2, #2
 8002934:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	f042 0204 	orr.w	r2, r2, #4
 800293c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	2000      	movs	r0, #0
 8002948:	4770      	bx	lr
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800294a:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	f022 0210 	bic.w	r2, r2, #16
 8002952:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002954:	6a1a      	ldr	r2, [r3, #32]
 8002956:	f042 0210 	orr.w	r2, r2, #16
 800295a:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	f042 0204 	orr.w	r2, r2, #4
 8002962:	60da      	str	r2, [r3, #12]
      break;
 8002964:	e7eb      	b.n	800293e <HAL_TIM_Encoder_Start_IT+0x3a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002966:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	f042 0202 	orr.w	r2, r2, #2
 800297e:	60da      	str	r2, [r3, #12]
      break; 
 8002980:	e7dd      	b.n	800293e <HAL_TIM_Encoder_Start_IT+0x3a>
 8002982:	bf00      	nop

08002984 <HAL_TIM_Encoder_Stop_IT>:
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8002984:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8002986:	6a1a      	ldr	r2, [r3, #32]
  if(Channel == TIM_CHANNEL_1)
 8002988:	b9d9      	cbnz	r1, 80029c2 <HAL_TIM_Encoder_Stop_IT+0x3e>
  TIMx->CCER &= ~tmp;
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	f022 0202 	bic.w	r2, r2, #2
 800299a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800299c:	6a19      	ldr	r1, [r3, #32]
 800299e:	f241 1211 	movw	r2, #4369	; 0x1111
 80029a2:	4211      	tst	r1, r2
 80029a4:	d108      	bne.n	80029b8 <HAL_TIM_Encoder_Stop_IT+0x34>
 80029a6:	6a19      	ldr	r1, [r3, #32]
 80029a8:	f240 4244 	movw	r2, #1092	; 0x444
 80029ac:	4211      	tst	r1, r2
 80029ae:	d103      	bne.n	80029b8 <HAL_TIM_Encoder_Stop_IT+0x34>
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 80029be:	2000      	movs	r0, #0
 80029c0:	4770      	bx	lr
  else if(Channel == TIM_CHANNEL_2)
 80029c2:	2904      	cmp	r1, #4
 80029c4:	d013      	beq.n	80029ee <HAL_TIM_Encoder_Stop_IT+0x6a>
  TIMx->CCER &= ~tmp;
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80029d0:	6a1a      	ldr	r2, [r3, #32]
 80029d2:	f022 0210 	bic.w	r2, r2, #16
 80029d6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	f022 0202 	bic.w	r2, r2, #2
 80029e2:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	60da      	str	r2, [r3, #12]
 80029ec:	e7d6      	b.n	800299c <HAL_TIM_Encoder_Stop_IT+0x18>
  TIMx->CCER &= ~tmp;
 80029ee:	f022 0210 	bic.w	r2, r2, #16
 80029f2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	e7cc      	b.n	800299c <HAL_TIM_Encoder_Stop_IT+0x18>
 8002a02:	bf00      	nop

08002a04 <HAL_TIM_Encoder_Start_DMA>:
{
 8002a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8002a08:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
{
 8002a0c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  if((htim->State == HAL_TIM_STATE_BUSY))
 8002a10:	b2e4      	uxtb	r4, r4
 8002a12:	2c02      	cmp	r4, #2
 8002a14:	d00f      	beq.n	8002a36 <HAL_TIM_Encoder_Start_DMA+0x32>
  else if((htim->State == HAL_TIM_STATE_READY))
 8002a16:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8002a1a:	2c01      	cmp	r4, #1
 8002a1c:	d00e      	beq.n	8002a3c <HAL_TIM_Encoder_Start_DMA+0x38>
  switch (Channel)
 8002a1e:	2904      	cmp	r1, #4
 8002a20:	461f      	mov	r7, r3
 8002a22:	460c      	mov	r4, r1
 8002a24:	4605      	mov	r5, r0
 8002a26:	d015      	beq.n	8002a54 <HAL_TIM_Encoder_Start_DMA+0x50>
 8002a28:	2918      	cmp	r1, #24
 8002a2a:	d050      	beq.n	8002ace <HAL_TIM_Encoder_Start_DMA+0xca>
 8002a2c:	2900      	cmp	r1, #0
 8002a2e:	d030      	beq.n	8002a92 <HAL_TIM_Encoder_Start_DMA+0x8e>
  return HAL_OK;
 8002a30:	2000      	movs	r0, #0
}
 8002a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     return HAL_BUSY;
 8002a36:	4620      	mov	r0, r4
 8002a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U)) 
 8002a3c:	2a00      	cmp	r2, #0
 8002a3e:	d07c      	beq.n	8002b3a <HAL_TIM_Encoder_Start_DMA+0x136>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d07a      	beq.n	8002b3a <HAL_TIM_Encoder_Start_DMA+0x136>
      htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	2402      	movs	r4, #2
  switch (Channel)
 8002a46:	2904      	cmp	r1, #4
      htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8002a4c:	461f      	mov	r7, r3
 8002a4e:	460c      	mov	r4, r1
 8002a50:	4605      	mov	r5, r0
  switch (Channel)
 8002a52:	d1e9      	bne.n	8002a28 <HAL_TIM_Encoder_Start_DMA+0x24>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8002a54:	6829      	ldr	r1, [r5, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002a56:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a58:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_TIM_Encoder_Start_DMA+0x140>)
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8002a5a:	4c3b      	ldr	r4, [pc, #236]	; (8002b48 <HAL_TIM_Encoder_Start_DMA+0x144>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002a5c:	63c3      	str	r3, [r0, #60]	; 0x3c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8002a5e:	463a      	mov	r2, r7
 8002a60:	4633      	mov	r3, r6
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8002a62:	64c4      	str	r4, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8002a64:	3138      	adds	r1, #56	; 0x38
 8002a66:	f002 fed1 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a72:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	f022 0210 	bic.w	r2, r2, #16
 8002a82:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	f042 0210 	orr.w	r2, r2, #16
 8002a8a:	621a      	str	r2, [r3, #32]
  return HAL_OK;
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length); 
 8002a92:	6829      	ldr	r1, [r5, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002a94:	6a00      	ldr	r0, [r0, #32]
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_TIM_Encoder_Start_DMA+0x140>)
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002a98:	4f2b      	ldr	r7, [pc, #172]	; (8002b48 <HAL_TIM_Encoder_Start_DMA+0x144>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002a9a:	63c3      	str	r3, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002a9c:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length); 
 8002a9e:	4633      	mov	r3, r6
 8002aa0:	3134      	adds	r1, #52	; 0x34
 8002aa2:	f002 feb3 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002aa6:	682b      	ldr	r3, [r5, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002ac0:	6a1a      	ldr	r2, [r3, #32]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8002ac6:	4620      	mov	r0, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002ac8:	621a      	str	r2, [r3, #32]
 8002aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 8002ace:	6829      	ldr	r1, [r5, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002ad0:	6a00      	ldr	r0, [r0, #32]
 8002ad2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002b44 <HAL_TIM_Encoder_Start_DMA+0x140>
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002ad6:	4c1c      	ldr	r4, [pc, #112]	; (8002b48 <HAL_TIM_Encoder_Start_DMA+0x144>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002ad8:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 8002adc:	4633      	mov	r3, r6
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002ade:	64c4      	str	r4, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 8002ae0:	3134      	adds	r1, #52	; 0x34
 8002ae2:	f002 fe93 	bl	800580c <HAL_DMA_Start_IT>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8002ae6:	6829      	ldr	r1, [r5, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002ae8:	6a68      	ldr	r0, [r5, #36]	; 0x24
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8002aea:	4633      	mov	r3, r6
 8002aec:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002aee:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002af2:	64c4      	str	r4, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8002af4:	3138      	adds	r1, #56	; 0x38
 8002af6:	f002 fe89 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE(htim);
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002b0c:	6a1a      	ldr	r2, [r3, #32]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	f022 0210 	bic.w	r2, r2, #16
 8002b1a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002b1c:	6a1a      	ldr	r2, [r3, #32]
 8002b1e:	f042 0210 	orr.w	r2, r2, #16
 8002b22:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b32:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8002b34:	2000      	movs	r0, #0
    break;
 8002b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U)) 
 8002b3a:	2e00      	cmp	r6, #0
 8002b3c:	d082      	beq.n	8002a44 <HAL_TIM_Encoder_Start_DMA+0x40>
      return HAL_ERROR;                                    
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b44:	0800318d 	.word	0x0800318d
 8002b48:	08003395 	.word	0x08003395

08002b4c <HAL_TIM_Encoder_Stop_DMA>:
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8002b4c:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
  if(Channel == TIM_CHANNEL_1)
 8002b50:	b9d9      	cbnz	r1, 8002b8a <HAL_TIM_Encoder_Stop_DMA+0x3e>
  TIMx->CCER &= ~tmp;
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002b58:	6a1a      	ldr	r2, [r3, #32]
 8002b5a:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b62:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8002b64:	6a19      	ldr	r1, [r3, #32]
 8002b66:	f241 1211 	movw	r2, #4369	; 0x1111
 8002b6a:	4211      	tst	r1, r2
 8002b6c:	d108      	bne.n	8002b80 <HAL_TIM_Encoder_Stop_DMA+0x34>
 8002b6e:	6a19      	ldr	r1, [r3, #32]
 8002b70:	f240 4244 	movw	r2, #1092	; 0x444
 8002b74:	4211      	tst	r1, r2
 8002b76:	d103      	bne.n	8002b80 <HAL_TIM_Encoder_Stop_DMA+0x34>
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8002b86:	2000      	movs	r0, #0
 8002b88:	4770      	bx	lr
  else if(Channel == TIM_CHANNEL_2)
 8002b8a:	2904      	cmp	r1, #4
 8002b8c:	d013      	beq.n	8002bb6 <HAL_TIM_Encoder_Stop_DMA+0x6a>
  TIMx->CCER &= ~tmp;
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	f022 0210 	bic.w	r2, r2, #16
 8002b9e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002baa:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	e7d6      	b.n	8002b64 <HAL_TIM_Encoder_Stop_DMA+0x18>
  TIMx->CCER &= ~tmp;
 8002bb6:	f022 0210 	bic.w	r2, r2, #16
 8002bba:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002bbc:	6a1a      	ldr	r2, [r3, #32]
 8002bbe:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	e7cc      	b.n	8002b64 <HAL_TIM_Encoder_Stop_DMA+0x18>
 8002bca:	bf00      	nop

08002bcc <HAL_TIM_DMABurst_WriteStart>:
{
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8002bce:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
{
 8002bd2:	9d06      	ldr	r5, [sp, #24]
  if((htim->State == HAL_TIM_STATE_BUSY))
 8002bd4:	b2e4      	uxtb	r4, r4
 8002bd6:	2c02      	cmp	r4, #2
 8002bd8:	d019      	beq.n	8002c0e <HAL_TIM_DMABurst_WriteStart+0x42>
  else if((htim->State == HAL_TIM_STATE_READY))
 8002bda:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8002bde:	b2e4      	uxtb	r4, r4
 8002be0:	2c01      	cmp	r4, #1
 8002be2:	d02a      	beq.n	8002c3a <HAL_TIM_DMABurst_WriteStart+0x6e>
  switch(BurstRequestSrc)
 8002be4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002be8:	4616      	mov	r6, r2
 8002bea:	460f      	mov	r7, r1
 8002bec:	4604      	mov	r4, r0
 8002bee:	d02f      	beq.n	8002c50 <HAL_TIM_DMABurst_WriteStart+0x84>
 8002bf0:	d80f      	bhi.n	8002c12 <HAL_TIM_DMABurst_WriteStart+0x46>
 8002bf2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002bf6:	d040      	beq.n	8002c7a <HAL_TIM_DMABurst_WriteStart+0xae>
 8002bf8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002bfc:	d041      	beq.n	8002c82 <HAL_TIM_DMABurst_WriteStart+0xb6>
 8002bfe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002c02:	d10f      	bne.n	8002c24 <HAL_TIM_DMABurst_WriteStart+0x58>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8002c04:	69c0      	ldr	r0, [r0, #28]
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U); 
 8002c06:	6822      	ldr	r2, [r4, #0]
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8002c08:	4924      	ldr	r1, [pc, #144]	; (8002c9c <HAL_TIM_DMABurst_WriteStart+0xd0>)
 8002c0a:	e024      	b.n	8002c56 <HAL_TIM_DMABurst_WriteStart+0x8a>
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 8002c0c:	b1bd      	cbz	r5, 8002c3e <HAL_TIM_DMABurst_WriteStart+0x72>
      return HAL_ERROR;                                    
 8002c0e:	4620      	mov	r0, r4
}
 8002c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch(BurstRequestSrc)
 8002c12:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002c16:	d02c      	beq.n	8002c72 <HAL_TIM_DMABurst_WriteStart+0xa6>
 8002c18:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002c1c:	d039      	beq.n	8002c92 <HAL_TIM_DMABurst_WriteStart+0xc6>
 8002c1e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002c22:	d032      	beq.n	8002c8a <HAL_TIM_DMABurst_WriteStart+0xbe>
   htim->Instance->DCR = BurstBaseAddress | BurstLength;  
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	433d      	orrs	r5, r7
 8002c28:	649d      	str	r5, [r3, #72]	; 0x48
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
 8002c2a:	68da      	ldr	r2, [r3, #12]
   htim->State = HAL_TIM_STATE_READY;
 8002c2c:	2101      	movs	r1, #1
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
 8002c2e:	4332      	orrs	r2, r6
 8002c30:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8002c32:	2000      	movs	r0, #0
   htim->State = HAL_TIM_STATE_READY;
 8002c34:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 8002c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0e6      	beq.n	8002c0c <HAL_TIM_DMABurst_WriteStart+0x40>
      htim->State = HAL_TIM_STATE_BUSY;
 8002c3e:	2402      	movs	r4, #2
  switch(BurstRequestSrc)
 8002c40:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
      htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8002c48:	4616      	mov	r6, r2
 8002c4a:	460f      	mov	r7, r1
 8002c4c:	4604      	mov	r4, r0
  switch(BurstRequestSrc)
 8002c4e:	d1cf      	bne.n	8002bf0 <HAL_TIM_DMABurst_WriteStart+0x24>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c50:	6a80      	ldr	r0, [r0, #40]	; 0x28
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002c52:	6822      	ldr	r2, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c54:	4912      	ldr	r1, [pc, #72]	; (8002ca0 <HAL_TIM_DMABurst_WriteStart+0xd4>)
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8002c56:	f8df c054 	ldr.w	ip, [pc, #84]	; 8002cac <HAL_TIM_DMABurst_WriteStart+0xe0>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002c5a:	63c1      	str	r1, [r0, #60]	; 0x3c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002c5c:	ea4f 2e15 	mov.w	lr, r5, lsr #8
 8002c60:	4619      	mov	r1, r3
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8002c62:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002c66:	324c      	adds	r2, #76	; 0x4c
 8002c68:	f10e 0301 	add.w	r3, lr, #1
 8002c6c:	f002 fdce 	bl	800580c <HAL_DMA_Start_IT>
    break;
 8002c70:	e7d8      	b.n	8002c24 <HAL_TIM_DMABurst_WriteStart+0x58>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8002c72:	6b00      	ldr	r0, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002c74:	6822      	ldr	r2, [r4, #0]
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8002c76:	490b      	ldr	r1, [pc, #44]	; (8002ca4 <HAL_TIM_DMABurst_WriteStart+0xd8>)
 8002c78:	e7ed      	b.n	8002c56 <HAL_TIM_DMABurst_WriteStart+0x8a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c7a:	6a00      	ldr	r0, [r0, #32]
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002c7c:	6822      	ldr	r2, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <HAL_TIM_DMABurst_WriteStart+0xd4>)
 8002c80:	e7e9      	b.n	8002c56 <HAL_TIM_DMABurst_WriteStart+0x8a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c82:	6a40      	ldr	r0, [r0, #36]	; 0x24
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002c84:	6822      	ldr	r2, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c86:	4906      	ldr	r1, [pc, #24]	; (8002ca0 <HAL_TIM_DMABurst_WriteStart+0xd4>)
 8002c88:	e7e5      	b.n	8002c56 <HAL_TIM_DMABurst_WriteStart+0x8a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c8a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002c8c:	6822      	ldr	r2, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_TIM_DMABurst_WriteStart+0xd4>)
 8002c90:	e7e1      	b.n	8002c56 <HAL_TIM_DMABurst_WriteStart+0x8a>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002c92:	6b40      	ldr	r0, [r0, #52]	; 0x34
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002c94:	6822      	ldr	r2, [r4, #0]
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002c96:	4904      	ldr	r1, [pc, #16]	; (8002ca8 <HAL_TIM_DMABurst_WriteStart+0xdc>)
 8002c98:	e7dd      	b.n	8002c56 <HAL_TIM_DMABurst_WriteStart+0x8a>
 8002c9a:	bf00      	nop
 8002c9c:	08003175 	.word	0x08003175
 8002ca0:	080031dd 	.word	0x080031dd
 8002ca4:	080042f1 	.word	0x080042f1
 8002ca8:	08003381 	.word	0x08003381
 8002cac:	08003395 	.word	0x08003395

08002cb0 <HAL_TIM_DMABurst_ReadStart>:
{
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8002cb2:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
{
 8002cb6:	9d06      	ldr	r5, [sp, #24]
  if((htim->State == HAL_TIM_STATE_BUSY))
 8002cb8:	b2e4      	uxtb	r4, r4
 8002cba:	2c02      	cmp	r4, #2
 8002cbc:	d019      	beq.n	8002cf2 <HAL_TIM_DMABurst_ReadStart+0x42>
  else if((htim->State == HAL_TIM_STATE_READY))
 8002cbe:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8002cc2:	b2e4      	uxtb	r4, r4
 8002cc4:	2c01      	cmp	r4, #1
 8002cc6:	d02a      	beq.n	8002d1e <HAL_TIM_DMABurst_ReadStart+0x6e>
  switch(BurstRequestSrc)
 8002cc8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002ccc:	4616      	mov	r6, r2
 8002cce:	460f      	mov	r7, r1
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	d02f      	beq.n	8002d34 <HAL_TIM_DMABurst_ReadStart+0x84>
 8002cd4:	d80f      	bhi.n	8002cf6 <HAL_TIM_DMABurst_ReadStart+0x46>
 8002cd6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002cda:	d040      	beq.n	8002d5e <HAL_TIM_DMABurst_ReadStart+0xae>
 8002cdc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ce0:	d041      	beq.n	8002d66 <HAL_TIM_DMABurst_ReadStart+0xb6>
 8002ce2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002ce6:	d10f      	bne.n	8002d08 <HAL_TIM_DMABurst_ReadStart+0x58>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8002ce8:	69c0      	ldr	r0, [r0, #28]
       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);     
 8002cea:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <HAL_TIM_DMABurst_ReadStart+0xd0>)
 8002cee:	e024      	b.n	8002d3a <HAL_TIM_DMABurst_ReadStart+0x8a>
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 8002cf0:	b1bd      	cbz	r5, 8002d22 <HAL_TIM_DMABurst_ReadStart+0x72>
      return HAL_ERROR;                                    
 8002cf2:	4620      	mov	r0, r4
}
 8002cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch(BurstRequestSrc)
 8002cf6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002cfa:	d02c      	beq.n	8002d56 <HAL_TIM_DMABurst_ReadStart+0xa6>
 8002cfc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002d00:	d039      	beq.n	8002d76 <HAL_TIM_DMABurst_ReadStart+0xc6>
 8002d02:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002d06:	d032      	beq.n	8002d6e <HAL_TIM_DMABurst_ReadStart+0xbe>
  htim->Instance->DCR = BurstBaseAddress | BurstLength;  
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	433d      	orrs	r5, r7
 8002d0c:	649d      	str	r5, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8002d0e:	68da      	ldr	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	2101      	movs	r1, #1
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8002d12:	4332      	orrs	r2, r6
 8002d14:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8002d16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 8002d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0e6      	beq.n	8002cf0 <HAL_TIM_DMABurst_ReadStart+0x40>
      htim->State = HAL_TIM_STATE_BUSY;
 8002d22:	2402      	movs	r4, #2
  switch(BurstRequestSrc)
 8002d24:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
      htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8002d2c:	4616      	mov	r6, r2
 8002d2e:	460f      	mov	r7, r1
 8002d30:	4604      	mov	r4, r0
  switch(BurstRequestSrc)
 8002d32:	d1cf      	bne.n	8002cd4 <HAL_TIM_DMABurst_ReadStart+0x24>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d34:	6a80      	ldr	r0, [r0, #40]	; 0x28
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 8002d36:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d38:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_TIM_DMABurst_ReadStart+0xd4>)
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8002d3a:	f8df c054 	ldr.w	ip, [pc, #84]	; 8002d90 <HAL_TIM_DMABurst_ReadStart+0xe0>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002d3e:	63c2      	str	r2, [r0, #60]	; 0x3c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
 8002d40:	ea4f 2e15 	mov.w	lr, r5, lsr #8
 8002d44:	461a      	mov	r2, r3
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8002d46:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
 8002d4a:	314c      	adds	r1, #76	; 0x4c
 8002d4c:	f10e 0301 	add.w	r3, lr, #1
 8002d50:	f002 fd5c 	bl	800580c <HAL_DMA_Start_IT>
    break;
 8002d54:	e7d8      	b.n	8002d08 <HAL_TIM_DMABurst_ReadStart+0x58>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8002d56:	6b00      	ldr	r0, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 8002d58:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <HAL_TIM_DMABurst_ReadStart+0xd8>)
 8002d5c:	e7ed      	b.n	8002d3a <HAL_TIM_DMABurst_ReadStart+0x8a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d5e:	6a00      	ldr	r0, [r0, #32]
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 8002d60:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_TIM_DMABurst_ReadStart+0xd4>)
 8002d64:	e7e9      	b.n	8002d3a <HAL_TIM_DMABurst_ReadStart+0x8a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d66:	6a40      	ldr	r0, [r0, #36]	; 0x24
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);     
 8002d68:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d6a:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <HAL_TIM_DMABurst_ReadStart+0xd4>)
 8002d6c:	e7e5      	b.n	8002d3a <HAL_TIM_DMABurst_ReadStart+0x8a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 8002d70:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d72:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_TIM_DMABurst_ReadStart+0xd4>)
 8002d74:	e7e1      	b.n	8002d3a <HAL_TIM_DMABurst_ReadStart+0x8a>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002d76:	6b40      	ldr	r0, [r0, #52]	; 0x34
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
 8002d78:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_TIM_DMABurst_ReadStart+0xdc>)
 8002d7c:	e7dd      	b.n	8002d3a <HAL_TIM_DMABurst_ReadStart+0x8a>
 8002d7e:	bf00      	nop
 8002d80:	08003175 	.word	0x08003175
 8002d84:	0800318d 	.word	0x0800318d
 8002d88:	080042f1 	.word	0x080042f1
 8002d8c:	08003381 	.word	0x08003381
 8002d90:	08003395 	.word	0x08003395

08002d94 <HAL_TIM_DMABurst_ReadStop>:
  switch(BurstRequestSrc)
 8002d94:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
{
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	4605      	mov	r5, r0
  switch(BurstRequestSrc)
 8002d9e:	d030      	beq.n	8002e02 <HAL_TIM_DMABurst_ReadStop+0x6e>
 8002da0:	d912      	bls.n	8002dc8 <HAL_TIM_DMABurst_ReadStop+0x34>
 8002da2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002da6:	d024      	beq.n	8002df2 <HAL_TIM_DMABurst_ReadStop+0x5e>
 8002da8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002dac:	d01d      	beq.n	8002dea <HAL_TIM_DMABurst_ReadStop+0x56>
 8002dae:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002db2:	d102      	bne.n	8002dba <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 8002db4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002db6:	f002 fd6b 	bl	8005890 <HAL_DMA_Abort>
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8002dba:	682b      	ldr	r3, [r5, #0]
 8002dbc:	68d9      	ldr	r1, [r3, #12]
 8002dbe:	ea21 0404 	bic.w	r4, r1, r4
 8002dc2:	60dc      	str	r4, [r3, #12]
}
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	bd38      	pop	{r3, r4, r5, pc}
  switch(BurstRequestSrc)
 8002dc8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002dcc:	d015      	beq.n	8002dfa <HAL_TIM_DMABurst_ReadStop+0x66>
 8002dce:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002dd2:	d006      	beq.n	8002de2 <HAL_TIM_DMABurst_ReadStop+0x4e>
 8002dd4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002dd8:	d1ef      	bne.n	8002dba <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 8002dda:	69c0      	ldr	r0, [r0, #28]
 8002ddc:	f002 fd58 	bl	8005890 <HAL_DMA_Abort>
    break;
 8002de0:	e7eb      	b.n	8002dba <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 8002de2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002de4:	f002 fd54 	bl	8005890 <HAL_DMA_Abort>
    break;
 8002de8:	e7e7      	b.n	8002dba <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8002dea:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002dec:	f002 fd50 	bl	8005890 <HAL_DMA_Abort>
    break;
 8002df0:	e7e3      	b.n	8002dba <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8002df2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002df4:	f002 fd4c 	bl	8005890 <HAL_DMA_Abort>
    break;
 8002df8:	e7df      	b.n	8002dba <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 8002dfa:	6a00      	ldr	r0, [r0, #32]
 8002dfc:	f002 fd48 	bl	8005890 <HAL_DMA_Abort>
    break;
 8002e00:	e7db      	b.n	8002dba <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 8002e02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002e04:	f002 fd44 	bl	8005890 <HAL_DMA_Abort>
    break;
 8002e08:	e7d7      	b.n	8002dba <HAL_TIM_DMABurst_ReadStop+0x26>
 8002e0a:	bf00      	nop

08002e0c <HAL_TIM_DMABurst_WriteStop>:
 8002e0c:	f7ff bfc2 	b.w	8002d94 <HAL_TIM_DMABurst_ReadStop>

08002e10 <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 8002e10:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d00f      	beq.n	8002e38 <HAL_TIM_GenerateEvent+0x28>
{
 8002e18:	b430      	push	{r4, r5}
 8002e1a:	4603      	mov	r3, r0
  htim->Instance->EGR = EventSource;
 8002e1c:	6805      	ldr	r5, [r0, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002e1e:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	2002      	movs	r0, #2
  __HAL_UNLOCK(htim);
 8002e22:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  htim->Instance->EGR = EventSource;
 8002e28:	6169      	str	r1, [r5, #20]
  return HAL_OK;  
 8002e2a:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002e34:	bc30      	pop	{r4, r5}
 8002e36:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002e38:	2002      	movs	r0, #2
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIM_ConfigOCrefClear>:
  __HAL_LOCK(htim);
 8002e3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d025      	beq.n	8002e90 <HAL_TIM_ConfigOCrefClear+0x54>
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
 8002e44:	684b      	ldr	r3, [r1, #4]
{ 
 8002e46:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8002e48:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4a:	2402      	movs	r4, #2
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
 8002e4c:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8002e4e:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002e52:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
 8002e56:	d01d      	beq.n	8002e94 <HAL_TIM_ConfigOCrefClear+0x58>
  switch (Channel)
 8002e58:	2a0c      	cmp	r2, #12
 8002e5a:	d810      	bhi.n	8002e7e <HAL_TIM_ConfigOCrefClear+0x42>
 8002e5c:	e8df f002 	tbb	[pc, r2]
 8002e60:	0f0f0f27 	.word	0x0f0f0f27
 8002e64:	0f0f0f2f 	.word	0x0f0f0f2f
 8002e68:	0f0f0f07 	.word	0x0f0f0f07
 8002e6c:	37          	.byte	0x37
 8002e6d:	00          	.byte	0x00
      if(sClearInputConfig->ClearInputState != RESET)  
 8002e6e:	680b      	ldr	r3, [r1, #0]
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 8002e70:	6802      	ldr	r2, [r0, #0]
      if(sClearInputConfig->ClearInputState != RESET)  
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d042      	beq.n	8002efc <HAL_TIM_ConfigOCrefClear+0xc0>
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 8002e76:	69d3      	ldr	r3, [r2, #28]
 8002e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7c:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 8002e7e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	2201      	movs	r2, #1
 8002e82:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002e86:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}  
 8002e8a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;  
 8002e8c:	4618      	mov	r0, r3
}  
 8002e8e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002e90:	2002      	movs	r0, #2
 8002e92:	4770      	bx	lr
    TIM_ETR_SetConfig(htim->Instance, 
 8002e94:	6806      	ldr	r6, [r0, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002e96:	68cb      	ldr	r3, [r1, #12]
 8002e98:	688f      	ldr	r7, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8002e9a:	68b4      	ldr	r4, [r6, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002e9c:	690d      	ldr	r5, [r1, #16]
 8002e9e:	433b      	orrs	r3, r7
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ea4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002ea8:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8002eaa:	60b3      	str	r3, [r6, #8]
 8002eac:	e7d4      	b.n	8002e58 <HAL_TIM_ConfigOCrefClear+0x1c>
      if(sClearInputConfig->ClearInputState != RESET)  
 8002eae:	680b      	ldr	r3, [r1, #0]
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 8002eb0:	6802      	ldr	r2, [r0, #0]
      if(sClearInputConfig->ClearInputState != RESET)  
 8002eb2:	b1a3      	cbz	r3, 8002ede <HAL_TIM_ConfigOCrefClear+0xa2>
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 8002eb4:	6993      	ldr	r3, [r2, #24]
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	e7df      	b.n	8002e7e <HAL_TIM_ConfigOCrefClear+0x42>
      if(sClearInputConfig->ClearInputState != RESET)  
 8002ebe:	680b      	ldr	r3, [r1, #0]
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 8002ec0:	6802      	ldr	r2, [r0, #0]
      if(sClearInputConfig->ClearInputState != RESET)  
 8002ec2:	b1b3      	cbz	r3, 8002ef2 <HAL_TIM_ConfigOCrefClear+0xb6>
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 8002ec4:	6993      	ldr	r3, [r2, #24]
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	e7d7      	b.n	8002e7e <HAL_TIM_ConfigOCrefClear+0x42>
      if(sClearInputConfig->ClearInputState != RESET)  
 8002ece:	680b      	ldr	r3, [r1, #0]
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 8002ed0:	6802      	ldr	r2, [r0, #0]
      if(sClearInputConfig->ClearInputState != RESET)  
 8002ed2:	b14b      	cbz	r3, 8002ee8 <HAL_TIM_ConfigOCrefClear+0xac>
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 8002ed4:	69d3      	ldr	r3, [r2, #28]
 8002ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eda:	61d3      	str	r3, [r2, #28]
 8002edc:	e7cf      	b.n	8002e7e <HAL_TIM_ConfigOCrefClear+0x42>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
 8002ede:	6993      	ldr	r3, [r2, #24]
 8002ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee4:	6193      	str	r3, [r2, #24]
 8002ee6:	e7ca      	b.n	8002e7e <HAL_TIM_ConfigOCrefClear+0x42>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
 8002ee8:	69d3      	ldr	r3, [r2, #28]
 8002eea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002eee:	61d3      	str	r3, [r2, #28]
 8002ef0:	e7c5      	b.n	8002e7e <HAL_TIM_ConfigOCrefClear+0x42>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
 8002ef2:	6993      	ldr	r3, [r2, #24]
 8002ef4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ef8:	6193      	str	r3, [r2, #24]
 8002efa:	e7c0      	b.n	8002e7e <HAL_TIM_ConfigOCrefClear+0x42>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
 8002efc:	69d3      	ldr	r3, [r2, #28]
 8002efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f02:	61d3      	str	r3, [r2, #28]
 8002f04:	e7bb      	b.n	8002e7e <HAL_TIM_ConfigOCrefClear+0x42>
 8002f06:	bf00      	nop

08002f08 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d040      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x8a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8002f12:	6803      	ldr	r3, [r0, #0]
{
 8002f14:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002f1a:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f1c:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f1e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002f22:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8002f26:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8002f28:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8002f2a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->Instance->SMCR = tmpsmcr;
 8002f2e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f30:	d073      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x112>
 8002f32:	d918      	bls.n	8002f66 <HAL_TIM_ConfigClockSource+0x5e>
 8002f34:	2c70      	cmp	r4, #112	; 0x70
 8002f36:	d060      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0xf2>
 8002f38:	d92d      	bls.n	8002f96 <HAL_TIM_ConfigClockSource+0x8e>
 8002f3a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002f3e:	d057      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0xe8>
 8002f40:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8002f44:	d11c      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002f46:	688a      	ldr	r2, [r1, #8]
 8002f48:	684d      	ldr	r5, [r1, #4]
 8002f4a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002f4c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002f4e:	432a      	orrs	r2, r5
 8002f50:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f54:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002f58:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8002f5a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f62:	609a      	str	r2, [r3, #8]
    break;
 8002f64:	e00c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8002f66:	2c10      	cmp	r4, #16
 8002f68:	d032      	beq.n	8002fd0 <HAL_TIM_ConfigClockSource+0xc8>
 8002f6a:	d938      	bls.n	8002fde <HAL_TIM_ConfigClockSource+0xd6>
 8002f6c:	2c20      	cmp	r4, #32
 8002f6e:	d06c      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x142>
 8002f70:	2c30      	cmp	r4, #48	; 0x30
 8002f72:	d105      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002f74:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002f7a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8002f7e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8002f80:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f82:	2201      	movs	r2, #1
 8002f84:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002f88:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
 8002f8c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002f8e:	4618      	mov	r0, r3
}
 8002f90:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f92:	2002      	movs	r0, #2
 8002f94:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002f96:	2c50      	cmp	r4, #80	; 0x50
 8002f98:	d05e      	beq.n	8003058 <HAL_TIM_ConfigClockSource+0x150>
 8002f9a:	2c60      	cmp	r4, #96	; 0x60
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002fa0:	684d      	ldr	r5, [r1, #4]
 8002fa2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa4:	f024 0410 	bic.w	r4, r4, #16
 8002fa8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002faa:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002fac:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fae:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fba:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002fbe:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002fc2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002fc8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	e7d7      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002fd0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002fd6:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e7d0      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8002fde:	2c00      	cmp	r4, #0
 8002fe0:	d1ce      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002fe2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fe4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002fe8:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	e7c7      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	f022 0207 	bic.w	r2, r2, #7
 8002ff6:	609a      	str	r2, [r3, #8]
    break;
 8002ff8:	e7c2      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ffa:	688a      	ldr	r2, [r1, #8]
 8002ffc:	684d      	ldr	r5, [r1, #4]
 8002ffe:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003000:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003002:	432a      	orrs	r2, r5
 8003004:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003008:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800300c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800300e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003010:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003012:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003016:	609a      	str	r2, [r3, #8]
    break;
 8003018:	e7b2      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 800301a:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301c:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800301e:	684c      	ldr	r4, [r1, #4]
 8003020:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003022:	f026 0601 	bic.w	r6, r6, #1
 8003026:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003028:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302a:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800302e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003032:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003036:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800303c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800303e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003042:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	e79a      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 800304a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800304c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003050:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	e793      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 8003058:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800305c:	684c      	ldr	r4, [r1, #4]
 800305e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003060:	f026 0601 	bic.w	r6, r6, #1
 8003064:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003066:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003068:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800306c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003070:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003074:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003078:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800307a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800307c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003080:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	e77b      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x78>

08003088 <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 8003088:	6802      	ldr	r2, [r0, #0]
 800308a:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 800308c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr2 |= TI1_Selection;
 8003090:	4319      	orrs	r1, r3
  htim->Instance->CR2 = tmpcr2;
 8003092:	6051      	str	r1, [r2, #4]
}
 8003094:	2000      	movs	r0, #0
 8003096:	4770      	bx	lr

08003098 <HAL_TIM_SlaveConfigSynchronization>:
  __HAL_LOCK(htim);
 8003098:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800309c:	2a01      	cmp	r2, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_SlaveConfigSynchronization+0xc>
 80030a0:	2002      	movs	r0, #2
 80030a2:	4770      	bx	lr
{
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80030a8:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80030aa:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80030ac:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80030b4:	f7fe fde4 	bl	8001c80 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80030c2:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 80030c4:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80030c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030ca:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80030cc:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 80030ce:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 80030d2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  return HAL_OK;
 80030d6:	bd38      	pop	{r3, r4, r5, pc}

080030d8 <HAL_TIM_SlaveConfigSynchronization_IT>:
  __HAL_LOCK(htim);
 80030d8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80030dc:	2a01      	cmp	r2, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIM_SlaveConfigSynchronization_IT+0xc>
 80030e0:	2002      	movs	r0, #2
 80030e2:	4770      	bx	lr
{
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80030e8:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80030ea:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80030ec:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80030f4:	f7fe fdc4 	bl	8001c80 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003100:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003102:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8003104:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003106:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800310a:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800310c:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 800310e:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8003112:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  return HAL_OK;
 8003116:	bd38      	pop	{r3, r4, r5, pc}

08003118 <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8003118:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800311c:	2a01      	cmp	r2, #1
{
 800311e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003120:	d00a      	beq.n	8003138 <HAL_TIM_ReadCapturedValue+0x20>
  switch (Channel)
 8003122:	290c      	cmp	r1, #12
 8003124:	d822      	bhi.n	800316c <HAL_TIM_ReadCapturedValue+0x54>
 8003126:	e8df f001 	tbb	[pc, r1]
 800312a:	210f      	.short	0x210f
 800312c:	21152121 	.word	0x21152121
 8003130:	211b2121 	.word	0x211b2121
 8003134:	2121      	.short	0x2121
 8003136:	09          	.byte	0x09
 8003137:	00          	.byte	0x00
  __HAL_LOCK(htim);
 8003138:	2002      	movs	r0, #2
}
 800313a:	4770      	bx	lr
      tmpreg = htim->Instance->CCR4;
 800313c:	6802      	ldr	r2, [r0, #0]
 800313e:	6c10      	ldr	r0, [r2, #64]	; 0x40
  __HAL_UNLOCK(htim);  
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 8003146:	4770      	bx	lr
      tmpreg = htim->Instance->CCR1;
 8003148:	6802      	ldr	r2, [r0, #0]
 800314a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(htim);  
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 8003152:	4770      	bx	lr
      tmpreg = htim->Instance->CCR2;
 8003154:	6802      	ldr	r2, [r0, #0]
 8003156:	6b90      	ldr	r0, [r2, #56]	; 0x38
  __HAL_UNLOCK(htim);  
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 800315e:	4770      	bx	lr
      tmpreg = htim->Instance->CCR3;
 8003160:	6802      	ldr	r2, [r0, #0]
 8003162:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
  __HAL_UNLOCK(htim);  
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 800316a:	4770      	bx	lr
  uint32_t tmpreg = 0U;
 800316c:	2000      	movs	r0, #0
 800316e:	e7e7      	b.n	8003140 <HAL_TIM_ReadCapturedValue+0x28>
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <TIM_DMAPeriodElapsedCplt>:
{
 8003174:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003176:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State= HAL_TIM_STATE_READY;
 8003178:	2301      	movs	r3, #1
 800317a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_TIM_PeriodElapsedCallback(htim);
 800317e:	f003 f84d 	bl	800621c <HAL_TIM_PeriodElapsedCallback>
 8003182:	bd08      	pop	{r3, pc}

08003184 <HAL_TIM_OC_DelayElapsedCallback>:
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <HAL_TIM_IC_CaptureCallback>:
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <TIM_DMACaptureCplt>:
{
 800318c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800318e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003190:	6a22      	ldr	r2, [r4, #32]
  htim->State= HAL_TIM_STATE_READY;
 8003192:	2301      	movs	r3, #1
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003194:	4290      	cmp	r0, r2
  htim->State= HAL_TIM_STATE_READY;
 8003196:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 800319a:	d00f      	beq.n	80031bc <TIM_DMACaptureCplt+0x30>
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800319c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800319e:	4298      	cmp	r0, r3
 80031a0:	d013      	beq.n	80031ca <TIM_DMACaptureCplt+0x3e>
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031a4:	4298      	cmp	r0, r3
 80031a6:	d013      	beq.n	80031d0 <TIM_DMACaptureCplt+0x44>
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031aa:	4298      	cmp	r0, r3
 80031ac:	d005      	beq.n	80031ba <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim); 
 80031ae:	4620      	mov	r0, r4
 80031b0:	f7ff ffea 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b4:	2300      	movs	r3, #0
 80031b6:	7623      	strb	r3, [r4, #24]
 80031b8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ba:	2308      	movs	r3, #8
 80031bc:	7623      	strb	r3, [r4, #24]
  HAL_TIM_IC_CaptureCallback(htim); 
 80031be:	4620      	mov	r0, r4
 80031c0:	f7ff ffe2 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c4:	2300      	movs	r3, #0
 80031c6:	7623      	strb	r3, [r4, #24]
 80031c8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ca:	2302      	movs	r3, #2
 80031cc:	7623      	strb	r3, [r4, #24]
 80031ce:	e7ee      	b.n	80031ae <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d0:	2304      	movs	r3, #4
 80031d2:	7623      	strb	r3, [r4, #24]
 80031d4:	e7eb      	b.n	80031ae <TIM_DMACaptureCplt+0x22>
 80031d6:	bf00      	nop

080031d8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <TIM_DMADelayPulseCplt>:
{
 80031dc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031de:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031e0:	6a22      	ldr	r2, [r4, #32]
  htim->State= HAL_TIM_STATE_READY; 
 80031e2:	2301      	movs	r3, #1
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031e4:	4290      	cmp	r0, r2
  htim->State= HAL_TIM_STATE_READY; 
 80031e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031ea:	d00f      	beq.n	800320c <TIM_DMADelayPulseCplt+0x30>
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031ee:	4298      	cmp	r0, r3
 80031f0:	d013      	beq.n	800321a <TIM_DMADelayPulseCplt+0x3e>
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031f4:	4298      	cmp	r0, r3
 80031f6:	d013      	beq.n	8003220 <TIM_DMADelayPulseCplt+0x44>
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031fa:	4298      	cmp	r0, r3
 80031fc:	d005      	beq.n	800320a <TIM_DMADelayPulseCplt+0x2e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fe:	4620      	mov	r0, r4
 8003200:	f7ff ffea 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;  
 8003204:	2300      	movs	r3, #0
 8003206:	7623      	strb	r3, [r4, #24]
 8003208:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320a:	2308      	movs	r3, #8
 800320c:	7623      	strb	r3, [r4, #24]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320e:	4620      	mov	r0, r4
 8003210:	f7ff ffe2 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;  
 8003214:	2300      	movs	r3, #0
 8003216:	7623      	strb	r3, [r4, #24]
 8003218:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321a:	2302      	movs	r3, #2
 800321c:	7623      	strb	r3, [r4, #24]
 800321e:	e7ee      	b.n	80031fe <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003220:	2304      	movs	r3, #4
 8003222:	7623      	strb	r3, [r4, #24]
 8003224:	e7eb      	b.n	80031fe <TIM_DMADelayPulseCplt+0x22>
 8003226:	bf00      	nop

08003228 <HAL_TIM_TriggerCallback>:
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop

0800322c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800322c:	6803      	ldr	r3, [r0, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	0791      	lsls	r1, r2, #30
{
 8003232:	b510      	push	{r4, lr}
 8003234:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003236:	d502      	bpl.n	800323e <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	0792      	lsls	r2, r2, #30
 800323c:	d462      	bmi.n	8003304 <HAL_TIM_IRQHandler+0xd8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	0750      	lsls	r0, r2, #29
 8003242:	d502      	bpl.n	800324a <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	0751      	lsls	r1, r2, #29
 8003248:	d449      	bmi.n	80032de <HAL_TIM_IRQHandler+0xb2>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	0712      	lsls	r2, r2, #28
 800324e:	d502      	bpl.n	8003256 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	0710      	lsls	r0, r2, #28
 8003254:	d431      	bmi.n	80032ba <HAL_TIM_IRQHandler+0x8e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	06d2      	lsls	r2, r2, #27
 800325a:	d502      	bpl.n	8003262 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	06d0      	lsls	r0, r2, #27
 8003260:	d418      	bmi.n	8003294 <HAL_TIM_IRQHandler+0x68>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	07d1      	lsls	r1, r2, #31
 8003266:	d502      	bpl.n	800326e <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	07d2      	lsls	r2, r2, #31
 800326c:	d46b      	bmi.n	8003346 <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	0610      	lsls	r0, r2, #24
 8003272:	d502      	bpl.n	800327a <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	0611      	lsls	r1, r2, #24
 8003278:	d46d      	bmi.n	8003356 <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	0652      	lsls	r2, r2, #25
 800327e:	d502      	bpl.n	8003286 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	0650      	lsls	r0, r2, #25
 8003284:	d457      	bmi.n	8003336 <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	0691      	lsls	r1, r2, #26
 800328a:	d502      	bpl.n	8003292 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	0692      	lsls	r2, r2, #26
 8003290:	d449      	bmi.n	8003326 <HAL_TIM_IRQHandler+0xfa>
 8003292:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003294:	f06f 0210 	mvn.w	r2, #16
 8003298:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800329c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80032a4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a6:	d161      	bne.n	800336c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a8:	f7ff ff6c 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7ff ff93 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	2200      	movs	r2, #0
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	7622      	strb	r2, [r4, #24]
 80032b8:	e7d3      	b.n	8003262 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ba:	f06f 0208 	mvn.w	r2, #8
 80032be:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032c2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032c6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80032c8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ca:	d155      	bne.n	8003378 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032cc:	f7ff ff5a 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff ff81 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	2200      	movs	r2, #0
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	7622      	strb	r2, [r4, #24]
 80032dc:	e7bb      	b.n	8003256 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032de:	f06f 0204 	mvn.w	r2, #4
 80032e2:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ec:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f0:	d13f      	bne.n	8003372 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	f7ff ff47 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	4620      	mov	r0, r4
 80032f8:	f7ff ff6e 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fc:	2200      	movs	r2, #0
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	7622      	strb	r2, [r4, #24]
 8003302:	e7a2      	b.n	800324a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003304:	f06f 0202 	mvn.w	r2, #2
 8003308:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800330a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800330c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800330e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003310:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003312:	d128      	bne.n	8003366 <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003314:	f7ff ff36 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	4620      	mov	r0, r4
 800331a:	f7ff ff5d 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	2200      	movs	r2, #0
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	7622      	strb	r2, [r4, #24]
 8003324:	e78b      	b.n	800323e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003326:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800332a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800332c:	611a      	str	r2, [r3, #16]
}
 800332e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003332:	f000 bfdb 	b.w	80042ec <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003336:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800333a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff ff73 	bl	8003228 <HAL_TIM_TriggerCallback>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	e79f      	b.n	8003286 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003346:	f06f 0201 	mvn.w	r2, #1
 800334a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800334c:	4620      	mov	r0, r4
 800334e:	f002 ff65 	bl	800621c <HAL_TIM_PeriodElapsedCallback>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	e78b      	b.n	800326e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003356:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800335a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800335c:	4620      	mov	r0, r4
 800335e:	f000 ffcf 	bl	8004300 <HAL_TIMEx_BreakCallback>
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	e789      	b.n	800327a <HAL_TIM_IRQHandler+0x4e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003366:	f7ff ff0f 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 800336a:	e7d8      	b.n	800331e <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 800336c:	f7ff ff0c 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 8003370:	e79f      	b.n	80032b2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	f7ff ff09 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 8003376:	e7c1      	b.n	80032fc <HAL_TIM_IRQHandler+0xd0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003378:	f7ff ff06 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 800337c:	e7ab      	b.n	80032d6 <HAL_TIM_IRQHandler+0xaa>
 800337e:	bf00      	nop

08003380 <TIM_DMATriggerCplt>:
{
 8003380:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;  
 8003382:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State= HAL_TIM_STATE_READY; 
 8003384:	2301      	movs	r3, #1
 8003386:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_TIM_TriggerCallback(htim);
 800338a:	f7ff ff4d 	bl	8003228 <HAL_TIM_TriggerCallback>
 800338e:	bd08      	pop	{r3, pc}

08003390 <HAL_TIM_ErrorCallback>:
{
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <TIM_DMAError>:
{
 8003394:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003396:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State= HAL_TIM_STATE_READY;
 8003398:	2301      	movs	r3, #1
 800339a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_TIM_ErrorCallback(htim);
 800339e:	f7ff fff7 	bl	8003390 <HAL_TIM_ErrorCallback>
 80033a2:	bd08      	pop	{r3, pc}

080033a4 <HAL_TIM_Base_GetState>:
 80033a4:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop

080033ac <HAL_TIM_OC_GetState>:
 80033ac:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop

080033b4 <HAL_TIM_PWM_GetState>:
 80033b4:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop

080033bc <HAL_TIM_IC_GetState>:
 80033bc:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop

080033c4 <HAL_TIM_OnePulse_GetState>:
 80033c4:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <HAL_TIM_Encoder_GetState>:
  return htim->State;
 80033cc:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop

080033d4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80033d4:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 80033d6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80033d8:	4290      	cmp	r0, r2
{
 80033da:	b470      	push	{r4, r5, r6}
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80033dc:	d054      	beq.n	8003488 <TIM_Base_SetConfig+0xb4>
 80033de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033e2:	d030      	beq.n	8003446 <TIM_Base_SetConfig+0x72>
 80033e4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80033e8:	4290      	cmp	r0, r2
 80033ea:	d02c      	beq.n	8003446 <TIM_Base_SetConfig+0x72>
 80033ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f0:	4290      	cmp	r0, r2
 80033f2:	d028      	beq.n	8003446 <TIM_Base_SetConfig+0x72>
 80033f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f8:	4290      	cmp	r0, r2
 80033fa:	d024      	beq.n	8003446 <TIM_Base_SetConfig+0x72>
 80033fc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003400:	4290      	cmp	r0, r2
 8003402:	d020      	beq.n	8003446 <TIM_Base_SetConfig+0x72>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003404:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003408:	4290      	cmp	r0, r2
 800340a:	d030      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 800340c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003410:	4290      	cmp	r0, r2
 8003412:	d02c      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 8003414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003418:	4290      	cmp	r0, r2
 800341a:	d028      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 800341c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003420:	4290      	cmp	r0, r2
 8003422:	d024      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 8003424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003428:	4290      	cmp	r0, r2
 800342a:	d020      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 800342c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003430:	4290      	cmp	r0, r2
 8003432:	d01c      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003436:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003438:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800343a:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800343c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800343e:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003440:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8003442:	6143      	str	r3, [r0, #20]
}
 8003444:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003446:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003448:	68ce      	ldr	r6, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344a:	688d      	ldr	r5, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800344c:	680c      	ldr	r4, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003452:	4313      	orrs	r3, r2
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~TIM_CR1_CKD;
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800345a:	4333      	orrs	r3, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800345c:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 800345e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003460:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003462:	6284      	str	r4, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003464:	d01d      	beq.n	80034a2 <TIM_Base_SetConfig+0xce>
  TIMx->EGR = TIM_EGR_UG;
 8003466:	2301      	movs	r3, #1
 8003468:	6143      	str	r3, [r0, #20]
}
 800346a:	bc70      	pop	{r4, r5, r6}
 800346c:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346e:	68cd      	ldr	r5, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003470:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003472:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003478:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800347a:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800347c:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800347e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003480:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003482:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8003484:	6143      	str	r3, [r0, #20]
}
 8003486:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003488:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348a:	68cc      	ldr	r4, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800348c:	688d      	ldr	r5, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800348e:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003494:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800349c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800349e:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80034a0:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80034a2:	690b      	ldr	r3, [r1, #16]
 80034a4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80034a6:	2301      	movs	r3, #1
 80034a8:	6143      	str	r3, [r0, #20]
}
 80034aa:	bc70      	pop	{r4, r5, r6}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40010400 	.word	0x40010400

080034b8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80034b8:	b1b8      	cbz	r0, 80034ea <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 80034ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{ 
 80034be:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80034c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034c4:	4604      	mov	r4, r0
 80034c6:	b15b      	cbz	r3, 80034e0 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 80034c8:	2302      	movs	r3, #2
 80034ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	1d21      	adds	r1, r4, #4
 80034d2:	f7ff ff7f 	bl	80033d4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80034dc:	2000      	movs	r0, #0
 80034de:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80034e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80034e4:	f003 f990 	bl	8006808 <HAL_TIM_Base_MspInit>
 80034e8:	e7ee      	b.n	80034c8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop

080034f0 <HAL_TIM_OC_Init>:
  if(htim == NULL)
 80034f0:	b1b8      	cbz	r0, 8003522 <HAL_TIM_OC_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 80034f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80034f6:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80034f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034fc:	4604      	mov	r4, r0
 80034fe:	b15b      	cbz	r3, 8003518 <HAL_TIM_OC_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8003506:	6820      	ldr	r0, [r4, #0]
 8003508:	1d21      	adds	r1, r4, #4
 800350a:	f7ff ff63 	bl	80033d4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800350e:	2301      	movs	r3, #1
 8003510:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003514:	2000      	movs	r0, #0
 8003516:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003518:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 800351c:	f7fe fcba 	bl	8001e94 <HAL_TIM_OC_MspInit>
 8003520:	e7ee      	b.n	8003500 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 8003522:	2001      	movs	r0, #1
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8003528:	b1b8      	cbz	r0, 800355a <HAL_TIM_PWM_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 800352a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800352e:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8003530:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003534:	4604      	mov	r4, r0
 8003536:	b15b      	cbz	r3, 8003550 <HAL_TIM_PWM_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;  
 8003538:	2302      	movs	r3, #2
 800353a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	1d21      	adds	r1, r4, #4
 8003542:	f7ff ff47 	bl	80033d4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003546:	2301      	movs	r3, #1
 8003548:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800354c:	2000      	movs	r0, #0
 800354e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003550:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003554:	f7fe fcf6 	bl	8001f44 <HAL_TIM_PWM_MspInit>
 8003558:	e7ee      	b.n	8003538 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8003560:	b1b8      	cbz	r0, 8003592 <HAL_TIM_IC_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003562:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003566:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8003568:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800356c:	4604      	mov	r4, r0
 800356e:	b15b      	cbz	r3, 8003588 <HAL_TIM_IC_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;   
 8003570:	2302      	movs	r3, #2
 8003572:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003576:	6820      	ldr	r0, [r4, #0]
 8003578:	1d21      	adds	r1, r4, #4
 800357a:	f7ff ff2b 	bl	80033d4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800357e:	2301      	movs	r3, #1
 8003580:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003584:	2000      	movs	r0, #0
 8003586:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003588:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 800358c:	f7fe feec 	bl	8002368 <HAL_TIM_IC_MspInit>
 8003590:	e7ee      	b.n	8003570 <HAL_TIM_IC_Init+0x10>
    return HAL_ERROR;
 8003592:	2001      	movs	r0, #1
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <HAL_TIM_OnePulse_Init>:
  if(htim == NULL)
 8003598:	b300      	cbz	r0, 80035dc <HAL_TIM_OnePulse_Init+0x44>
  if(htim->State == HAL_TIM_STATE_RESET)
 800359a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800359e:	b570      	push	{r4, r5, r6, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80035a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	b19b      	cbz	r3, 80035d2 <HAL_TIM_OnePulse_Init+0x3a>
  htim->State= HAL_TIM_STATE_BUSY;  
 80035aa:	2302      	movs	r3, #2
 80035ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	1d21      	adds	r1, r4, #4
 80035b4:	f7ff ff0e 	bl	80033d4 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f022 0208 	bic.w	r2, r2, #8
 80035c0:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 80035c2:	681a      	ldr	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 80035c4:	2601      	movs	r6, #1
  htim->Instance->CR1 |= OnePulseMode;
 80035c6:	432a      	orrs	r2, r5
 80035c8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80035ca:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80035cc:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
  return HAL_OK;
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80035d2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OnePulse_MspInit(htim);
 80035d6:	f7ff f83d 	bl	8002654 <HAL_TIM_OnePulse_MspInit>
 80035da:	e7e6      	b.n	80035aa <HAL_TIM_OnePulse_Init+0x12>
    return HAL_ERROR;
 80035dc:	2001      	movs	r0, #1
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d04d      	beq.n	8003680 <HAL_TIM_Encoder_Init+0xa0>
{
 80035e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80035e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80035ea:	b083      	sub	sp, #12
 80035ec:	4605      	mov	r5, r0
 80035ee:	460c      	mov	r4, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 80035f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d03e      	beq.n	8003676 <HAL_TIM_Encoder_Init+0x96>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80035f8:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 80035fa:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80035fc:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8003600:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003604:	6883      	ldr	r3, [r0, #8]
 8003606:	f023 0307 	bic.w	r3, r3, #7
 800360a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800360c:	f7ff fee2 	bl	80033d4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003610:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003612:	6923      	ldr	r3, [r4, #16]
  tmpsmcr = htim->Instance->SMCR;
 8003614:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003616:	698e      	ldr	r6, [r1, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003618:	69a7      	ldr	r7, [r4, #24]
 800361a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800361c:	f8d4 e000 	ldr.w	lr, [r4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003620:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003624:	69e6      	ldr	r6, [r4, #28]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800362c:	6a26      	ldr	r6, [r4, #32]
 800362e:	9601      	str	r6, [sp, #4]
 8003630:	68e6      	ldr	r6, [r4, #12]
 8003632:	4333      	orrs	r3, r6
 8003634:	9e01      	ldr	r6, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003636:	f02c 0c03 	bic.w	ip, ip, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800363a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800363e:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer = htim->Instance->CCER;
 8003642:	6a0f      	ldr	r7, [r1, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003644:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003648:	6966      	ldr	r6, [r4, #20]
 800364a:	6864      	ldr	r4, [r4, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800364c:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003650:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8003654:	ea40 000e 	orr.w	r0, r0, lr
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003658:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800365c:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  htim->Instance->SMCR = tmpsmcr;
 8003660:	6088      	str	r0, [r1, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003662:	4327      	orrs	r7, r4
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003664:	4313      	orrs	r3, r2
  htim->State= HAL_TIM_STATE_READY;
 8003666:	2401      	movs	r4, #1
  return HAL_OK;
 8003668:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800366a:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800366c:	620f      	str	r7, [r1, #32]
  htim->State= HAL_TIM_STATE_READY;
 800366e:	f885 4039 	strb.w	r4, [r5, #57]	; 0x39
}
 8003672:	b003      	add	sp, #12
 8003674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003676:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 800367a:	f7ff f8d1 	bl	8002820 <HAL_TIM_Encoder_MspInit>
 800367e:	e7bb      	b.n	80035f8 <HAL_TIM_Encoder_Init+0x18>
    return HAL_ERROR;
 8003680:	2001      	movs	r0, #1
 8003682:	4770      	bx	lr

08003684 <TIM_TI1_SetConfig>:
{
 8003684:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003686:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003688:	4e1c      	ldr	r6, [pc, #112]	; (80036fc <TIM_TI1_SetConfig+0x78>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368a:	f024 0401 	bic.w	r4, r4, #1
 800368e:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003690:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8003692:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003694:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003696:	d01f      	beq.n	80036d8 <TIM_TI1_SetConfig+0x54>
 8003698:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800369c:	d01c      	beq.n	80036d8 <TIM_TI1_SetConfig+0x54>
 800369e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80036a2:	42b0      	cmp	r0, r6
 80036a4:	d018      	beq.n	80036d8 <TIM_TI1_SetConfig+0x54>
 80036a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036aa:	42b0      	cmp	r0, r6
 80036ac:	d014      	beq.n	80036d8 <TIM_TI1_SetConfig+0x54>
 80036ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036b2:	42b0      	cmp	r0, r6
 80036b4:	d010      	beq.n	80036d8 <TIM_TI1_SetConfig+0x54>
 80036b6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80036ba:	42b0      	cmp	r0, r6
 80036bc:	d00c      	beq.n	80036d8 <TIM_TI1_SetConfig+0x54>
 80036be:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80036c2:	42b0      	cmp	r0, r6
 80036c4:	d008      	beq.n	80036d8 <TIM_TI1_SetConfig+0x54>
 80036c6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80036ca:	42b0      	cmp	r0, r6
 80036cc:	d004      	beq.n	80036d8 <TIM_TI1_SetConfig+0x54>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036ce:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	e002      	b.n	80036de <TIM_TI1_SetConfig+0x5a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036d8:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80036dc:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036de:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e0:	f025 050a 	bic.w	r5, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036e4:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036ea:	f001 010a 	and.w	r1, r1, #10
 80036ee:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036f0:	431a      	orrs	r2, r3
  TIMx->CCMR1 = tmpccmr1;
 80036f2:	6182      	str	r2, [r0, #24]
}
 80036f4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80036f6:	6201      	str	r1, [r0, #32]
}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000

08003700 <HAL_TIM_IC_ConfigChannel>:
{
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003702:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003706:	2b01      	cmp	r3, #1
 8003708:	d038      	beq.n	800377c <HAL_TIM_IC_ConfigChannel+0x7c>
 800370a:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800370e:	2101      	movs	r1, #1
 8003710:	4604      	mov	r4, r0
 8003712:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003716:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 800371a:	2a00      	cmp	r2, #0
 800371c:	d030      	beq.n	8003780 <HAL_TIM_IC_ConfigChannel+0x80>
  else if (Channel == TIM_CHANNEL_2)
 800371e:	2a04      	cmp	r2, #4
    TIM_TI2_SetConfig(htim->Instance, 
 8003720:	6803      	ldr	r3, [r0, #0]
  else if (Channel == TIM_CHANNEL_2)
 8003722:	d03d      	beq.n	80037a0 <HAL_TIM_IC_ConfigChannel+0xa0>
  else if (Channel == TIM_CHANNEL_3)
 8003724:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003726:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,  
 8003728:	682a      	ldr	r2, [r5, #0]
  else if (Channel == TIM_CHANNEL_3)
 800372a:	d05d      	beq.n	80037e8 <HAL_TIM_IC_ConfigChannel+0xe8>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800372c:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance, 
 8003730:	686f      	ldr	r7, [r5, #4]
 8003732:	68e9      	ldr	r1, [r5, #12]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003734:	68ad      	ldr	r5, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003736:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003738:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 800373a:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800373c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003740:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003742:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003744:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003748:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800374c:	b289      	uxth	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800374e:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003752:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003756:	4332      	orrs	r2, r6
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003758:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800375a:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800375c:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003764:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 800376c:	61dd      	str	r5, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 800376e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003770:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003772:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003776:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK; 
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800377c:	2002      	movs	r0, #2
}
 800377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8003780:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003784:	68eb      	ldr	r3, [r5, #12]
 8003786:	6800      	ldr	r0, [r0, #0]
 8003788:	f7ff ff7c 	bl	8003684 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800378c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800378e:	68a8      	ldr	r0, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003790:	6999      	ldr	r1, [r3, #24]
 8003792:	f021 010c 	bic.w	r1, r1, #12
 8003796:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	4302      	orrs	r2, r0
 800379c:	619a      	str	r2, [r3, #24]
 800379e:	e7e6      	b.n	800376e <HAL_TIM_IC_ConfigChannel+0x6e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a0:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI2_SetConfig(htim->Instance, 
 80037a2:	682a      	ldr	r2, [r5, #0]
 80037a4:	686f      	ldr	r7, [r5, #4]
 80037a6:	68e9      	ldr	r1, [r5, #12]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037a8:	68ad      	ldr	r5, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037aa:	f026 0610 	bic.w	r6, r6, #16
 80037ae:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b0:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 80037b2:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80037b4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037b8:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037ba:	0309      	lsls	r1, r1, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80037bc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037c0:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037c4:	b289      	uxth	r1, r1
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c6:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ca:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037ce:	4332      	orrs	r2, r6
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037d0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80037d2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d4:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037dc:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 80037e4:	619d      	str	r5, [r3, #24]
 80037e6:	e7c2      	b.n	800376e <HAL_TIM_IC_ConfigChannel+0x6e>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e8:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,  
 80037ec:	6868      	ldr	r0, [r5, #4]
 80037ee:	68e9      	ldr	r1, [r5, #12]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037f0:	68ad      	ldr	r5, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037f2:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037f4:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 80037f6:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037f8:	f027 0703 	bic.w	r7, r7, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037fc:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037fe:	0109      	lsls	r1, r1, #4
  tmpccmr2 |= TIM_ICSelection;
 8003800:	4338      	orrs	r0, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003802:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003806:	b2c9      	uxtb	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003808:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800380c:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003810:	4332      	orrs	r2, r6
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003812:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8003814:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8003816:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	f022 020c 	bic.w	r2, r2, #12
 800381e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	432a      	orrs	r2, r5
 8003824:	61da      	str	r2, [r3, #28]
 8003826:	e7a2      	b.n	800376e <HAL_TIM_IC_ConfigChannel+0x6e>

08003828 <TIM_OC2_SetConfig>:
{
 8003828:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800382c:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003832:	4d14      	ldr	r5, [pc, #80]	; (8003884 <TIM_OC2_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003834:	f024 0410 	bic.w	r4, r4, #16
 8003838:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800383a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800383c:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800383e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003840:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003844:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003848:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800384a:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800384e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003852:	d008      	beq.n	8003866 <TIM_OC2_SetConfig+0x3e>
 8003854:	4c0c      	ldr	r4, [pc, #48]	; (8003888 <TIM_OC2_SetConfig+0x60>)
 8003856:	42a0      	cmp	r0, r4
 8003858:	d005      	beq.n	8003866 <TIM_OC2_SetConfig+0x3e>
  TIMx->CCR2 = OC_Config->Pulse;
 800385a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800385c:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800385e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003860:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003862:	6203      	str	r3, [r0, #32]
}
 8003864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003866:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003868:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800386a:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800386c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003870:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003874:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003878:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800387a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800387e:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 8003882:	e7ea      	b.n	800385a <TIM_OC2_SetConfig+0x32>
 8003884:	40010000 	.word	0x40010000
 8003888:	40010400 	.word	0x40010400

0800388c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim); 
 800388c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003890:	2b01      	cmp	r3, #1
 8003892:	d01c      	beq.n	80038ce <HAL_TIM_OC_ConfigChannel+0x42>
{
 8003894:	b510      	push	{r4, lr}
 8003896:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	2302      	movs	r3, #2
  __HAL_LOCK(htim); 
 800389a:	2001      	movs	r0, #1
 800389c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  switch (Channel)
 80038a4:	2a0c      	cmp	r2, #12
 80038a6:	d80b      	bhi.n	80038c0 <HAL_TIM_OC_ConfigChannel+0x34>
 80038a8:	e8df f002 	tbb	[pc, r2]
 80038ac:	0a0a0a17 	.word	0x0a0a0a17
 80038b0:	0a0a0a07 	.word	0x0a0a0a07
 80038b4:	0a0a0a1b 	.word	0x0a0a0a1b
 80038b8:	13          	.byte	0x13
 80038b9:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	f7ff ffb4 	bl	8003828 <TIM_OC2_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 80038c2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 80038c8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 80038cc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim); 
 80038ce:	2002      	movs	r0, #2
 80038d0:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038d2:	6820      	ldr	r0, [r4, #0]
 80038d4:	f7fe f9ac 	bl	8001c30 <TIM_OC4_SetConfig>
    break;
 80038d8:	e7f2      	b.n	80038c0 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038da:	6820      	ldr	r0, [r4, #0]
 80038dc:	f7fe f946 	bl	8001b6c <TIM_OC1_SetConfig>
    break;
 80038e0:	e7ee      	b.n	80038c0 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	f7fe f972 	bl	8001bcc <TIM_OC3_SetConfig>
    break;
 80038e8:	e7ea      	b.n	80038c0 <HAL_TIM_OC_ConfigChannel+0x34>
 80038ea:	bf00      	nop

080038ec <HAL_TIM_PWM_ConfigChannel>:
{
 80038ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80038ee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d02b      	beq.n	800394e <HAL_TIM_PWM_ConfigChannel+0x62>
 80038f6:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80038fa:	2101      	movs	r1, #1
 80038fc:	4604      	mov	r4, r0
 80038fe:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003902:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 8003906:	2a0c      	cmp	r2, #12
 8003908:	d81a      	bhi.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x54>
 800390a:	e8df f002 	tbb	[pc, r2]
 800390e:	1935      	.short	0x1935
 8003910:	19071919 	.word	0x19071919
 8003914:	19471919 	.word	0x19471919
 8003918:	1919      	.short	0x1919
 800391a:	22          	.byte	0x22
 800391b:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800391c:	4629      	mov	r1, r5
 800391e:	6800      	ldr	r0, [r0, #0]
 8003920:	f7ff ff82 	bl	8003828 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003924:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003926:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003928:	6999      	ldr	r1, [r3, #24]
 800392a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800392e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003930:	6999      	ldr	r1, [r3, #24]
 8003932:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003936:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800393e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003940:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003942:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003944:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003948:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 800394c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800394e:	2002      	movs	r0, #2
}
 8003950:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003952:	4629      	mov	r1, r5
 8003954:	6800      	ldr	r0, [r0, #0]
 8003956:	f7fe f96b 	bl	8001c30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800395a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800395c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003964:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003966:	69d9      	ldr	r1, [r3, #28]
 8003968:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800396c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003974:	61da      	str	r2, [r3, #28]
    break;
 8003976:	e7e3      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003978:	4629      	mov	r1, r5
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	f7fe f8f6 	bl	8001b6c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003980:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003982:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	f041 0108 	orr.w	r1, r1, #8
 800398a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800398c:	6999      	ldr	r1, [r3, #24]
 800398e:	f021 0104 	bic.w	r1, r1, #4
 8003992:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	4302      	orrs	r2, r0
 8003998:	619a      	str	r2, [r3, #24]
    break;
 800399a:	e7d1      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399c:	4629      	mov	r1, r5
 800399e:	6800      	ldr	r0, [r0, #0]
 80039a0:	f7fe f914 	bl	8001bcc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80039a6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a8:	69d9      	ldr	r1, [r3, #28]
 80039aa:	f041 0108 	orr.w	r1, r1, #8
 80039ae:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b0:	69d9      	ldr	r1, [r3, #28]
 80039b2:	f021 0104 	bic.w	r1, r1, #4
 80039b6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	4302      	orrs	r2, r0
 80039bc:	61da      	str	r2, [r3, #28]
    break;
 80039be:	e7bf      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x54>

080039c0 <HAL_TIM_OnePulse_ConfigChannel>:
  if(OutputChannel != InputChannel)  
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d074      	beq.n	8003aae <HAL_TIM_OnePulse_ConfigChannel+0xee>
{
 80039c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(htim);
 80039c6:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 80039ca:	2d01      	cmp	r5, #1
{
 80039cc:	b089      	sub	sp, #36	; 0x24
    __HAL_LOCK(htim);
 80039ce:	d052      	beq.n	8003a76 <HAL_TIM_OnePulse_ConfigChannel+0xb6>
 80039d0:	460c      	mov	r4, r1
 80039d2:	461e      	mov	r6, r3
    temp1.Pulse = sConfig->Pulse;
 80039d4:	c90a      	ldmia	r1, {r1, r3}
 80039d6:	4605      	mov	r5, r0
    __HAL_LOCK(htim);
 80039d8:	2701      	movs	r7, #1
    htim->State = HAL_TIM_STATE_BUSY;
 80039da:	2002      	movs	r0, #2
    __HAL_LOCK(htim);
 80039dc:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    temp1.OCMode = sConfig->OCMode;
 80039e0:	9101      	str	r1, [sp, #4]
    temp1.OCPolarity = sConfig->OCPolarity;
 80039e2:	68a7      	ldr	r7, [r4, #8]
    temp1.OCIdleState = sConfig->OCIdleState;
 80039e4:	6921      	ldr	r1, [r4, #16]
    htim->State = HAL_TIM_STATE_BUSY;
 80039e6:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
    temp1.Pulse = sConfig->Pulse;
 80039ea:	9302      	str	r3, [sp, #8]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 80039ec:	68e0      	ldr	r0, [r4, #12]
    temp1.OCNIdleState = sConfig->OCNIdleState; 
 80039ee:	6963      	ldr	r3, [r4, #20]
    temp1.OCPolarity = sConfig->OCPolarity;
 80039f0:	9703      	str	r7, [sp, #12]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 80039f2:	9004      	str	r0, [sp, #16]
    temp1.OCIdleState = sConfig->OCIdleState;
 80039f4:	9106      	str	r1, [sp, #24]
    temp1.OCNIdleState = sConfig->OCNIdleState; 
 80039f6:	9307      	str	r3, [sp, #28]
    switch (OutputChannel)
 80039f8:	2a00      	cmp	r2, #0
 80039fa:	d05a      	beq.n	8003ab2 <HAL_TIM_OnePulse_ConfigChannel+0xf2>
 80039fc:	2a04      	cmp	r2, #4
 80039fe:	d03d      	beq.n	8003a7c <HAL_TIM_OnePulse_ConfigChannel+0xbc>
    switch (InputChannel)
 8003a00:	2e00      	cmp	r6, #0
 8003a02:	d041      	beq.n	8003a88 <HAL_TIM_OnePulse_ConfigChannel+0xc8>
 8003a04:	2e04      	cmp	r6, #4
 8003a06:	d12e      	bne.n	8003a66 <HAL_TIM_OnePulse_ConfigChannel+0xa6>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	69a2      	ldr	r2, [r4, #24]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0c:	6a1e      	ldr	r6, [r3, #32]
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8003a0e:	69e7      	ldr	r7, [r4, #28]
 8003a10:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a12:	f026 0610 	bic.w	r6, r6, #16
 8003a16:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a18:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8003a1a:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a1c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a20:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a22:	0309      	lsls	r1, r1, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a24:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a28:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a2c:	b289      	uxth	r1, r1
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a2e:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a32:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a36:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a38:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8003a3a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3c:	621a      	str	r2, [r3, #32]
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a44:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a4c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003a54:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	f022 0207 	bic.w	r2, r2, #7
 8003a5c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	f042 0206 	orr.w	r2, r2, #6
 8003a64:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(htim);
 8003a66:	2000      	movs	r0, #0
    htim->State = HAL_TIM_STATE_READY;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    __HAL_UNLOCK(htim);
 8003a6e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
} 
 8003a72:	b009      	add	sp, #36	; 0x24
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(htim);
 8003a76:	2002      	movs	r0, #2
} 
 8003a78:	b009      	add	sp, #36	; 0x24
 8003a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8003a7c:	a901      	add	r1, sp, #4
 8003a7e:	6828      	ldr	r0, [r5, #0]
 8003a80:	f7ff fed2 	bl	8003828 <TIM_OC2_SetConfig>
    switch (InputChannel)
 8003a84:	2e00      	cmp	r6, #0
 8003a86:	d1bd      	bne.n	8003a04 <HAL_TIM_OnePulse_ConfigChannel+0x44>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8003a88:	f104 0118 	add.w	r1, r4, #24
 8003a8c:	c90e      	ldmia	r1, {r1, r2, r3}
 8003a8e:	6828      	ldr	r0, [r5, #0]
 8003a90:	f7ff fdf8 	bl	8003684 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	f022 020c 	bic.w	r2, r2, #12
 8003a9c:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003aa4:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8003aac:	e7d2      	b.n	8003a54 <HAL_TIM_OnePulse_ConfigChannel+0x94>
    return HAL_ERROR;
 8003aae:	2001      	movs	r0, #1
 8003ab0:	4770      	bx	lr
        TIM_OC1_SetConfig(htim->Instance, &temp1); 
 8003ab2:	a901      	add	r1, sp, #4
 8003ab4:	6828      	ldr	r0, [r5, #0]
 8003ab6:	f7fe f859 	bl	8001b6c <TIM_OC1_SetConfig>
      break;
 8003aba:	e7a1      	b.n	8003a00 <HAL_TIM_OnePulse_ConfigChannel+0x40>

08003abc <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8003abc:	6a03      	ldr	r3, [r0, #32]
{
 8003abe:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 8003ac0:	2401      	movs	r4, #1
 8003ac2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003ac4:	ea23 0304 	bic.w	r3, r3, r4
 8003ac8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003aca:	6a03      	ldr	r3, [r0, #32]
}
 8003acc:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003ad0:	408a      	lsls	r2, r1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	6202      	str	r2, [r0, #32]
}
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_TIMEx_HallSensor_MspInit>:
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <HAL_TIMEx_HallSensor_Init>:
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
  TIM_OC_InitTypeDef OC_Config;
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d04b      	beq.n	8003b78 <HAL_TIMEx_HallSensor_Init+0x9c>
{
 8003ae0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	4604      	mov	r4, r0
{
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	460d      	mov	r5, r1
  htim->State= HAL_TIM_STATE_BUSY;
 8003aea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
  HAL_TIMEx_HallSensor_MspInit(htim);
 8003aee:	f7ff fff3 	bl	8003ad8 <HAL_TIMEx_HallSensor_MspInit>
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af2:	1d21      	adds	r1, r4, #4
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	f7ff fc6d 	bl	80033d4 <TIM_Base_SetConfig>
  
  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8003afa:	68ab      	ldr	r3, [r5, #8]
 8003afc:	6829      	ldr	r1, [r5, #0]
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	2203      	movs	r2, #3
 8003b02:	f7ff fdbf 	bl	8003684 <TIM_TI1_SetConfig>
  
  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b06:	6820      	ldr	r0, [r4, #0]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003b08:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b0a:	6982      	ldr	r2, [r0, #24]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
  OC_Config.OCMode = TIM_OCMODE_PWM2;
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
  OC_Config.Pulse = sConfig->Commutation_Delay; 
 8003b0c:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b0e:	f022 020c 	bic.w	r2, r2, #12
 8003b12:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003b14:	6983      	ldr	r3, [r0, #24]
 8003b16:	4333      	orrs	r3, r6
 8003b18:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003b1a:	6843      	ldr	r3, [r0, #4]
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003b22:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay; 
 8003b24:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003b2c:	6883      	ldr	r3, [r0, #8]
 8003b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b32:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003b34:	6883      	ldr	r3, [r0, #8]
 8003b36:	f023 0307 	bic.w	r3, r3, #7
 8003b3a:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003b3c:	6883      	ldr	r3, [r0, #8]
 8003b3e:	f043 0304 	orr.w	r3, r3, #4
 8003b42:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003b44:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003b46:	2370      	movs	r3, #112	; 0x70
    
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003b48:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003b4a:	9301      	str	r3, [sp, #4]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003b4c:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b4e:	9506      	str	r5, [sp, #24]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b50:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b52:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b54:	9503      	str	r5, [sp, #12]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003b56:	f7ff fe67 	bl	8003828 <TIM_OC2_SetConfig>
  
  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b62:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
 8003b64:	685a      	ldr	r2, [r3, #4]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003b66:	2101      	movs	r1, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
 8003b68:	f042 0250 	orr.w	r2, r2, #80	; 0x50

  return HAL_OK;
 8003b6c:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
 8003b6e:	605a      	str	r2, [r3, #4]
  htim->State= HAL_TIM_STATE_READY;
 8003b70:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
}
 8003b74:	b008      	add	sp, #32
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003b78:	2001      	movs	r0, #1
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIMEx_HallSensor_MspDeInit>:
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop

08003b80 <HAL_TIMEx_HallSensor_DeInit>:
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	2202      	movs	r2, #2
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003b82:	6803      	ldr	r3, [r0, #0]
{
 8003b84:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8003b86:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8003b8a:	6a19      	ldr	r1, [r3, #32]
 8003b8c:	f241 1211 	movw	r2, #4369	; 0x1111
 8003b90:	4211      	tst	r1, r2
{
 8003b92:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8003b94:	d108      	bne.n	8003ba8 <HAL_TIMEx_HallSensor_DeInit+0x28>
 8003b96:	6a19      	ldr	r1, [r3, #32]
 8003b98:	f240 4244 	movw	r2, #1092	; 0x444
 8003b9c:	4211      	tst	r1, r2
 8003b9e:	d103      	bne.n	8003ba8 <HAL_TIMEx_HallSensor_DeInit+0x28>
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7ff ffe7 	bl	8003b7c <HAL_TIMEx_HallSensor_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003bb4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8003bb8:	bd10      	pop	{r4, pc}
 8003bba:	bf00      	nop

08003bbc <HAL_TIMEx_HallSensor_Start>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	6800      	ldr	r0, [r0, #0]
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	f7ff ff79 	bl	8003abc <TIM_CCxChannelCmd>
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	bd10      	pop	{r4, pc}

08003bd8 <HAL_TIMEx_HallSensor_Stop>:
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8003bd8:	2200      	movs	r2, #0
{
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8003bde:	4611      	mov	r1, r2
 8003be0:	6800      	ldr	r0, [r0, #0]
 8003be2:	f7ff ff6b 	bl	8003abc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	6a19      	ldr	r1, [r3, #32]
 8003bea:	f241 1211 	movw	r2, #4369	; 0x1111
 8003bee:	4211      	tst	r1, r2
 8003bf0:	d108      	bne.n	8003c04 <HAL_TIMEx_HallSensor_Stop+0x2c>
 8003bf2:	6a19      	ldr	r1, [r3, #32]
 8003bf4:	f240 4244 	movw	r2, #1092	; 0x444
 8003bf8:	4211      	tst	r1, r2
 8003bfa:	d103      	bne.n	8003c04 <HAL_TIMEx_HallSensor_Stop+0x2c>
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003c04:	2000      	movs	r0, #0
 8003c06:	bd10      	pop	{r4, pc}

08003c08 <HAL_TIMEx_HallSensor_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{ 
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c0c:	6800      	ldr	r0, [r0, #0]
 8003c0e:	68c3      	ldr	r3, [r0, #12]
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	60c3      	str	r3, [r0, #12]
  
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
 8003c16:	2201      	movs	r2, #1
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f7ff ff4f 	bl	8003abc <TIM_CCxChannelCmd>
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003c28:	2000      	movs	r0, #0
 8003c2a:	bd10      	pop	{r4, pc}

08003c2c <HAL_TIMEx_HallSensor_Stop_IT>:
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8003c2c:	2200      	movs	r2, #0
{
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8003c32:	4611      	mov	r1, r2
 8003c34:	6800      	ldr	r0, [r0, #0]
 8003c36:	f7ff ff41 	bl	8003abc <TIM_CCxChannelCmd>
  
  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	f022 0202 	bic.w	r2, r2, #2
 8003c42:	60da      	str	r2, [r3, #12]
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c44:	6a19      	ldr	r1, [r3, #32]
 8003c46:	f241 1211 	movw	r2, #4369	; 0x1111
 8003c4a:	4211      	tst	r1, r2
 8003c4c:	d108      	bne.n	8003c60 <HAL_TIMEx_HallSensor_Stop_IT+0x34>
 8003c4e:	6a19      	ldr	r1, [r3, #32]
 8003c50:	f240 4244 	movw	r2, #1092	; 0x444
 8003c54:	4211      	tst	r1, r2
 8003c56:	d103      	bne.n	8003c60 <HAL_TIMEx_HallSensor_Stop_IT+0x34>
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003c60:	2000      	movs	r0, #0
 8003c62:	bd10      	pop	{r4, pc}

08003c64 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
   if((htim->State == HAL_TIM_STATE_BUSY))
 8003c66:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8003c6a:	b2e4      	uxtb	r4, r4
 8003c6c:	2c02      	cmp	r4, #2
 8003c6e:	d028      	beq.n	8003cc2 <HAL_TIMEx_HallSensor_Start_DMA+0x5e>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8003c70:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8003c74:	b2e4      	uxtb	r4, r4
 8003c76:	2c01      	cmp	r4, #1
 8003c78:	d01d      	beq.n	8003cb6 <HAL_TIMEx_HallSensor_Start_DMA+0x52>
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4616      	mov	r6, r2
 8003c7e:	460d      	mov	r5, r1
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 8003c80:	2201      	movs	r2, #1
 8003c82:	2100      	movs	r1, #0
 8003c84:	6800      	ldr	r0, [r0, #0]
  
  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003c86:	4f10      	ldr	r7, [pc, #64]	; (8003cc8 <HAL_TIMEx_HallSensor_Start_DMA+0x64>)
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 8003c88:	f7ff ff18 	bl	8003abc <TIM_CCxChannelCmd>
  
  /* Enable the DMA Stream for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
 8003c8c:	6821      	ldr	r1, [r4, #0]
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
 8003c8e:	6a20      	ldr	r0, [r4, #32]
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_TIMEx_HallSensor_Start_DMA+0x68>)
 8003c92:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
 8003c94:	462a      	mov	r2, r5
 8003c96:	4633      	mov	r3, r6
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003c98:	64c7      	str	r7, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
 8003c9a:	3134      	adds	r1, #52	; 0x34
 8003c9c:	f001 fdb6 	bl	800580c <HAL_DMA_Start_IT>
  
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca8:	60da      	str	r2, [r3, #12]
 
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((uint32_t)pData == 0U) && (Length > 0U)) 
 8003cb6:	b901      	cbnz	r1, 8003cba <HAL_TIMEx_HallSensor_Start_DMA+0x56>
 8003cb8:	b91a      	cbnz	r2, 8003cc2 <HAL_TIMEx_HallSensor_Start_DMA+0x5e>
      htim->State = HAL_TIM_STATE_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8003cc0:	e7db      	b.n	8003c7a <HAL_TIMEx_HallSensor_Start_DMA+0x16>
      return HAL_ERROR;                                    
 8003cc2:	4620      	mov	r0, r4
}
 8003cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	08003395 	.word	0x08003395
 8003ccc:	0800318d 	.word	0x0800318d

08003cd0 <HAL_TIMEx_HallSensor_Stop_DMA>:
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8003cd0:	2200      	movs	r2, #0
{
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	6800      	ldr	r0, [r0, #0]
 8003cda:	f7ff feef 	bl	8003abc <TIM_CCxChannelCmd>
 
  
  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ce6:	60da      	str	r2, [r3, #12]
 
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ce8:	6a19      	ldr	r1, [r3, #32]
 8003cea:	f241 1211 	movw	r2, #4369	; 0x1111
 8003cee:	4211      	tst	r1, r2
 8003cf0:	d108      	bne.n	8003d04 <HAL_TIMEx_HallSensor_Stop_DMA+0x34>
 8003cf2:	6a19      	ldr	r1, [r3, #32]
 8003cf4:	f240 4244 	movw	r2, #1092	; 0x444
 8003cf8:	4211      	tst	r1, r2
 8003cfa:	d103      	bne.n	8003d04 <HAL_TIMEx_HallSensor_Stop_DMA+0x34>
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003d04:	2000      	movs	r0, #0
 8003d06:	bd10      	pop	{r4, pc}

08003d08 <HAL_TIMEx_PWMN_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003d08:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8003d0a:	2204      	movs	r2, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003d0c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 8003d0e:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8003d12:	ea20 0001 	bic.w	r0, r0, r1
 8003d16:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	4311      	orrs	r1, r2
 8003d1c:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8003d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
} 
 8003d2e:	2000      	movs	r0, #0
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop

08003d34 <HAL_TIMEx_OCN_Start>:
 8003d34:	f7ff bfe8 	b.w	8003d08 <HAL_TIMEx_PWMN_Start>

08003d38 <HAL_TIMEx_PWMN_Start_IT>:
  switch (Channel)
 8003d38:	290c      	cmp	r1, #12
 8003d3a:	d837      	bhi.n	8003dac <HAL_TIMEx_PWMN_Start_IT+0x74>
 8003d3c:	e8df f001 	tbb	[pc, r1]
 8003d40:	36363630 	.word	0x36363630
 8003d44:	3636362a 	.word	0x3636362a
 8003d48:	36363624 	.word	0x36363624
 8003d4c:	07          	.byte	0x07
 8003d4d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d4e:	6803      	ldr	r3, [r0, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	f042 0210 	orr.w	r2, r2, #16
 8003d56:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d5e:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8003d60:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 8003d62:	2204      	movs	r2, #4
 8003d64:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8003d68:	ea20 0001 	bic.w	r0, r0, r1
 8003d6c:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	4311      	orrs	r1, r2
 8003d72:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8003d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
} 
 8003d84:	2000      	movs	r0, #0
 8003d86:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d88:	6803      	ldr	r3, [r0, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	60da      	str	r2, [r3, #12]
    break;
 8003d92:	e7e1      	b.n	8003d58 <HAL_TIMEx_PWMN_Start_IT+0x20>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d94:	6803      	ldr	r3, [r0, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	f042 0204 	orr.w	r2, r2, #4
 8003d9c:	60da      	str	r2, [r3, #12]
    break;
 8003d9e:	e7db      	b.n	8003d58 <HAL_TIMEx_PWMN_Start_IT+0x20>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003da0:	6803      	ldr	r3, [r0, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	f042 0202 	orr.w	r2, r2, #2
 8003da8:	60da      	str	r2, [r3, #12]
    break;
 8003daa:	e7d5      	b.n	8003d58 <HAL_TIMEx_PWMN_Start_IT+0x20>
 8003dac:	6803      	ldr	r3, [r0, #0]
 8003dae:	e7d3      	b.n	8003d58 <HAL_TIMEx_PWMN_Start_IT+0x20>

08003db0 <HAL_TIMEx_OCN_Start_IT>:
 8003db0:	f7ff bfc2 	b.w	8003d38 <HAL_TIMEx_PWMN_Start_IT>

08003db4 <HAL_TIMEx_PWMN_Stop_IT>:
  switch (Channel)
 8003db4:	290c      	cmp	r1, #12
 8003db6:	d84f      	bhi.n	8003e58 <HAL_TIMEx_PWMN_Stop_IT+0xa4>
 8003db8:	e8df f001 	tbb	[pc, r1]
 8003dbc:	4e4e4e48 	.word	0x4e4e4e48
 8003dc0:	4e4e4e42 	.word	0x4e4e4e42
 8003dc4:	4e4e4e3c 	.word	0x4e4e4e3c
 8003dc8:	07          	.byte	0x07
 8003dc9:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003dca:	6803      	ldr	r3, [r0, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	f022 0210 	bic.w	r2, r2, #16
 8003dd2:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8003dd4:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 8003dd6:	2004      	movs	r0, #4
 8003dd8:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 8003ddc:	ea22 0101 	bic.w	r1, r2, r1
 8003de0:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	621a      	str	r2, [r3, #32]
  if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 8003de6:	6a19      	ldr	r1, [r3, #32]
 8003de8:	f240 4244 	movw	r2, #1092	; 0x444
 8003dec:	4211      	tst	r1, r2
 8003dee:	d103      	bne.n	8003df8 <HAL_TIMEx_PWMN_Stop_IT+0x44>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003df6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 8003df8:	6a19      	ldr	r1, [r3, #32]
 8003dfa:	f241 1211 	movw	r2, #4369	; 0x1111
 8003dfe:	4211      	tst	r1, r2
 8003e00:	d108      	bne.n	8003e14 <HAL_TIMEx_PWMN_Stop_IT+0x60>
 8003e02:	6a19      	ldr	r1, [r3, #32]
 8003e04:	f240 4244 	movw	r2, #1092	; 0x444
 8003e08:	4211      	tst	r1, r2
 8003e0a:	d103      	bne.n	8003e14 <HAL_TIMEx_PWMN_Stop_IT+0x60>
 8003e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8003e14:	6a19      	ldr	r1, [r3, #32]
 8003e16:	f241 1211 	movw	r2, #4369	; 0x1111
 8003e1a:	4211      	tst	r1, r2
 8003e1c:	d108      	bne.n	8003e30 <HAL_TIMEx_PWMN_Stop_IT+0x7c>
 8003e1e:	6a19      	ldr	r1, [r3, #32]
 8003e20:	f240 4244 	movw	r2, #1092	; 0x444
 8003e24:	4211      	tst	r1, r2
 8003e26:	d103      	bne.n	8003e30 <HAL_TIMEx_PWMN_Stop_IT+0x7c>
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
} 
 8003e30:	2000      	movs	r0, #0
 8003e32:	4770      	bx	lr
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003e34:	6803      	ldr	r3, [r0, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	f022 0208 	bic.w	r2, r2, #8
 8003e3c:	60da      	str	r2, [r3, #12]
    break;
 8003e3e:	e7c9      	b.n	8003dd4 <HAL_TIMEx_PWMN_Stop_IT+0x20>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003e40:	6803      	ldr	r3, [r0, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	f022 0204 	bic.w	r2, r2, #4
 8003e48:	60da      	str	r2, [r3, #12]
    break;
 8003e4a:	e7c3      	b.n	8003dd4 <HAL_TIMEx_PWMN_Stop_IT+0x20>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003e4c:	6803      	ldr	r3, [r0, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	f022 0202 	bic.w	r2, r2, #2
 8003e54:	60da      	str	r2, [r3, #12]
    break;
 8003e56:	e7bd      	b.n	8003dd4 <HAL_TIMEx_PWMN_Stop_IT+0x20>
 8003e58:	6803      	ldr	r3, [r0, #0]
 8003e5a:	e7bb      	b.n	8003dd4 <HAL_TIMEx_PWMN_Stop_IT+0x20>

08003e5c <HAL_TIMEx_OCN_Stop_IT>:
 8003e5c:	f7ff bfaa 	b.w	8003db4 <HAL_TIMEx_PWMN_Stop_IT>

08003e60 <HAL_TIMEx_PWMN_Start_DMA>:
{
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8003e62:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8003e66:	b2e4      	uxtb	r4, r4
 8003e68:	2c02      	cmp	r4, #2
 8003e6a:	d015      	beq.n	8003e98 <HAL_TIMEx_PWMN_Start_DMA+0x38>
  else if((htim->State == HAL_TIM_STATE_READY))
 8003e6c:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8003e70:	b2e4      	uxtb	r4, r4
 8003e72:	2c01      	cmp	r4, #1
 8003e74:	d00c      	beq.n	8003e90 <HAL_TIMEx_PWMN_Start_DMA+0x30>
 8003e76:	460d      	mov	r5, r1
 8003e78:	4604      	mov	r4, r0
  switch (Channel)
 8003e7a:	2d0c      	cmp	r5, #12
 8003e7c:	d865      	bhi.n	8003f4a <HAL_TIMEx_PWMN_Start_DMA+0xea>
 8003e7e:	e8df f005 	tbb	[pc, r5]
 8003e82:	640d      	.short	0x640d
 8003e84:	64536464 	.word	0x64536464
 8003e88:	64316464 	.word	0x64316464
 8003e8c:	6464      	.short	0x6464
 8003e8e:	42          	.byte	0x42
 8003e8f:	00          	.byte	0x00
    if(((uint32_t)pData == 0U) && (Length > 0U)) 
 8003e90:	2a00      	cmp	r2, #0
 8003e92:	d15c      	bne.n	8003f4e <HAL_TIMEx_PWMN_Start_DMA+0xee>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d05a      	beq.n	8003f4e <HAL_TIMEx_PWMN_Start_DMA+0xee>
      return HAL_ERROR;                                    
 8003e98:	4620      	mov	r0, r4
}
 8003e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8003e9c:	6826      	ldr	r6, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e9e:	6a00      	ldr	r0, [r0, #32]
 8003ea0:	492d      	ldr	r1, [pc, #180]	; (8003f58 <HAL_TIMEx_PWMN_Start_DMA+0xf8>)
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ea2:	4f2e      	ldr	r7, [pc, #184]	; (8003f5c <HAL_TIMEx_PWMN_Start_DMA+0xfc>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ea4:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ea6:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	f106 0234 	add.w	r2, r6, #52	; 0x34
 8003eae:	f001 fcad 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8003ebc:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	fa02 f105 	lsl.w	r1, r2, r5
  TIMx->CCER &= ~tmp;
 8003ec4:	ea20 0001 	bic.w	r0, r0, r1
 8003ec8:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	6219      	str	r1, [r3, #32]
    __HAL_TIM_MOE_ENABLE(htim);
 8003ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim); 
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8003ee4:	6826      	ldr	r6, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ee6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003ee8:	491b      	ldr	r1, [pc, #108]	; (8003f58 <HAL_TIMEx_PWMN_Start_DMA+0xf8>)
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003eea:	4f1c      	ldr	r7, [pc, #112]	; (8003f5c <HAL_TIMEx_PWMN_Start_DMA+0xfc>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003eec:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003eee:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	f106 023c 	add.w	r2, r6, #60	; 0x3c
 8003ef6:	f001 fc89 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f02:	60da      	str	r2, [r3, #12]
    break;
 8003f04:	e7da      	b.n	8003ebc <HAL_TIMEx_PWMN_Start_DMA+0x5c>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8003f06:	6826      	ldr	r6, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f08:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003f0a:	4913      	ldr	r1, [pc, #76]	; (8003f58 <HAL_TIMEx_PWMN_Start_DMA+0xf8>)
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003f0c:	4f13      	ldr	r7, [pc, #76]	; (8003f5c <HAL_TIMEx_PWMN_Start_DMA+0xfc>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f0e:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003f10:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8003f12:	4611      	mov	r1, r2
 8003f14:	f106 0240 	add.w	r2, r6, #64	; 0x40
 8003f18:	f001 fc78 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f24:	60da      	str	r2, [r3, #12]
    break;
 8003f26:	e7c9      	b.n	8003ebc <HAL_TIMEx_PWMN_Start_DMA+0x5c>
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8003f28:	6826      	ldr	r6, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003f2c:	490a      	ldr	r1, [pc, #40]	; (8003f58 <HAL_TIMEx_PWMN_Start_DMA+0xf8>)
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f2e:	4f0b      	ldr	r7, [pc, #44]	; (8003f5c <HAL_TIMEx_PWMN_Start_DMA+0xfc>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f30:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f32:	64c7      	str	r7, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8003f34:	4611      	mov	r1, r2
 8003f36:	f106 0238 	add.w	r2, r6, #56	; 0x38
 8003f3a:	f001 fc67 	bl	800580c <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f46:	60da      	str	r2, [r3, #12]
    break;
 8003f48:	e7b8      	b.n	8003ebc <HAL_TIMEx_PWMN_Start_DMA+0x5c>
 8003f4a:	6803      	ldr	r3, [r0, #0]
 8003f4c:	e7b6      	b.n	8003ebc <HAL_TIMEx_PWMN_Start_DMA+0x5c>
      htim->State = HAL_TIM_STATE_BUSY;
 8003f4e:	2402      	movs	r4, #2
 8003f50:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8003f54:	e78f      	b.n	8003e76 <HAL_TIMEx_PWMN_Start_DMA+0x16>
 8003f56:	bf00      	nop
 8003f58:	080031dd 	.word	0x080031dd
 8003f5c:	08003395 	.word	0x08003395

08003f60 <HAL_TIMEx_OCN_Start_DMA>:
 8003f60:	f7ff bf7e 	b.w	8003e60 <HAL_TIMEx_PWMN_Start_DMA>

08003f64 <HAL_TIMEx_PWMN_Stop_DMA>:
{
 8003f64:	b410      	push	{r4}
  switch (Channel)
 8003f66:	290c      	cmp	r1, #12
 8003f68:	d84b      	bhi.n	8004002 <HAL_TIMEx_PWMN_Stop_DMA+0x9e>
 8003f6a:	e8df f001 	tbb	[pc, r1]
 8003f6e:	4a44      	.short	0x4a44
 8003f70:	4a3e4a4a 	.word	0x4a3e4a4a
 8003f74:	4a384a4a 	.word	0x4a384a4a
 8003f78:	4a4a      	.short	0x4a4a
 8003f7a:	07          	.byte	0x07
 8003f7b:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003f7c:	6803      	ldr	r3, [r0, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f84:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8003f86:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 8003f88:	2404      	movs	r4, #4
 8003f8a:	fa04 f101 	lsl.w	r1, r4, r1
  TIMx->CCER &= ~tmp;
 8003f8e:	ea22 0101 	bic.w	r1, r2, r1
 8003f92:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	621a      	str	r2, [r3, #32]
    __HAL_TIM_MOE_DISABLE(htim);
 8003f98:	6a19      	ldr	r1, [r3, #32]
 8003f9a:	f241 1211 	movw	r2, #4369	; 0x1111
 8003f9e:	4211      	tst	r1, r2
 8003fa0:	d108      	bne.n	8003fb4 <HAL_TIMEx_PWMN_Stop_DMA+0x50>
 8003fa2:	6a19      	ldr	r1, [r3, #32]
 8003fa4:	f240 4244 	movw	r2, #1092	; 0x444
 8003fa8:	4211      	tst	r1, r2
 8003faa:	d103      	bne.n	8003fb4 <HAL_TIMEx_PWMN_Stop_DMA+0x50>
 8003fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8003fb4:	6a19      	ldr	r1, [r3, #32]
 8003fb6:	f241 1211 	movw	r2, #4369	; 0x1111
 8003fba:	4211      	tst	r1, r2
 8003fbc:	d108      	bne.n	8003fd0 <HAL_TIMEx_PWMN_Stop_DMA+0x6c>
 8003fbe:	6a19      	ldr	r1, [r3, #32]
 8003fc0:	f240 4244 	movw	r2, #1092	; 0x444
 8003fc4:	4211      	tst	r1, r2
 8003fc6:	d103      	bne.n	8003fd0 <HAL_TIMEx_PWMN_Stop_DMA+0x6c>
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8003fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fda:	2000      	movs	r0, #0
 8003fdc:	4770      	bx	lr
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003fde:	6803      	ldr	r3, [r0, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe6:	60da      	str	r2, [r3, #12]
    break;
 8003fe8:	e7cd      	b.n	8003f86 <HAL_TIMEx_PWMN_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003fea:	6803      	ldr	r3, [r0, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	60da      	str	r2, [r3, #12]
    break;
 8003ff4:	e7c7      	b.n	8003f86 <HAL_TIMEx_PWMN_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ff6:	6803      	ldr	r3, [r0, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ffe:	60da      	str	r2, [r3, #12]
    break;
 8004000:	e7c1      	b.n	8003f86 <HAL_TIMEx_PWMN_Stop_DMA+0x22>
 8004002:	6803      	ldr	r3, [r0, #0]
 8004004:	e7bf      	b.n	8003f86 <HAL_TIMEx_PWMN_Stop_DMA+0x22>
 8004006:	bf00      	nop

08004008 <HAL_TIMEx_OCN_Stop_DMA>:
 8004008:	f7ff bfac 	b.w	8003f64 <HAL_TIMEx_PWMN_Stop_DMA>

0800400c <HAL_TIMEx_OnePulseN_Start>:
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
 800400c:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1NE << Channel;
 800400e:	2204      	movs	r2, #4
  TIMx->CCER &= ~tmp;
 8004010:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 8004012:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8004016:	ea20 0001 	bic.w	r0, r0, r1
 800401a:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	4311      	orrs	r1, r2
 8004020:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8004022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004024:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004028:	645a      	str	r2, [r3, #68]	; 0x44
}
 800402a:	2000      	movs	r0, #0
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop

08004030 <HAL_TIMEx_OnePulseN_Stop>:
    TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8004030:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1NE << Channel;
 8004032:	2004      	movs	r0, #4
  TIMx->CCER &= ~tmp;
 8004034:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 8004036:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 800403a:	ea22 0201 	bic.w	r2, r2, r1
 800403e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	621a      	str	r2, [r3, #32]
    __HAL_TIM_MOE_DISABLE(htim);
 8004044:	6a19      	ldr	r1, [r3, #32]
 8004046:	f241 1211 	movw	r2, #4369	; 0x1111
 800404a:	4211      	tst	r1, r2
 800404c:	d104      	bne.n	8004058 <HAL_TIMEx_OnePulseN_Stop+0x28>
 800404e:	6a19      	ldr	r1, [r3, #32]
 8004050:	f240 4244 	movw	r2, #1092	; 0x444
 8004054:	4211      	tst	r1, r2
 8004056:	d00f      	beq.n	8004078 <HAL_TIMEx_OnePulseN_Stop+0x48>
  __HAL_TIM_DISABLE(htim); 
 8004058:	6a19      	ldr	r1, [r3, #32]
 800405a:	f241 1211 	movw	r2, #4369	; 0x1111
 800405e:	4211      	tst	r1, r2
 8004060:	d108      	bne.n	8004074 <HAL_TIMEx_OnePulseN_Stop+0x44>
 8004062:	6a19      	ldr	r1, [r3, #32]
 8004064:	f240 4244 	movw	r2, #1092	; 0x444
 8004068:	4211      	tst	r1, r2
 800406a:	d103      	bne.n	8004074 <HAL_TIMEx_OnePulseN_Stop+0x44>
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f022 0201 	bic.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
}
 8004074:	2000      	movs	r0, #0
 8004076:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8004078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
 8004080:	e7ea      	b.n	8004058 <HAL_TIMEx_OnePulseN_Stop+0x28>
 8004082:	bf00      	nop

08004084 <HAL_TIMEx_PWMN_Stop>:
 8004084:	f7ff bfd4 	b.w	8004030 <HAL_TIMEx_OnePulseN_Stop>

08004088 <HAL_TIMEx_OCN_Stop>:
 8004088:	f7ff bfd2 	b.w	8004030 <HAL_TIMEx_OnePulseN_Stop>

0800408c <HAL_TIMEx_OnePulseN_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800408c:	6803      	ldr	r3, [r0, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	f042 0202 	orr.w	r2, r2, #2
 8004094:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	f042 0204 	orr.w	r2, r2, #4
 800409c:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 800409e:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 80040a0:	2204      	movs	r2, #4
 80040a2:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80040a6:	ea20 0001 	bic.w	r0, r0, r1
 80040aa:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	4311      	orrs	r1, r2
 80040b0:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 80040b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
  } 
 80040ba:	2000      	movs	r0, #0
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop

080040c0 <HAL_TIMEx_OnePulseN_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80040c0:	6803      	ldr	r3, [r0, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	f022 0202 	bic.w	r2, r2, #2
 80040c8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	f022 0204 	bic.w	r2, r2, #4
 80040d0:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80040d2:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 80040d4:	2004      	movs	r0, #4
 80040d6:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 80040da:	ea22 0201 	bic.w	r2, r2, r1
 80040de:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_DISABLE(htim);
 80040e4:	6a19      	ldr	r1, [r3, #32]
 80040e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80040ea:	4211      	tst	r1, r2
 80040ec:	d104      	bne.n	80040f8 <HAL_TIMEx_OnePulseN_Stop_IT+0x38>
 80040ee:	6a19      	ldr	r1, [r3, #32]
 80040f0:	f240 4244 	movw	r2, #1092	; 0x444
 80040f4:	4211      	tst	r1, r2
 80040f6:	d00f      	beq.n	8004118 <HAL_TIMEx_OnePulseN_Stop_IT+0x58>
   __HAL_TIM_DISABLE(htim);  
 80040f8:	6a19      	ldr	r1, [r3, #32]
 80040fa:	f241 1211 	movw	r2, #4369	; 0x1111
 80040fe:	4211      	tst	r1, r2
 8004100:	d108      	bne.n	8004114 <HAL_TIMEx_OnePulseN_Stop_IT+0x54>
 8004102:	6a19      	ldr	r1, [r3, #32]
 8004104:	f240 4244 	movw	r2, #1092	; 0x444
 8004108:	4211      	tst	r1, r2
 800410a:	d103      	bne.n	8004114 <HAL_TIMEx_OnePulseN_Stop_IT+0x54>
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	2000      	movs	r0, #0
 8004116:	4770      	bx	lr
  __HAL_TIM_MOE_DISABLE(htim);
 8004118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800411a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800411e:	645a      	str	r2, [r3, #68]	; 0x44
 8004120:	e7ea      	b.n	80040f8 <HAL_TIMEx_OnePulseN_Stop_IT+0x38>
 8004122:	bf00      	nop

08004124 <HAL_TIMEx_ConfigCommutationEvent>:
  __HAL_LOCK(htim);
 8004124:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004128:	2b01      	cmp	r3, #1
 800412a:	d020      	beq.n	800416e <HAL_TIMEx_ConfigCommutationEvent+0x4a>
 800412c:	2301      	movs	r3, #1
{
 800412e:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8004130:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8004134:	f031 0330 	bics.w	r3, r1, #48	; 0x30
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004138:	6803      	ldr	r3, [r0, #0]
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800413a:	d106      	bne.n	800414a <HAL_TIMEx_ConfigCommutationEvent+0x26>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800413c:	689c      	ldr	r4, [r3, #8]
 800413e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8004142:	609c      	str	r4, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8004144:	689c      	ldr	r4, [r3, #8]
 8004146:	4321      	orrs	r1, r4
 8004148:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	f041 0101 	orr.w	r1, r1, #1
 8004150:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	f021 0104 	bic.w	r1, r1, #4
 8004158:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800415a:	6859      	ldr	r1, [r3, #4]
  __HAL_UNLOCK(htim);
 800415c:	2400      	movs	r4, #0
  htim->Instance->CR2 |= CommutationSource;
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(htim);
 8004162:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
}
 8004166:	4620      	mov	r0, r4
 8004168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800416c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800416e:	2302      	movs	r3, #2
}
 8004170:	4618      	mov	r0, r3
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_ConfigCommutationEvent_IT>:
  __HAL_LOCK(htim);
 8004174:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004178:	2b01      	cmp	r3, #1
 800417a:	d024      	beq.n	80041c6 <HAL_TIMEx_ConfigCommutationEvent_IT+0x52>
 800417c:	2301      	movs	r3, #1
{
 800417e:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8004180:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8004184:	f031 0330 	bics.w	r3, r1, #48	; 0x30
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004188:	6803      	ldr	r3, [r0, #0]
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800418a:	d106      	bne.n	800419a <HAL_TIMEx_ConfigCommutationEvent_IT+0x26>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800418c:	689c      	ldr	r4, [r3, #8]
 800418e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8004192:	609c      	str	r4, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8004194:	689c      	ldr	r4, [r3, #8]
 8004196:	4321      	orrs	r1, r4
 8004198:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800419a:	6859      	ldr	r1, [r3, #4]
}
 800419c:	f85d 4b04 	ldr.w	r4, [sp], #4
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80041a0:	f041 0101 	orr.w	r1, r1, #1
 80041a4:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	f021 0104 	bic.w	r1, r1, #4
 80041ac:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 80041b4:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);
 80041b6:	2100      	movs	r1, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 80041b8:	f042 0220 	orr.w	r2, r2, #32
 80041bc:	60da      	str	r2, [r3, #12]
  __HAL_UNLOCK(htim);
 80041be:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
}
 80041c2:	4608      	mov	r0, r1
 80041c4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80041c6:	2302      	movs	r3, #2
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	4770      	bx	lr

080041cc <HAL_TIMEx_ConfigCommutationEvent_DMA>:
  __HAL_LOCK(htim);
 80041cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d028      	beq.n	8004226 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x5a>
 80041d4:	2301      	movs	r3, #1
{
 80041d6:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80041d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80041dc:	f031 0330 	bics.w	r3, r1, #48	; 0x30
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80041e0:	6803      	ldr	r3, [r0, #0]
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80041e2:	d106      	bne.n	80041f2 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x26>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80041e4:	689c      	ldr	r4, [r3, #8]
 80041e6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80041ea:	609c      	str	r4, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 80041ec:	689c      	ldr	r4, [r3, #8]
 80041ee:	4321      	orrs	r1, r4
 80041f0:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80041f2:	6859      	ldr	r1, [r3, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
 80041f4:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80041f6:	4c0d      	ldr	r4, [pc, #52]	; (800422c <HAL_TIMEx_ConfigCommutationEvent_DMA+0x60>)
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 80041f8:	4e0d      	ldr	r6, [pc, #52]	; (8004230 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x64>)
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80041fa:	f041 0101 	orr.w	r1, r1, #1
 80041fe:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	f021 0104 	bic.w	r1, r1, #4
 8004206:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800420e:	68da      	ldr	r2, [r3, #12]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
 8004210:	63ec      	str	r4, [r5, #60]	; 0x3c
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8004212:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  __HAL_UNLOCK(htim);
 8004216:	2400      	movs	r4, #0
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 8004218:	64ee      	str	r6, [r5, #76]	; 0x4c
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800421a:	60da      	str	r2, [r3, #12]
  __HAL_UNLOCK(htim);
 800421c:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
}
 8004220:	4620      	mov	r0, r4
 8004222:	bc70      	pop	{r4, r5, r6}
 8004224:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004226:	2102      	movs	r1, #2
}
 8004228:	4608      	mov	r0, r1
 800422a:	4770      	bx	lr
 800422c:	080042f1 	.word	0x080042f1
 8004230:	08003395 	.word	0x08003395

08004234 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004234:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004238:	2b01      	cmp	r3, #1
 800423a:	d01e      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800423c:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800423e:	2002      	movs	r0, #2
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004240:	6813      	ldr	r3, [r2, #0]
{
 8004242:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004248:	685c      	ldr	r4, [r3, #4]
 800424a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800424e:	e891 0060 	ldmia.w	r1, {r5, r6}
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004252:	605c      	str	r4, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004254:	6858      	ldr	r0, [r3, #4]
 8004256:	4328      	orrs	r0, r5
 8004258:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800425a:	6898      	ldr	r0, [r3, #8]
 800425c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004260:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004262:	6899      	ldr	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 8004264:	2400      	movs	r4, #0
  htim->State = HAL_TIM_STATE_READY;
 8004266:	2501      	movs	r5, #1
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004268:	4331      	orrs	r1, r6
 800426a:	6099      	str	r1, [r3, #8]
  return HAL_OK;
 800426c:	4620      	mov	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 800426e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8004272:	f882 4038 	strb.w	r4, [r2, #56]	; 0x38
} 
 8004276:	bc70      	pop	{r4, r5, r6}
 8004278:	4770      	bx	lr
  __HAL_LOCK(htim);
 800427a:	2002      	movs	r0, #2
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004280:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004284:	2b01      	cmp	r3, #1
 8004286:	d01a      	beq.n	80042be <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
{
 8004288:	b4f0      	push	{r4, r5, r6, r7}
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 800428a:	e891 008c 	ldmia.w	r1, {r2, r3, r7}
                                   sBreakDeadTimeConfig->LockLevel        |
 800428e:	68ce      	ldr	r6, [r1, #12]
                                   sBreakDeadTimeConfig->DeadTime         |
 8004290:	690d      	ldr	r5, [r1, #16]
                                   sBreakDeadTimeConfig->BreakState       |
 8004292:	694c      	ldr	r4, [r1, #20]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8004294:	6989      	ldr	r1, [r1, #24]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 8004296:	4313      	orrs	r3, r2
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8004298:	433b      	orrs	r3, r7
                                   sBreakDeadTimeConfig->LockLevel        |
 800429a:	4333      	orrs	r3, r6
                                   sBreakDeadTimeConfig->DeadTime         |
 800429c:	432b      	orrs	r3, r5
                                   sBreakDeadTimeConfig->BreakState       |
 800429e:	4323      	orrs	r3, r4
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 80042a0:	6805      	ldr	r5, [r0, #0]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 80042a2:	430b      	orrs	r3, r1
  htim->State = HAL_TIM_STATE_READY;                                 
 80042a4:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 80042a6:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	2202      	movs	r2, #2
 80042aa:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 80042ae:	646b      	str	r3, [r5, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;                                 
 80042b0:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80042b4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
}
 80042b8:	bcf0      	pop	{r4, r5, r6, r7}
 80042ba:	4608      	mov	r0, r1
 80042bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042be:	2202      	movs	r2, #2
}
 80042c0:	4610      	mov	r0, r2
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_RemapConfig>:
  __HAL_LOCK(htim);
 80042c4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80042c8:	2a01      	cmp	r2, #1
 80042ca:	d00d      	beq.n	80042e8 <HAL_TIMEx_RemapConfig+0x24>
 80042cc:	4603      	mov	r3, r0
  htim->Instance->OR = Remap;
 80042ce:	6800      	ldr	r0, [r0, #0]
{
 80042d0:	b410      	push	{r4}
  __HAL_UNLOCK(htim);  
 80042d2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	2401      	movs	r4, #1
  htim->Instance->OR = Remap;
 80042d6:	6501      	str	r1, [r0, #80]	; 0x50
  return HAL_OK;
 80042d8:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 80042da:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 80042de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80042e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042e6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042e8:	2002      	movs	r0, #2
 80042ea:	4770      	bx	lr

080042ec <HAL_TIMEx_CommutationCallback>:
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop

080042f0 <TIMEx_DMACommutationCplt>:
{
 80042f0:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State= HAL_TIM_STATE_READY;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_TIMEx_CommutationCallback(htim); 
 80042fa:	f7ff fff7 	bl	80042ec <HAL_TIMEx_CommutationCallback>
 80042fe:	bd08      	pop	{r3, pc}

08004300 <HAL_TIMEx_BreakCallback>:
{
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop

08004304 <HAL_TIMEx_HallSensor_GetState>:
  return htim->State;
 8004304:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop

0800430c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800430c:	b084      	sub	sp, #16
 800430e:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004310:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 8004312:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004314:	2d01      	cmp	r5, #1
{
 8004316:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800431a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800431c:	d014      	beq.n	8004348 <USB_CoreInit+0x3c>
    USB_CoreReset(USBx); 
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800431e:	68c3      	ldr	r3, [r0, #12]
 8004320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004324:	60c3      	str	r3, [r0, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8004326:	f000 fce3 	bl	8004cf0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800432a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800432e:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8004330:	9b08      	ldr	r3, [sp, #32]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d103      	bne.n	800433e <USB_CoreInit+0x32>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004336:	68a3      	ldr	r3, [r4, #8]
 8004338:	f043 0320 	orr.w	r3, r3, #32
 800433c:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 800433e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004342:	2000      	movs	r0, #0
 8004344:	b004      	add	sp, #16
 8004346:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004348:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if(cfg.use_external_vbus == 1U)
 800434a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800434c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004350:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004352:	68c3      	ldr	r3, [r0, #12]
 8004354:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800435e:	68c3      	ldr	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8004360:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004362:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004366:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8004368:	d003      	beq.n	8004372 <USB_CoreInit+0x66>
    USB_CoreReset(USBx); 
 800436a:	4620      	mov	r0, r4
 800436c:	f000 fcc0 	bl	8004cf0 <USB_CoreReset>
 8004370:	e7de      	b.n	8004330 <USB_CoreInit+0x24>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004372:	68c3      	ldr	r3, [r0, #12]
 8004374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004378:	60c3      	str	r3, [r0, #12]
 800437a:	e7f6      	b.n	800436a <USB_CoreInit+0x5e>

0800437c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800437c:	4602      	mov	r2, r0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
  return HAL_OK;
}
 800437e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004380:	6893      	ldr	r3, [r2, #8]
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6093      	str	r3, [r2, #8]
}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop

0800438c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800438c:	4602      	mov	r2, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
  return HAL_OK;
}
 800438e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004390:	6893      	ldr	r3, [r2, #8]
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	6093      	str	r3, [r2, #8]
}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop

0800439c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800439c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800439e:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80043a0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80043a2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043a6:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80043a8:	d009      	beq.n	80043be <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80043aa:	b919      	cbnz	r1, 80043b4 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80043ac:	68c3      	ldr	r3, [r0, #12]
 80043ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043b2:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 80043b4:	2032      	movs	r0, #50	; 0x32
 80043b6:	f7fb ff4b 	bl	8000250 <HAL_Delay>
  
  return HAL_OK;
}
 80043ba:	2000      	movs	r0, #0
 80043bc:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80043be:	68c3      	ldr	r3, [r0, #12]
 80043c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043c4:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80043c6:	2032      	movs	r0, #50	; 0x32
 80043c8:	f7fb ff42 	bl	8000250 <HAL_Delay>
}
 80043cc:	2000      	movs	r0, #0
 80043ce:	bd08      	pop	{r3, pc}

080043d0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d0:	b084      	sub	sp, #16
 80043d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043d6:	ac08      	add	r4, sp, #32
 80043d8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80043de:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80043e0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80043e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043e8:	468e      	mov	lr, r1
 80043ea:	6383      	str	r3, [r0, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0U)
 80043ec:	b91e      	cbnz	r6, 80043f6 <USB_DevInit+0x26>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80043f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043f4:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80043fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043fe:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 8004402:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8004406:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004408:	f500 6500 	add.w	r5, r0, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800440c:	f000 8085 	beq.w	800451a <USB_DevInit+0x14a>
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8004410:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004414:	f043 0303 	orr.w	r3, r3, #3
 8004418:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800441c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004420:	6103      	str	r3, [r0, #16]
 8004422:	4b45      	ldr	r3, [pc, #276]	; (8004538 <USB_DevInit+0x168>)
 8004424:	e001      	b.n	800442a <USB_DevInit+0x5a>
    if (++count > 200000U)
 8004426:	3b01      	subs	r3, #1
 8004428:	d002      	beq.n	8004430 <USB_DevInit+0x60>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800442a:	6902      	ldr	r2, [r0, #16]
 800442c:	0691      	lsls	r1, r2, #26
 800442e:	d4fa      	bmi.n	8004426 <USB_DevInit+0x56>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004430:	2310      	movs	r3, #16
 8004432:	6103      	str	r3, [r0, #16]
 8004434:	4b40      	ldr	r3, [pc, #256]	; (8004538 <USB_DevInit+0x168>)
 8004436:	e001      	b.n	800443c <USB_DevInit+0x6c>
    if (++count > 200000U)
 8004438:	3b01      	subs	r3, #1
 800443a:	d002      	beq.n	8004442 <USB_DevInit+0x72>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800443c:	6902      	ldr	r2, [r0, #16]
 800443e:	06d2      	lsls	r2, r2, #27
 8004440:	d4fa      	bmi.n	8004438 <USB_DevInit+0x68>
  USBx_DEVICE->DIEPMSK = 0U;
 8004442:	2200      	movs	r2, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx_DEVICE->DIEPMSK = 0U;
 8004448:	612a      	str	r2, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800444a:	616a      	str	r2, [r5, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800444c:	61ab      	str	r3, [r5, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 800444e:	61ea      	str	r2, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004450:	f1be 0f00 	cmp.w	lr, #0
 8004454:	d028      	beq.n	80044a8 <USB_DevInit+0xd8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004456:	4614      	mov	r4, r2
 8004458:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800445c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8004460:	27ff      	movs	r7, #255	; 0xff
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004462:	6819      	ldr	r1, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004464:	3201      	adds	r2, #1
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004466:	2900      	cmp	r1, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8004468:	bfb4      	ite	lt
 800446a:	f8c3 8000 	strlt.w	r8, [r3]
      USBx_INEP(i)->DIEPCTL = 0U;
 800446e:	601c      	strge	r4, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004470:	4572      	cmp	r2, lr
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004472:	611c      	str	r4, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8004474:	609f      	str	r7, [r3, #8]
 8004476:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800447a:	d1f2      	bne.n	8004462 <USB_DevInit+0x92>
 800447c:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800447e:	460f      	mov	r7, r1
 8004480:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004484:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8004488:	f04f 0cff 	mov.w	ip, #255	; 0xff
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800448c:	681c      	ldr	r4, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800448e:	3101      	adds	r1, #1
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004490:	2c00      	cmp	r4, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004492:	bfb4      	ite	lt
 8004494:	f8c3 8000 	strlt.w	r8, [r3]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004498:	601f      	strge	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800449a:	428a      	cmp	r2, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800449c:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 800449e:	f8c3 c008 	str.w	ip, [r3, #8]
 80044a2:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a6:	d1f1      	bne.n	800448c <USB_DevInit+0xbc>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044a8:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80044aa:	f1b9 0f01 	cmp.w	r9, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b2:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80044b4:	d022      	beq.n	80044fc <USB_DevInit+0x12c>
  USBx->GINTMSK = 0U;
 80044b6:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044b8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 80044bc:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044be:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == DISABLE)
 80044c0:	f1b9 0f00 	cmp.w	r9, #0
 80044c4:	d103      	bne.n	80044ce <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80044c6:	6983      	ldr	r3, [r0, #24]
 80044c8:	f043 0310 	orr.w	r3, r3, #16
 80044cc:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80044ce:	6981      	ldr	r1, [r0, #24]
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <USB_DevInit+0x16c>)
  if(cfg.Sof_enable)
 80044d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6183      	str	r3, [r0, #24]
  if(cfg.Sof_enable)
 80044d8:	b11a      	cbz	r2, 80044e2 <USB_DevInit+0x112>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044da:	6983      	ldr	r3, [r0, #24]
 80044dc:	f043 0308 	orr.w	r3, r3, #8
 80044e0:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 80044e2:	2e01      	cmp	r6, #1
 80044e4:	d105      	bne.n	80044f2 <USB_DevInit+0x122>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80044e6:	6983      	ldr	r3, [r0, #24]
 80044e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	6183      	str	r3, [r0, #24]
}
 80044f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044f6:	2000      	movs	r0, #0
 80044f8:	b004      	add	sp, #16
 80044fa:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <USB_DevInit+0x170>)
 80044fe:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8004500:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	f043 0303 	orr.w	r3, r3, #3
 800450a:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 800450c:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800450e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
    i= USBx_DEVICE->DTHRCTL;
 8004512:	6b29      	ldr	r1, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8004514:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004516:	6143      	str	r3, [r0, #20]
 8004518:	e7d9      	b.n	80044ce <USB_DevInit+0xfe>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800451a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800451c:	b923      	cbnz	r3, 8004528 <USB_DevInit+0x158>
  USBx_DEVICE->DCFG |= speed;
 800451e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004522:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8004526:	e779      	b.n	800441c <USB_DevInit+0x4c>
 8004528:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8004534:	e772      	b.n	800441c <USB_DevInit+0x4c>
 8004536:	bf00      	nop
 8004538:	00030d40 	.word	0x00030d40
 800453c:	803c3800 	.word	0x803c3800
 8004540:	00800100 	.word	0x00800100

08004544 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8004544:	0189      	lsls	r1, r1, #6
 8004546:	f041 0120 	orr.w	r1, r1, #32
 800454a:	6101      	str	r1, [r0, #16]
 800454c:	4a05      	ldr	r2, [pc, #20]	; (8004564 <USB_FlushTxFifo+0x20>)
 800454e:	e001      	b.n	8004554 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 8004550:	3a01      	subs	r2, #1
 8004552:	d005      	beq.n	8004560 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004554:	6903      	ldr	r3, [r0, #16]
 8004556:	f013 0320 	ands.w	r3, r3, #32
 800455a:	d1f9      	bne.n	8004550 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800455c:	4618      	mov	r0, r3
 800455e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004560:	2003      	movs	r0, #3
}
 8004562:	4770      	bx	lr
 8004564:	00030d40 	.word	0x00030d40

08004568 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004568:	2310      	movs	r3, #16
 800456a:	6103      	str	r3, [r0, #16]
 800456c:	4a05      	ldr	r2, [pc, #20]	; (8004584 <USB_FlushRxFifo+0x1c>)
 800456e:	e001      	b.n	8004574 <USB_FlushRxFifo+0xc>
    if (++count > 200000U)
 8004570:	3a01      	subs	r2, #1
 8004572:	d005      	beq.n	8004580 <USB_FlushRxFifo+0x18>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004574:	6903      	ldr	r3, [r0, #16]
 8004576:	f013 0310 	ands.w	r3, r3, #16
 800457a:	d1f9      	bne.n	8004570 <USB_FlushRxFifo+0x8>
  return HAL_OK;
 800457c:	4618      	mov	r0, r3
 800457e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004580:	2003      	movs	r0, #3
}
 8004582:	4770      	bx	lr
 8004584:	00030d40 	.word	0x00030d40

08004588 <USB_SetDevSpeed>:
{
 8004588:	4602      	mov	r2, r0
  return HAL_OK;
}
 800458a:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG |= speed;
 800458c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8004590:	4319      	orrs	r1, r3
 8004592:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
}
 8004596:	4770      	bx	lr

08004598 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004598:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800459c:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 80045a0:	f010 0006 	ands.w	r0, r0, #6
 80045a4:	d012      	beq.n	80045cc <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80045a6:	6893      	ldr	r3, [r2, #8]
 80045a8:	f003 0306 	and.w	r3, r3, #6
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d00c      	beq.n	80045ca <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80045b0:	6893      	ldr	r3, [r2, #8]
 80045b2:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d007      	beq.n	80045ca <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80045ba:	6893      	ldr	r3, [r2, #8]
 80045bc:	f003 0306 	and.w	r3, r3, #6
 80045c0:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 80045c2:	bf14      	ite	ne
 80045c4:	2000      	movne	r0, #0
 80045c6:	2002      	moveq	r0, #2
 80045c8:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 80045ca:	2003      	movs	r0, #3
  }
  
  return speed;
}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop

080045d0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045d0:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 80045d2:	784b      	ldrb	r3, [r1, #1]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d020      	beq.n	800461a <USB_ActivateEndpoint+0x4a>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80045d8:	780c      	ldrb	r4, [r1, #0]
 80045da:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80045de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045e2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80045e6:	40a3      	lsls	r3, r4
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045e8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80045ec:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045ee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80045f2:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045f4:	6803      	ldr	r3, [r0, #0]
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	d40c      	bmi.n	8004614 <USB_ActivateEndpoint+0x44>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80045fa:	688a      	ldr	r2, [r1, #8]
 80045fc:	78cc      	ldrb	r4, [r1, #3]
 80045fe:	6801      	ldr	r1, [r0, #0]
 8004600:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004604:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8004610:	430b      	orrs	r3, r1
 8004612:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8004614:	2000      	movs	r0, #0
 8004616:	bc30      	pop	{r4, r5}
 8004618:	4770      	bx	lr
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800461a:	780c      	ldrb	r4, [r1, #0]
 800461c:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8004620:	40a3      	lsls	r3, r4
 8004622:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004626:	b29b      	uxth	r3, r3
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004628:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800462c:	432b      	orrs	r3, r5
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800462e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8004632:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004634:	6803      	ldr	r3, [r0, #0]
 8004636:	041a      	lsls	r2, r3, #16
 8004638:	d4ec      	bmi.n	8004614 <USB_ActivateEndpoint+0x44>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800463a:	688a      	ldr	r2, [r1, #8]
 800463c:	78cd      	ldrb	r5, [r1, #3]
 800463e:	6801      	ldr	r1, [r0, #0]
 8004640:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004644:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8004648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464c:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8004650:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8004654:	430b      	orrs	r3, r1
 8004656:	6003      	str	r3, [r0, #0]
}
 8004658:	bc30      	pop	{r4, r5}
 800465a:	2000      	movs	r0, #0
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop

08004660 <USB_ActivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004660:	b5f0      	push	{r4, r5, r6, r7, lr}
  static __IO uint32_t debug = 0U;
  
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004662:	784b      	ldrb	r3, [r1, #1]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d027      	beq.n	80046b8 <USB_ActivateDedicatedEndpoint+0x58>
    
   USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004668:	780c      	ldrb	r4, [r1, #0]
 800466a:	f500 6630 	add.w	r6, r0, #2816	; 0xb00
 800466e:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	0412      	lsls	r2, r2, #16
 8004676:	d509      	bpl.n	800468c <USB_ActivateDedicatedEndpoint+0x2c>
      debug = (uint32_t )&USBx_OUTEP(ep->num)->DOEPCTL;
      debug |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP)); 
    } 
    
     USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8004678:	f8d0 283c 	ldr.w	r2, [r0, #2108]	; 0x83c
 800467c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004680:	40a3      	lsls	r3, r4
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c0 383c 	str.w	r3, [r0, #2108]	; 0x83c
  }

  return HAL_OK;
}
 8004688:	2000      	movs	r0, #0
 800468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800468c:	78cf      	ldrb	r7, [r1, #3]
 800468e:	688d      	ldr	r5, [r1, #8]
 8004690:	6819      	ldr	r1, [r3, #0]
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP));
 8004692:	05a2      	lsls	r2, r4, #22
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8004694:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8004698:	ea42 4287 	orr.w	r2, r2, r7, lsl #18
 800469c:	432a      	orrs	r2, r5
 800469e:	4311      	orrs	r1, r2
      debug = (uint32_t)(((uint32_t )USBx) + USB_OTG_OUT_ENDPOINT_BASE + (0U)*USB_OTG_EP_REG_SIZE);
 80046a0:	4d1e      	ldr	r5, [pc, #120]	; (800471c <USB_ActivateDedicatedEndpoint+0xbc>)
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80046a2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80046a6:	6019      	str	r1, [r3, #0]
      debug = (uint32_t)(((uint32_t )USBx) + USB_OTG_OUT_ENDPOINT_BASE + (0U)*USB_OTG_EP_REG_SIZE);
 80046a8:	602e      	str	r6, [r5, #0]
      debug = (uint32_t )&USBx_OUTEP(ep->num)->DOEPCTL;
 80046aa:	602b      	str	r3, [r5, #0]
      debug |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b2:	431a      	orrs	r2, r3
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	e7df      	b.n	8004678 <USB_ActivateDedicatedEndpoint+0x18>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046b8:	780d      	ldrb	r5, [r1, #0]
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80046ba:	78ce      	ldrb	r6, [r1, #3]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046bc:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 80046c0:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80046ca:	688b      	ldr	r3, [r1, #8]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046cc:	d121      	bne.n	8004712 <USB_ActivateDedicatedEndpoint+0xb2>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80046ce:	f3c3 0e0a 	ubfx	lr, r3, #0, #11
 80046d2:	f04e 5280 	orr.w	r2, lr, #268435456	; 0x10000000
 80046d6:	04b6      	lsls	r6, r6, #18
 80046d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046dc:	6821      	ldr	r1, [r4, #0]
 80046de:	4332      	orrs	r2, r6
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 80046e0:	05af      	lsls	r7, r5, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80046e2:	433a      	orrs	r2, r7
 80046e4:	430a      	orrs	r2, r1
 80046e6:	6022      	str	r2, [r4, #0]
    debug  |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80046e8:	490c      	ldr	r1, [pc, #48]	; (800471c <USB_ActivateDedicatedEndpoint+0xbc>)
 80046ea:	680b      	ldr	r3, [r1, #0]
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f4:	ea43 030e 	orr.w	r3, r3, lr
 80046f8:	4333      	orrs	r3, r6
 80046fa:	433b      	orrs	r3, r7
 80046fc:	600b      	str	r3, [r1, #0]
   USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80046fe:	2301      	movs	r3, #1
 8004700:	f8d0 283c 	ldr.w	r2, [r0, #2108]	; 0x83c
 8004704:	40ab      	lsls	r3, r5
 8004706:	b29b      	uxth	r3, r3
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c0 383c 	str.w	r3, [r0, #2108]	; 0x83c
}
 800470e:	2000      	movs	r0, #0
 8004710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004712:	f3c3 0e0a 	ubfx	lr, r3, #0, #11
 8004716:	04b6      	lsls	r6, r6, #18
 8004718:	05af      	lsls	r7, r5, #22
 800471a:	e7e5      	b.n	80046e8 <USB_ActivateDedicatedEndpoint+0x88>
 800471c:	200009a0 	.word	0x200009a0

08004720 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004720:	b410      	push	{r4}
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004722:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8004724:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004726:	2b01      	cmp	r3, #1
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8004728:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800472c:	d018      	beq.n	8004760 <USB_DeactivateEndpoint+0x40>
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 800472e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004732:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8004736:	40a3      	lsls	r3, r4
 8004738:	43db      	mvns	r3, r3
 800473a:	4019      	ands	r1, r3
 800473c:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));     
 8004740:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8004744:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8004748:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));     
 800474c:	400b      	ands	r3, r1
 800474e:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8004750:	6803      	ldr	r3, [r0, #0]
  }
  return HAL_OK;
}
 8004752:	f85d 4b04 	ldr.w	r4, [sp], #4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8004756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800475a:	6003      	str	r3, [r0, #0]
}
 800475c:	2000      	movs	r0, #0
 800475e:	4770      	bx	lr
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8004760:	40a3      	lsls	r3, r4
 8004762:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8004766:	b29b      	uxth	r3, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	4019      	ands	r1, r3
 800476c:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8004770:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8004774:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004778:	e7e6      	b.n	8004748 <USB_DeactivateEndpoint+0x28>
 800477a:	bf00      	nop

0800477c <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800477c:	b410      	push	{r4}
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800477e:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8004780:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004782:	2b01      	cmp	r3, #1
 8004784:	d014      	beq.n	80047b0 <USB_DeactivateDedicatedEndpoint+0x34>
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
  }
  else
  {
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP; 
 8004786:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800478a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 800478e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP; 
 8004792:	6819      	ldr	r1, [r3, #0]
 8004794:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004798:	6019      	str	r1, [r3, #0]
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 800479a:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800479e:	40a2      	lsls	r2, r4
 80047a0:	ea23 0302 	bic.w	r3, r3, r2
 80047a4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
  }
  return HAL_OK;
}
 80047a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ac:	2000      	movs	r0, #0
 80047ae:	4770      	bx	lr
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 80047b0:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 80047b4:	eb02 1244 	add.w	r2, r2, r4, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 80047b8:	40a3      	lsls	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 80047ba:	6811      	ldr	r1, [r2, #0]
}
 80047bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 80047c0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80047c4:	6011      	str	r1, [r2, #0]
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 80047c6:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	ea22 0303 	bic.w	r3, r2, r3
 80047d0:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 80047d4:	2000      	movs	r0, #0
 80047d6:	4770      	bx	lr

080047d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80047dc:	784c      	ldrb	r4, [r1, #1]
 80047de:	2c01      	cmp	r4, #1
 80047e0:	d03c      	beq.n	800485c <USB_EPStartXfer+0x84>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80047e2:	780d      	ldrb	r5, [r1, #0]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 

    if (ep->xfer_len == 0U)
 80047e4:	694c      	ldr	r4, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80047e6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80047ea:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80047ee:	691d      	ldr	r5, [r3, #16]
 80047f0:	0ced      	lsrs	r5, r5, #19
 80047f2:	04ed      	lsls	r5, r5, #19
 80047f4:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80047f6:	691d      	ldr	r5, [r3, #16]
 80047f8:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80047fc:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004800:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len == 0U)
 8004802:	b304      	cbz	r4, 8004846 <USB_EPStartXfer+0x6e>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8004804:	688d      	ldr	r5, [r1, #8]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8004806:	4e62      	ldr	r6, [pc, #392]	; (8004990 <USB_EPStartXfer+0x1b8>)
 8004808:	691f      	ldr	r7, [r3, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 800480a:	442c      	add	r4, r5
 800480c:	3c01      	subs	r4, #1
 800480e:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8004812:	ea06 46c4 	and.w	r6, r6, r4, lsl #19
 8004816:	433e      	orrs	r6, r7
 8004818:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800481a:	b2a4      	uxth	r4, r4
 800481c:	fb05 f404 	mul.w	r4, r5, r4
 8004820:	691d      	ldr	r5, [r3, #16]
 8004822:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004826:	432c      	orrs	r4, r5
 8004828:	611c      	str	r4, [r3, #16]
    }

    if (dma == 1U)
 800482a:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 800482c:	bf04      	itt	eq
 800482e:	68ca      	ldreq	r2, [r1, #12]
 8004830:	615a      	streq	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8004832:	78ca      	ldrb	r2, [r1, #3]
 8004834:	2a01      	cmp	r2, #1
 8004836:	d04c      	beq.n	80048d2 <USB_EPStartXfer+0xfa>
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800483e:	601a      	str	r2, [r3, #0]
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8004840:	2000      	movs	r0, #0
 8004842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004846:	688c      	ldr	r4, [r1, #8]
 8004848:	691d      	ldr	r5, [r3, #16]
 800484a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800484e:	432c      	orrs	r4, r5
 8004850:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8004852:	691c      	ldr	r4, [r3, #16]
 8004854:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004858:	611c      	str	r4, [r3, #16]
 800485a:	e7e6      	b.n	800482a <USB_EPStartXfer+0x52>
    if (ep->xfer_len == 0U)
 800485c:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800485e:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8004860:	2d00      	cmp	r5, #0
 8004862:	d042      	beq.n	80048ea <USB_EPStartXfer+0x112>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004864:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8004868:	eb03 1346 	add.w	r3, r3, r6, lsl #5
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800486c:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004870:	f8d3 c010 	ldr.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8004874:	4f46      	ldr	r7, [pc, #280]	; (8004990 <USB_EPStartXfer+0x1b8>)
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004876:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800487a:	ea4f 4ccc 	mov.w	ip, ip, lsl #19
 800487e:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004882:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8004886:	f02c 5cff 	bic.w	ip, ip, #534773760	; 0x1fe00000
 800488a:	f42c 1cc0 	bic.w	ip, ip, #1572864	; 0x180000
 800488e:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8004892:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8004896:	eb05 0e08 	add.w	lr, r5, r8
 800489a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800489e:	fbbe fef8 	udiv	lr, lr, r8
 80048a2:	ea07 47ce 	and.w	r7, r7, lr, lsl #19
 80048a6:	ea47 070c 	orr.w	r7, r7, ip
 80048aa:	611f      	str	r7, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80048ac:	f8d3 e010 	ldr.w	lr, [r3, #16]
 80048b0:	f3c5 0712 	ubfx	r7, r5, #0, #19
 80048b4:	ea47 070e 	orr.w	r7, r7, lr
 80048b8:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 80048ba:	78cf      	ldrb	r7, [r1, #3]
 80048bc:	2f01      	cmp	r7, #1
 80048be:	d056      	beq.n	800496e <USB_EPStartXfer+0x196>
    if (dma == 1U)
 80048c0:	2a01      	cmp	r2, #1
 80048c2:	d061      	beq.n	8004988 <USB_EPStartXfer+0x1b0>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80048c4:	40b4      	lsls	r4, r6
 80048c6:	f8d0 6834 	ldr.w	r6, [r0, #2100]	; 0x834
 80048ca:	4334      	orrs	r4, r6
 80048cc:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 80048d0:	e7b2      	b.n	8004838 <USB_EPStartXfer+0x60>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80048d2:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80048d6:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	bf0c      	ite	eq
 80048de:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048e2:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e7a6      	b.n	8004838 <USB_EPStartXfer+0x60>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80048ea:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 80048ee:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    if (dma == 1U)
 80048f2:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80048f4:	691c      	ldr	r4, [r3, #16]
 80048f6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80048fa:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80048fe:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004900:	691c      	ldr	r4, [r3, #16]
 8004902:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004906:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8004908:	691c      	ldr	r4, [r3, #16]
 800490a:	ea4f 44d4 	mov.w	r4, r4, lsr #19
 800490e:	ea4f 44c4 	mov.w	r4, r4, lsl #19
 8004912:	611c      	str	r4, [r3, #16]
 8004914:	78cc      	ldrb	r4, [r1, #3]
    if (dma == 1U)
 8004916:	d024      	beq.n	8004962 <USB_EPStartXfer+0x18a>
      if (ep->type != EP_TYPE_ISOC)
 8004918:	2c01      	cmp	r4, #1
 800491a:	d18d      	bne.n	8004838 <USB_EPStartXfer+0x60>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 800491c:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8004920:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004924:	681c      	ldr	r4, [r3, #0]
 8004926:	bf0c      	ite	eq
 8004928:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800492c:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8004930:	601c      	str	r4, [r3, #0]
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004932:	681c      	ldr	r4, [r3, #0]
 8004934:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8004938:	601c      	str	r4, [r3, #0]
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 800493a:	2a00      	cmp	r2, #0
 800493c:	d180      	bne.n	8004840 <USB_EPStartXfer+0x68>
  {
    count32b =  (len + 3U) / 4U;
 800493e:	b2ad      	uxth	r5, r5
 8004940:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++, src += 4U)
 8004942:	08ad      	lsrs	r5, r5, #2
 8004944:	f43f af7c 	beq.w	8004840 <USB_EPStartXfer+0x68>
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8004948:	68cb      	ldr	r3, [r1, #12]
 800494a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800494e:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8004952:	eb00 3606 	add.w	r6, r0, r6, lsl #12
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004956:	f853 2b04 	ldr.w	r2, [r3], #4
 800495a:	6032      	str	r2, [r6, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 800495c:	428b      	cmp	r3, r1
 800495e:	d1fa      	bne.n	8004956 <USB_EPStartXfer+0x17e>
 8004960:	e76e      	b.n	8004840 <USB_EPStartXfer+0x68>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004962:	690f      	ldr	r7, [r1, #16]
 8004964:	615f      	str	r7, [r3, #20]
    if (ep->type == EP_TYPE_ISOC)
 8004966:	2c01      	cmp	r4, #1
 8004968:	f47f af66 	bne.w	8004838 <USB_EPStartXfer+0x60>
 800496c:	e7d6      	b.n	800491c <USB_EPStartXfer+0x144>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800496e:	691c      	ldr	r4, [r3, #16]
 8004970:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8004974:	611c      	str	r4, [r3, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8004976:	691c      	ldr	r4, [r3, #16]
    if (dma == 1U)
 8004978:	2a01      	cmp	r2, #1
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800497a:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800497e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004980:	d1cc      	bne.n	800491c <USB_EPStartXfer+0x144>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004982:	690c      	ldr	r4, [r1, #16]
 8004984:	615c      	str	r4, [r3, #20]
 8004986:	e7c9      	b.n	800491c <USB_EPStartXfer+0x144>
 8004988:	690a      	ldr	r2, [r1, #16]
 800498a:	615a      	str	r2, [r3, #20]
 800498c:	e754      	b.n	8004838 <USB_EPStartXfer+0x60>
 800498e:	bf00      	nop
 8004990:	1ff80000 	.word	0x1ff80000

08004994 <USB_EP0StartXfer>:
{
 8004994:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8004996:	784b      	ldrb	r3, [r1, #1]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d027      	beq.n	80049ec <USB_EP0StartXfer+0x58>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800499c:	780b      	ldrb	r3, [r1, #0]
    if (ep->xfer_len > 0U)
 800499e:	694c      	ldr	r4, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80049a0:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80049a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80049a8:	6903      	ldr	r3, [r0, #16]
 80049aa:	0cdb      	lsrs	r3, r3, #19
 80049ac:	04db      	lsls	r3, r3, #19
 80049ae:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80049b0:	6903      	ldr	r3, [r0, #16]
 80049b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049ba:	6103      	str	r3, [r0, #16]
      ep->xfer_len = ep->maxpacket;
 80049bc:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 80049be:	b99c      	cbnz	r4, 80049e8 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80049c0:	6904      	ldr	r4, [r0, #16]
 80049c2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80049c6:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80049c8:	6904      	ldr	r4, [r0, #16]
 80049ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ce:	4323      	orrs	r3, r4
    if (dma == 1U)
 80049d0:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80049d2:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049d4:	bf04      	itt	eq
 80049d6:	68cb      	ldreq	r3, [r1, #12]
 80049d8:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80049da:	6803      	ldr	r3, [r0, #0]
 80049dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049e0:	6003      	str	r3, [r0, #0]
}
 80049e2:	bcf0      	pop	{r4, r5, r6, r7}
 80049e4:	2000      	movs	r0, #0
 80049e6:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 80049e8:	614b      	str	r3, [r1, #20]
 80049ea:	e7e9      	b.n	80049c0 <USB_EP0StartXfer+0x2c>
    if (ep->xfer_len == 0U)
 80049ec:	694c      	ldr	r4, [r1, #20]
 80049ee:	b374      	cbz	r4, 8004a4e <USB_EP0StartXfer+0xba>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049f0:	780f      	ldrb	r7, [r1, #0]
      if(ep->xfer_len > ep->maxpacket)
 80049f2:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049f4:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 80049f8:	eb03 1347 	add.w	r3, r3, r7, lsl #5
      if(ep->xfer_len > ep->maxpacket)
 80049fc:	42b4      	cmp	r4, r6
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049fe:	691d      	ldr	r5, [r3, #16]
 8004a00:	ea4f 45d5 	mov.w	r5, r5, lsr #19
 8004a04:	ea4f 45c5 	mov.w	r5, r5, lsl #19
 8004a08:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004a0a:	691d      	ldr	r5, [r3, #16]
 8004a0c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8004a10:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004a14:	611d      	str	r5, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8004a16:	d934      	bls.n	8004a82 <USB_EP0StartXfer+0xee>
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004a18:	691c      	ldr	r4, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8004a1a:	614e      	str	r6, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004a1c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004a20:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004a22:	691d      	ldr	r5, [r3, #16]
 8004a24:	f3c6 0412 	ubfx	r4, r6, #0, #19
 8004a28:	432c      	orrs	r4, r5
    if (dma == 1)
 8004a2a:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004a2c:	611c      	str	r4, [r3, #16]
    if (dma == 1)
 8004a2e:	d025      	beq.n	8004a7c <USB_EP0StartXfer+0xe8>
      if (ep->xfer_len > 0U)
 8004a30:	b136      	cbz	r6, 8004a40 <USB_EP0StartXfer+0xac>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8004a32:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 8004a36:	2201      	movs	r2, #1
 8004a38:	40ba      	lsls	r2, r7
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8004a46:	2000      	movs	r0, #0
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8004a4c:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004a4e:	780b      	ldrb	r3, [r1, #0]
 8004a50:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004a54:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    if (dma == 1)
 8004a58:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004a5a:	6918      	ldr	r0, [r3, #16]
 8004a5c:	f020 50ff 	bic.w	r0, r0, #534773760	; 0x1fe00000
 8004a60:	f420 10c0 	bic.w	r0, r0, #1572864	; 0x180000
 8004a64:	6118      	str	r0, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004a66:	6918      	ldr	r0, [r3, #16]
 8004a68:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8004a6c:	6118      	str	r0, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8004a6e:	6918      	ldr	r0, [r3, #16]
 8004a70:	ea4f 40d0 	mov.w	r0, r0, lsr #19
 8004a74:	ea4f 40c0 	mov.w	r0, r0, lsl #19
 8004a78:	6118      	str	r0, [r3, #16]
    if (dma == 1)
 8004a7a:	d1e1      	bne.n	8004a40 <USB_EP0StartXfer+0xac>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a7c:	690a      	ldr	r2, [r1, #16]
 8004a7e:	615a      	str	r2, [r3, #20]
 8004a80:	e7de      	b.n	8004a40 <USB_EP0StartXfer+0xac>
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004a82:	691d      	ldr	r5, [r3, #16]
 8004a84:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004a88:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004a8a:	691d      	ldr	r5, [r3, #16]
 8004a8c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004a90:	432c      	orrs	r4, r5
    if (dma == 1)
 8004a92:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004a94:	611c      	str	r4, [r3, #16]
    if (dma == 1)
 8004a96:	d1cc      	bne.n	8004a32 <USB_EP0StartXfer+0x9e>
 8004a98:	e7f0      	b.n	8004a7c <USB_EP0StartXfer+0xe8>
 8004a9a:	bf00      	nop

08004a9c <USB_WritePacket>:
{
 8004a9c:	b410      	push	{r4}
 8004a9e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004aa2:	b96c      	cbnz	r4, 8004ac0 <USB_WritePacket+0x24>
    count32b =  (len + 3U) / 4U;
 8004aa4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	d00a      	beq.n	8004ac0 <USB_WritePacket+0x24>
 8004aaa:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004aae:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8004ab2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004ab6:	f851 3b04 	ldr.w	r3, [r1], #4
 8004aba:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8004abc:	4281      	cmp	r1, r0
 8004abe:	d1fa      	bne.n	8004ab6 <USB_WritePacket+0x1a>
    }
  }
  return HAL_OK;
}
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8004ac8:	3203      	adds	r2, #3
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8004aca:	0892      	lsrs	r2, r2, #2
 8004acc:	d008      	beq.n	8004ae0 <USB_ReadPacket+0x18>
 8004ace:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004ad2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8004ad6:	6803      	ldr	r3, [r0, #0]
 8004ad8:	f841 3b04 	str.w	r3, [r1], #4
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8004adc:	428a      	cmp	r2, r1
 8004ade:	d1fa      	bne.n	8004ad6 <USB_ReadPacket+0xe>
    
  }
  return ((void *)dest);
}
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4770      	bx	lr

08004ae4 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8004ae4:	784b      	ldrb	r3, [r1, #1]
 8004ae6:	2b01      	cmp	r3, #1
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8004ae8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004aea:	d010      	beq.n	8004b0e <USB_EPSetStall+0x2a>
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8004aec:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8004af0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004af4:	6803      	ldr	r3, [r0, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db03      	blt.n	8004b02 <USB_EPSetStall+0x1e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8004afa:	6803      	ldr	r3, [r0, #0]
 8004afc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b00:	6003      	str	r3, [r0, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b02:	6803      	ldr	r3, [r0, #0]
 8004b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b08:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8004b0e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004b12:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004b16:	6803      	ldr	r3, [r0, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	daee      	bge.n	8004afa <USB_EPSetStall+0x16>
 8004b1c:	e7f1      	b.n	8004b02 <USB_EPSetStall+0x1e>
 8004b1e:	bf00      	nop

08004b20 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8004b20:	784b      	ldrb	r3, [r1, #1]
 8004b22:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b24:	780b      	ldrb	r3, [r1, #0]
 8004b26:	bf0c      	ite	eq
 8004b28:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b2c:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8004b30:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004b34:	6803      	ldr	r3, [r0, #0]
 8004b36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b3a:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8004b3c:	78cb      	ldrb	r3, [r1, #3]
 8004b3e:	3b02      	subs	r3, #2
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d803      	bhi.n	8004b4c <USB_EPClearStall+0x2c>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b44:	6803      	ldr	r3, [r0, #0]
 8004b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6003      	str	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	4770      	bx	lr

08004b50 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b410      	push	{r4}
 8004b52:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8004b56:	f500 642e 	add.w	r4, r0, #2784	; 0xae0
  uint32_t i;
  
  /* Clear Pending interrupt */
  for (i = 0U; i < 15U ; i++)
  {
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8004b5a:	22ff      	movs	r2, #255	; 0xff
 8004b5c:	609a      	str	r2, [r3, #8]
 8004b5e:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8004b62:	3320      	adds	r3, #32
  for (i = 0U; i < 15U ; i++)
 8004b64:	42a3      	cmp	r3, r4
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8004b66:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < 15U ; i++)
 8004b68:	d1f8      	bne.n	8004b5c <USB_StopDevice+0xc>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8004b6a:	2100      	movs	r1, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8004b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b70:	2410      	movs	r4, #16
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8004b72:	f8c0 3818 	str.w	r3, [r0, #2072]	; 0x818
  USBx_DEVICE->DIEPMSK  = 0U;
 8004b76:	f8c0 1810 	str.w	r1, [r0, #2064]	; 0x810
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <USB_StopDevice+0x60>)
  USBx_DEVICE->DOEPMSK  = 0U;
 8004b7c:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0U;
 8004b80:	f8c0 181c 	str.w	r1, [r0, #2076]	; 0x81c
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b84:	6104      	str	r4, [r0, #16]
 8004b86:	e001      	b.n	8004b8c <USB_StopDevice+0x3c>
    if (++count > 200000U)
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	d002      	beq.n	8004b92 <USB_StopDevice+0x42>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b8c:	6902      	ldr	r2, [r0, #16]
 8004b8e:	06d1      	lsls	r1, r2, #27
 8004b90:	d4fa      	bmi.n	8004b88 <USB_StopDevice+0x38>
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8004b92:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004b96:	6103      	str	r3, [r0, #16]
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <USB_StopDevice+0x60>)
 8004b9a:	e001      	b.n	8004ba0 <USB_StopDevice+0x50>
    if (++count > 200000U)
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	d002      	beq.n	8004ba6 <USB_StopDevice+0x56>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ba0:	6902      	ldr	r2, [r0, #16]
 8004ba2:	0692      	lsls	r2, r2, #26
 8004ba4:	d4fa      	bmi.n	8004b9c <USB_StopDevice+0x4c>
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
  USB_FlushTxFifo(USBx ,  0x10U);  
  
  return HAL_OK;
}
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	00030d40 	.word	0x00030d40

08004bb4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8004bb4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004bb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bbc:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8004bc0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004bc4:	0109      	lsls	r1, r1, #4
 8004bc6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8004bca:	4319      	orrs	r1, r3
 8004bcc:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	4770      	bx	lr

08004bd4 <USB_DevConnect>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8004bd4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8004bd8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8004bda:	6853      	ldr	r3, [r2, #4]
 8004bdc:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 8004be0:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8004be2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004be4:	f7fb fb34 	bl	8000250 <HAL_Delay>
  
  return HAL_OK;  
}
 8004be8:	2000      	movs	r0, #0
 8004bea:	bd08      	pop	{r3, pc}

08004bec <USB_DevDisconnect>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004bec:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8004bf0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004bf2:	6853      	ldr	r3, [r2, #4]
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 8004bf8:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004bfa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004bfc:	f7fb fb28 	bl	8000250 <HAL_Delay>
  
  return HAL_OK;  
}
 8004c00:	2000      	movs	r0, #0
 8004c02:	bd08      	pop	{r3, pc}

08004c04 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8004c04:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8004c06:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8004c08:	4010      	ands	r0, r2
 8004c0a:	4770      	bx	lr

08004c0c <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8004c0c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004c10:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8004c14:	69c0      	ldr	r0, [r0, #28]
 8004c16:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8004c18:	0c00      	lsrs	r0, r0, #16
 8004c1a:	4770      	bx	lr

08004c1c <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8004c1c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004c20:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8004c24:	69c0      	ldr	r0, [r0, #28]
 8004c26:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8004c28:	b280      	uxth	r0, r0
 8004c2a:	4770      	bx	lr

08004c2c <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8004c2c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004c30:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8004c34:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8004c38:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8004c3a:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8004c3c:	4010      	ands	r0, r2
 8004c3e:	4770      	bx	lr

08004c40 <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8004c40:	b410      	push	{r4}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8004c42:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c46:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004c4a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8004c4e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8004c52:	40cb      	lsrs	r3, r1
 8004c54:	01db      	lsls	r3, r3, #7
 8004c56:	b2db      	uxtb	r3, r3
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004c58:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8004c5a:	4323      	orrs	r3, r4
  return v;
}
 8004c5c:	4018      	ands	r0, r3
 8004c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <USB_ClearInterrupts>:
  * @param  interrupt : interrupt flag
  * @retval None
  */
void  USB_ClearInterrupts (USB_OTG_GlobalTypeDef *USBx, uint32_t interrupt)
{
  USBx->GINTSTS |= interrupt; 
 8004c64:	6943      	ldr	r3, [r0, #20]
 8004c66:	4319      	orrs	r1, r3
 8004c68:	6141      	str	r1, [r0, #20]
 8004c6a:	4770      	bx	lr

08004c6c <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8004c6c:	6940      	ldr	r0, [r0, #20]
}
 8004c6e:	f000 0001 	and.w	r0, r0, #1
 8004c72:	4770      	bx	lr

08004c74 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c74:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004c78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c7c:	f023 0307 	bic.w	r3, r3, #7
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004c80:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c84:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004c88:	6893      	ldr	r3, [r2, #8]
 8004c8a:	f003 0306 	and.w	r3, r3, #6
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d105      	bne.n	8004c9e <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004c92:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004c96:	f043 0303 	orr.w	r3, r3, #3
 8004c9a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c9e:	6853      	ldr	r3, [r2, #4]
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
}
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop

08004cac <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004cac:	b410      	push	{r4}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004cae:	2400      	movs	r4, #0
 8004cb0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004cb4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004cb8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004cbc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cc0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004cc4:	f044 0418 	orr.w	r4, r4, #24
 8004cc8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8004ccc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8004cd0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8004cd2:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8004cd6:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8004cda:	d105      	bne.n	8004ce8 <USB_EP0_OutStart+0x3c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8004cdc:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ce0:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8004ce4:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <USB_CoreReset+0x30>)
 8004cf2:	e001      	b.n	8004cf8 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	d010      	beq.n	8004d1a <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cf8:	6902      	ldr	r2, [r0, #16]
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	dafa      	bge.n	8004cf4 <USB_CoreReset+0x4>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cfe:	6903      	ldr	r3, [r0, #16]
 8004d00:	4a07      	ldr	r2, [pc, #28]	; (8004d20 <USB_CoreReset+0x30>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6103      	str	r3, [r0, #16]
 8004d08:	e001      	b.n	8004d0e <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 8004d0a:	3a01      	subs	r2, #1
 8004d0c:	d005      	beq.n	8004d1a <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d0e:	6903      	ldr	r3, [r0, #16]
 8004d10:	f013 0301 	ands.w	r3, r3, #1
 8004d14:	d1f9      	bne.n	8004d0a <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8004d16:	4618      	mov	r0, r3
}
 8004d18:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004d1a:	2003      	movs	r0, #3
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	00030d40 	.word	0x00030d40

08004d24 <USB_HostInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d24:	b084      	sub	sp, #16
 8004d26:	b530      	push	{r4, r5, lr}
 8004d28:	4604      	mov	r4, r0
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f8c4 0e00 	str.w	r0, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8004d30:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d32:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004d36:	63a0      	str	r0, [r4, #56]	; 0x38
{
 8004d38:	b083      	sub	sp, #12
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 8004d3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
{
 8004d3c:	ad07      	add	r5, sp, #28
 8004d3e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 8004d42:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 8004d46:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8004d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d4c:	9908      	ldr	r1, [sp, #32]
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d52:	63a3      	str	r3, [r4, #56]	; 0x38
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8004d54:	2a03      	cmp	r2, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8004d56:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8004d5a:	d057      	beq.n	8004e0c <USB_HostInit+0xe8>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8004d5c:	f023 0304 	bic.w	r3, r3, #4
 8004d60:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8004d64:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004d68:	6123      	str	r3, [r4, #16]
 8004d6a:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <USB_HostInit+0x108>)
 8004d6c:	e001      	b.n	8004d72 <USB_HostInit+0x4e>
    if (++count > 200000U)
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	d002      	beq.n	8004d78 <USB_HostInit+0x54>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d72:	6922      	ldr	r2, [r4, #16]
 8004d74:	0690      	lsls	r0, r2, #26
 8004d76:	d4fa      	bmi.n	8004d6e <USB_HostInit+0x4a>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d78:	2310      	movs	r3, #16
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <USB_HostInit+0x108>)
 8004d7e:	e001      	b.n	8004d84 <USB_HostInit+0x60>
    if (++count > 200000U)
 8004d80:	3b01      	subs	r3, #1
 8004d82:	d002      	beq.n	8004d8a <USB_HostInit+0x66>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	06d2      	lsls	r2, r2, #27
 8004d88:	d4fa      	bmi.n	8004d80 <USB_HostInit+0x5c>
  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d8a:	b161      	cbz	r1, 8004da6 <USB_HostInit+0x82>
 8004d8c:	2200      	movs	r2, #0
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
 8004d8e:	4615      	mov	r5, r2
 8004d90:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d98:	3201      	adds	r2, #1
 8004d9a:	428a      	cmp	r2, r1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004d9c:	6098      	str	r0, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004d9e:	60dd      	str	r5, [r3, #12]
 8004da0:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 8004da4:	d1f8      	bne.n	8004d98 <USB_HostInit+0x74>
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8004da6:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8004daa:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004db2:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004db4:	9b01      	ldr	r3, [sp, #4]
 8004db6:	04db      	lsls	r3, r3, #19
 8004db8:	d404      	bmi.n	8004dc4 <USB_HostInit+0xa0>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8004dba:	9b01      	ldr	r3, [sp, #4]
 8004dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dc0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(200U);
 8004dc4:	20c8      	movs	r0, #200	; 0xc8
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004dc6:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(200U);
 8004dc8:	f7fb fa42 	bl	8000250 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8004dcc:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if(USBx == USB_OTG_FS)
 8004dd2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTMSK = 0U;
 8004dd6:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004dd8:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 8004dda:	d01f      	beq.n	8004e1c <USB_HostInit+0xf8>
    USBx->GRXFSIZ  = (uint32_t )0x200U; 
 8004ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <USB_HostInit+0x10c>)
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <USB_HostInit+0x110>)
    USBx->GRXFSIZ  = (uint32_t )0x200U; 
 8004de4:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8004de6:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004de8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == DISABLE)
 8004dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dee:	b91b      	cbnz	r3, 8004df8 <USB_HostInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8004df0:	69a3      	ldr	r3, [r4, #24]
 8004df2:	f043 0310 	orr.w	r3, r3, #16
 8004df6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8004df8:	69a2      	ldr	r2, [r4, #24]
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <USB_HostInit+0x114>)
}
 8004dfc:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61a3      	str	r3, [r4, #24]
}
 8004e02:	b003      	add	sp, #12
 8004e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e08:	b004      	add	sp, #16
 8004e0a:	4770      	bx	lr
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8004e0c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8004e10:	d0a4      	beq.n	8004d5c <USB_HostInit+0x38>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8004e12:	f043 0304 	orr.w	r3, r3, #4
 8004e16:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8004e1a:	e7a3      	b.n	8004d64 <USB_HostInit+0x40>
    USBx->GRXFSIZ  = (uint32_t )0x80U; 
 8004e1c:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8004e1e:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <USB_HostInit+0x118>)
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <USB_HostInit+0x11c>)
    USBx->GRXFSIZ  = (uint32_t )0x80U; 
 8004e22:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8004e24:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e26:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004e2a:	e7df      	b.n	8004dec <USB_HostInit+0xc8>
 8004e2c:	00030d40 	.word	0x00030d40
 8004e30:	01000200 	.word	0x01000200
 8004e34:	00e00300 	.word	0x00e00300
 8004e38:	a3200008 	.word	0xa3200008
 8004e3c:	00600080 	.word	0x00600080
 8004e40:	004000e0 	.word	0x004000e0

08004e44 <USB_InitFSLSPClkSel>:
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e44:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004e48:	f023 0303 	bic.w	r3, r3, #3
 8004e4c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8004e50:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004e54:	f001 0303 	and.w	r3, r1, #3
 8004e58:	4313      	orrs	r3, r2
  if (freq ==  HCFG_48_MHZ)
 8004e5a:	2901      	cmp	r1, #1
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8004e5c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e60:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  if (freq ==  HCFG_48_MHZ)
 8004e64:	d006      	beq.n	8004e74 <USB_InitFSLSPClkSel+0x30>
  else if (freq ==  HCFG_6_MHZ)
 8004e66:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = (uint32_t)6000U;
 8004e68:	bf04      	itt	eq
 8004e6a:	f241 7370 	movweq	r3, #6000	; 0x1770
 8004e6e:	6043      	streq	r3, [r0, #4]
}
 8004e70:	2000      	movs	r0, #0
 8004e72:	4770      	bx	lr
    USBx_HOST->HFIR = (uint32_t)48000U;
 8004e74:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e78:	6043      	str	r3, [r0, #4]
}
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop

08004e80 <USB_ResetPort>:
{
 8004e80:	b510      	push	{r4, lr}
 8004e82:	4604      	mov	r4, r0
 8004e84:	b082      	sub	sp, #8
  hprt0 = USBx_HPRT0;
 8004e86:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8004e8a:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e92:	9301      	str	r3, [sp, #4]
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8004e94:	9b01      	ldr	r3, [sp, #4]
 8004e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 8004e9e:	200a      	movs	r0, #10
 8004ea0:	f7fb f9d6 	bl	8000250 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8004ea4:	9b01      	ldr	r3, [sp, #4]
}
 8004ea6:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8004ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eac:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd10      	pop	{r4, pc}

08004eb4 <USB_DriveVbus>:
{
 8004eb4:	b082      	sub	sp, #8
  hprt0 = USBx_HPRT0;
 8004eb6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004eba:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8004ebc:	9b01      	ldr	r3, [sp, #4]
 8004ebe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ec2:	9301      	str	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ec4:	9b01      	ldr	r3, [sp, #4]
 8004ec6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8004eca:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ecc:	d101      	bne.n	8004ed2 <USB_DriveVbus+0x1e>
 8004ece:	2901      	cmp	r1, #1
 8004ed0:	d00a      	beq.n	8004ee8 <USB_DriveVbus+0x34>
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004ed2:	04db      	lsls	r3, r3, #19
 8004ed4:	d505      	bpl.n	8004ee2 <USB_DriveVbus+0x2e>
 8004ed6:	b921      	cbnz	r1, 8004ee2 <USB_DriveVbus+0x2e>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8004ed8:	9b01      	ldr	r3, [sp, #4]
 8004eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ede:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	b002      	add	sp, #8
 8004ee6:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8004ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004eec:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004ef0:	9b01      	ldr	r3, [sp, #4]
}
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	b002      	add	sp, #8
 8004ef6:	4770      	bx	lr

08004ef8 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8004ef8:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004efa:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004efe:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8004f00:	9801      	ldr	r0, [sp, #4]
}
 8004f02:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8004f06:	b002      	add	sp, #8
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop

08004f0c <USB_GetCurrentFrame>:
  * @param  USBx : Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004f0c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004f10:	6880      	ldr	r0, [r0, #8]
}
 8004f12:	b280      	uxth	r0, r0
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop

08004f18 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8004f1c:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 8004f20:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 8004f24:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8004f28:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8004f2c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8004f30:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004f34:	f8c4 e008 	str.w	lr, [r4, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8004f38:	2d03      	cmp	r5, #3
 8004f3a:	d865      	bhi.n	8005008 <USB_HC_Init+0xf0>
 8004f3c:	e8df f005 	tbb	[pc, r5]
 8004f40:	02514151 	.word	0x02514151
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8004f44:	fa4f fc82 	sxtb.w	ip, r2
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004f48:	f240 6e9d 	movw	lr, #1693	; 0x69d
    if (epnum & 0x80U) 
 8004f4c:	f1bc 0f00 	cmp.w	ip, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004f50:	f8c4 e00c 	str.w	lr, [r4, #12]
    if (epnum & 0x80U) 
 8004f54:	db5b      	blt.n	800500e <USB_HC_Init+0xf6>
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004f56:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8004f58:	02d2      	lsls	r2, r2, #11
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004f5a:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8004f5e:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004f62:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004f66:	431a      	orrs	r2, r3
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004f68:	2301      	movs	r3, #1
 8004f6a:	fa03 f101 	lsl.w	r1, r3, r1
 8004f6e:	ea41 0108 	orr.w	r1, r1, r8
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8004f72:	f3c6 060a 	ubfx	r6, r6, #0, #11
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004f76:	04ab      	lsls	r3, r5, #18
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004f78:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8004f7c:	f1bc 0f00 	cmp.w	ip, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004f80:	ea42 0206 	orr.w	r2, r2, r6
 8004f84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8004f88:	bfac      	ite	ge
 8004f8a:	2100      	movge	r1, #0
 8004f8c:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004f90:	4313      	orrs	r3, r2
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8004f92:	2f02      	cmp	r7, #2
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f94:	6982      	ldr	r2, [r0, #24]
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004f96:	ea43 0301 	orr.w	r3, r3, r1
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8004f9a:	bf14      	ite	ne
 8004f9c:	2100      	movne	r1, #0
 8004f9e:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004fa2:	430b      	orrs	r3, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004fa4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    
  if (ep_type == EP_TYPE_INTR)
 8004fa8:	2d03      	cmp	r5, #3
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004faa:	6182      	str	r2, [r0, #24]
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004fac:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004fb0:	6023      	str	r3, [r4, #0]
  if (ep_type == EP_TYPE_INTR)
 8004fb2:	d103      	bne.n	8004fbc <USB_HC_Init+0xa4>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fba:	6023      	str	r3, [r4, #0]
  }

  return HAL_OK; 
}
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (epnum & 0x80U) 
 8004fc2:	fa4f fc82 	sxtb.w	ip, r2
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004fc6:	f240 2e25 	movw	lr, #549	; 0x225
    if (epnum & 0x80U) 
 8004fca:	f1bc 0f00 	cmp.w	ip, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004fce:	f8c4 e00c 	str.w	lr, [r4, #12]
    if (epnum & 0x80U) 
 8004fd2:	dac0      	bge.n	8004f56 <USB_HC_Init+0x3e>
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8004fd4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8004fd8:	f44e 7ec0 	orr.w	lr, lr, #384	; 0x180
 8004fdc:	f8c4 e00c 	str.w	lr, [r4, #12]
 8004fe0:	e7b9      	b.n	8004f56 <USB_HC_Init+0x3e>
    if (epnum & 0x80U) 
 8004fe2:	fa4f fc82 	sxtb.w	ip, r2
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004fe6:	f240 4e9d 	movw	lr, #1181	; 0x49d
    if (epnum & 0x80U) 
 8004fea:	f1bc 0f00 	cmp.w	ip, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004fee:	f8c4 e00c 	str.w	lr, [r4, #12]
    if (epnum & 0x80U) 
 8004ff2:	db0c      	blt.n	800500e <USB_HC_Init+0xf6>
      if(USBx != USB_OTG_FS)
 8004ff4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8004ff8:	d0ad      	beq.n	8004f56 <USB_HC_Init+0x3e>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004ffa:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8004ffe:	f04e 0e60 	orr.w	lr, lr, #96	; 0x60
 8005002:	f8c4 e00c 	str.w	lr, [r4, #12]
 8005006:	e7a6      	b.n	8004f56 <USB_HC_Init+0x3e>
 8005008:	fa4f fc82 	sxtb.w	ip, r2
 800500c:	e7a3      	b.n	8004f56 <USB_HC_Init+0x3e>
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800500e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8005012:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 8005016:	f8c4 e00c 	str.w	lr, [r4, #12]
 800501a:	e79c      	b.n	8004f56 <USB_HC_Init+0x3e>

0800501c <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0U; 
 800502a:	2300      	movs	r3, #0
 800502c:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0U;   
 800502e:	2300      	movs	r3, #0
 8005030:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256U;
 8005036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800503a:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005046:	d02b      	beq.n	80050a0 <USB_HC_StartXfer+0x84>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	791b      	ldrb	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d127      	bne.n	80050a0 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0U) && (hc->do_ping == 1U))
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10b      	bne.n	800506e <USB_HC_StartXfer+0x52>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	795b      	ldrb	r3, [r3, #5]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d107      	bne.n	800506e <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	4619      	mov	r1, r3
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fa11 	bl	800548c <USB_DoPing>
      return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e10d      	b.n	800528a <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1U)
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d115      	bne.n	80050a0 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	4619      	mov	r1, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005098:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d019      	beq.n	80050dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	8912      	ldrh	r2, [r2, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	3b01      	subs	r3, #1
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	8912      	ldrh	r2, [r2, #8]
 80050b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050bc:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80050be:	8bfa      	ldrh	r2, [r7, #30]
 80050c0:	8b3b      	ldrh	r3, [r7, #24]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d90c      	bls.n	80050e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80050c6:	8b3b      	ldrh	r3, [r7, #24]
 80050c8:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80050ca:	8bfb      	ldrh	r3, [r7, #30]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	8912      	ldrh	r2, [r2, #8]
 80050d0:	fb02 f303 	mul.w	r3, r2, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	611a      	str	r2, [r3, #16]
 80050da:	e001      	b.n	80050e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80050dc:	2301      	movs	r3, #1
 80050de:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	78db      	ldrb	r3, [r3, #3]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80050e8:	8bfb      	ldrh	r3, [r7, #30]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	8912      	ldrh	r2, [r2, #8]
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005106:	4619      	mov	r1, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8005110:	8bfb      	ldrh	r3, [r7, #30]
 8005112:	04db      	lsls	r3, r3, #19
 8005114:	4618      	mov	r0, r3
 8005116:	4b5f      	ldr	r3, [pc, #380]	; (8005294 <USB_HC_StartXfer+0x278>)
 8005118:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800511a:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	7a9b      	ldrb	r3, [r3, #10]
 8005120:	075b      	lsls	r3, r3, #29
 8005122:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8005126:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8005128:	610b      	str	r3, [r1, #16]
  
  if (dma)
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	461a      	mov	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01U) ? 0U : 1U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf0c      	ite	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	2300      	movne	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516c:	4619      	mov	r1, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005182:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29U);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	4619      	mov	r1, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	7f7a      	ldrb	r2, [r7, #29]
 80051a6:	0752      	lsls	r2, r2, #29
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051c4:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051cc:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051dc:	461a      	mov	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6013      	str	r3, [r2, #0]
  
  if (dma == 0U) /* Slave mode */
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d14f      	bne.n	8005288 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	78db      	ldrb	r3, [r3, #3]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d14b      	bne.n	8005288 <USB_HC_StartXfer+0x26c>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d047      	beq.n	8005288 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	79db      	ldrb	r3, [r3, #7]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d831      	bhi.n	8005264 <USB_HC_StartXfer+0x248>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <USB_HC_StartXfer+0x1ec>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005219 	.word	0x08005219
 800520c:	0800523d 	.word	0x0800523d
 8005210:	08005219 	.word	0x08005219
 8005214:	0800523d 	.word	0x0800523d
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3U) / 4U;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	3303      	adds	r3, #3
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005222:	8b7a      	ldrh	r2, [r7, #26]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	b29b      	uxth	r3, r3
 800522a:	429a      	cmp	r2, r3
 800522c:	d91c      	bls.n	8005268 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	619a      	str	r2, [r3, #24]
        }
        break;
 800523a:	e015      	b.n	8005268 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3U) / 4U;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	3303      	adds	r3, #3
 8005242:	089b      	lsrs	r3, r3, #2
 8005244:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005246:	8b7a      	ldrh	r2, [r7, #26]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	b29b      	uxth	r3, r3
 8005252:	429a      	cmp	r2, r3
 8005254:	d90a      	bls.n	800526c <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	619a      	str	r2, [r3, #24]
        }
        break;
 8005262:	e003      	b.n	800526c <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8005264:	bf00      	nop
 8005266:	e002      	b.n	800526e <USB_HC_StartXfer+0x252>
        break;
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <USB_HC_StartXfer+0x252>
        break;
 800526c:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	68d9      	ldr	r1, [r3, #12]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	785a      	ldrb	r2, [r3, #1]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	b298      	uxth	r0, r3
 800527c:	2300      	movs	r3, #0
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4603      	mov	r3, r0
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff fc0a 	bl	8004a9c <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	1ff80000 	.word	0x1ff80000

08005298 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	b29b      	uxth	r3, r3
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop

080052b8 <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	0c9b      	lsrs	r3, r3, #18
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <USB_HC_Halt+0x40>
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 80052ee:	0c9b      	lsrs	r3, r3, #18
 80052f0:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d160      	bne.n	80053ba <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	4619      	mov	r1, r3
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4413      	add	r3, r2
 800530e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005318:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d135      	bne.n	8005392 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005332:	4619      	mov	r1, r3
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005346:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005354:	4619      	mov	r1, r3
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005368:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005376:	d81e      	bhi.n	80053b6 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800538e:	d0ec      	beq.n	800536a <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8005390:	e074      	b.n	800547c <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	4619      	mov	r1, r3
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053b2:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80053b4:	e062      	b.n	800547c <USB_HC_Halt+0x1c4>
          break;
 80053b6:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80053b8:	e060      	b.n	800547c <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	4619      	mov	r1, r3
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053da:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d135      	bne.n	8005456 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f6:	4619      	mov	r1, r3
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800540a:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	4619      	mov	r1, r3
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800542c:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800543a:	d81e      	bhi.n	800547a <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005452:	d0ec      	beq.n	800542e <USB_HC_Halt+0x176>
 8005454:	e012      	b.n	800547c <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	4619      	mov	r1, r3
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005476:	600b      	str	r3, [r1, #0]
 8005478:	e000      	b.n	800547c <USB_HC_Halt+0x1c4>
          break;
 800547a:	bf00      	nop
    }
  }
  
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop

0800548c <USB_DoPing>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	461a      	mov	r2, r3
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	04db      	lsls	r3, r3, #19
 80054b2:	4619      	mov	r1, r3
 80054b4:	4b12      	ldr	r3, [pc, #72]	; (8005500 <USB_DoPing+0x74>)
 80054b6:	400b      	ands	r3, r1
 80054b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ea:	461a      	mov	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	1ff80000 	.word	0x1ff80000

08005504 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fe ff3b 	bl	800438c <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8005516:	2110      	movs	r1, #16
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff f813 	bl	8004544 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff f822 	bl	8004568 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005524:	2300      	movs	r3, #0
 8005526:	75fb      	strb	r3, [r7, #23]
 8005528:	e01f      	b.n	800556a <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 800552a:	7dfb      	ldrb	r3, [r7, #23]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005540:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005548:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005550:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4413      	add	r3, r2
 800555a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	3301      	adds	r3, #1
 8005568:	75fb      	strb	r3, [r7, #23]
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b0f      	cmp	r3, #15
 800556e:	d9dc      	bls.n	800552a <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0U; i <= 15U; i++)
 8005570:	2300      	movs	r3, #0
 8005572:	75fb      	strb	r3, [r7, #23]
 8005574:	e034      	b.n	80055e0 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800558c:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005594:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800559c:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	3301      	adds	r3, #1
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055bc:	d80c      	bhi.n	80055d8 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055d4:	d0ec      	beq.n	80055b0 <USB_StopHost+0xac>
 80055d6:	e000      	b.n	80055da <USB_StopHost+0xd6>
        break;
 80055d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	3301      	adds	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d9c7      	bls.n	8005576 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ec:	461a      	mov	r2, r3
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055fa:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fe febd 	bl	800437c <USB_EnableGlobalInt>
  return HAL_OK;  
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8005610:	f7fa fe18 	bl	8000244 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005614:	2c00      	cmp	r4, #0
 8005616:	d06f      	beq.n	80056f8 <HAL_DMA_Init+0xec>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005618:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800561a:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800561c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8005620:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8005622:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8005624:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8005628:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800562c:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800562e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005630:	e005      	b.n	800563e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005632:	f7fa fe07 	bl	8000244 <HAL_GetTick>
 8005636:	1b40      	subs	r0, r0, r5
 8005638:	2805      	cmp	r0, #5
 800563a:	d83b      	bhi.n	80056b4 <HAL_DMA_Init+0xa8>
 800563c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	07d1      	lsls	r1, r2, #31
 8005642:	d4f6      	bmi.n	8005632 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005644:	68a7      	ldr	r7, [r4, #8]
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	68e6      	ldr	r6, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564a:	6925      	ldr	r5, [r4, #16]
 800564c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800564e:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005650:	433a      	orrs	r2, r7
 8005652:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005654:	432a      	orrs	r2, r5
 8005656:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005658:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 800565a:	6a25      	ldr	r5, [r4, #32]
  tmp = hdma->Instance->CR;
 800565c:	681f      	ldr	r7, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800565e:	4e34      	ldr	r6, [pc, #208]	; (8005730 <HAL_DMA_Init+0x124>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005660:	4302      	orrs	r2, r0
 8005662:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005664:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8005666:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005668:	403e      	ands	r6, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800566a:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800566c:	ea42 0206 	orr.w	r2, r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005670:	d027      	beq.n	80056c2 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005674:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005676:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800567a:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800567c:	b2da      	uxtb	r2, r3
 800567e:	4d2d      	ldr	r5, [pc, #180]	; (8005734 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8005680:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005682:	3a10      	subs	r2, #16
 8005684:	fba5 1202 	umull	r1, r2, r5, r2
 8005688:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800568a:	482b      	ldr	r0, [pc, #172]	; (8005738 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800568c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005690:	5c81      	ldrb	r1, [r0, r2]
 8005692:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005694:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8005698:	2a03      	cmp	r2, #3
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800569a:	bf88      	it	hi
 800569c:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800569e:	223f      	movs	r2, #63	; 0x3f
 80056a0:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80056a2:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056a4:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056a6:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80056a8:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056aa:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ac:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80056ae:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 80056b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056b6:	2220      	movs	r2, #32
 80056b8:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80056ba:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80056c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 80056c6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056c8:	4331      	orrs	r1, r6
 80056ca:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80056cc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80056ce:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80056d0:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056d4:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80056d8:	4311      	orrs	r1, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056da:	b978      	cbnz	r0, 80056fc <HAL_DMA_Init+0xf0>
  {
    switch (tmp)
 80056dc:	2d01      	cmp	r5, #1
 80056de:	d023      	beq.n	8005728 <HAL_DMA_Init+0x11c>
 80056e0:	d301      	bcc.n	80056e6 <HAL_DMA_Init+0xda>
 80056e2:	2d02      	cmp	r5, #2
 80056e4:	d1ca      	bne.n	800567c <HAL_DMA_Init+0x70>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e6:	01f2      	lsls	r2, r6, #7
 80056e8:	d5c8      	bpl.n	800567c <HAL_DMA_Init+0x70>
      hdma->State = HAL_DMA_STATE_READY;
 80056ea:	2301      	movs	r3, #1
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056ec:	2240      	movs	r2, #64	; 0x40
 80056ee:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_ERROR; 
 80056f0:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_READY;
 80056f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80056f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80056f8:	2001      	movs	r0, #1
 80056fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056fc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005700:	d004      	beq.n	800570c <HAL_DMA_Init+0x100>
    switch (tmp)
 8005702:	2d02      	cmp	r5, #2
 8005704:	d9f1      	bls.n	80056ea <HAL_DMA_Init+0xde>
 8005706:	2d03      	cmp	r5, #3
 8005708:	d1b8      	bne.n	800567c <HAL_DMA_Init+0x70>
 800570a:	e7ec      	b.n	80056e6 <HAL_DMA_Init+0xda>
    switch (tmp)
 800570c:	2d03      	cmp	r5, #3
 800570e:	d8b5      	bhi.n	800567c <HAL_DMA_Init+0x70>
 8005710:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <HAL_DMA_Init+0x10c>)
 8005712:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8005716:	bf00      	nop
 8005718:	080056eb 	.word	0x080056eb
 800571c:	080056e7 	.word	0x080056e7
 8005720:	080056eb 	.word	0x080056eb
 8005724:	08005729 	.word	0x08005729
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005728:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 800572c:	d1a6      	bne.n	800567c <HAL_DMA_Init+0x70>
 800572e:	e7dc      	b.n	80056ea <HAL_DMA_Init+0xde>
 8005730:	f010803f 	.word	0xf010803f
 8005734:	aaaaaaab 	.word	0xaaaaaaab
 8005738:	080084ec 	.word	0x080084ec

0800573c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800573c:	2800      	cmp	r0, #0
 800573e:	d02f      	beq.n	80057a0 <HAL_DMA_DeInit+0x64>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005740:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d02b      	beq.n	80057a2 <HAL_DMA_DeInit+0x66>
  __HAL_DMA_DISABLE(hdma);
 800574a:	6803      	ldr	r3, [r0, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800574c:	4916      	ldr	r1, [pc, #88]	; (80057a8 <HAL_DMA_DeInit+0x6c>)
 800574e:	b2da      	uxtb	r2, r3
{
 8005750:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005752:	3a10      	subs	r2, #16
  __HAL_DMA_DISABLE(hdma);
 8005754:	681c      	ldr	r4, [r3, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005756:	4d15      	ldr	r5, [pc, #84]	; (80057ac <HAL_DMA_DeInit+0x70>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005758:	fba1 1202 	umull	r1, r2, r1, r2
 800575c:	0912      	lsrs	r2, r2, #4
  hdma->Instance->CR   = 0U;
 800575e:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8005760:	f024 0401 	bic.w	r4, r4, #1
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005764:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 8005766:	601c      	str	r4, [r3, #0]
  hdma->Instance->CR   = 0U;
 8005768:	6019      	str	r1, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800576a:	6059      	str	r1, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800576c:	6099      	str	r1, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800576e:	60d9      	str	r1, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8005770:	6119      	str	r1, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005772:	615e      	str	r6, [r3, #20]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005774:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005778:	5cad      	ldrb	r5, [r5, r2]
 800577a:	65c5      	str	r5, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800577c:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8005780:	2a03      	cmp	r2, #3
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005782:	bf88      	it	hi
 8005784:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005786:	213f      	movs	r1, #63	; 0x3f
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005788:	2200      	movs	r2, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800578a:	40a9      	lsls	r1, r5
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800578c:	6583      	str	r3, [r0, #88]	; 0x58
}
 800578e:	bc70      	pop	{r4, r5, r6}
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005790:	6099      	str	r1, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005792:	6542      	str	r2, [r0, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8005794:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8005798:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
}
 800579c:	4610      	mov	r0, r2
 800579e:	4770      	bx	lr
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	aaaaaaab 	.word	0xaaaaaaab
 80057ac:	080084ec 	.word	0x080084ec

080057b0 <HAL_DMA_Start>:
{
 80057b0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80057b2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80057b6:	2c01      	cmp	r4, #1
 80057b8:	d00c      	beq.n	80057d4 <HAL_DMA_Start+0x24>
  if(HAL_DMA_STATE_READY == hdma->State)
 80057ba:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80057be:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80057c0:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80057c2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80057c6:	d008      	beq.n	80057da <HAL_DMA_Start+0x2a>
    __HAL_UNLOCK(hdma);
 80057c8:	2300      	movs	r3, #0
 80057ca:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80057ce:	2002      	movs	r0, #2
}
 80057d0:	bc70      	pop	{r4, r5, r6}
 80057d2:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80057d4:	2002      	movs	r0, #2
}
 80057d6:	bc70      	pop	{r4, r5, r6}
 80057d8:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057da:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80057dc:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057de:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80057e0:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057e6:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057e8:	6886      	ldr	r6, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057ea:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057ee:	2e40      	cmp	r6, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057f0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80057f2:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 80057f4:	bf0b      	itete	eq
 80057f6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80057f8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80057fa:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->M0AR = DstAddress;
 80057fc:	60e2      	strne	r2, [r4, #12]
    __HAL_DMA_ENABLE(hdma);
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2000      	movs	r0, #0
 8005808:	e7e2      	b.n	80057d0 <HAL_DMA_Start+0x20>
 800580a:	bf00      	nop

0800580c <HAL_DMA_Start_IT>:
{
 800580c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800580e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005812:	2c01      	cmp	r4, #1
 8005814:	d00d      	beq.n	8005832 <HAL_DMA_Start_IT+0x26>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005816:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800581a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800581c:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800581e:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8005820:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005824:	d008      	beq.n	8005838 <HAL_DMA_Start_IT+0x2c>
    __HAL_UNLOCK(hdma);	  
 8005826:	2300      	movs	r3, #0
 8005828:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800582c:	2002      	movs	r0, #2
}
 800582e:	bcf0      	pop	{r4, r5, r6, r7}
 8005830:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8005832:	2002      	movs	r0, #2
}
 8005834:	bcf0      	pop	{r4, r5, r6, r7}
 8005836:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005838:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800583a:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800583c:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800583e:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005842:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005844:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005846:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005848:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800584c:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800584e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8005850:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8005852:	bf0a      	itet	eq
 8005854:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8005856:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005858:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800585a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800585c:	bf18      	it	ne
 800585e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005860:	233f      	movs	r3, #63	; 0x3f
 8005862:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8005864:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005866:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	f043 0316 	orr.w	r3, r3, #22
 800586e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005870:	6963      	ldr	r3, [r4, #20]
 8005872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005876:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005878:	b11a      	cbz	r2, 8005882 <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	f043 0308 	orr.w	r3, r3, #8
 8005880:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2000      	movs	r0, #0
 800588c:	e7cf      	b.n	800582e <HAL_DMA_Start_IT+0x22>
 800588e:	bf00      	nop

08005890 <HAL_DMA_Abort>:
{
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005894:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8005896:	f7fa fcd5 	bl	8000244 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800589a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d006      	beq.n	80058b0 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058a2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80058a4:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058a6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80058a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80058ac:	2001      	movs	r0, #1
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058b0:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f022 0216 	bic.w	r2, r2, #22
 80058ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058c2:	4605      	mov	r5, r0
 80058c4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058c6:	b331      	cbz	r1, 8005916 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	f022 0208 	bic.w	r2, r2, #8
 80058ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058d8:	e005      	b.n	80058e6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058da:	f7fa fcb3 	bl	8000244 <HAL_GetTick>
 80058de:	1b40      	subs	r0, r0, r5
 80058e0:	2805      	cmp	r0, #5
 80058e2:	d80f      	bhi.n	8005904 <HAL_DMA_Abort+0x74>
 80058e4:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f013 0301 	ands.w	r3, r3, #1
 80058ec:	d1f5      	bne.n	80058da <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80058f0:	223f      	movs	r2, #63	; 0x3f
 80058f2:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80058f4:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058f6:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 80058f8:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 80058fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80058fe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8005902:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005904:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8005906:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005908:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800590a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800590c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005910:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8005914:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005916:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005918:	2a00      	cmp	r2, #0
 800591a:	d1d5      	bne.n	80058c8 <HAL_DMA_Abort+0x38>
 800591c:	e7d8      	b.n	80058d0 <HAL_DMA_Abort+0x40>
 800591e:	bf00      	nop

08005920 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005920:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005924:	2b02      	cmp	r3, #2
 8005926:	d003      	beq.n	8005930 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800592c:	2001      	movs	r0, #1
 800592e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8005930:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005932:	2305      	movs	r3, #5
 8005934:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005940:	2000      	movs	r0, #0
}
 8005942:	4770      	bx	lr

08005944 <HAL_DMA_PollForTransfer>:
{
 8005944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005948:	4604      	mov	r4, r0
 800594a:	b083      	sub	sp, #12
 800594c:	4692      	mov	sl, r2
 800594e:	9100      	str	r1, [sp, #0]
  uint32_t tickstart = HAL_GetTick(); 
 8005950:	f7fa fc78 	bl	8000244 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	05dd      	lsls	r5, r3, #23
 800595a:	d44a      	bmi.n	80059f2 <HAL_DMA_PollForTransfer+0xae>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800595c:	9b00      	ldr	r3, [sp, #0]
 800595e:	4681      	mov	r9, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d042      	beq.n	80059ea <HAL_DMA_PollForTransfer+0xa6>
    temp = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005964:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005966:	2110      	movs	r1, #16
 8005968:	4099      	lsls	r1, r3
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800596a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800596c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8005a7c <HAL_DMA_PollForTransfer+0x138>
  tmpisr = regs->ISR;
 8005970:	f8d5 b000 	ldr.w	fp, [r5]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005974:	4f40      	ldr	r7, [pc, #256]	; (8005a78 <HAL_DMA_PollForTransfer+0x134>)
 8005976:	ea01 020b 	and.w	r2, r1, fp
 800597a:	9201      	str	r2, [sp, #4]
 800597c:	4652      	mov	r2, sl
 800597e:	46a2      	mov	sl, r4
 8005980:	4614      	mov	r4, r2
  while((tmpisr & temp) == RESET )
 8005982:	9a01      	ldr	r2, [sp, #4]
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005984:	2608      	movs	r6, #8
  while((tmpisr & temp) == RESET )
 8005986:	2a00      	cmp	r2, #0
 8005988:	d147      	bne.n	8005a1a <HAL_DMA_PollForTransfer+0xd6>
    if(Timeout != HAL_MAX_DELAY)
 800598a:	1c61      	adds	r1, r4, #1
 800598c:	d008      	beq.n	80059a0 <HAL_DMA_PollForTransfer+0x5c>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800598e:	b3bc      	cbz	r4, 8005a00 <HAL_DMA_PollForTransfer+0xbc>
 8005990:	f7fa fc58 	bl	8000244 <HAL_GetTick>
 8005994:	eba0 0009 	sub.w	r0, r0, r9
 8005998:	4284      	cmp	r4, r0
 800599a:	d331      	bcc.n	8005a00 <HAL_DMA_PollForTransfer+0xbc>
 800599c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059a0:	fa06 f003 	lsl.w	r0, r6, r3
 80059a4:	ea1b 0f00 	tst.w	fp, r0
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059a8:	fa08 f103 	lsl.w	r1, r8, r3
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059ac:	fa07 f203 	lsl.w	r2, r7, r3
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059b0:	d006      	beq.n	80059c0 <HAL_DMA_PollForTransfer+0x7c>
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059b2:	f8da e054 	ldr.w	lr, [sl, #84]	; 0x54
 80059b6:	f04e 0e01 	orr.w	lr, lr, #1
 80059ba:	f8ca e054 	str.w	lr, [sl, #84]	; 0x54
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059be:	60a8      	str	r0, [r5, #8]
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059c0:	ea1b 0f01 	tst.w	fp, r1
 80059c4:	d006      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0x90>
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059c6:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 80059ca:	f040 0002 	orr.w	r0, r0, #2
 80059ce:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059d2:	60a9      	str	r1, [r5, #8]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059d4:	ea1b 0f02 	tst.w	fp, r2
 80059d8:	d0d7      	beq.n	800598a <HAL_DMA_PollForTransfer+0x46>
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059da:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
 80059de:	f041 0104 	orr.w	r1, r1, #4
 80059e2:	f8ca 1054 	str.w	r1, [sl, #84]	; 0x54
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059e6:	60aa      	str	r2, [r5, #8]
 80059e8:	e7cb      	b.n	8005982 <HAL_DMA_PollForTransfer+0x3e>
    temp = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059ec:	2120      	movs	r1, #32
 80059ee:	4099      	lsls	r1, r3
 80059f0:	e7bb      	b.n	800596a <HAL_DMA_PollForTransfer+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80059f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f6:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80059f8:	2001      	movs	r0, #1
}
 80059fa:	b003      	add	sp, #12
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a00:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8005a02:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005a04:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8005a06:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a08:	f8ca 1054 	str.w	r1, [sl, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005a0c:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005a10:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
}
 8005a14:	b003      	add	sp, #12
 8005a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a1a:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 8005a1e:	4654      	mov	r4, sl
 8005a20:	b120      	cbz	r0, 8005a2c <HAL_DMA_PollForTransfer+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a22:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8005a26:	07d2      	lsls	r2, r2, #31
 8005a28:	d415      	bmi.n	8005a56 <HAL_DMA_PollForTransfer+0x112>
   status = HAL_ERROR;
 8005a2a:	2001      	movs	r0, #1
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8005a2c:	9a00      	ldr	r2, [sp, #0]
 8005a2e:	b132      	cbz	r2, 8005a3e <HAL_DMA_PollForTransfer+0xfa>
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8005a30:	2210      	movs	r2, #16
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	60ab      	str	r3, [r5, #8]
}
 8005a38:	b003      	add	sp, #12
 8005a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8005a3e:	2230      	movs	r2, #48	; 0x30
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8005a46:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8005a48:	f89d 3000 	ldrb.w	r3, [sp]
 8005a4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005a50:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8005a54:	e7d1      	b.n	80059fa <HAL_DMA_PollForTransfer+0xb6>
      HAL_DMA_Abort(hdma);
 8005a56:	4650      	mov	r0, sl
 8005a58:	f7ff ff1a 	bl	8005890 <HAL_DMA_Abort>
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8005a5c:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
 8005a60:	2330      	movs	r3, #48	; 0x30
 8005a62:	4093      	lsls	r3, r2
      __HAL_UNLOCK(hdma);
 8005a64:	2100      	movs	r1, #0
      hdma->State= HAL_DMA_STATE_READY;
 8005a66:	2201      	movs	r2, #1
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8005a68:	60ab      	str	r3, [r5, #8]
      return HAL_ERROR;
 8005a6a:	4610      	mov	r0, r2
      __HAL_UNLOCK(hdma);
 8005a6c:	f88a 1034 	strb.w	r1, [sl, #52]	; 0x34
      hdma->State= HAL_DMA_STATE_READY;
 8005a70:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      return HAL_ERROR;
 8005a74:	e7c1      	b.n	80059fa <HAL_DMA_PollForTransfer+0xb6>
 8005a76:	bf00      	nop
 8005a78:	00800004 	.word	0x00800004
 8005a7c:	00800001 	.word	0x00800001

08005a80 <HAL_DMA_IRQHandler>:
{
 8005a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a82:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8005a84:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a86:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0;
 8005a88:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a8a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8005a8c:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8005a8e:	4962      	ldr	r1, [pc, #392]	; (8005c18 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a90:	2208      	movs	r2, #8
 8005a92:	409a      	lsls	r2, r3
 8005a94:	4215      	tst	r5, r2
{
 8005a96:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600;
 8005a98:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a9a:	d003      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a9c:	6801      	ldr	r1, [r0, #0]
 8005a9e:	6808      	ldr	r0, [r1, #0]
 8005aa0:	0740      	lsls	r0, r0, #29
 8005aa2:	d476      	bmi.n	8005b92 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005aa4:	4a5d      	ldr	r2, [pc, #372]	; (8005c1c <HAL_DMA_IRQHandler+0x19c>)
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	4215      	tst	r5, r2
 8005aaa:	d003      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005aac:	6821      	ldr	r1, [r4, #0]
 8005aae:	6949      	ldr	r1, [r1, #20]
 8005ab0:	0608      	lsls	r0, r1, #24
 8005ab2:	d468      	bmi.n	8005b86 <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ab4:	4a5a      	ldr	r2, [pc, #360]	; (8005c20 <HAL_DMA_IRQHandler+0x1a0>)
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	4215      	tst	r5, r2
 8005aba:	d003      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005abc:	6821      	ldr	r1, [r4, #0]
 8005abe:	6809      	ldr	r1, [r1, #0]
 8005ac0:	0789      	lsls	r1, r1, #30
 8005ac2:	d45a      	bmi.n	8005b7a <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	409a      	lsls	r2, r3
 8005ac8:	4215      	tst	r5, r2
 8005aca:	d003      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005acc:	6821      	ldr	r1, [r4, #0]
 8005ace:	6808      	ldr	r0, [r1, #0]
 8005ad0:	0700      	lsls	r0, r0, #28
 8005ad2:	d43f      	bmi.n	8005b54 <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	4215      	tst	r5, r2
 8005ada:	d003      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005adc:	6821      	ldr	r1, [r4, #0]
 8005ade:	6808      	ldr	r0, [r1, #0]
 8005ae0:	06c0      	lsls	r0, r0, #27
 8005ae2:	d425      	bmi.n	8005b30 <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ae4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ae6:	b30b      	cbz	r3, 8005b2c <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aea:	07da      	lsls	r2, r3, #31
 8005aec:	d51a      	bpl.n	8005b24 <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005aee:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8005af0:	6821      	ldr	r1, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005af2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005af6:	680b      	ldr	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8005af8:	4a4a      	ldr	r2, [pc, #296]	; (8005c24 <HAL_DMA_IRQHandler+0x1a4>)
      __HAL_DMA_DISABLE(hdma);
 8005afa:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8005afe:	fba2 0206 	umull	r0, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 8005b02:	600b      	str	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8005b04:	0a92      	lsrs	r2, r2, #10
 8005b06:	e002      	b.n	8005b0e <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b08:	680b      	ldr	r3, [r1, #0]
 8005b0a:	07db      	lsls	r3, r3, #31
 8005b0c:	d504      	bpl.n	8005b18 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	3301      	adds	r3, #1
 8005b12:	429a      	cmp	r2, r3
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	d2f7      	bcs.n	8005b08 <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 8005b18:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005b1a:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8005b1c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005b20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005b24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b26:	b10b      	cbz	r3, 8005b2c <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4798      	blx	r3
}
 8005b2c:	b003      	add	sp, #12
 8005b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b30:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b32:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005b36:	2a05      	cmp	r2, #5
 8005b38:	d03b      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b3a:	680b      	ldr	r3, [r1, #0]
 8005b3c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b40:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b42:	d054      	beq.n	8005bee <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b44:	0319      	lsls	r1, r3, #12
 8005b46:	d55f      	bpl.n	8005c08 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 8005b48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0ca      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4798      	blx	r3
 8005b52:	e7c7      	b.n	8005ae4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b54:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b56:	680a      	ldr	r2, [r1, #0]
 8005b58:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b5c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b5e:	d122      	bne.n	8005ba6 <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b60:	05d2      	lsls	r2, r2, #23
 8005b62:	d403      	bmi.n	8005b6c <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b64:	680a      	ldr	r2, [r1, #0]
 8005b66:	f022 0208 	bic.w	r2, r2, #8
 8005b6a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005b6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	d0b0      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8005b72:	4620      	mov	r0, r4
 8005b74:	4790      	blx	r2
 8005b76:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b78:	e7ac      	b.n	8005ad4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b7a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b7c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005b7e:	f042 0204 	orr.w	r2, r2, #4
 8005b82:	6562      	str	r2, [r4, #84]	; 0x54
 8005b84:	e79e      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b86:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b88:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005b8a:	f042 0202 	orr.w	r2, r2, #2
 8005b8e:	6562      	str	r2, [r4, #84]	; 0x54
 8005b90:	e790      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b92:	6808      	ldr	r0, [r1, #0]
 8005b94:	f020 0004 	bic.w	r0, r0, #4
 8005b98:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b9a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	6562      	str	r2, [r4, #84]	; 0x54
 8005ba4:	e77e      	b.n	8005aa4 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ba6:	0311      	lsls	r1, r2, #12
 8005ba8:	d5e0      	bpl.n	8005b6c <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005baa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d1e0      	bne.n	8005b72 <HAL_DMA_IRQHandler+0xf2>
 8005bb0:	e790      	b.n	8005ad4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bb2:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bb4:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bb6:	f022 0216 	bic.w	r2, r2, #22
 8005bba:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bbc:	694a      	ldr	r2, [r1, #20]
 8005bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bc2:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bc4:	b320      	cbz	r0, 8005c10 <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bc6:	680a      	ldr	r2, [r1, #0]
 8005bc8:	f022 0208 	bic.w	r2, r2, #8
 8005bcc:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bce:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8005bd0:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8005bd6:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005bd8:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bda:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005bdc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005be0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005be4:	2900      	cmp	r1, #0
 8005be6:	d0a1      	beq.n	8005b2c <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 8005be8:	4620      	mov	r0, r4
 8005bea:	4788      	blx	r1
 8005bec:	e79e      	b.n	8005b2c <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bee:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005bf2:	d1a9      	bne.n	8005b48 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bf4:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005bf6:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bf8:	f022 0210 	bic.w	r2, r2, #16
 8005bfc:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8005bfe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005c02:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8005c06:	e79f      	b.n	8005b48 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 8005c08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d19f      	bne.n	8005b4e <HAL_DMA_IRQHandler+0xce>
 8005c0e:	e769      	b.n	8005ae4 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	d1d7      	bne.n	8005bc6 <HAL_DMA_IRQHandler+0x146>
 8005c16:	e7da      	b.n	8005bce <HAL_DMA_IRQHandler+0x14e>
 8005c18:	2000047c 	.word	0x2000047c
 8005c1c:	00800001 	.word	0x00800001
 8005c20:	00800004 	.word	0x00800004
 8005c24:	1b4e81b5 	.word	0x1b4e81b5

08005c28 <HAL_DMA_RegisterCallback>:
{
 8005c28:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8005c2a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005c2e:	2801      	cmp	r0, #1
 8005c30:	d00d      	beq.n	8005c4e <HAL_DMA_RegisterCallback+0x26>
{
 8005c32:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c34:	f893 4035 	ldrb.w	r4, [r3, #53]	; 0x35
  __HAL_LOCK(hdma);
 8005c38:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c3a:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8005c3c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c40:	d007      	beq.n	8005c52 <HAL_DMA_RegisterCallback+0x2a>
  __HAL_UNLOCK(hdma);
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8005c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c4c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8005c4e:	2002      	movs	r0, #2
 8005c50:	4770      	bx	lr
    switch (CallbackID)
 8005c52:	2905      	cmp	r1, #5
 8005c54:	d816      	bhi.n	8005c84 <HAL_DMA_RegisterCallback+0x5c>
 8005c56:	e8df f001 	tbb	[pc, r1]
 8005c5a:	0f12      	.short	0x0f12
 8005c5c:	0306090c 	.word	0x0306090c
      hdma->XferAbortCallback = pCallback;
 8005c60:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005c62:	2000      	movs	r0, #0
      break;
 8005c64:	e7ed      	b.n	8005c42 <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferErrorCallback = pCallback;
 8005c66:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8005c68:	2000      	movs	r0, #0
      break;
 8005c6a:	e7ea      	b.n	8005c42 <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferM1HalfCpltCallback = pCallback;
 8005c6c:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2000      	movs	r0, #0
      break;
 8005c70:	e7e7      	b.n	8005c42 <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferM1CpltCallback = pCallback;
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8005c74:	2000      	movs	r0, #0
      break;
 8005c76:	e7e4      	b.n	8005c42 <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = pCallback;
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8005c7a:	2000      	movs	r0, #0
      break;
 8005c7c:	e7e1      	b.n	8005c42 <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferCpltCallback = pCallback;
 8005c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c80:	2000      	movs	r0, #0
      break;
 8005c82:	e7de      	b.n	8005c42 <HAL_DMA_RegisterCallback+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8005c84:	2000      	movs	r0, #0
 8005c86:	e7dc      	b.n	8005c42 <HAL_DMA_RegisterCallback+0x1a>

08005c88 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 8005c88:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005c8c:	2b01      	cmp	r3, #1
{
 8005c8e:	4602      	mov	r2, r0
  __HAL_LOCK(hdma);
 8005c90:	d00b      	beq.n	8005caa <HAL_DMA_UnRegisterCallback+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c92:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8005c96:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c98:	4298      	cmp	r0, r3
  __HAL_LOCK(hdma);
 8005c9a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c9e:	d006      	beq.n	8005cae <HAL_DMA_UnRegisterCallback+0x26>
      status = HAL_ERROR;
 8005ca0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  return status;
 8005ca8:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8005caa:	2002      	movs	r0, #2
}
 8005cac:	4770      	bx	lr
    switch (CallbackID)
 8005cae:	2906      	cmp	r1, #6
 8005cb0:	d8f6      	bhi.n	8005ca0 <HAL_DMA_UnRegisterCallback+0x18>
 8005cb2:	e8df f001 	tbb	[pc, r1]
 8005cb6:	181b      	.short	0x181b
 8005cb8:	0c0f1215 	.word	0x0c0f1215
 8005cbc:	04          	.byte	0x04
 8005cbd:	00          	.byte	0x00
      hdma->XferCpltCallback = NULL;
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	63d0      	str	r0, [r2, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8005cc2:	6410      	str	r0, [r2, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8005cc4:	6450      	str	r0, [r2, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8005cc6:	6490      	str	r0, [r2, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8005cc8:	64d0      	str	r0, [r2, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8005cca:	6510      	str	r0, [r2, #80]	; 0x50
      break; 
 8005ccc:	e7e9      	b.n	8005ca2 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferAbortCallback = NULL;
 8005cce:	2000      	movs	r0, #0
 8005cd0:	6510      	str	r0, [r2, #80]	; 0x50
      break; 
 8005cd2:	e7e6      	b.n	8005ca2 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferErrorCallback = NULL;
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	64d0      	str	r0, [r2, #76]	; 0x4c
      break;
 8005cd8:	e7e3      	b.n	8005ca2 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferM1HalfCpltCallback = NULL;
 8005cda:	2000      	movs	r0, #0
 8005cdc:	6490      	str	r0, [r2, #72]	; 0x48
      break;
 8005cde:	e7e0      	b.n	8005ca2 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferM1CpltCallback = NULL;
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	6450      	str	r0, [r2, #68]	; 0x44
      break;
 8005ce4:	e7dd      	b.n	8005ca2 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = NULL;
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	6410      	str	r0, [r2, #64]	; 0x40
      break;
 8005cea:	e7da      	b.n	8005ca2 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferCpltCallback = NULL;
 8005cec:	2000      	movs	r0, #0
 8005cee:	63d0      	str	r0, [r2, #60]	; 0x3c
      break;
 8005cf0:	e7d7      	b.n	8005ca2 <HAL_DMA_UnRegisterCallback+0x1a>
 8005cf2:	bf00      	nop

08005cf4 <HAL_DMA_GetState>:
  return hdma->State;
 8005cf4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop

08005cfc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005cfc:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005cfe:	4770      	bx	lr
 8005d00:	eba2 0003 	sub.w	r0, r2, r3
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop

08005d08 <strcmp>:
 8005d08:	7802      	ldrb	r2, [r0, #0]
 8005d0a:	780b      	ldrb	r3, [r1, #0]
 8005d0c:	2a01      	cmp	r2, #1
 8005d0e:	bf28      	it	cs
 8005d10:	429a      	cmpcs	r2, r3
 8005d12:	d1f5      	bne.n	8005d00 <HAL_DMA_GetError+0x4>
 8005d14:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8005d18:	ea40 0401 	orr.w	r4, r0, r1
 8005d1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d20:	f06f 0c00 	mvn.w	ip, #0
 8005d24:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8005d28:	b312      	cbz	r2, 8005d70 <strcmp+0x68>
 8005d2a:	ea80 0401 	eor.w	r4, r0, r1
 8005d2e:	f014 0f07 	tst.w	r4, #7
 8005d32:	d16a      	bne.n	8005e0a <strcmp+0x102>
 8005d34:	f000 0407 	and.w	r4, r0, #7
 8005d38:	f020 0007 	bic.w	r0, r0, #7
 8005d3c:	f004 0503 	and.w	r5, r4, #3
 8005d40:	f021 0107 	bic.w	r1, r1, #7
 8005d44:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8005d48:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8005d4c:	f014 0f04 	tst.w	r4, #4
 8005d50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8005d54:	fa0c f405 	lsl.w	r4, ip, r5
 8005d58:	ea62 0204 	orn	r2, r2, r4
 8005d5c:	ea66 0604 	orn	r6, r6, r4
 8005d60:	d00a      	beq.n	8005d78 <strcmp+0x70>
 8005d62:	ea63 0304 	orn	r3, r3, r4
 8005d66:	4662      	mov	r2, ip
 8005d68:	ea67 0704 	orn	r7, r7, r4
 8005d6c:	4666      	mov	r6, ip
 8005d6e:	e003      	b.n	8005d78 <strcmp+0x70>
 8005d70:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8005d74:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8005d78:	fa82 f54c 	uadd8	r5, r2, ip
 8005d7c:	ea82 0406 	eor.w	r4, r2, r6
 8005d80:	faa4 f48c 	sel	r4, r4, ip
 8005d84:	bb6c      	cbnz	r4, 8005de2 <strcmp+0xda>
 8005d86:	fa83 f54c 	uadd8	r5, r3, ip
 8005d8a:	ea83 0507 	eor.w	r5, r3, r7
 8005d8e:	faa5 f58c 	sel	r5, r5, ip
 8005d92:	b995      	cbnz	r5, 8005dba <strcmp+0xb2>
 8005d94:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8005d98:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8005d9c:	fa82 f54c 	uadd8	r5, r2, ip
 8005da0:	ea82 0406 	eor.w	r4, r2, r6
 8005da4:	faa4 f48c 	sel	r4, r4, ip
 8005da8:	fa83 f54c 	uadd8	r5, r3, ip
 8005dac:	ea83 0507 	eor.w	r5, r3, r7
 8005db0:	faa5 f58c 	sel	r5, r5, ip
 8005db4:	4325      	orrs	r5, r4
 8005db6:	d0db      	beq.n	8005d70 <strcmp+0x68>
 8005db8:	b99c      	cbnz	r4, 8005de2 <strcmp+0xda>
 8005dba:	ba2d      	rev	r5, r5
 8005dbc:	fab5 f485 	clz	r4, r5
 8005dc0:	f024 0407 	bic.w	r4, r4, #7
 8005dc4:	fa27 f104 	lsr.w	r1, r7, r4
 8005dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dcc:	fa23 f304 	lsr.w	r3, r3, r4
 8005dd0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005dd4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005dd8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005ddc:	eba0 0001 	sub.w	r0, r0, r1
 8005de0:	4770      	bx	lr
 8005de2:	ba24      	rev	r4, r4
 8005de4:	fab4 f484 	clz	r4, r4
 8005de8:	f024 0407 	bic.w	r4, r4, #7
 8005dec:	fa26 f104 	lsr.w	r1, r6, r4
 8005df0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005df4:	fa22 f204 	lsr.w	r2, r2, r4
 8005df8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8005dfc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005e00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005e04:	eba0 0001 	sub.w	r0, r0, r1
 8005e08:	4770      	bx	lr
 8005e0a:	f014 0f03 	tst.w	r4, #3
 8005e0e:	d13c      	bne.n	8005e8a <strcmp+0x182>
 8005e10:	f010 0403 	ands.w	r4, r0, #3
 8005e14:	d128      	bne.n	8005e68 <strcmp+0x160>
 8005e16:	f850 2b08 	ldr.w	r2, [r0], #8
 8005e1a:	f851 3b08 	ldr.w	r3, [r1], #8
 8005e1e:	fa82 f54c 	uadd8	r5, r2, ip
 8005e22:	ea82 0503 	eor.w	r5, r2, r3
 8005e26:	faa5 f58c 	sel	r5, r5, ip
 8005e2a:	b95d      	cbnz	r5, 8005e44 <strcmp+0x13c>
 8005e2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e34:	fa82 f54c 	uadd8	r5, r2, ip
 8005e38:	ea82 0503 	eor.w	r5, r2, r3
 8005e3c:	faa5 f58c 	sel	r5, r5, ip
 8005e40:	2d00      	cmp	r5, #0
 8005e42:	d0e8      	beq.n	8005e16 <strcmp+0x10e>
 8005e44:	ba2d      	rev	r5, r5
 8005e46:	fab5 f485 	clz	r4, r5
 8005e4a:	f024 0407 	bic.w	r4, r4, #7
 8005e4e:	fa23 f104 	lsr.w	r1, r3, r4
 8005e52:	fa22 f204 	lsr.w	r2, r2, r4
 8005e56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8005e5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005e5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005e62:	eba0 0001 	sub.w	r0, r0, r1
 8005e66:	4770      	bx	lr
 8005e68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8005e6c:	f020 0003 	bic.w	r0, r0, #3
 8005e70:	f850 2b08 	ldr.w	r2, [r0], #8
 8005e74:	f021 0103 	bic.w	r1, r1, #3
 8005e78:	f851 3b08 	ldr.w	r3, [r1], #8
 8005e7c:	fa0c f404 	lsl.w	r4, ip, r4
 8005e80:	ea62 0204 	orn	r2, r2, r4
 8005e84:	ea63 0304 	orn	r3, r3, r4
 8005e88:	e7c9      	b.n	8005e1e <strcmp+0x116>
 8005e8a:	f010 0403 	ands.w	r4, r0, #3
 8005e8e:	d01a      	beq.n	8005ec6 <strcmp+0x1be>
 8005e90:	eba1 0104 	sub.w	r1, r1, r4
 8005e94:	f020 0003 	bic.w	r0, r0, #3
 8005e98:	07e4      	lsls	r4, r4, #31
 8005e9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e9e:	d006      	beq.n	8005eae <strcmp+0x1a6>
 8005ea0:	d20f      	bcs.n	8005ec2 <strcmp+0x1ba>
 8005ea2:	788b      	ldrb	r3, [r1, #2]
 8005ea4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8005ea8:	1ae4      	subs	r4, r4, r3
 8005eaa:	d106      	bne.n	8005eba <strcmp+0x1b2>
 8005eac:	b12b      	cbz	r3, 8005eba <strcmp+0x1b2>
 8005eae:	78cb      	ldrb	r3, [r1, #3]
 8005eb0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8005eb4:	1ae4      	subs	r4, r4, r3
 8005eb6:	d100      	bne.n	8005eba <strcmp+0x1b2>
 8005eb8:	b91b      	cbnz	r3, 8005ec2 <strcmp+0x1ba>
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8005ec0:	4770      	bx	lr
 8005ec2:	f101 0104 	add.w	r1, r1, #4
 8005ec6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005eca:	07cc      	lsls	r4, r1, #31
 8005ecc:	f021 0103 	bic.w	r1, r1, #3
 8005ed0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005ed4:	d848      	bhi.n	8005f68 <strcmp+0x260>
 8005ed6:	d224      	bcs.n	8005f22 <strcmp+0x21a>
 8005ed8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8005edc:	fa82 f54c 	uadd8	r5, r2, ip
 8005ee0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8005ee4:	faa5 f58c 	sel	r5, r5, ip
 8005ee8:	d10a      	bne.n	8005f00 <strcmp+0x1f8>
 8005eea:	b965      	cbnz	r5, 8005f06 <strcmp+0x1fe>
 8005eec:	f851 3b04 	ldr.w	r3, [r1], #4
 8005ef0:	ea84 0402 	eor.w	r4, r4, r2
 8005ef4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8005ef8:	d10e      	bne.n	8005f18 <strcmp+0x210>
 8005efa:	f850 2b04 	ldr.w	r2, [r0], #4
 8005efe:	e7eb      	b.n	8005ed8 <strcmp+0x1d0>
 8005f00:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8005f04:	e055      	b.n	8005fb2 <strcmp+0x2aa>
 8005f06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8005f0a:	d14d      	bne.n	8005fa8 <strcmp+0x2a0>
 8005f0c:	7808      	ldrb	r0, [r1, #0]
 8005f0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005f12:	f1c0 0000 	rsb	r0, r0, #0
 8005f16:	4770      	bx	lr
 8005f18:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8005f1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005f20:	e047      	b.n	8005fb2 <strcmp+0x2aa>
 8005f22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8005f26:	fa82 f54c 	uadd8	r5, r2, ip
 8005f2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8005f2e:	faa5 f58c 	sel	r5, r5, ip
 8005f32:	d10a      	bne.n	8005f4a <strcmp+0x242>
 8005f34:	b965      	cbnz	r5, 8005f50 <strcmp+0x248>
 8005f36:	f851 3b04 	ldr.w	r3, [r1], #4
 8005f3a:	ea84 0402 	eor.w	r4, r4, r2
 8005f3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8005f42:	d10c      	bne.n	8005f5e <strcmp+0x256>
 8005f44:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f48:	e7eb      	b.n	8005f22 <strcmp+0x21a>
 8005f4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005f4e:	e030      	b.n	8005fb2 <strcmp+0x2aa>
 8005f50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8005f54:	d128      	bne.n	8005fa8 <strcmp+0x2a0>
 8005f56:	880b      	ldrh	r3, [r1, #0]
 8005f58:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8005f5c:	e029      	b.n	8005fb2 <strcmp+0x2aa>
 8005f5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8005f62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8005f66:	e024      	b.n	8005fb2 <strcmp+0x2aa>
 8005f68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8005f6c:	fa82 f54c 	uadd8	r5, r2, ip
 8005f70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8005f74:	faa5 f58c 	sel	r5, r5, ip
 8005f78:	d10a      	bne.n	8005f90 <strcmp+0x288>
 8005f7a:	b965      	cbnz	r5, 8005f96 <strcmp+0x28e>
 8005f7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8005f80:	ea84 0402 	eor.w	r4, r4, r2
 8005f84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8005f88:	d109      	bne.n	8005f9e <strcmp+0x296>
 8005f8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f8e:	e7eb      	b.n	8005f68 <strcmp+0x260>
 8005f90:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8005f94:	e00d      	b.n	8005fb2 <strcmp+0x2aa>
 8005f96:	f015 0fff 	tst.w	r5, #255	; 0xff
 8005f9a:	d105      	bne.n	8005fa8 <strcmp+0x2a0>
 8005f9c:	680b      	ldr	r3, [r1, #0]
 8005f9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8005fa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fa6:	e004      	b.n	8005fb2 <strcmp+0x2aa>
 8005fa8:	f04f 0000 	mov.w	r0, #0
 8005fac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005fb0:	4770      	bx	lr
 8005fb2:	ba12      	rev	r2, r2
 8005fb4:	ba1b      	rev	r3, r3
 8005fb6:	fa82 f44c 	uadd8	r4, r2, ip
 8005fba:	ea82 0403 	eor.w	r4, r2, r3
 8005fbe:	faa4 f58c 	sel	r5, r4, ip
 8005fc2:	fab5 f485 	clz	r4, r5
 8005fc6:	fa02 f204 	lsl.w	r2, r2, r4
 8005fca:	fa03 f304 	lsl.w	r3, r3, r4
 8005fce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8005fd2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005fd6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8005fda:	4770      	bx	lr

08005fdc <__do_global_dtors_aux>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	4c05      	ldr	r4, [pc, #20]	; (8005ff4 <__do_global_dtors_aux+0x18>)
 8005fe0:	7822      	ldrb	r2, [r4, #0]
 8005fe2:	b932      	cbnz	r2, 8005ff2 <__do_global_dtors_aux+0x16>
 8005fe4:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <__do_global_dtors_aux+0x1c>)
 8005fe6:	b113      	cbz	r3, 8005fee <__do_global_dtors_aux+0x12>
 8005fe8:	4804      	ldr	r0, [pc, #16]	; (8005ffc <__do_global_dtors_aux+0x20>)
 8005fea:	f3af 8000 	nop.w
 8005fee:	2301      	movs	r3, #1
 8005ff0:	7023      	strb	r3, [r4, #0]
 8005ff2:	bd10      	pop	{r4, pc}
 8005ff4:	200009a4 	.word	0x200009a4
 8005ff8:	00000000 	.word	0x00000000
 8005ffc:	080084c4 	.word	0x080084c4

08006000 <frame_dummy>:
 8006000:	4b07      	ldr	r3, [pc, #28]	; (8006020 <frame_dummy+0x20>)
 8006002:	b510      	push	{r4, lr}
 8006004:	b11b      	cbz	r3, 800600e <frame_dummy+0xe>
 8006006:	4907      	ldr	r1, [pc, #28]	; (8006024 <frame_dummy+0x24>)
 8006008:	4807      	ldr	r0, [pc, #28]	; (8006028 <frame_dummy+0x28>)
 800600a:	f3af 8000 	nop.w
 800600e:	4807      	ldr	r0, [pc, #28]	; (800602c <frame_dummy+0x2c>)
 8006010:	6803      	ldr	r3, [r0, #0]
 8006012:	b123      	cbz	r3, 800601e <frame_dummy+0x1e>
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <frame_dummy+0x30>)
 8006016:	b113      	cbz	r3, 800601e <frame_dummy+0x1e>
 8006018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601c:	4718      	bx	r3
 800601e:	bd10      	pop	{r4, pc}
 8006020:	00000000 	.word	0x00000000
 8006024:	200009a8 	.word	0x200009a8
 8006028:	080084c4 	.word	0x080084c4
 800602c:	200009a0 	.word	0x200009a0
 8006030:	00000000 	.word	0x00000000

08006034 <atexit>:
 8006034:	2300      	movs	r3, #0
 8006036:	4601      	mov	r1, r0
 8006038:	461a      	mov	r2, r3
 800603a:	4618      	mov	r0, r3
 800603c:	f000 b842 	b.w	80060c4 <__register_exitproc>

08006040 <__libc_fini_array>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4c0a      	ldr	r4, [pc, #40]	; (800606c <__libc_fini_array+0x2c>)
 8006044:	4d0a      	ldr	r5, [pc, #40]	; (8006070 <__libc_fini_array+0x30>)
 8006046:	1b64      	subs	r4, r4, r5
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	d00a      	beq.n	8006062 <__libc_fini_array+0x22>
 800604c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8006050:	3b01      	subs	r3, #1
 8006052:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8006056:	3c01      	subs	r4, #1
 8006058:	f855 3904 	ldr.w	r3, [r5], #-4
 800605c:	4798      	blx	r3
 800605e:	2c00      	cmp	r4, #0
 8006060:	d1f9      	bne.n	8006056 <__libc_fini_array+0x16>
 8006062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006066:	f002 ba33 	b.w	80084d0 <_fini>
 800606a:	bf00      	nop
 800606c:	080085a4 	.word	0x080085a4
 8006070:	080085a0 	.word	0x080085a0

08006074 <__libc_init_array>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	4e0f      	ldr	r6, [pc, #60]	; (80060b4 <__libc_init_array+0x40>)
 8006078:	4d0f      	ldr	r5, [pc, #60]	; (80060b8 <__libc_init_array+0x44>)
 800607a:	1b76      	subs	r6, r6, r5
 800607c:	10b6      	asrs	r6, r6, #2
 800607e:	bf18      	it	ne
 8006080:	2400      	movne	r4, #0
 8006082:	d005      	beq.n	8006090 <__libc_init_array+0x1c>
 8006084:	3401      	adds	r4, #1
 8006086:	f855 3b04 	ldr.w	r3, [r5], #4
 800608a:	4798      	blx	r3
 800608c:	42a6      	cmp	r6, r4
 800608e:	d1f9      	bne.n	8006084 <__libc_init_array+0x10>
 8006090:	4e0a      	ldr	r6, [pc, #40]	; (80060bc <__libc_init_array+0x48>)
 8006092:	4d0b      	ldr	r5, [pc, #44]	; (80060c0 <__libc_init_array+0x4c>)
 8006094:	1b76      	subs	r6, r6, r5
 8006096:	f002 fa15 	bl	80084c4 <_init>
 800609a:	10b6      	asrs	r6, r6, #2
 800609c:	bf18      	it	ne
 800609e:	2400      	movne	r4, #0
 80060a0:	d006      	beq.n	80060b0 <__libc_init_array+0x3c>
 80060a2:	3401      	adds	r4, #1
 80060a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a8:	4798      	blx	r3
 80060aa:	42a6      	cmp	r6, r4
 80060ac:	d1f9      	bne.n	80060a2 <__libc_init_array+0x2e>
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	bf00      	nop
 80060b4:	08008598 	.word	0x08008598
 80060b8:	08008598 	.word	0x08008598
 80060bc:	080085a0 	.word	0x080085a0
 80060c0:	08008598 	.word	0x08008598

080060c4 <__register_exitproc>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	4c25      	ldr	r4, [pc, #148]	; (8006160 <__register_exitproc+0x9c>)
 80060ca:	6825      	ldr	r5, [r4, #0]
 80060cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80060d0:	4606      	mov	r6, r0
 80060d2:	4688      	mov	r8, r1
 80060d4:	4692      	mov	sl, r2
 80060d6:	4699      	mov	r9, r3
 80060d8:	b3c4      	cbz	r4, 800614c <__register_exitproc+0x88>
 80060da:	6860      	ldr	r0, [r4, #4]
 80060dc:	281f      	cmp	r0, #31
 80060de:	dc17      	bgt.n	8006110 <__register_exitproc+0x4c>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	b176      	cbz	r6, 8006102 <__register_exitproc+0x3e>
 80060e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80060e8:	2201      	movs	r2, #1
 80060ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80060ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80060f2:	4082      	lsls	r2, r0
 80060f4:	4311      	orrs	r1, r2
 80060f6:	2e02      	cmp	r6, #2
 80060f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80060fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8006100:	d01e      	beq.n	8006140 <__register_exitproc+0x7c>
 8006102:	3002      	adds	r0, #2
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800610a:	2000      	movs	r0, #0
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <__register_exitproc+0xa0>)
 8006112:	b303      	cbz	r3, 8006156 <__register_exitproc+0x92>
 8006114:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006118:	f001 fbb6 	bl	8007888 <malloc>
 800611c:	4604      	mov	r4, r0
 800611e:	b1d0      	cbz	r0, 8006156 <__register_exitproc+0x92>
 8006120:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8006124:	2700      	movs	r7, #0
 8006126:	e880 0088 	stmia.w	r0, {r3, r7}
 800612a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800612e:	4638      	mov	r0, r7
 8006130:	2301      	movs	r3, #1
 8006132:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8006136:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800613a:	2e00      	cmp	r6, #0
 800613c:	d0e1      	beq.n	8006102 <__register_exitproc+0x3e>
 800613e:	e7d1      	b.n	80060e4 <__register_exitproc+0x20>
 8006140:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8006144:	430a      	orrs	r2, r1
 8006146:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800614a:	e7da      	b.n	8006102 <__register_exitproc+0x3e>
 800614c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8006150:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8006154:	e7c1      	b.n	80060da <__register_exitproc+0x16>
 8006156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800615a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615e:	bf00      	nop
 8006160:	080084f4 	.word	0x080084f4
 8006164:	08007889 	.word	0x08007889

08006168 <register_fini>:
 8006168:	4b02      	ldr	r3, [pc, #8]	; (8006174 <register_fini+0xc>)
 800616a:	b113      	cbz	r3, 8006172 <register_fini+0xa>
 800616c:	4802      	ldr	r0, [pc, #8]	; (8006178 <register_fini+0x10>)
 800616e:	f7ff bf61 	b.w	8006034 <atexit>
 8006172:	4770      	bx	lr
 8006174:	00000000 	.word	0x00000000
 8006178:	08006041 	.word	0x08006041

0800617c <_sbrk>:
 800617c:	4a0e      	ldr	r2, [pc, #56]	; (80061b8 <_sbrk+0x3c>)
 800617e:	6813      	ldr	r3, [r2, #0]
 8006180:	b510      	push	{r4, lr}
 8006182:	b1ab      	cbz	r3, 80061b0 <_sbrk+0x34>
 8006184:	4418      	add	r0, r3
 8006186:	4669      	mov	r1, sp
 8006188:	4288      	cmp	r0, r1
 800618a:	d809      	bhi.n	80061a0 <_sbrk+0x24>
 800618c:	490b      	ldr	r1, [pc, #44]	; (80061bc <_sbrk+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	; (80061c0 <_sbrk+0x44>)
 8006190:	6809      	ldr	r1, [r1, #0]
 8006192:	42a1      	cmp	r1, r4
 8006194:	d001      	beq.n	800619a <_sbrk+0x1e>
 8006196:	4288      	cmp	r0, r1
 8006198:	d802      	bhi.n	80061a0 <_sbrk+0x24>
 800619a:	6010      	str	r0, [r2, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	bd10      	pop	{r4, pc}
 80061a0:	f001 fb6c 	bl	800787c <__errno>
 80061a4:	230c      	movs	r3, #12
 80061a6:	6003      	str	r3, [r0, #0]
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ac:	4618      	mov	r0, r3
 80061ae:	bd10      	pop	{r4, pc}
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <_sbrk+0x48>)
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	e7e6      	b.n	8006184 <_sbrk+0x8>
 80061b6:	bf00      	nop
 80061b8:	200009c0 	.word	0x200009c0
 80061bc:	20000430 	.word	0x20000430
 80061c0:	cafedead 	.word	0xcafedead
 80061c4:	20001424 	.word	0x20001424

080061c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80061c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80061cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80061ce:	e003      	b.n	80061d8 <LoopCopyDataInit>

080061d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80061d0:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80061d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80061d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80061d6:	3104      	adds	r1, #4

080061d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80061d8:	480b      	ldr	r0, [pc, #44]	; (8006208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80061da:	4b0c      	ldr	r3, [pc, #48]	; (800620c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80061dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80061de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80061e0:	d3f6      	bcc.n	80061d0 <CopyDataInit>
  ldr  r2, =_sbss
 80061e2:	4a0b      	ldr	r2, [pc, #44]	; (8006210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80061e4:	e002      	b.n	80061ec <LoopFillZerobss>

080061e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80061e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80061e8:	f842 3b04 	str.w	r3, [r2], #4

080061ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80061ec:	4b09      	ldr	r3, [pc, #36]	; (8006214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80061ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80061f0:	d3f9      	bcc.n	80061e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061f2:	f000 fed9 	bl	8006fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061f6:	f7ff ff3d 	bl	8006074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061fa:	f000 f913 	bl	8006424 <main>
  bx  lr    
 80061fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006200:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8006204:	080085a4 	.word	0x080085a4
  ldr  r0, =_sdata
 8006208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800620c:	200009a0 	.word	0x200009a0
  ldr  r2, =_sbss
 8006210:	200009a0 	.word	0x200009a0
  ldr  r3, = _ebss
 8006214:	20001424 	.word	0x20001424

08006218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006218:	e7fe      	b.n	8006218 <ADC_IRQHandler>

0800621a <EXTI0_IRQ_Callback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void EXTI0_IRQ_Callback()
{
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_PeriodElapsedCallback>:
	//HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_14);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM1)  // transmit usb
 800621c:	6802      	ldr	r2, [r0, #0]
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006220:	429a      	cmp	r2, r3
{
 8006222:	b510      	push	{r4, lr}
 8006224:	4604      	mov	r4, r0
	if(htim->Instance==TIM1)  // transmit usb
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_14);
 8006228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800622c:	480d      	ldr	r0, [pc, #52]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800622e:	f7fa fba1 	bl	8000974 <HAL_GPIO_TogglePin>

	}
	if(htim->Instance==TIM2)  // transmit usb
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006238:	d106      	bne.n	8006248 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_13);
 800623a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800623e:	4809      	ldr	r0, [pc, #36]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8006240:	f7fa fb98 	bl	8000974 <HAL_GPIO_TogglePin>
		USB_Transmit();
 8006244:	f000 fc68 	bl	8006b18 <USB_Transmit>
	}
	if(htim->Instance==TIM3)  // Heartbeat
 8006248:	6822      	ldr	r2, [r4, #0]
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800624c:	429a      	cmp	r2, r3
 800624e:	d106      	bne.n	800625e <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_12);
 8006250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006254:	4803      	ldr	r0, [pc, #12]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x48>)
	}
	if(htim->Instance==TIM9)
	{
		//HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_13);
	}
}
 8006256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_12);
 800625a:	f7fa bb8b 	b.w	8000974 <HAL_GPIO_TogglePin>
 800625e:	bd10      	pop	{r4, pc}
 8006260:	40010000 	.word	0x40010000
 8006264:	40020c00 	.word	0x40020c00
 8006268:	40000400 	.word	0x40000400

0800626c <ProcessUSBCommand>:

//uint8_t ProcessUSBCommand(char command[8])
uint8_t ProcessUSBCommand(char *command, uint32_t len)
{
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
	USB_Send("Command received\n");
 8006270:	481b      	ldr	r0, [pc, #108]	; (80062e0 <ProcessUSBCommand+0x74>)
 8006272:	f000 fc6c 	bl	8006b4e <USB_Send>

	if(strcmp(command, "a") == 0) {
 8006276:	491b      	ldr	r1, [pc, #108]	; (80062e4 <ProcessUSBCommand+0x78>)
 8006278:	4620      	mov	r0, r4
 800627a:	f7ff fd45 	bl	8005d08 <strcmp>
 800627e:	b9e8      	cbnz	r0, 80062bc <ProcessUSBCommand+0x50>
		USB_Send("Sent a\n");
 8006280:	4819      	ldr	r0, [pc, #100]	; (80062e8 <ProcessUSBCommand+0x7c>)
 8006282:	f000 fc64 	bl	8006b4e <USB_Send>
		USB_Send("1\n");
 8006286:	4819      	ldr	r0, [pc, #100]	; (80062ec <ProcessUSBCommand+0x80>)
 8006288:	f000 fc61 	bl	8006b4e <USB_Send>
		USB_Send("2\n");
 800628c:	4818      	ldr	r0, [pc, #96]	; (80062f0 <ProcessUSBCommand+0x84>)
 800628e:	f000 fc5e 	bl	8006b4e <USB_Send>
		USB_Send("3\n");
 8006292:	4818      	ldr	r0, [pc, #96]	; (80062f4 <ProcessUSBCommand+0x88>)
 8006294:	f000 fc5b 	bl	8006b4e <USB_Send>
		USB_Send("4\n");
 8006298:	4817      	ldr	r0, [pc, #92]	; (80062f8 <ProcessUSBCommand+0x8c>)
 800629a:	f000 fc58 	bl	8006b4e <USB_Send>
		USB_Send("5\n");
 800629e:	4817      	ldr	r0, [pc, #92]	; (80062fc <ProcessUSBCommand+0x90>)
 80062a0:	f000 fc55 	bl	8006b4e <USB_Send>
		USB_Send("6\n");
 80062a4:	4816      	ldr	r0, [pc, #88]	; (8006300 <ProcessUSBCommand+0x94>)
 80062a6:	f000 fc52 	bl	8006b4e <USB_Send>
		USB_Send("7\n");
 80062aa:	4816      	ldr	r0, [pc, #88]	; (8006304 <ProcessUSBCommand+0x98>)
 80062ac:	f000 fc4f 	bl	8006b4e <USB_Send>
		USB_Send("8\n");
 80062b0:	4815      	ldr	r0, [pc, #84]	; (8006308 <ProcessUSBCommand+0x9c>)
 80062b2:	f000 fc4c 	bl	8006b4e <USB_Send>
		USB_Send("9\n");
 80062b6:	4815      	ldr	r0, [pc, #84]	; (800630c <ProcessUSBCommand+0xa0>)
 80062b8:	f000 fc49 	bl	8006b4e <USB_Send>
	}
	if(strcmp(command, "b") == 0) {
 80062bc:	4914      	ldr	r1, [pc, #80]	; (8006310 <ProcessUSBCommand+0xa4>)
 80062be:	4620      	mov	r0, r4
 80062c0:	f7ff fd22 	bl	8005d08 <strcmp>
 80062c4:	b910      	cbnz	r0, 80062cc <ProcessUSBCommand+0x60>
		USB_Send("Sent b\n");
 80062c6:	4813      	ldr	r0, [pc, #76]	; (8006314 <ProcessUSBCommand+0xa8>)
 80062c8:	f000 fc41 	bl	8006b4e <USB_Send>
	}
	if(strcmp(command, "c") == 0) {
 80062cc:	4912      	ldr	r1, [pc, #72]	; (8006318 <ProcessUSBCommand+0xac>)
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7ff fd1a 	bl	8005d08 <strcmp>
 80062d4:	b910      	cbnz	r0, 80062dc <ProcessUSBCommand+0x70>
		USB_Send("Sent c\n");
 80062d6:	4811      	ldr	r0, [pc, #68]	; (800631c <ProcessUSBCommand+0xb0>)
 80062d8:	f000 fc39 	bl	8006b4e <USB_Send>
		//HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_13);

	}

	return 0;
}
 80062dc:	2000      	movs	r0, #0
 80062de:	bd10      	pop	{r4, pc}
 80062e0:	080084fc 	.word	0x080084fc
 80062e4:	0800850e 	.word	0x0800850e
 80062e8:	08008510 	.word	0x08008510
 80062ec:	08008518 	.word	0x08008518
 80062f0:	0800851b 	.word	0x0800851b
 80062f4:	0800851e 	.word	0x0800851e
 80062f8:	08008521 	.word	0x08008521
 80062fc:	08008524 	.word	0x08008524
 8006300:	08008527 	.word	0x08008527
 8006304:	0800852a 	.word	0x0800852a
 8006308:	0800852d 	.word	0x0800852d
 800630c:	08008530 	.word	0x08008530
 8006310:	08008533 	.word	0x08008533
 8006314:	08008535 	.word	0x08008535
 8006318:	0800853d 	.word	0x0800853d
 800631c:	0800853f 	.word	0x0800853f

08006320 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8006320:	b530      	push	{r4, r5, lr}
 8006322:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8006324:	4b26      	ldr	r3, [pc, #152]	; (80063c0 <SystemClock_Config+0xa0>)
 8006326:	2100      	movs	r1, #0
 8006328:	9101      	str	r1, [sp, #4]
 800632a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800632c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006330:	641a      	str	r2, [r3, #64]	; 0x40
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <SystemClock_Config+0xa4>)
 800633e:	9102      	str	r1, [sp, #8]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634e:	9302      	str	r3, [sp, #8]
 8006350:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006352:	2301      	movs	r3, #1
 8006354:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006356:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006358:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800635c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 72;
 800635e:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006360:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006362:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006364:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006366:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006368:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800636a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800636c:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800636e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006370:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006372:	f7fb f84d 	bl	8001410 <HAL_RCC_OscConfig>
 8006376:	b100      	cbz	r0, 800637a <SystemClock_Config+0x5a>
 8006378:	e7fe      	b.n	8006378 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800637a:	230f      	movs	r3, #15
 800637c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800637e:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006384:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006386:	4621      	mov	r1, r4
 8006388:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800638a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800638c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800638e:	f7fb fa5d 	bl	800184c <HAL_RCC_ClockConfig>
 8006392:	4604      	mov	r4, r0
 8006394:	b100      	cbz	r0, 8006398 <SystemClock_Config+0x78>
 8006396:	e7fe      	b.n	8006396 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006398:	f7fb fb10 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 800639c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80063a4:	f7fa f842 	bl	800042c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80063a8:	4628      	mov	r0, r5
 80063aa:	f7fa f8f3 	bl	8000594 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80063ae:	4622      	mov	r2, r4
 80063b0:	4621      	mov	r1, r4
 80063b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063b6:	f7f9 ffd7 	bl	8000368 <HAL_NVIC_SetPriority>
}
 80063ba:	b015      	add	sp, #84	; 0x54
 80063bc:	bd30      	pop	{r4, r5, pc}
 80063be:	bf00      	nop
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40007000 	.word	0x40007000

080063c8 <LEDsInit>:
		while (x-- > 0)
			__asm("nop");
	}
}

void LEDsInit(void) {
 80063c8:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063ca:	4c15      	ldr	r4, [pc, #84]	; (8006420 <LEDsInit+0x58>)
void LEDsInit(void) {
 80063cc:	b086      	sub	sp, #24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063ce:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063d0:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80063d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063d6:	a901      	add	r1, sp, #4
 80063d8:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80063da:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063dc:	9602      	str	r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063de:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063e0:	f7fa f8ea 	bl	80005b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80063e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063e8:	a901      	add	r1, sp, #4
 80063ea:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80063ec:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063ee:	9602      	str	r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063f0:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063f2:	f7fa f8e1 	bl	80005b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80063f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063fa:	a901      	add	r1, sp, #4
 80063fc:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80063fe:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006400:	9602      	str	r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006402:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006404:	f7fa f8d8 	bl	80005b8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800640c:	a901      	add	r1, sp, #4
 800640e:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006410:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006412:	9602      	str	r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006414:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006416:	f7fa f8cf 	bl	80005b8 <HAL_GPIO_Init>
}
 800641a:	b006      	add	sp, #24
 800641c:	bd70      	pop	{r4, r5, r6, pc}
 800641e:	bf00      	nop
 8006420:	40020c00 	.word	0x40020c00

08006424 <main>:
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006428:	2400      	movs	r4, #0
  HAL_Init();
 800642a:	f7f9 fee9 	bl	8000200 <HAL_Init>
  SystemClock_Config();
 800642e:	f7ff ff77 	bl	8006320 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006432:	4b9d      	ldr	r3, [pc, #628]	; (80066a8 <main+0x284>)
 8006434:	9401      	str	r4, [sp, #4]
 8006436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8006438:	489c      	ldr	r0, [pc, #624]	; (80066ac <main+0x288>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800643a:	f042 0210 	orr.w	r2, r2, #16
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
 8006440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006442:	f002 0210 	and.w	r2, r2, #16
 8006446:	9201      	str	r2, [sp, #4]
 8006448:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800644a:	9402      	str	r4, [sp, #8]
 800644c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644e:	f042 0204 	orr.w	r2, r2, #4
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
 8006454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006456:	f002 0204 	and.w	r2, r2, #4
 800645a:	9202      	str	r2, [sp, #8]
 800645c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800645e:	9403      	str	r4, [sp, #12]
 8006460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006462:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
 8006468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800646a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800646e:	9203      	str	r2, [sp, #12]
 8006470:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006472:	9404      	str	r4, [sp, #16]
 8006474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
 800647c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800647e:	f002 0201 	and.w	r2, r2, #1
 8006482:	9204      	str	r2, [sp, #16]
 8006484:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006486:	9405      	str	r4, [sp, #20]
 8006488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648a:	f042 0202 	orr.w	r2, r2, #2
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
 8006490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006492:	f002 0202 	and.w	r2, r2, #2
 8006496:	9205      	str	r2, [sp, #20]
 8006498:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800649a:	9406      	str	r4, [sp, #24]
 800649c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649e:	f042 0208 	orr.w	r2, r2, #8
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80064ac:	4622      	mov	r2, r4
 80064ae:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80064b0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80064b2:	f7fa fa5b 	bl	800096c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80064b6:	4622      	mov	r2, r4
 80064b8:	2101      	movs	r1, #1
 80064ba:	487d      	ldr	r0, [pc, #500]	; (80066b0 <main+0x28c>)
 80064bc:	f7fa fa56 	bl	800096c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80064c0:	4622      	mov	r2, r4
 80064c2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80064c6:	487b      	ldr	r0, [pc, #492]	; (80066b4 <main+0x290>)
 80064c8:	f7fa fa50 	bl	800096c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064cc:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80064ce:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80064d0:	a909      	add	r1, sp, #36	; 0x24
 80064d2:	4876      	ldr	r0, [pc, #472]	; (80066ac <main+0x288>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80064d4:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064d6:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064da:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80064dc:	f7fa f86c 	bl	80005b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80064e0:	a909      	add	r1, sp, #36	; 0x24
 80064e2:	4873      	ldr	r0, [pc, #460]	; (80066b0 <main+0x28c>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80064e4:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80064e6:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064ea:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ec:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ee:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80064f0:	f7fa f862 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80064f4:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80064f6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f8:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80064fa:	486d      	ldr	r0, [pc, #436]	; (80066b0 <main+0x28c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fe:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006500:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006502:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006506:	f7fa f857 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800650a:	4b6b      	ldr	r3, [pc, #428]	; (80066b8 <main+0x294>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800650c:	486b      	ldr	r0, [pc, #428]	; (80066bc <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800650e:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006510:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006512:	2706      	movs	r7, #6
  GPIO_InitStruct.Pin = B1_Pin;
 8006514:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006516:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006518:	f7fa f84e 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800651c:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651e:	a909      	add	r1, sp, #36	; 0x24
 8006520:	4866      	ldr	r0, [pc, #408]	; (80066bc <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006522:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006524:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006526:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006528:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800652c:	f7fa f844 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006530:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006532:	a909      	add	r1, sp, #36	; 0x24
 8006534:	4861      	ldr	r0, [pc, #388]	; (80066bc <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006536:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006538:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800653a:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800653e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006540:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006542:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006546:	f7fa f837 	bl	80005b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800654a:	a909      	add	r1, sp, #36	; 0x24
 800654c:	485c      	ldr	r0, [pc, #368]	; (80066c0 <main+0x29c>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800654e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006552:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006554:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006556:	f7fa f82f 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800655a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800655e:	a909      	add	r1, sp, #36	; 0x24
 8006560:	4857      	ldr	r0, [pc, #348]	; (80066c0 <main+0x29c>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8006562:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006564:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006566:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006568:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800656a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800656e:	f7fa f823 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8006572:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006576:	a909      	add	r1, sp, #36	; 0x24
 8006578:	484e      	ldr	r0, [pc, #312]	; (80066b4 <main+0x290>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800657a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800657c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006580:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006582:	f7fa f819 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 8006586:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800658a:	a909      	add	r1, sp, #36	; 0x24
 800658c:	4848      	ldr	r0, [pc, #288]	; (80066b0 <main+0x28c>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 800658e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006590:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006592:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006594:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006596:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006598:	f7fa f80e 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800659c:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800659e:	a909      	add	r1, sp, #36	; 0x24
 80065a0:	4844      	ldr	r0, [pc, #272]	; (80066b4 <main+0x290>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80065a2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065a4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80065a8:	f7fa f806 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80065ac:	f44f 7310 	mov.w	r3, #576	; 0x240
 80065b0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065b2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065b4:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065b6:	4842      	ldr	r0, [pc, #264]	; (80066c0 <main+0x29c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065b8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065ba:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065bc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80065be:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065c2:	f7f9 fff9 	bl	80005b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80065c6:	4b3f      	ldr	r3, [pc, #252]	; (80066c4 <main+0x2a0>)
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80065c8:	4838      	ldr	r0, [pc, #224]	; (80066ac <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80065ca:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80065cc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80065ce:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80065d2:	f7f9 fff1 	bl	80005b8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80065d6:	4638      	mov	r0, r7
 80065d8:	4622      	mov	r2, r4
 80065da:	4621      	mov	r1, r4
 80065dc:	f7f9 fec4 	bl	8000368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80065e0:	4638      	mov	r0, r7
 80065e2:	f7f9 fef7 	bl	80003d4 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 80065e6:	4d38      	ldr	r5, [pc, #224]	; (80066c8 <main+0x2a4>)
  htim3.Init.Prescaler = 48000;
 80065e8:	4b38      	ldr	r3, [pc, #224]	; (80066cc <main+0x2a8>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065ea:	60ac      	str	r4, [r5, #8]
  htim3.Init.Prescaler = 48000;
 80065ec:	f64b 3780 	movw	r7, #48000	; 0xbb80
 80065f0:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80065f4:	4628      	mov	r0, r5
  htim3.Init.Period = 499;
 80065f6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80065fa:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065fc:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80065fe:	f7fc ff5b 	bl	80034b8 <HAL_TIM_Base_Init>
 8006602:	b100      	cbz	r0, 8006606 <main+0x1e2>
 8006604:	e7fe      	b.n	8006604 <main+0x1e0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006606:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800660a:	a909      	add	r1, sp, #36	; 0x24
 800660c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800660e:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006610:	f7fc fc7a 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 8006614:	b100      	cbz	r0, 8006618 <main+0x1f4>
 8006616:	e7fe      	b.n	8006616 <main+0x1f2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006618:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800661a:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800661c:	a907      	add	r1, sp, #28
 800661e:	4628      	mov	r0, r5
 8006620:	f7fd fe08 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 8006624:	4605      	mov	r5, r0
 8006626:	b100      	cbz	r0, 800662a <main+0x206>
 8006628:	e7fe      	b.n	8006628 <main+0x204>
  MX_USB_DEVICE_Init();
 800662a:	f000 f9d9 	bl	80069e0 <MX_USB_DEVICE_Init>
  htim5.Instance = TIM5;
 800662e:	4c28      	ldr	r4, [pc, #160]	; (80066d0 <main+0x2ac>)
 8006630:	4b28      	ldr	r3, [pc, #160]	; (80066d4 <main+0x2b0>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006632:	60a5      	str	r5, [r4, #8]
  htim5.Init.Prescaler = 48000;
 8006634:	e884 0088 	stmia.w	r4, {r3, r7}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006638:	4620      	mov	r0, r4
  htim5.Init.Period = 100;
 800663a:	2364      	movs	r3, #100	; 0x64
 800663c:	60e3      	str	r3, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800663e:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006640:	f7fc ff3a 	bl	80034b8 <HAL_TIM_Base_Init>
 8006644:	b100      	cbz	r0, 8006648 <main+0x224>
 8006646:	e7fe      	b.n	8006646 <main+0x222>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006648:	a909      	add	r1, sp, #36	; 0x24
 800664a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800664c:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800664e:	f7fc fc5b 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 8006652:	b100      	cbz	r0, 8006656 <main+0x232>
 8006654:	e7fe      	b.n	8006654 <main+0x230>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006656:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006658:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800665a:	a907      	add	r1, sp, #28
 800665c:	4620      	mov	r0, r4
 800665e:	f7fd fde9 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 8006662:	b100      	cbz	r0, 8006666 <main+0x242>
 8006664:	e7fe      	b.n	8006664 <main+0x240>
  htim1.Instance = TIM1;
 8006666:	4c1c      	ldr	r4, [pc, #112]	; (80066d8 <main+0x2b4>)
  htim1.Init.Prescaler = 1800;
 8006668:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <main+0x2b8>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800666a:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 1800;
 800666c:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8006670:	e884 0028 	stmia.w	r4, {r3, r5}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006674:	6120      	str	r0, [r4, #16]
  htim1.Init.Period = 600;
 8006676:	f44f 7316 	mov.w	r3, #600	; 0x258
  htim1.Init.RepetitionCounter = 0;
 800667a:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800667c:	4620      	mov	r0, r4
  htim1.Init.Period = 600;
 800667e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006680:	f7fc ff1a 	bl	80034b8 <HAL_TIM_Base_Init>
 8006684:	b100      	cbz	r0, 8006688 <main+0x264>
 8006686:	e7fe      	b.n	8006686 <main+0x262>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006688:	a909      	add	r1, sp, #36	; 0x24
 800668a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800668c:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800668e:	f7fc fc3b 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 8006692:	b100      	cbz	r0, 8006696 <main+0x272>
 8006694:	e7fe      	b.n	8006694 <main+0x270>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006696:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006698:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800669a:	a907      	add	r1, sp, #28
 800669c:	4620      	mov	r0, r4
 800669e:	f7fd fdc9 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 80066a2:	b1e8      	cbz	r0, 80066e0 <main+0x2bc>
 80066a4:	e7fe      	b.n	80066a4 <main+0x280>
 80066a6:	bf00      	nop
 80066a8:	40023800 	.word	0x40023800
 80066ac:	40021000 	.word	0x40021000
 80066b0:	40020800 	.word	0x40020800
 80066b4:	40020c00 	.word	0x40020c00
 80066b8:	10110000 	.word	0x10110000
 80066bc:	40020000 	.word	0x40020000
 80066c0:	40020400 	.word	0x40020400
 80066c4:	10120000 	.word	0x10120000
 80066c8:	20000a3c 	.word	0x20000a3c
 80066cc:	40000400 	.word	0x40000400
 80066d0:	20000a00 	.word	0x20000a00
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	20000a78 	.word	0x20000a78
 80066dc:	40010000 	.word	0x40010000
  htim2.Instance = TIM2;
 80066e0:	4b26      	ldr	r3, [pc, #152]	; (800677c <main+0x358>)
  htim2.Init.Prescaler = 4800;
 80066e2:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80066e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066ea:	e883 0006 	stmia.w	r3, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ee:	6098      	str	r0, [r3, #8]
  htim2.Init.Period = 502;
 80066f0:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066f4:	6118      	str	r0, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80066f6:	4618      	mov	r0, r3
  htim2.Init.Period = 502;
 80066f8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80066fa:	f7fc fedd 	bl	80034b8 <HAL_TIM_Base_Init>
 80066fe:	b100      	cbz	r0, 8006702 <main+0x2de>
 8006700:	e7fe      	b.n	8006700 <main+0x2dc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006702:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006706:	a909      	add	r1, sp, #36	; 0x24
 8006708:	481c      	ldr	r0, [pc, #112]	; (800677c <main+0x358>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800670a:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800670c:	f7fc fbfc 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 8006710:	b100      	cbz	r0, 8006714 <main+0x2f0>
 8006712:	e7fe      	b.n	8006712 <main+0x2ee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006714:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006716:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006718:	a907      	add	r1, sp, #28
 800671a:	4818      	ldr	r0, [pc, #96]	; (800677c <main+0x358>)
 800671c:	f7fd fd8a 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 8006720:	b100      	cbz	r0, 8006724 <main+0x300>
 8006722:	e7fe      	b.n	8006722 <main+0x2fe>
  htim9.Instance = TIM9;
 8006724:	4c16      	ldr	r4, [pc, #88]	; (8006780 <main+0x35c>)
  htim9.Init.Prescaler = 48000;
 8006726:	4a17      	ldr	r2, [pc, #92]	; (8006784 <main+0x360>)
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006728:	60a0      	str	r0, [r4, #8]
  htim9.Init.Prescaler = 48000;
 800672a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800672e:	e884 000c 	stmia.w	r4, {r2, r3}
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006732:	6120      	str	r0, [r4, #16]
  htim9.Init.Period = 515;
 8006734:	f240 2303 	movw	r3, #515	; 0x203
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8006738:	4620      	mov	r0, r4
  htim9.Init.Period = 515;
 800673a:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800673c:	f7fc febc 	bl	80034b8 <HAL_TIM_Base_Init>
 8006740:	b100      	cbz	r0, 8006744 <main+0x320>
 8006742:	e7fe      	b.n	8006742 <main+0x31e>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8006744:	a909      	add	r1, sp, #36	; 0x24
 8006746:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006748:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800674a:	f7fc fbdd 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 800674e:	b100      	cbz	r0, 8006752 <main+0x32e>
 8006750:	e7fe      	b.n	8006750 <main+0x32c>
	LEDsInit();
 8006752:	f7ff fe39 	bl	80063c8 <LEDsInit>
	HAL_TIM_Base_Start_IT(&htim1);
 8006756:	480c      	ldr	r0, [pc, #48]	; (8006788 <main+0x364>)
 8006758:	f7fb fb34 	bl	8001dc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800675c:	4807      	ldr	r0, [pc, #28]	; (800677c <main+0x358>)
 800675e:	f7fb fb31 	bl	8001dc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8006762:	480a      	ldr	r0, [pc, #40]	; (800678c <main+0x368>)
 8006764:	f7fb fb2e 	bl	8001dc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8006768:	4809      	ldr	r0, [pc, #36]	; (8006790 <main+0x36c>)
 800676a:	f7fb fb2b 	bl	8001dc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 800676e:	4620      	mov	r0, r4
 8006770:	f7fb fb28 	bl	8001dc4 <HAL_TIM_Base_Start_IT>
	USB_Init();
 8006774:	f000 f9bc 	bl	8006af0 <USB_Init>
 8006778:	e7fe      	b.n	8006778 <main+0x354>
 800677a:	bf00      	nop
 800677c:	20000af0 	.word	0x20000af0
 8006780:	20000ab4 	.word	0x20000ab4
 8006784:	40014000 	.word	0x40014000
 8006788:	20000a78 	.word	0x20000a78
 800678c:	20000a3c 	.word	0x20000a3c
 8006790:	20000a00 	.word	0x20000a00

08006794 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8006794:	e7fe      	b.n	8006794 <Error_Handler>

08006796 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006796:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006798:	2007      	movs	r0, #7
 800679a:	f7f9 fdd3 	bl	8000344 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800679e:	2200      	movs	r2, #0
 80067a0:	4611      	mov	r1, r2
 80067a2:	f06f 000b 	mvn.w	r0, #11
 80067a6:	f7f9 fddf 	bl	8000368 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80067aa:	2200      	movs	r2, #0
 80067ac:	4611      	mov	r1, r2
 80067ae:	f06f 000a 	mvn.w	r0, #10
 80067b2:	f7f9 fdd9 	bl	8000368 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80067b6:	2200      	movs	r2, #0
 80067b8:	4611      	mov	r1, r2
 80067ba:	f06f 0009 	mvn.w	r0, #9
 80067be:	f7f9 fdd3 	bl	8000368 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80067c2:	2200      	movs	r2, #0
 80067c4:	4611      	mov	r1, r2
 80067c6:	f06f 0004 	mvn.w	r0, #4
 80067ca:	f7f9 fdcd 	bl	8000368 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80067ce:	2200      	movs	r2, #0
 80067d0:	4611      	mov	r1, r2
 80067d2:	f06f 0003 	mvn.w	r0, #3
 80067d6:	f7f9 fdc7 	bl	8000368 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80067da:	2200      	movs	r2, #0
 80067dc:	4611      	mov	r1, r2
 80067de:	f06f 0001 	mvn.w	r0, #1
 80067e2:	f7f9 fdc1 	bl	8000368 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80067e6:	2200      	movs	r2, #0
 80067e8:	4611      	mov	r1, r2
 80067ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067ee:	f7f9 fdbb 	bl	8000368 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2005      	movs	r0, #5
 80067f6:	4611      	mov	r1, r2
 80067f8:	f7f9 fdb6 	bl	8000368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80067fc:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006802:	f7f9 bde7 	b.w	80003d4 <HAL_NVIC_EnableIRQ>
	...

08006808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  if(htim_base->Instance==TIM1)
 800680a:	6803      	ldr	r3, [r0, #0]
 800680c:	4a34      	ldr	r2, [pc, #208]	; (80068e0 <HAL_TIM_Base_MspInit+0xd8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d111      	bne.n	8006836 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006812:	4b34      	ldr	r3, [pc, #208]	; (80068e4 <HAL_TIM_Base_MspInit+0xdc>)
 8006814:	2200      	movs	r2, #0
 8006816:	9201      	str	r2, [sp, #4]
 8006818:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800681a:	f041 0101 	orr.w	r1, r1, #1
 800681e:	6459      	str	r1, [r3, #68]	; 0x44
 8006820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800682a:	2018      	movs	r0, #24
 800682c:	4611      	mov	r1, r2
 800682e:	f7f9 fd9b 	bl	8000368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006832:	2018      	movs	r0, #24
 8006834:	e014      	b.n	8006860 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM2)
 8006836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683a:	d116      	bne.n	800686a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800683c:	2200      	movs	r2, #0
 800683e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006842:	9202      	str	r2, [sp, #8]
 8006844:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006846:	f041 0101 	orr.w	r1, r1, #1
 800684a:	6419      	str	r1, [r3, #64]	; 0x40
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006854:	201c      	movs	r0, #28
 8006856:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006858:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800685a:	f7f9 fd85 	bl	8000368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800685e:	201c      	movs	r0, #28
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006860:	f7f9 fdb8 	bl	80003d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8006864:	b007      	add	sp, #28
 8006866:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 800686a:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <HAL_TIM_Base_MspInit+0xe0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d111      	bne.n	8006894 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006870:	2200      	movs	r2, #0
 8006872:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <HAL_TIM_Base_MspInit+0xdc>)
 8006874:	9203      	str	r2, [sp, #12]
 8006876:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006878:	f041 0102 	orr.w	r1, r1, #2
 800687c:	6419      	str	r1, [r3, #64]	; 0x40
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006886:	201d      	movs	r0, #29
 8006888:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800688a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800688c:	f7f9 fd6c 	bl	8000368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006890:	201d      	movs	r0, #29
 8006892:	e7e5      	b.n	8006860 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM5)
 8006894:	4a15      	ldr	r2, [pc, #84]	; (80068ec <HAL_TIM_Base_MspInit+0xe4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d111      	bne.n	80068be <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800689a:	2200      	movs	r2, #0
 800689c:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <HAL_TIM_Base_MspInit+0xdc>)
 800689e:	9204      	str	r2, [sp, #16]
 80068a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80068a2:	f041 0108 	orr.w	r1, r1, #8
 80068a6:	6419      	str	r1, [r3, #64]	; 0x40
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80068b0:	2032      	movs	r0, #50	; 0x32
 80068b2:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 80068b4:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80068b6:	f7f9 fd57 	bl	8000368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80068ba:	2032      	movs	r0, #50	; 0x32
 80068bc:	e7d0      	b.n	8006860 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM9)
 80068be:	4a0c      	ldr	r2, [pc, #48]	; (80068f0 <HAL_TIM_Base_MspInit+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d1cf      	bne.n	8006864 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80068c4:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <HAL_TIM_Base_MspInit+0xdc>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	9205      	str	r2, [sp, #20]
 80068ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80068cc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80068d0:	6459      	str	r1, [r3, #68]	; 0x44
 80068d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d8:	9305      	str	r3, [sp, #20]
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	e7a5      	b.n	800682a <HAL_TIM_Base_MspInit+0x22>
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40023800 	.word	0x40023800
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40000c00 	.word	0x40000c00
 80068f0:	40014000 	.word	0x40014000

080068f4 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 80068f4:	6803      	ldr	r3, [r0, #0]
 80068f6:	4a1a      	ldr	r2, [pc, #104]	; (8006960 <HAL_TIM_Base_MspDeInit+0x6c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d106      	bne.n	800690a <HAL_TIM_Base_MspDeInit+0x16>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 80068fc:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8006900:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006902:	f023 0301 	bic.w	r3, r3, #1
  {
  /* USER CODE BEGIN TIM9_MspDeInit 0 */

  /* USER CODE END TIM9_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM9_CLK_DISABLE();
 8006906:	6453      	str	r3, [r2, #68]	; 0x44
 8006908:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 800690a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690e:	d107      	bne.n	8006920 <HAL_TIM_Base_MspDeInit+0x2c>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8006910:	4a14      	ldr	r2, [pc, #80]	; (8006964 <HAL_TIM_Base_MspDeInit+0x70>)
 8006912:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800691a:	201c      	movs	r0, #28
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 800691c:	f7f9 bd66 	b.w	80003ec <HAL_NVIC_DisableIRQ>
  else if(htim_base->Instance==TIM3)
 8006920:	4a11      	ldr	r2, [pc, #68]	; (8006968 <HAL_TIM_Base_MspDeInit+0x74>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d107      	bne.n	8006936 <HAL_TIM_Base_MspDeInit+0x42>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8006926:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800692a:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_DISABLE();
 800692c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800692e:	f023 0302 	bic.w	r3, r3, #2
 8006932:	6413      	str	r3, [r2, #64]	; 0x40
 8006934:	e7f2      	b.n	800691c <HAL_TIM_Base_MspDeInit+0x28>
  else if(htim_base->Instance==TIM5)
 8006936:	4a0d      	ldr	r2, [pc, #52]	; (800696c <HAL_TIM_Base_MspDeInit+0x78>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d107      	bne.n	800694c <HAL_TIM_Base_MspDeInit+0x58>
    __HAL_RCC_TIM5_CLK_DISABLE();
 800693c:	f502 320b 	add.w	r2, r2, #142336	; 0x22c00
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8006940:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_DISABLE();
 8006942:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006944:	f023 0308 	bic.w	r3, r3, #8
 8006948:	6413      	str	r3, [r2, #64]	; 0x40
 800694a:	e7e7      	b.n	800691c <HAL_TIM_Base_MspDeInit+0x28>
  else if(htim_base->Instance==TIM9)
 800694c:	4a08      	ldr	r2, [pc, #32]	; (8006970 <HAL_TIM_Base_MspDeInit+0x7c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d1da      	bne.n	8006908 <HAL_TIM_Base_MspDeInit+0x14>
    __HAL_RCC_TIM9_CLK_DISABLE();
 8006952:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006956:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800695c:	e7d3      	b.n	8006906 <HAL_TIM_Base_MspDeInit+0x12>
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000
 8006964:	40023800 	.word	0x40023800
 8006968:	40000400 	.word	0x40000400
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40014000 	.word	0x40014000

08006974 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006974:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006976:	f7f9 fc5d 	bl	8000234 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800697a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800697e:	f7f9 be17 	b.w	80005b0 <HAL_SYSTICK_IRQHandler>

08006982 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8006982:	4770      	bx	lr

08006984 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8006984:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	EXTI0_IRQ_Callback();
 8006986:	f7ff fc48 	bl	800621a <EXTI0_IRQ_Callback>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800698a:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800698c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006990:	f7fa b80c 	b.w	80009ac <HAL_GPIO_EXTI_IRQHandler>

08006994 <TIM1_BRK_TIM9_IRQHandler>:

/**
* @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
*/
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006996:	4804      	ldr	r0, [pc, #16]	; (80069a8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8006998:	f7fc fc48 	bl	800322c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800699c:	4803      	ldr	r0, [pc, #12]	; (80069ac <TIM1_BRK_TIM9_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800699e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim9);
 80069a2:	f7fc bc43 	b.w	800322c <HAL_TIM_IRQHandler>
 80069a6:	bf00      	nop
 80069a8:	20000a78 	.word	0x20000a78
 80069ac:	20000ab4 	.word	0x20000ab4

080069b0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80069b0:	4801      	ldr	r0, [pc, #4]	; (80069b8 <TIM2_IRQHandler+0x8>)
 80069b2:	f7fc bc3b 	b.w	800322c <HAL_TIM_IRQHandler>
 80069b6:	bf00      	nop
 80069b8:	20000af0 	.word	0x20000af0

080069bc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80069bc:	4801      	ldr	r0, [pc, #4]	; (80069c4 <TIM3_IRQHandler+0x8>)
 80069be:	f7fc bc35 	b.w	800322c <HAL_TIM_IRQHandler>
 80069c2:	bf00      	nop
 80069c4:	20000a3c 	.word	0x20000a3c

080069c8 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <TIM5_IRQHandler+0x8>)
 80069ca:	f7fc bc2f 	b.w	800322c <HAL_TIM_IRQHandler>
 80069ce:	bf00      	nop
 80069d0:	20000a00 	.word	0x20000a00

080069d4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <OTG_FS_IRQHandler+0x8>)
 80069d6:	f7fa b8cd 	b.w	8000b74 <HAL_PCD_IRQHandler>
 80069da:	bf00      	nop
 80069dc:	20000e64 	.word	0x20000e64

080069e0 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 80069e0:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80069e2:	4c09      	ldr	r4, [pc, #36]	; (8006a08 <MX_USB_DEVICE_Init+0x28>)
 80069e4:	4909      	ldr	r1, [pc, #36]	; (8006a0c <MX_USB_DEVICE_Init+0x2c>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fb03 	bl	8006ff4 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80069ee:	4908      	ldr	r1, [pc, #32]	; (8006a10 <MX_USB_DEVICE_Init+0x30>)
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fb14 	bl	800701e <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80069f6:	4620      	mov	r0, r4
 80069f8:	4906      	ldr	r1, [pc, #24]	; (8006a14 <MX_USB_DEVICE_Init+0x34>)
 80069fa:	f000 ff00 	bl	80077fe <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80069fe:	4620      	mov	r0, r4

}
 8006a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8006a04:	f000 bb12 	b.w	800702c <USBD_Start>
 8006a08:	20000b2c 	.word	0x20000b2c
 8006a0c:	20000448 	.word	0x20000448
 8006a10:	20000480 	.word	0x20000480
 8006a14:	20000438 	.word	0x20000438

08006a18 <Queue_Create>:

//-------------------------------------------------

Queue *queue = NULL;

uint8_t Queue_Create() {
 8006a18:	b508      	push	{r3, lr}
  queue = (Queue *)malloc(sizeof(Queue));
 8006a1a:	2008      	movs	r0, #8
 8006a1c:	f000 ff34 	bl	8007888 <malloc>
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <Queue_Create+0x1c>)
 8006a22:	6018      	str	r0, [r3, #0]
  if(queue == NULL) {
 8006a24:	b120      	cbz	r0, 8006a30 <Queue_Create+0x18>
    //HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_15);
    return 1;
  }
  /* Initialise its properties */
  queue->size = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	7003      	strb	r3, [r0, #0]
  queue->head_string = NULL;
 8006a2a:	6043      	str	r3, [r0, #4]
  return 0;
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	bd08      	pop	{r3, pc}
    return 1;
 8006a30:	2001      	movs	r0, #1
}
 8006a32:	bd08      	pop	{r3, pc}
 8006a34:	200009c4 	.word	0x200009c4

08006a38 <Queue_PushBack>:

uint8_t Queue_Size() {
  return queue->size;
}

uint8_t Queue_PushBack(char *a_string) {
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  character_node_t *first_character = NULL;
  character_node_t *previous_character = NULL;
 8006a3c:	2400      	movs	r4, #0
 8006a3e:	1e47      	subs	r7, r0, #1
  character_node_t *first_character = NULL;
 8006a40:	4626      	mov	r6, r4
    else {
      previous_character->next_character = new_character;
    }

    new_character->value = *(a_string+current_character_index);
    new_character->next_character = NULL;
 8006a42:	46a0      	mov	r8, r4
    new_character = malloc(sizeof(character_node_t));
 8006a44:	2008      	movs	r0, #8
 8006a46:	f000 ff1f 	bl	8007888 <malloc>
    if(new_character == NULL) {
 8006a4a:	b910      	cbnz	r0, 8006a52 <Queue_PushBack+0x1a>
      return 1;
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(previous_character == NULL) {
 8006a52:	b1cc      	cbz	r4, 8006a88 <Queue_PushBack+0x50>
      previous_character->next_character = new_character;
 8006a54:	6060      	str	r0, [r4, #4]
    new_character->value = *(a_string+current_character_index);
 8006a56:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8006a5a:	7005      	strb	r5, [r0, #0]
    new_character->next_character = NULL;
 8006a5c:	f8c0 8004 	str.w	r8, [r0, #4]
 8006a60:	4604      	mov	r4, r0

    previous_character = new_character;
  } while(*(a_string+current_character_index) != 0x00);
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d1ee      	bne.n	8006a44 <Queue_PushBack+0xc>

  string_node_t *new_string = NULL;
  new_string = malloc(sizeof(string_node_t));
 8006a66:	2008      	movs	r0, #8
 8006a68:	f000 ff0e 	bl	8007888 <malloc>
  if(new_string == NULL) {
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d0ed      	beq.n	8006a4c <Queue_PushBack+0x14>
    return 1;
  }
  new_string->first_character = first_character;
  new_string->next_string = NULL;

  if(queue->size == 0) {
 8006a70:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <Queue_PushBack+0x64>)
  new_string->first_character = first_character;
 8006a72:	6006      	str	r6, [r0, #0]
  if(queue->size == 0) {
 8006a74:	681b      	ldr	r3, [r3, #0]
  new_string->next_string = NULL;
 8006a76:	6045      	str	r5, [r0, #4]
  if(queue->size == 0) {
 8006a78:	781a      	ldrb	r2, [r3, #0]
 8006a7a:	b93a      	cbnz	r2, 8006a8c <Queue_PushBack+0x54>
    queue->head_string = new_string;
 8006a7c:	6058      	str	r0, [r3, #4]
    while(current_string->next_string != NULL) {
      current_string = current_string->next_string;
    }
    current_string->next_string = new_string;
  }
  queue->size++;
 8006a7e:	3201      	adds	r2, #1
 8006a80:	701a      	strb	r2, [r3, #0]

  return 0;
 8006a82:	2000      	movs	r0, #0
}
 8006a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a88:	4606      	mov	r6, r0
 8006a8a:	e7e4      	b.n	8006a56 <Queue_PushBack+0x1e>
    string_node_t *current_string = queue->head_string;
 8006a8c:	6859      	ldr	r1, [r3, #4]
    while(current_string->next_string != NULL) {
 8006a8e:	684c      	ldr	r4, [r1, #4]
 8006a90:	b90c      	cbnz	r4, 8006a96 <Queue_PushBack+0x5e>
    current_string->next_string = new_string;
 8006a92:	6048      	str	r0, [r1, #4]
 8006a94:	e7f3      	b.n	8006a7e <Queue_PushBack+0x46>
 8006a96:	4621      	mov	r1, r4
 8006a98:	e7f9      	b.n	8006a8e <Queue_PushBack+0x56>
 8006a9a:	bf00      	nop
 8006a9c:	200009c4 	.word	0x200009c4

08006aa0 <Queue_PopFront>:
  }

  return 0;
}*/

uint8_t Queue_PopFront() {
 8006aa0:	b538      	push	{r3, r4, r5, lr}
  // Free characters
  character_node_t *current_character = queue->head_string->first_character;
 8006aa2:	4c0b      	ldr	r4, [pc, #44]	; (8006ad0 <Queue_PopFront+0x30>)
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
  while(current_character != NULL) {
 8006aaa:	b960      	cbnz	r0, 8006ac6 <Queue_PopFront+0x26>

    current_character = next_character;
  }

  // Place the next string on the front of the queue and free the popped one
  string_node_t *next_string = queue->head_string->next_string;
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	6858      	ldr	r0, [r3, #4]
 8006ab0:	6845      	ldr	r5, [r0, #4]
  free(queue->head_string);
 8006ab2:	f000 fef1 	bl	8007898 <free>
  queue->head_string = next_string;
 8006ab6:	6822      	ldr	r2, [r4, #0]

  if(queue->size != 0) {
 8006ab8:	7813      	ldrb	r3, [r2, #0]
  queue->head_string = next_string;
 8006aba:	6055      	str	r5, [r2, #4]
  if(queue->size != 0) {
 8006abc:	b10b      	cbz	r3, 8006ac2 <Queue_PopFront+0x22>
    queue->size--;
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	7013      	strb	r3, [r2, #0]
  }

  return 0;
}
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	bd38      	pop	{r3, r4, r5, pc}
    character_node_t *next_character = current_character->next_character;
 8006ac6:	6845      	ldr	r5, [r0, #4]
    free(current_character);
 8006ac8:	f000 fee6 	bl	8007898 <free>
    current_character = next_character;
 8006acc:	4628      	mov	r0, r5
 8006ace:	e7ec      	b.n	8006aaa <Queue_PopFront+0xa>
 8006ad0:	200009c4 	.word	0x200009c4

08006ad4 <Queue_Front>:

string_node_t* Queue_Front() {
  if((queue != NULL) & (queue->head_string != NULL) & (queue->size != 0)) {
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <Queue_Front+0x18>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6858      	ldr	r0, [r3, #4]
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	bf18      	it	ne
 8006ae0:	2800      	cmpne	r0, #0
 8006ae2:	d000      	beq.n	8006ae6 <Queue_Front+0x12>
 8006ae4:	b903      	cbnz	r3, 8006ae8 <Queue_Front+0x14>
    string_node_t *character = queue->head_string;
    return character;
  }
  else {
    return NULL;
 8006ae6:	2000      	movs	r0, #0
  }
}
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	200009c4 	.word	0x200009c4

08006af0 <USB_Init>:

//--------------------------------------------------------

uint8_t USB_Init(void) {
 8006af0:	b510      	push	{r4, lr}
  transmission_length = 0;
 8006af2:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <USB_Init+0x1c>)
 8006af4:	2400      	movs	r4, #0
 8006af6:	601c      	str	r4, [r3, #0]
  new_transmission = 1;
 8006af8:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <USB_Init+0x20>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]

  Queue_Create();
 8006afe:	f7ff ff8b 	bl	8006a18 <Queue_Create>
  Queue_PushBack(mystring);
 8006b02:	4804      	ldr	r0, [pc, #16]	; (8006b14 <USB_Init+0x24>)
 8006b04:	f7ff ff98 	bl	8006a38 <Queue_PushBack>

  return 0;
}
 8006b08:	4620      	mov	r0, r4
 8006b0a:	bd10      	pop	{r4, pc}
 8006b0c:	20000d54 	.word	0x20000d54
 8006b10:	20000d58 	.word	0x20000d58
 8006b14:	20000434 	.word	0x20000434

08006b18 <USB_Transmit>:

uint8_t USB_Transmit() {
 8006b18:	b500      	push	{lr}
 8006b1a:	b0c1      	sub	sp, #260	; 0x104
  string_node_t *string = Queue_Front();
 8006b1c:	f7ff ffda 	bl	8006ad4 <Queue_Front>
  //USB_WriteString2(character,2);
  if((string != NULL) & (string->first_character->value != 0x00)) {
 8006b20:	6803      	ldr	r3, [r0, #0]
 8006b22:	781a      	ldrb	r2, [r3, #0]
 8006b24:	b17a      	cbz	r2, 8006b46 <USB_Transmit+0x2e>
 8006b26:	b170      	cbz	r0, 8006b46 <USB_Transmit+0x2e>
 8006b28:	2100      	movs	r1, #0
    char to_send[256];
    int to_send_index = 0;
    character_node_t *current_character = string->first_character;

    while(current_character != NULL) {
      to_send[to_send_index] = current_character->value;
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	f80d 2001 	strb.w	r2, [sp, r1]
      current_character = current_character->next_character;
 8006b30:	685b      	ldr	r3, [r3, #4]
      to_send_index++;
 8006b32:	3101      	adds	r1, #1
    while(current_character != NULL) {
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f8      	bne.n	8006b2a <USB_Transmit+0x12>
    }
    USB_WriteString2(to_send, to_send_index-1);
 8006b38:	3901      	subs	r1, #1
    return 0;
}

uint8_t USB_WriteString2(char* msg, uint8_t len) {

  CDC_Transmit_FS(msg, len);
 8006b3a:	b2c9      	uxtb	r1, r1
 8006b3c:	4668      	mov	r0, sp
 8006b3e:	f000 f89b 	bl	8006c78 <CDC_Transmit_FS>
    Queue_PopFront();
 8006b42:	f7ff ffad 	bl	8006aa0 <Queue_PopFront>
}
 8006b46:	2000      	movs	r0, #0
 8006b48:	b041      	add	sp, #260	; 0x104
 8006b4a:	f85d fb04 	ldr.w	pc, [sp], #4

08006b4e <USB_Send>:
uint8_t USB_Send(char *msg) {
 8006b4e:	b508      	push	{r3, lr}
  Queue_PushBack(msg);
 8006b50:	f7ff ff72 	bl	8006a38 <Queue_PushBack>
}
 8006b54:	2000      	movs	r0, #0
 8006b56:	bd08      	pop	{r3, pc}

08006b58 <USB_AssembleTransmission>:
uint8_t USB_AssembleTransmission(uint8_t *Buff, uint32_t *Len) {
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(new_transmission) {
 8006b5c:	4f23      	ldr	r7, [pc, #140]	; (8006bec <USB_AssembleTransmission+0x94>)
 8006b5e:	783b      	ldrb	r3, [r7, #0]
uint8_t USB_AssembleTransmission(uint8_t *Buff, uint32_t *Len) {
 8006b60:	4680      	mov	r8, r0
 8006b62:	468a      	mov	sl, r1
  if(new_transmission) {
 8006b64:	b96b      	cbnz	r3, 8006b82 <USB_AssembleTransmission+0x2a>
 8006b66:	4c22      	ldr	r4, [pc, #136]	; (8006bf0 <USB_AssembleTransmission+0x98>)
 8006b68:	4d22      	ldr	r5, [pc, #136]	; (8006bf4 <USB_AssembleTransmission+0x9c>)
uint8_t USB_AssembleTransmission(uint8_t *Buff, uint32_t *Len) {
 8006b6a:	4646      	mov	r6, r8
      transmission[transmission_length++] = 0x00;
 8006b6c:	f04f 0900 	mov.w	r9, #0
  for(i=0;i<*Len;i++) {
 8006b70:	f8da 2000 	ldr.w	r2, [sl]
 8006b74:	eba6 0308 	sub.w	r3, r6, r8
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d811      	bhi.n	8006ba0 <USB_AssembleTransmission+0x48>
  return 0;
 8006b7c:	2000      	movs	r0, #0
}
 8006b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    new_transmission = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	703b      	strb	r3, [r7, #0]
    transmission = realloc(transmission, sizeof(char)*(transmission_length + 1));  // keep an eye on this line
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <USB_AssembleTransmission+0x98>)
 8006b88:	4c1a      	ldr	r4, [pc, #104]	; (8006bf4 <USB_AssembleTransmission+0x9c>)
 8006b8a:	6819      	ldr	r1, [r3, #0]
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	3101      	adds	r1, #1
 8006b90:	f001 f93e 	bl	8007e10 <realloc>
 8006b94:	6020      	str	r0, [r4, #0]
    if(transmission == NULL) {
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d1e5      	bne.n	8006b66 <USB_AssembleTransmission+0xe>
      return 1;
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(*(Buff+i) != 0x0a) {
 8006ba0:	f816 3b01 	ldrb.w	r3, [r6], #1
      transmission[transmission_length++] = *(Buff+i);
 8006ba4:	682a      	ldr	r2, [r5, #0]
    if(*(Buff+i) != 0x0a) {
 8006ba6:	2b0a      	cmp	r3, #10
      transmission[transmission_length++] = *(Buff+i);
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	f103 0101 	add.w	r1, r3, #1
 8006bae:	6021      	str	r1, [r4, #0]
 8006bb0:	bf1a      	itte	ne
 8006bb2:	f816 1c01 	ldrbne.w	r1, [r6, #-1]
 8006bb6:	54d1      	strbne	r1, [r2, r3]
      transmission[transmission_length++] = 0x00;
 8006bb8:	f802 9003 	strbeq.w	r9, [r2, r3]
      transmission = realloc(transmission, sizeof(char)*(transmission_length + 1));
 8006bbc:	6821      	ldr	r1, [r4, #0]
 8006bbe:	6828      	ldr	r0, [r5, #0]
 8006bc0:	3101      	adds	r1, #1
 8006bc2:	f001 f925 	bl	8007e10 <realloc>
 8006bc6:	6028      	str	r0, [r5, #0]
      if(!transmission) {
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d0e6      	beq.n	8006b9a <USB_AssembleTransmission+0x42>
    if(*(Buff+i) == 0x0a) {
 8006bcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bd0:	2b0a      	cmp	r3, #10
 8006bd2:	d1cd      	bne.n	8006b70 <USB_AssembleTransmission+0x18>
      ProcessUSBCommand(transmission, transmission_length);
 8006bd4:	6821      	ldr	r1, [r4, #0]
 8006bd6:	f7ff fb49 	bl	800626c <ProcessUSBCommand>
      new_transmission = 1;
 8006bda:	2101      	movs	r1, #1
      transmission = realloc(transmission, sizeof(char));
 8006bdc:	6828      	ldr	r0, [r5, #0]
      transmission_length = 0;
 8006bde:	f8c4 9000 	str.w	r9, [r4]
      new_transmission = 1;
 8006be2:	7039      	strb	r1, [r7, #0]
      transmission = realloc(transmission, sizeof(char));
 8006be4:	f001 f914 	bl	8007e10 <realloc>
 8006be8:	6028      	str	r0, [r5, #0]
 8006bea:	e7c1      	b.n	8006b70 <USB_AssembleTransmission+0x18>
 8006bec:	20000d58 	.word	0x20000d58
 8006bf0:	20000d54 	.word	0x20000d54
 8006bf4:	20000d50 	.word	0x20000d50

08006bf8 <USB_DataReceivedCallback3>:
uint8_t USB_DataReceivedCallback3(uint8_t *Buff, uint32_t *Len) {
 8006bf8:	b508      	push	{r3, lr}
  USB_AssembleTransmission(Buff, Len);
 8006bfa:	f7ff ffad 	bl	8006b58 <USB_AssembleTransmission>
}
 8006bfe:	2000      	movs	r0, #0
 8006c00:	bd08      	pop	{r3, pc}

08006c02 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006c02:	2000      	movs	r0, #0
 8006c04:	4770      	bx	lr
	...

08006c08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8006c08:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c0a:	4d08      	ldr	r5, [pc, #32]	; (8006c2c <CDC_Receive_FS+0x24>)
{
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	460e      	mov	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c10:	4601      	mov	r1, r0
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 fe02 	bl	800781c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 fe1c 	bl	8007856 <USBD_CDC_ReceivePacket>

  // Custom code

  USB_DataReceivedCallback3(Buf, Len);
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff ffe9 	bl	8006bf8 <USB_DataReceivedCallback3>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006c26:	2000      	movs	r0, #0
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000b2c 	.word	0x20000b2c

08006c30 <CDC_Init_FS>:
{
 8006c30:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c32:	4c06      	ldr	r4, [pc, #24]	; (8006c4c <CDC_Init_FS+0x1c>)
 8006c34:	4906      	ldr	r1, [pc, #24]	; (8006c50 <CDC_Init_FS+0x20>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fde7 	bl	800780c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c3e:	4905      	ldr	r1, [pc, #20]	; (8006c54 <CDC_Init_FS+0x24>)
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 fdeb 	bl	800781c <USBD_CDC_SetRxBuffer>
}
 8006c46:	2000      	movs	r0, #0
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000b2c 	.word	0x20000b2c
 8006c50:	20000e5d 	.word	0x20000e5d
 8006c54:	20000e59 	.word	0x20000e59

08006c58 <CDC_Control_FS>:
  switch (cmd)
 8006c58:	2804      	cmp	r0, #4
{
 8006c5a:	b508      	push	{r3, lr}
  switch (cmd)
 8006c5c:	d907      	bls.n	8006c6e <CDC_Control_FS+0x16>
 8006c5e:	3820      	subs	r0, #32
 8006c60:	2803      	cmp	r0, #3
 8006c62:	d904      	bls.n	8006c6e <CDC_Control_FS+0x16>
  HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_15);
 8006c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c68:	4802      	ldr	r0, [pc, #8]	; (8006c74 <CDC_Control_FS+0x1c>)
 8006c6a:	f7f9 fe83 	bl	8000974 <HAL_GPIO_TogglePin>
}
 8006c6e:	2000      	movs	r0, #0
 8006c70:	bd08      	pop	{r3, pc}
 8006c72:	bf00      	nop
 8006c74:	40020c00 	.word	0x40020c00

08006c78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c78:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c7a:	4c09      	ldr	r4, [pc, #36]	; (8006ca0 <CDC_Transmit_FS+0x28>)
 8006c7c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8006c80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8006c84:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8006c86:	b943      	cbnz	r3, 8006c9a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c88:	4601      	mov	r1, r0
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fdbe 	bl	800780c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c90:	4620      	mov	r0, r4
  // Custom
  //while(hcdc->TxState != 0);

  /* USER CODE END 7 */
  return result;
}
 8006c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c96:	f000 bdc7 	b.w	8007828 <USBD_CDC_TransmitPacket>
}
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000b2c 	.word	0x20000b2c

08006ca4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ca4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ca6:	6803      	ldr	r3, [r0, #0]
 8006ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006cac:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 8006cae:	d12d      	bne.n	8006d0c <HAL_PCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cb0:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006cb6:	a901      	add	r1, sp, #4
 8006cb8:	4815      	ldr	r0, [pc, #84]	; (8006d10 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006cba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cbc:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006cc0:	f7f9 fc7a 	bl	80005b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006cc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006cc8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cce:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006cd0:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd2:	480f      	ldr	r0, [pc, #60]	; (8006d10 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006cd4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cda:	f7f9 fc6d 	bl	80005b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <HAL_PCD_MspInit+0x70>)
 8006ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8006ce8:	9400      	str	r4, [sp, #0]
 8006cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf0:	645a      	str	r2, [r3, #68]	; 0x44
 8006cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf8:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006cfa:	2043      	movs	r0, #67	; 0x43
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d00:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d02:	f7f9 fb31 	bl	8000368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d06:	2043      	movs	r0, #67	; 0x43
 8006d08:	f7f9 fb64 	bl	80003d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d0c:	b006      	add	sp, #24
 8006d0e:	bd10      	pop	{r4, pc}
 8006d10:	40020000 	.word	0x40020000
 8006d14:	40023800 	.word	0x40023800

08006d18 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d18:	b508      	push	{r3, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d1a:	6803      	ldr	r3, [r0, #0]
 8006d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d20:	d10e      	bne.n	8006d40 <HAL_PCD_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8006d22:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <HAL_PCD_MspDeInit+0x2c>)
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    HAL_GPIO_DeInit(GPIOA, VBUS_FS_Pin|OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin);
 8006d24:	4808      	ldr	r0, [pc, #32]	; (8006d48 <HAL_PCD_MspDeInit+0x30>)
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8006d26:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2c:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, VBUS_FS_Pin|OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin);
 8006d2e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8006d32:	f7f9 fd63 	bl	80007fc <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8006d36:	2043      	movs	r0, #67	; 0x43

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 8006d38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8006d3c:	f7f9 bb56 	b.w	80003ec <HAL_NVIC_DisableIRQ>
 8006d40:	bd08      	pop	{r3, pc}
 8006d42:	bf00      	nop
 8006d44:	40023800 	.word	0x40023800
 8006d48:	40020000 	.word	0x40020000

08006d4c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d4c:	f500 7161 	add.w	r1, r0, #900	; 0x384
 8006d50:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006d54:	f000 b981 	b.w	800705a <USBD_LL_SetupStage>

08006d58 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d58:	231c      	movs	r3, #28
 8006d5a:	fb03 0301 	mla	r3, r3, r1, r0
 8006d5e:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006d62:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8006d66:	f000 b9a5 	b.w	80070b4 <USBD_LL_DataOutStage>

08006d6a <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d6a:	231c      	movs	r3, #28
 8006d6c:	fb03 0301 	mla	r3, r3, r1, r0
 8006d70:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d76:	f000 b9cf 	b.w	8007118 <USBD_LL_DataInStage>

08006d7a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8006d7a:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006d7e:	f000 ba4b 	b.w	8007218 <USBD_LL_SOF>

08006d82 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006d82:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8006d84:	68c1      	ldr	r1, [r0, #12]
{ 
 8006d86:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 8006d88:	3100      	adds	r1, #0
 8006d8a:	bf18      	it	ne
 8006d8c:	2101      	movne	r1, #1
 8006d8e:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006d92:	f000 fa2f 	bl	80071f4 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 8006d96:	f8d4 03b4 	ldr.w	r0, [r4, #948]	; 0x3b4
}
 8006d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 8006d9e:	f000 ba0a 	b.w	80071b6 <USBD_LL_Reset>
	...

08006da4 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 8006da4:	b510      	push	{r4, lr}
 8006da6:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 8006da8:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006dac:	f000 fa25 	bl	80071fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006db0:	6822      	ldr	r2, [r4, #0]
 8006db2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006db6:	f043 0301 	orr.w	r3, r3, #1
 8006dba:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006dbe:	6a23      	ldr	r3, [r4, #32]
 8006dc0:	b123      	cbz	r3, 8006dcc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006dc2:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <HAL_PCD_SuspendCallback+0x2c>)
 8006dc4:	6913      	ldr	r3, [r2, #16]
 8006dc6:	f043 0306 	orr.w	r3, r3, #6
 8006dca:	6113      	str	r3, [r2, #16]
 8006dcc:	bd10      	pop	{r4, pc}
 8006dce:	bf00      	nop
 8006dd0:	e000ed00 	.word	0xe000ed00

08006dd4 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume(hpcd->pData);
 8006dd4:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006dd8:	f000 ba18 	b.w	800720c <USBD_LL_Resume>

08006ddc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8006ddc:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006de0:	f000 ba28 	b.w	8007234 <USBD_LL_IsoOUTIncomplete>

08006de4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8006de4:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006de8:	f000 ba22 	b.w	8007230 <USBD_LL_IsoINIncomplete>

08006dec <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8006dec:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006df0:	f000 ba22 	b.w	8007238 <USBD_LL_DevConnected>

08006df4 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8006df4:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8006df8:	f000 ba20 	b.w	800723c <USBD_LL_DevDisconnected>

08006dfc <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8006dfc:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8006dfe:	7802      	ldrb	r2, [r0, #0]
 8006e00:	bb42      	cbnz	r2, 8006e54 <USBD_LL_Init+0x58>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006e04:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8006e06:	f8c3 03b4 	str.w	r0, [r3, #948]	; 0x3b4
  pdev->pData = &hpcd_USB_OTG_FS; 
 8006e0a:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006e0e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006e12:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006e16:	2102      	movs	r1, #2
 8006e18:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006e1a:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e1c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006e1e:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8006e22:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006e24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006e26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006e2a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006e2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e2e:	f7f9 fdcb 	bl	80009c8 <HAL_PCD_Init>
 8006e32:	b108      	cbz	r0, 8006e38 <USBD_LL_Init+0x3c>
  {
    Error_Handler();
 8006e34:	f7ff fcae 	bl	8006794 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006e38:	2180      	movs	r1, #128	; 0x80
 8006e3a:	4807      	ldr	r0, [pc, #28]	; (8006e58 <USBD_LL_Init+0x5c>)
 8006e3c:	f7fa fae2 	bl	8001404 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e40:	2240      	movs	r2, #64	; 0x40
 8006e42:	2100      	movs	r1, #0
 8006e44:	4804      	ldr	r0, [pc, #16]	; (8006e58 <USBD_LL_Init+0x5c>)
 8006e46:	f7fa fab9 	bl	80013bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	4802      	ldr	r0, [pc, #8]	; (8006e58 <USBD_LL_Init+0x5c>)
 8006e50:	f7fa fab4 	bl	80013bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8006e54:	2000      	movs	r0, #0
 8006e56:	bd08      	pop	{r3, pc}
 8006e58:	20000e64 	.word	0x20000e64

08006e5c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e5c:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8006e5e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006e62:	f7f9 fe43 	bl	8000aec <HAL_PCD_Start>
  return USBD_OK; 
}
 8006e66:	2000      	movs	r0, #0
 8006e68:	bd08      	pop	{r3, pc}

08006e6a <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	461c      	mov	r4, r3

  HAL_PCD_EP_Open(pdev->pData, 
 8006e6e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006e72:	4613      	mov	r3, r2
 8006e74:	4622      	mov	r2, r4
 8006e76:	f7fa f939 	bl	80010ec <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
}
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	bd10      	pop	{r4, pc}

08006e7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8006e7e:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e80:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006e84:	f7fa f972 	bl	800116c <HAL_PCD_EP_Close>
  return USBD_OK; 
}
 8006e88:	2000      	movs	r0, #0
 8006e8a:	bd08      	pop	{r3, pc}

08006e8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8006e8c:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e8e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006e92:	f7fa fa03 	bl	800129c <HAL_PCD_EP_SetStall>
  return USBD_OK; 
}
 8006e96:	2000      	movs	r0, #0
 8006e98:	bd08      	pop	{r3, pc}

08006e9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8006e9a:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006e9c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006ea0:	f7fa fa2a 	bl	80012f8 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	bd08      	pop	{r3, pc}

08006ea8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
  
  if((ep_addr & 0x80) == 0x80)
 8006ea8:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 8006eac:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8006eb0:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006eb4:	bf1b      	ittet	ne
 8006eb6:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8006eba:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006ebe:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006ec2:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006ec6:	bf08      	it	eq
 8006ec8:	f891 01de 	ldrbeq.w	r0, [r1, #478]	; 0x1de
  }
}
 8006ecc:	4770      	bx	lr

08006ece <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8006ece:	b508      	push	{r3, lr}
  
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ed0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006ed4:	f7fa f8f8 	bl	80010c8 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8006ed8:	2000      	movs	r0, #0
 8006eda:	bd08      	pop	{r3, pc}

08006edc <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8006edc:	b508      	push	{r3, lr}

  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ede:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006ee2:	f7fa f9a9 	bl	8001238 <HAL_PCD_EP_Transmit>
  return USBD_OK;   
}
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	bd08      	pop	{r3, pc}

08006eea <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8006eea:	b508      	push	{r3, lr}

  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006eec:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006ef0:	f7fa f962 	bl	80011b8 <HAL_PCD_EP_Receive>
  return USBD_OK;   
}
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	bd08      	pop	{r3, pc}

08006ef8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8006ef8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8006efa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006efe:	f7fa f991 	bl	8001224 <HAL_PCD_EP_GetRxCount>
}
 8006f02:	bd08      	pop	{r3, pc}

08006f04 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f04:	2312      	movs	r3, #18
 8006f06:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006f08:	4800      	ldr	r0, [pc, #0]	; (8006f0c <USBD_FS_DeviceDescriptor+0x8>)
 8006f0a:	4770      	bx	lr
 8006f0c:	20000464 	.word	0x20000464

08006f10 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8006f10:	2304      	movs	r3, #4
 8006f12:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006f14:	4800      	ldr	r0, [pc, #0]	; (8006f18 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006f16:	4770      	bx	lr
 8006f18:	20000478 	.word	0x20000478

08006f1c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006f1c:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f1e:	4c04      	ldr	r4, [pc, #16]	; (8006f30 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006f20:	4804      	ldr	r0, [pc, #16]	; (8006f34 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006f22:	460a      	mov	r2, r1
 8006f24:	4621      	mov	r1, r4
 8006f26:	f000 fb28 	bl	800757a <USBD_GetString>
  return USBD_StrDesc;
}
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000121c 	.word	0x2000121c
 8006f34:	08008560 	.word	0x08008560

08006f38 <USBD_FS_ProductStrDescriptor>:
{
 8006f38:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f3a:	4c04      	ldr	r4, [pc, #16]	; (8006f4c <USBD_FS_ProductStrDescriptor+0x14>)
 8006f3c:	4804      	ldr	r0, [pc, #16]	; (8006f50 <USBD_FS_ProductStrDescriptor+0x18>)
 8006f3e:	460a      	mov	r2, r1
 8006f40:	4621      	mov	r1, r4
 8006f42:	f000 fb1a 	bl	800757a <USBD_GetString>
}
 8006f46:	4620      	mov	r0, r4
 8006f48:	bd10      	pop	{r4, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2000121c 	.word	0x2000121c
 8006f50:	08008573 	.word	0x08008573

08006f54 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006f54:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006f56:	4c04      	ldr	r4, [pc, #16]	; (8006f68 <USBD_FS_SerialStrDescriptor+0x14>)
 8006f58:	4804      	ldr	r0, [pc, #16]	; (8006f6c <USBD_FS_SerialStrDescriptor+0x18>)
 8006f5a:	460a      	mov	r2, r1
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	f000 fb0c 	bl	800757a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8006f62:	4620      	mov	r0, r4
 8006f64:	bd10      	pop	{r4, pc}
 8006f66:	bf00      	nop
 8006f68:	2000121c 	.word	0x2000121c
 8006f6c:	08008589 	.word	0x08008589

08006f70 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006f70:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f72:	4c04      	ldr	r4, [pc, #16]	; (8006f84 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006f74:	4804      	ldr	r0, [pc, #16]	; (8006f88 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006f76:	460a      	mov	r2, r1
 8006f78:	4621      	mov	r1, r4
 8006f7a:	f000 fafe 	bl	800757a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8006f7e:	4620      	mov	r0, r4
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	bf00      	nop
 8006f84:	2000121c 	.word	0x2000121c
 8006f88:	08008547 	.word	0x08008547

08006f8c <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006f8c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f8e:	4c04      	ldr	r4, [pc, #16]	; (8006fa0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006f90:	4804      	ldr	r0, [pc, #16]	; (8006fa4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006f92:	460a      	mov	r2, r1
 8006f94:	4621      	mov	r1, r4
 8006f96:	f000 faf0 	bl	800757a <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2000121c 	.word	0x2000121c
 8006fa4:	08008552 	.word	0x08008552

08006fa8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fa8:	490f      	ldr	r1, [pc, #60]	; (8006fe8 <SystemInit+0x40>)
 8006faa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006fae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <SystemInit+0x44>)
 8006fb8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006fba:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8006fbc:	f042 0201 	orr.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006fc2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006fca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006fd0:	4a07      	ldr	r2, [pc, #28]	; (8006ff0 <SystemInit+0x48>)
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fda:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006fdc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006fde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fe2:	608b      	str	r3, [r1, #8]
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	e000ed00 	.word	0xe000ed00
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	24003010 	.word	0x24003010

08006ff4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ff4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006ff6:	b180      	cbz	r0, 800701a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006ff8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006ffc:	b113      	cbz	r3, 8007004 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007004:	b109      	cbz	r1, 800700a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8007006:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800700a:	2301      	movs	r3, #1
 800700c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8007010:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007012:	f7ff fef3 	bl	8006dfc <USBD_LL_Init>
  
  return USBD_OK; 
 8007016:	2000      	movs	r0, #0
 8007018:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800701a:	2002      	movs	r0, #2
}
 800701c:	bd08      	pop	{r3, pc}

0800701e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800701e:	b119      	cbz	r1, 8007028 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007020:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8007024:	2000      	movs	r0, #0
 8007026:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8007028:	2002      	movs	r0, #2
  }
  
  return status;
}
 800702a:	4770      	bx	lr

0800702c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800702c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800702e:	f7ff ff15 	bl	8006e5c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8007032:	2000      	movs	r0, #0
 8007034:	bd08      	pop	{r3, pc}

08007036 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007036:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8007038:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800703c:	b90b      	cbnz	r3, 8007042 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800703e:	2002      	movs	r0, #2
 8007040:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4798      	blx	r3
 8007046:	2800      	cmp	r0, #0
 8007048:	d1f9      	bne.n	800703e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800704a:	bd08      	pop	{r3, pc}

0800704c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800704c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800704e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4798      	blx	r3
  return USBD_OK;
}
 8007056:	2000      	movs	r0, #0
 8007058:	bd08      	pop	{r3, pc}

0800705a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800705a:	b538      	push	{r3, r4, r5, lr}
 800705c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800705e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8007062:	4628      	mov	r0, r5
 8007064:	f000 fa75 	bl	8007552 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8007068:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800706a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800706e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8007072:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8007076:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800707a:	f001 031f 	and.w	r3, r1, #31
 800707e:	2b01      	cmp	r3, #1
 8007080:	d00e      	beq.n	80070a0 <USBD_LL_SetupStage+0x46>
 8007082:	d307      	bcc.n	8007094 <USBD_LL_SetupStage+0x3a>
 8007084:	2b02      	cmp	r3, #2
 8007086:	d010      	beq.n	80070aa <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8007088:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800708c:	4620      	mov	r0, r4
 800708e:	f7ff fefd 	bl	8006e8c <USBD_LL_StallEP>
    break;
 8007092:	e003      	b.n	800709c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8007094:	4629      	mov	r1, r5
 8007096:	4620      	mov	r0, r4
 8007098:	f000 f8e6 	bl	8007268 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800709c:	2000      	movs	r0, #0
 800709e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80070a0:	4629      	mov	r1, r5
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 f9da 	bl	800745c <USBD_StdItfReq>
    break;
 80070a8:	e7f8      	b.n	800709c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80070aa:	4629      	mov	r1, r5
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 f9ed 	bl	800748c <USBD_StdEPReq>
    break;
 80070b2:	e7f3      	b.n	800709c <USBD_LL_SetupStage+0x42>

080070b4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4604      	mov	r4, r0
 80070b8:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80070ba:	bb11      	cbnz	r1, 8007102 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070bc:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d10f      	bne.n	80070e4 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80070c4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80070c8:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d90b      	bls.n	80070e8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80070d0:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80070d2:	429a      	cmp	r2, r3
 80070d4:	bf28      	it	cs
 80070d6:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80070d8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80070dc:	b292      	uxth	r2, r2
 80070de:	4629      	mov	r1, r5
 80070e0:	f000 fa8b 	bl	80075fa <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80070e4:	2000      	movs	r0, #0
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80070e8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	b123      	cbz	r3, 80070fa <USBD_LL_DataOutStage+0x46>
 80070f0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80070f4:	2a03      	cmp	r2, #3
 80070f6:	d100      	bne.n	80070fa <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80070f8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 fa85 	bl	800760a <USBD_CtlSendStatus>
 8007100:	e7f0      	b.n	80070e4 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8007102:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0eb      	beq.n	80070e4 <USBD_LL_DataOutStage+0x30>
 800710c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8007110:	2a03      	cmp	r2, #3
 8007112:	d1e7      	bne.n	80070e4 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8007114:	4798      	blx	r3
 8007116:	e7e5      	b.n	80070e4 <USBD_LL_DataOutStage+0x30>

08007118 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	4613      	mov	r3, r2
 800711c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800711e:	460e      	mov	r6, r1
 8007120:	2900      	cmp	r1, #0
 8007122:	d13d      	bne.n	80071a0 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007124:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8007128:	2a02      	cmp	r2, #2
 800712a:	d10f      	bne.n	800714c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800712c:	69c5      	ldr	r5, [r0, #28]
 800712e:	6a02      	ldr	r2, [r0, #32]
 8007130:	4295      	cmp	r5, r2
 8007132:	d914      	bls.n	800715e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8007134:	1aaa      	subs	r2, r5, r2
 8007136:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8007138:	4619      	mov	r1, r3
 800713a:	b292      	uxth	r2, r2
 800713c:	f000 fa46 	bl	80075cc <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8007140:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8007142:	461a      	mov	r2, r3
 8007144:	4619      	mov	r1, r3
 8007146:	4620      	mov	r0, r4
 8007148:	f7ff fecf 	bl	8006eea <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800714c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8007150:	2b01      	cmp	r3, #1
 8007152:	d102      	bne.n	800715a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800715a:	2000      	movs	r0, #0
 800715c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800715e:	6983      	ldr	r3, [r0, #24]
 8007160:	fbb3 f5f2 	udiv	r5, r3, r2
 8007164:	fb02 3515 	mls	r5, r2, r5, r3
 8007168:	b965      	cbnz	r5, 8007184 <USBD_LL_DataInStage+0x6c>
 800716a:	429a      	cmp	r2, r3
 800716c:	d80a      	bhi.n	8007184 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800716e:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8007172:	4293      	cmp	r3, r2
 8007174:	d206      	bcs.n	8007184 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8007176:	462a      	mov	r2, r5
 8007178:	f000 fa28 	bl	80075cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800717c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8007180:	462b      	mov	r3, r5
 8007182:	e7de      	b.n	8007142 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007184:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	b12b      	cbz	r3, 8007198 <USBD_LL_DataInStage+0x80>
 800718c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8007190:	2a03      	cmp	r2, #3
 8007192:	d101      	bne.n	8007198 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8007194:	4620      	mov	r0, r4
 8007196:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8007198:	4620      	mov	r0, r4
 800719a:	f000 fa41 	bl	8007620 <USBD_CtlReceiveStatus>
 800719e:	e7d5      	b.n	800714c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80071a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0d7      	beq.n	800715a <USBD_LL_DataInStage+0x42>
 80071aa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80071ae:	2a03      	cmp	r2, #3
 80071b0:	d1d3      	bne.n	800715a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80071b2:	4798      	blx	r3
 80071b4:	e7d1      	b.n	800715a <USBD_LL_DataInStage+0x42>

080071b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80071b6:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80071b8:	2200      	movs	r2, #0
{
 80071ba:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80071bc:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071be:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	f7ff fe52 	bl	8006e6a <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80071c6:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80071cc:	2200      	movs	r2, #0
 80071ce:	2180      	movs	r1, #128	; 0x80
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7ff fe4a 	bl	8006e6a <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80071dc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071e0:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80071e2:	b12b      	cbz	r3, 80071f0 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80071e4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80071e8:	7921      	ldrb	r1, [r4, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	4620      	mov	r0, r4
 80071ee:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80071f0:	2000      	movs	r0, #0
 80071f2:	bd38      	pop	{r3, r4, r5, pc}

080071f4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80071f4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80071f6:	2000      	movs	r0, #0
 80071f8:	4770      	bx	lr

080071fa <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80071fa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80071fe:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007202:	2304      	movs	r3, #4
 8007204:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8007208:	2000      	movs	r0, #0
 800720a:	4770      	bx	lr

0800720c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800720c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8007210:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8007214:	2000      	movs	r0, #0
 8007216:	4770      	bx	lr

08007218 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007218:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800721a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800721e:	2a03      	cmp	r2, #3
 8007220:	d104      	bne.n	800722c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8007222:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	b103      	cbz	r3, 800722c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800722a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800722c:	2000      	movs	r0, #0
 800722e:	bd08      	pop	{r3, pc}

08007230 <USBD_LL_IsoINIncomplete>:
 8007230:	2000      	movs	r0, #0
 8007232:	4770      	bx	lr

08007234 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8007234:	2000      	movs	r0, #0
 8007236:	4770      	bx	lr

08007238 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8007238:	2000      	movs	r0, #0
 800723a:	4770      	bx	lr

0800723c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800723c:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800723e:	2201      	movs	r2, #1
 8007240:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8007244:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8007248:	7901      	ldrb	r1, [r0, #4]
 800724a:	6852      	ldr	r2, [r2, #4]
 800724c:	4790      	blx	r2
   
  return USBD_OK;
}
 800724e:	2000      	movs	r0, #0
 8007250:	bd08      	pop	{r3, pc}

08007252 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8007252:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8007254:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8007256:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8007258:	f7ff fe18 	bl	8006e8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800725c:	4620      	mov	r0, r4
 800725e:	2100      	movs	r1, #0
}
 8007260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8007264:	f7ff be12 	b.w	8006e8c <USBD_LL_StallEP>

08007268 <USBD_StdDevReq>:
{
 8007268:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800726a:	784b      	ldrb	r3, [r1, #1]
{
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8007270:	2b09      	cmp	r3, #9
 8007272:	d879      	bhi.n	8007368 <USBD_StdDevReq+0x100>
 8007274:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007278:	00e500c9 	.word	0x00e500c9
 800727c:	00d90078 	.word	0x00d90078
 8007280:	006d0078 	.word	0x006d0078
 8007284:	0078000a 	.word	0x0078000a
 8007288:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800728c:	884b      	ldrh	r3, [r1, #2]
 800728e:	0a1a      	lsrs	r2, r3, #8
 8007290:	3a01      	subs	r2, #1
 8007292:	2a06      	cmp	r2, #6
 8007294:	d868      	bhi.n	8007368 <USBD_StdDevReq+0x100>
 8007296:	e8df f002 	tbb	[pc, r2]
 800729a:	1c04      	.short	0x1c04
 800729c:	49676729 	.word	0x49676729
 80072a0:	52          	.byte	0x52
 80072a1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072a2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80072a6:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80072a8:	7c20      	ldrb	r0, [r4, #16]
 80072aa:	f10d 0106 	add.w	r1, sp, #6
 80072ae:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80072b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80072b4:	2a00      	cmp	r2, #0
 80072b6:	d067      	beq.n	8007388 <USBD_StdDevReq+0x120>
 80072b8:	88eb      	ldrh	r3, [r5, #6]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d064      	beq.n	8007388 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80072be:	429a      	cmp	r2, r3
 80072c0:	bf28      	it	cs
 80072c2:	461a      	movcs	r2, r3
 80072c4:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80072c8:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f971 	bl	80075b2 <USBD_CtlSendData>
 80072d0:	e05a      	b.n	8007388 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80072d2:	7c02      	ldrb	r2, [r0, #16]
 80072d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80072d8:	b932      	cbnz	r2, 80072e8 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80072dc:	f10d 0006 	add.w	r0, sp, #6
 80072e0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072e2:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072e4:	7043      	strb	r3, [r0, #1]
 80072e6:	e7e3      	b.n	80072b0 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	e7f7      	b.n	80072dc <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b05      	cmp	r3, #5
 80072f0:	d83a      	bhi.n	8007368 <USBD_StdDevReq+0x100>
 80072f2:	e8df f003 	tbb	[pc, r3]
 80072f6:	0703      	.short	0x0703
 80072f8:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80072fc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	e7d1      	b.n	80072a8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007304:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	e7cd      	b.n	80072a8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800730c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	e7c9      	b.n	80072a8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007314:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	e7c5      	b.n	80072a8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800731c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	e7c1      	b.n	80072a8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007324:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	e7bd      	b.n	80072a8 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800732c:	7c03      	ldrb	r3, [r0, #16]
 800732e:	b9db      	cbnz	r3, 8007368 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007330:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007334:	f10d 0006 	add.w	r0, sp, #6
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	4798      	blx	r3
 800733c:	e7b8      	b.n	80072b0 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800733e:	7c03      	ldrb	r3, [r0, #16]
 8007340:	b993      	cbnz	r3, 8007368 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007342:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007346:	f10d 0006 	add.w	r0, sp, #6
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800734e:	2307      	movs	r3, #7
 8007350:	e7c8      	b.n	80072e4 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007352:	888b      	ldrh	r3, [r1, #4]
 8007354:	b943      	cbnz	r3, 8007368 <USBD_StdDevReq+0x100>
 8007356:	88cb      	ldrh	r3, [r1, #6]
 8007358:	b933      	cbnz	r3, 8007368 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800735a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800735e:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007360:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007362:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007366:	d103      	bne.n	8007370 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8007368:	4620      	mov	r0, r4
 800736a:	f7ff ff72 	bl	8007252 <USBD_CtlError.constprop.0>
    break;
 800736e:	e00b      	b.n	8007388 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8007370:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8007374:	4629      	mov	r1, r5
 8007376:	f7ff fdaa 	bl	8006ece <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800737a:	4620      	mov	r0, r4
 800737c:	f000 f945 	bl	800760a <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8007380:	b12d      	cbz	r5, 800738e <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007382:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8007384:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8007388:	2000      	movs	r0, #0
 800738a:	b003      	add	sp, #12
 800738c:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800738e:	2301      	movs	r3, #1
 8007390:	e7f8      	b.n	8007384 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8007392:	7889      	ldrb	r1, [r1, #2]
 8007394:	4d30      	ldr	r5, [pc, #192]	; (8007458 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8007396:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8007398:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800739a:	d8e5      	bhi.n	8007368 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 800739c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d00c      	beq.n	80073be <USBD_StdDevReq+0x156>
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d1df      	bne.n	8007368 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80073a8:	b9b1      	cbnz	r1, 80073d8 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073aa:	2302      	movs	r3, #2
 80073ac:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80073b0:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80073b2:	f7ff fe4b 	bl	800704c <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 f927 	bl	800760a <USBD_CtlSendStatus>
 80073bc:	e7e4      	b.n	8007388 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80073be:	2900      	cmp	r1, #0
 80073c0:	d0f9      	beq.n	80073b6 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80073c2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80073c4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80073c6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80073c8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7ff fe32 	bl	8007036 <USBD_SetClassConfig>
 80073d2:	2802      	cmp	r0, #2
 80073d4:	d1ef      	bne.n	80073b6 <USBD_StdDevReq+0x14e>
 80073d6:	e7c7      	b.n	8007368 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80073d8:	6841      	ldr	r1, [r0, #4]
 80073da:	2901      	cmp	r1, #1
 80073dc:	d0eb      	beq.n	80073b6 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80073de:	b2c9      	uxtb	r1, r1
 80073e0:	f7ff fe34 	bl	800704c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073e4:	7829      	ldrb	r1, [r5, #0]
 80073e6:	6061      	str	r1, [r4, #4]
 80073e8:	e7f0      	b.n	80073cc <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80073ea:	88ca      	ldrh	r2, [r1, #6]
 80073ec:	2a01      	cmp	r2, #1
 80073ee:	d1bb      	bne.n	8007368 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80073f0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d003      	beq.n	8007400 <USBD_StdDevReq+0x198>
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d1b5      	bne.n	8007368 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80073fc:	1d01      	adds	r1, r0, #4
 80073fe:	e764      	b.n	80072ca <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8007400:	4601      	mov	r1, r0
 8007402:	2300      	movs	r3, #0
 8007404:	f841 3f08 	str.w	r3, [r1, #8]!
 8007408:	e75f      	b.n	80072ca <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800740a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800740e:	3b02      	subs	r3, #2
 8007410:	2b01      	cmp	r3, #1
 8007412:	d8a9      	bhi.n	8007368 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8007414:	2301      	movs	r3, #1
 8007416:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8007418:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800741c:	b10b      	cbz	r3, 8007422 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800741e:	2303      	movs	r3, #3
 8007420:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8007422:	2202      	movs	r2, #2
 8007424:	f104 010c 	add.w	r1, r4, #12
 8007428:	e74f      	b.n	80072ca <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800742a:	884b      	ldrh	r3, [r1, #2]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d1ab      	bne.n	8007388 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8007430:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8007434:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8007438:	4629      	mov	r1, r5
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4620      	mov	r0, r4
 800743e:	4798      	blx	r3
 8007440:	e7b9      	b.n	80073b6 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8007442:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007446:	3b02      	subs	r3, #2
 8007448:	2b01      	cmp	r3, #1
 800744a:	d88d      	bhi.n	8007368 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800744c:	884b      	ldrh	r3, [r1, #2]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d19a      	bne.n	8007388 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8007452:	2300      	movs	r3, #0
 8007454:	e7ec      	b.n	8007430 <USBD_StdDevReq+0x1c8>
 8007456:	bf00      	nop
 8007458:	200009c8 	.word	0x200009c8

0800745c <USBD_StdItfReq>:
{
 800745c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800745e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007462:	2b03      	cmp	r3, #3
{
 8007464:	4604      	mov	r4, r0
 8007466:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8007468:	d10d      	bne.n	8007486 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800746a:	790b      	ldrb	r3, [r1, #4]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d80a      	bhi.n	8007486 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8007470:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8007478:	88eb      	ldrh	r3, [r5, #6]
 800747a:	b913      	cbnz	r3, 8007482 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800747c:	4620      	mov	r0, r4
 800747e:	f000 f8c4 	bl	800760a <USBD_CtlSendStatus>
}
 8007482:	2000      	movs	r0, #0
 8007484:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8007486:	f7ff fee4 	bl	8007252 <USBD_CtlError.constprop.0>
    break;
 800748a:	e7fa      	b.n	8007482 <USBD_StdItfReq+0x26>

0800748c <USBD_StdEPReq>:
{
 800748c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800748e:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8007490:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8007492:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007496:	2a20      	cmp	r2, #32
{
 8007498:	4604      	mov	r4, r0
 800749a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800749c:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800749e:	d105      	bne.n	80074ac <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80074a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	4798      	blx	r3
}
 80074a8:	2000      	movs	r0, #0
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80074ac:	784a      	ldrb	r2, [r1, #1]
 80074ae:	2a01      	cmp	r2, #1
 80074b0:	d01c      	beq.n	80074ec <USBD_StdEPReq+0x60>
 80074b2:	d32a      	bcc.n	800750a <USBD_StdEPReq+0x7e>
 80074b4:	2a03      	cmp	r2, #3
 80074b6:	d1f7      	bne.n	80074a8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80074b8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80074bc:	2a02      	cmp	r2, #2
 80074be:	d040      	beq.n	8007542 <USBD_StdEPReq+0xb6>
 80074c0:	2a03      	cmp	r2, #3
 80074c2:	d002      	beq.n	80074ca <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80074c4:	f7ff fec5 	bl	8007252 <USBD_CtlError.constprop.0>
      break;
 80074c8:	e7ee      	b.n	80074a8 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80074ca:	884a      	ldrh	r2, [r1, #2]
 80074cc:	b922      	cbnz	r2, 80074d8 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80074ce:	065e      	lsls	r6, r3, #25
 80074d0:	d002      	beq.n	80074d8 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80074d2:	4619      	mov	r1, r3
 80074d4:	f7ff fcda 	bl	8006e8c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80074d8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80074dc:	4629      	mov	r1, r5
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	4620      	mov	r0, r4
 80074e2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 f890 	bl	800760a <USBD_CtlSendStatus>
 80074ea:	e7dd      	b.n	80074a8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80074ec:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80074f0:	2a02      	cmp	r2, #2
 80074f2:	d026      	beq.n	8007542 <USBD_StdEPReq+0xb6>
 80074f4:	2a03      	cmp	r2, #3
 80074f6:	d1e5      	bne.n	80074c4 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80074f8:	884a      	ldrh	r2, [r1, #2]
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	d1d4      	bne.n	80074a8 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80074fe:	0659      	lsls	r1, r3, #25
 8007500:	d0f0      	beq.n	80074e4 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007502:	4619      	mov	r1, r3
 8007504:	f7ff fcc9 	bl	8006e9a <USBD_LL_ClearStallEP>
 8007508:	e7e6      	b.n	80074d8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800750a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800750e:	2a02      	cmp	r2, #2
 8007510:	d017      	beq.n	8007542 <USBD_StdEPReq+0xb6>
 8007512:	2a03      	cmp	r2, #3
 8007514:	d1d6      	bne.n	80074c4 <USBD_StdEPReq+0x38>
 8007516:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800751a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800751e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007522:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007524:	bf14      	ite	ne
 8007526:	3514      	addne	r5, #20
 8007528:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800752c:	f7ff fcbc 	bl	8006ea8 <USBD_LL_IsStallEP>
 8007530:	b168      	cbz	r0, 800754e <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8007532:	2301      	movs	r3, #1
 8007534:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8007536:	2202      	movs	r2, #2
 8007538:	4629      	mov	r1, r5
 800753a:	4620      	mov	r0, r4
 800753c:	f000 f839 	bl	80075b2 <USBD_CtlSendData>
      break;
 8007540:	e7b2      	b.n	80074a8 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8007542:	065a      	lsls	r2, r3, #25
 8007544:	d0b0      	beq.n	80074a8 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8007546:	4619      	mov	r1, r3
 8007548:	f7ff fca0 	bl	8006e8c <USBD_LL_StallEP>
 800754c:	e7ac      	b.n	80074a8 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800754e:	6028      	str	r0, [r5, #0]
 8007550:	e7f1      	b.n	8007536 <USBD_StdEPReq+0xaa>

08007552 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007552:	780b      	ldrb	r3, [r1, #0]
 8007554:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007556:	784b      	ldrb	r3, [r1, #1]
 8007558:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800755a:	78ca      	ldrb	r2, [r1, #3]
 800755c:	788b      	ldrb	r3, [r1, #2]
 800755e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007562:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007564:	794a      	ldrb	r2, [r1, #5]
 8007566:	790b      	ldrb	r3, [r1, #4]
 8007568:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800756c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800756e:	79ca      	ldrb	r2, [r1, #7]
 8007570:	798b      	ldrb	r3, [r1, #6]
 8007572:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007576:	80c3      	strh	r3, [r0, #6]
 8007578:	4770      	bx	lr

0800757a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800757a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800757c:	b188      	cbz	r0, 80075a2 <USBD_GetString+0x28>
 800757e:	4605      	mov	r5, r0
 8007580:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8007582:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2c00      	cmp	r4, #0
 800758a:	d1f9      	bne.n	8007580 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	3302      	adds	r3, #2
 8007590:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8007592:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8007594:	2303      	movs	r3, #3
 8007596:	704b      	strb	r3, [r1, #1]
 8007598:	3801      	subs	r0, #1
 800759a:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800759c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80075a0:	b905      	cbnz	r5, 80075a4 <USBD_GetString+0x2a>
 80075a2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 80075aa:	3302      	adds	r3, #2
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	548c      	strb	r4, [r1, r2]
 80075b0:	e7f4      	b.n	800759c <USBD_GetString+0x22>

080075b2 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80075b2:	b510      	push	{r4, lr}
 80075b4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80075b6:	2202      	movs	r2, #2
 80075b8:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80075bc:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80075be:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80075c0:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80075c2:	2100      	movs	r1, #0
 80075c4:	f7ff fc8a 	bl	8006edc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80075c8:	2000      	movs	r0, #0
 80075ca:	bd10      	pop	{r4, pc}

080075cc <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80075cc:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80075ce:	4613      	mov	r3, r2
 80075d0:	460a      	mov	r2, r1
 80075d2:	2100      	movs	r1, #0
 80075d4:	f7ff fc82 	bl	8006edc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80075d8:	2000      	movs	r0, #0
 80075da:	bd08      	pop	{r3, pc}

080075dc <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80075dc:	b510      	push	{r4, lr}
 80075de:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80075e0:	2203      	movs	r2, #3
 80075e2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80075e6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80075ea:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80075ec:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80075f0:	2100      	movs	r1, #0
 80075f2:	f7ff fc7a 	bl	8006eea <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80075f6:	2000      	movs	r0, #0
 80075f8:	bd10      	pop	{r4, pc}

080075fa <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80075fa:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80075fc:	4613      	mov	r3, r2
 80075fe:	460a      	mov	r2, r1
 8007600:	2100      	movs	r1, #0
 8007602:	f7ff fc72 	bl	8006eea <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8007606:	2000      	movs	r0, #0
 8007608:	bd08      	pop	{r3, pc}

0800760a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800760a:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800760c:	2304      	movs	r3, #4
 800760e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007612:	2300      	movs	r3, #0
 8007614:	461a      	mov	r2, r3
 8007616:	4619      	mov	r1, r3
 8007618:	f7ff fc60 	bl	8006edc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800761c:	2000      	movs	r0, #0
 800761e:	bd08      	pop	{r3, pc}

08007620 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007620:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8007622:	2305      	movs	r3, #5
 8007624:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8007628:	2300      	movs	r3, #0
 800762a:	461a      	mov	r2, r3
 800762c:	4619      	mov	r1, r3
 800762e:	f7ff fc5c 	bl	8006eea <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8007632:	2000      	movs	r0, #0
 8007634:	bd08      	pop	{r3, pc}

08007636 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007636:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800763a:	b11b      	cbz	r3, 8007644 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800763c:	2000      	movs	r0, #0
 800763e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8007642:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8007644:	2002      	movs	r0, #2
  }
}
 8007646:	4770      	bx	lr

08007648 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8007648:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800764c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800764e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8007652:	b15b      	cbz	r3, 800766c <USBD_CDC_EP0_RxReady+0x24>
 8007654:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007658:	28ff      	cmp	r0, #255	; 0xff
 800765a:	d007      	beq.n	800766c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8007662:	4621      	mov	r1, r4
 8007664:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8007666:	23ff      	movs	r3, #255	; 0xff
 8007668:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800766c:	2000      	movs	r0, #0
 800766e:	bd10      	pop	{r4, pc}

08007670 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007670:	2343      	movs	r3, #67	; 0x43
 8007672:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8007674:	4800      	ldr	r0, [pc, #0]	; (8007678 <USBD_CDC_GetFSCfgDesc+0x8>)
 8007676:	4770      	bx	lr
 8007678:	200004b8 	.word	0x200004b8

0800767c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800767c:	2343      	movs	r3, #67	; 0x43
 800767e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8007680:	4800      	ldr	r0, [pc, #0]	; (8007684 <USBD_CDC_GetHSCfgDesc+0x8>)
 8007682:	4770      	bx	lr
 8007684:	200004fc 	.word	0x200004fc

08007688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007688:	2343      	movs	r3, #67	; 0x43
 800768a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800768c:	4800      	ldr	r0, [pc, #0]	; (8007690 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800768e:	4770      	bx	lr
 8007690:	2000054c 	.word	0x2000054c

08007694 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007694:	230a      	movs	r3, #10
 8007696:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8007698:	4800      	ldr	r0, [pc, #0]	; (800769c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800769a:	4770      	bx	lr
 800769c:	20000540 	.word	0x20000540

080076a0 <USBD_CDC_DataOut>:
{      
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80076a4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80076a8:	f7ff fc26 	bl	8006ef8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 80076ac:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80076b0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80076b4:	b14b      	cbz	r3, 80076ca <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076b6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80076ba:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80076c4:	4798      	blx	r3
    return USBD_OK;
 80076c6:	2000      	movs	r0, #0
 80076c8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80076ca:	2002      	movs	r0, #2
}
 80076cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080076d0 <USBD_CDC_Setup>:
{
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d2:	780f      	ldrb	r7, [r1, #0]
 80076d4:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80076d8:	4606      	mov	r6, r0
 80076da:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076dc:	d023      	beq.n	8007726 <USBD_CDC_Setup+0x56>
 80076de:	2b20      	cmp	r3, #32
 80076e0:	d119      	bne.n	8007716 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80076e2:	88ca      	ldrh	r2, [r1, #6]
 80076e4:	784b      	ldrb	r3, [r1, #1]
 80076e6:	b1c2      	cbz	r2, 800771a <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80076e8:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80076ea:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80076ee:	d50b      	bpl.n	8007708 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076f0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80076f4:	4618      	mov	r0, r3
 80076f6:	688f      	ldr	r7, [r1, #8]
 80076f8:	4629      	mov	r1, r5
 80076fa:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80076fc:	88e2      	ldrh	r2, [r4, #6]
 80076fe:	4629      	mov	r1, r5
 8007700:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8007702:	f7ff ff56 	bl	80075b2 <USBD_CtlSendData>
      break;
 8007706:	e006      	b.n	8007716 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8007708:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800770c:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8007710:	4629      	mov	r1, r5
 8007712:	f7ff ff63 	bl	80075dc <USBD_CtlPrepareRx>
}
 8007716:	2000      	movs	r0, #0
 8007718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800771a:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800771e:	6884      	ldr	r4, [r0, #8]
 8007720:	4618      	mov	r0, r3
 8007722:	47a0      	blx	r4
 8007724:	e7f7      	b.n	8007716 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8007726:	784b      	ldrb	r3, [r1, #1]
 8007728:	2b0a      	cmp	r3, #10
 800772a:	d1f4      	bne.n	8007716 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 800772c:	2201      	movs	r2, #1
 800772e:	4901      	ldr	r1, [pc, #4]	; (8007734 <USBD_CDC_Setup+0x64>)
 8007730:	e7e7      	b.n	8007702 <USBD_CDC_Setup+0x32>
 8007732:	bf00      	nop
 8007734:	200009c9 	.word	0x200009c9

08007738 <USBD_CDC_DeInit>:
{
 8007738:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800773a:	2181      	movs	r1, #129	; 0x81
{
 800773c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800773e:	f7ff fb9e 	bl	8006e7e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8007742:	2101      	movs	r1, #1
 8007744:	4620      	mov	r0, r4
 8007746:	f7ff fb9a 	bl	8006e7e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800774a:	2182      	movs	r1, #130	; 0x82
 800774c:	4620      	mov	r0, r4
 800774e:	f7ff fb96 	bl	8006e7e <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8007752:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8007756:	b153      	cbz	r3, 800776e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007758:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007760:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8007764:	f000 f898 	bl	8007898 <free>
    pdev->pClassData = NULL;
 8007768:	2300      	movs	r3, #0
 800776a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800776e:	2000      	movs	r0, #0
 8007770:	bd10      	pop	{r4, pc}

08007772 <USBD_CDC_Init>:
{
 8007772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007774:	7c03      	ldrb	r3, [r0, #16]
{
 8007776:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007778:	bb7b      	cbnz	r3, 80077da <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800777a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800777e:	2202      	movs	r2, #2
 8007780:	2181      	movs	r1, #129	; 0x81
 8007782:	f7ff fb72 	bl	8006e6a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8007786:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800778a:	2202      	movs	r2, #2
 800778c:	2101      	movs	r1, #1
 800778e:	4620      	mov	r0, r4
 8007790:	f7ff fb6b 	bl	8006e6a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8007794:	2308      	movs	r3, #8
 8007796:	2203      	movs	r2, #3
 8007798:	2182      	movs	r1, #130	; 0x82
 800779a:	4620      	mov	r0, r4
 800779c:	f7ff fb65 	bl	8006e6a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80077a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077a4:	f000 f870 	bl	8007888 <malloc>
 80077a8:	4606      	mov	r6, r0
 80077aa:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80077ae:	b320      	cbz	r0, 80077fa <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80077b0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80077b8:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80077ba:	2500      	movs	r5, #0
 80077bc:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80077c0:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80077c4:	b987      	cbnz	r7, 80077e8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80077c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ca:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80077ce:	2101      	movs	r1, #1
 80077d0:	4620      	mov	r0, r4
 80077d2:	f7ff fb8a 	bl	8006eea <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80077d6:	4638      	mov	r0, r7
 80077d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80077da:	2340      	movs	r3, #64	; 0x40
 80077dc:	2202      	movs	r2, #2
 80077de:	2181      	movs	r1, #129	; 0x81
 80077e0:	f7ff fb43 	bl	8006e6a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80077e4:	2340      	movs	r3, #64	; 0x40
 80077e6:	e7d0      	b.n	800778a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80077e8:	2340      	movs	r3, #64	; 0x40
 80077ea:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80077ee:	2101      	movs	r1, #1
 80077f0:	4620      	mov	r0, r4
 80077f2:	f7ff fb7a 	bl	8006eea <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80077f6:	4628      	mov	r0, r5
 80077f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80077fa:	2001      	movs	r0, #1
}
 80077fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077fe <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80077fe:	b119      	cbz	r1, 8007808 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8007800:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8007804:	2000      	movs	r0, #0
 8007806:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8007808:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800780a:	4770      	bx	lr

0800780c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800780c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8007810:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8007812:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8007816:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800781a:	4770      	bx	lr

0800781c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800781c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8007820:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8007822:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8007826:	4770      	bx	lr

08007828 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007828:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800782c:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 800782e:	b172      	cbz	r2, 800784e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8007830:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8007834:	2301      	movs	r3, #1
 8007836:	b964      	cbnz	r4, 8007852 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8007838:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800783c:	2181      	movs	r1, #129	; 0x81
 800783e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8007842:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8007846:	f7ff fb49 	bl	8006edc <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800784a:	4620      	mov	r0, r4
 800784c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800784e:	2002      	movs	r0, #2
 8007850:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8007852:	4618      	mov	r0, r3
  }
}
 8007854:	bd10      	pop	{r4, pc}

08007856 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007856:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800785a:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800785c:	b162      	cbz	r2, 8007878 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800785e:	7c04      	ldrb	r4, [r0, #16]
 8007860:	b944      	cbnz	r4, 8007874 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007862:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007866:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800786a:	2101      	movs	r1, #1
 800786c:	f7ff fb3d 	bl	8006eea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007870:	2000      	movs	r0, #0
 8007872:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8007874:	2340      	movs	r3, #64	; 0x40
 8007876:	e7f6      	b.n	8007866 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8007878:	2002      	movs	r0, #2
  }
}
 800787a:	bd10      	pop	{r4, pc}

0800787c <__errno>:
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <__errno+0x8>)
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20000000 	.word	0x20000000

08007888 <malloc>:
 8007888:	4b02      	ldr	r3, [pc, #8]	; (8007894 <malloc+0xc>)
 800788a:	4601      	mov	r1, r0
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	f000 b80b 	b.w	80078a8 <_malloc_r>
 8007892:	bf00      	nop
 8007894:	20000000 	.word	0x20000000

08007898 <free>:
 8007898:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <free+0xc>)
 800789a:	4601      	mov	r1, r0
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	f000 bcc7 	b.w	8008230 <_free_r>
 80078a2:	bf00      	nop
 80078a4:	20000000 	.word	0x20000000

080078a8 <_malloc_r>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	f101 060b 	add.w	r6, r1, #11
 80078b0:	2e16      	cmp	r6, #22
 80078b2:	b083      	sub	sp, #12
 80078b4:	4605      	mov	r5, r0
 80078b6:	f240 809e 	bls.w	80079f6 <_malloc_r+0x14e>
 80078ba:	f036 0607 	bics.w	r6, r6, #7
 80078be:	f100 80bd 	bmi.w	8007a3c <_malloc_r+0x194>
 80078c2:	42b1      	cmp	r1, r6
 80078c4:	f200 80ba 	bhi.w	8007a3c <_malloc_r+0x194>
 80078c8:	f000 fa9e 	bl	8007e08 <__malloc_lock>
 80078cc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 80078d0:	f0c0 8293 	bcc.w	8007dfa <_malloc_r+0x552>
 80078d4:	0a73      	lsrs	r3, r6, #9
 80078d6:	f000 80b8 	beq.w	8007a4a <_malloc_r+0x1a2>
 80078da:	2b04      	cmp	r3, #4
 80078dc:	f200 8179 	bhi.w	8007bd2 <_malloc_r+0x32a>
 80078e0:	09b3      	lsrs	r3, r6, #6
 80078e2:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80078e6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 80078ea:	00c3      	lsls	r3, r0, #3
 80078ec:	4fbf      	ldr	r7, [pc, #764]	; (8007bec <_malloc_r+0x344>)
 80078ee:	443b      	add	r3, r7
 80078f0:	f1a3 0108 	sub.w	r1, r3, #8
 80078f4:	685c      	ldr	r4, [r3, #4]
 80078f6:	42a1      	cmp	r1, r4
 80078f8:	d106      	bne.n	8007908 <_malloc_r+0x60>
 80078fa:	e00c      	b.n	8007916 <_malloc_r+0x6e>
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	f280 80aa 	bge.w	8007a56 <_malloc_r+0x1ae>
 8007902:	68e4      	ldr	r4, [r4, #12]
 8007904:	42a1      	cmp	r1, r4
 8007906:	d006      	beq.n	8007916 <_malloc_r+0x6e>
 8007908:	6863      	ldr	r3, [r4, #4]
 800790a:	f023 0303 	bic.w	r3, r3, #3
 800790e:	1b9a      	subs	r2, r3, r6
 8007910:	2a0f      	cmp	r2, #15
 8007912:	ddf3      	ble.n	80078fc <_malloc_r+0x54>
 8007914:	4670      	mov	r0, lr
 8007916:	693c      	ldr	r4, [r7, #16]
 8007918:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 8007c00 <_malloc_r+0x358>
 800791c:	4574      	cmp	r4, lr
 800791e:	f000 81ab 	beq.w	8007c78 <_malloc_r+0x3d0>
 8007922:	6863      	ldr	r3, [r4, #4]
 8007924:	f023 0303 	bic.w	r3, r3, #3
 8007928:	1b9a      	subs	r2, r3, r6
 800792a:	2a0f      	cmp	r2, #15
 800792c:	f300 8190 	bgt.w	8007c50 <_malloc_r+0x3a8>
 8007930:	2a00      	cmp	r2, #0
 8007932:	f8c7 e014 	str.w	lr, [r7, #20]
 8007936:	f8c7 e010 	str.w	lr, [r7, #16]
 800793a:	f280 809d 	bge.w	8007a78 <_malloc_r+0x1d0>
 800793e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007942:	f080 8161 	bcs.w	8007c08 <_malloc_r+0x360>
 8007946:	08db      	lsrs	r3, r3, #3
 8007948:	f103 0c01 	add.w	ip, r3, #1
 800794c:	1099      	asrs	r1, r3, #2
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 8007954:	f8c4 8008 	str.w	r8, [r4, #8]
 8007958:	2301      	movs	r3, #1
 800795a:	408b      	lsls	r3, r1
 800795c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 8007960:	4313      	orrs	r3, r2
 8007962:	3908      	subs	r1, #8
 8007964:	60e1      	str	r1, [r4, #12]
 8007966:	607b      	str	r3, [r7, #4]
 8007968:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800796c:	f8c8 400c 	str.w	r4, [r8, #12]
 8007970:	1082      	asrs	r2, r0, #2
 8007972:	2401      	movs	r4, #1
 8007974:	4094      	lsls	r4, r2
 8007976:	429c      	cmp	r4, r3
 8007978:	f200 808b 	bhi.w	8007a92 <_malloc_r+0x1ea>
 800797c:	421c      	tst	r4, r3
 800797e:	d106      	bne.n	800798e <_malloc_r+0xe6>
 8007980:	f020 0003 	bic.w	r0, r0, #3
 8007984:	0064      	lsls	r4, r4, #1
 8007986:	421c      	tst	r4, r3
 8007988:	f100 0004 	add.w	r0, r0, #4
 800798c:	d0fa      	beq.n	8007984 <_malloc_r+0xdc>
 800798e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8007992:	46cc      	mov	ip, r9
 8007994:	4680      	mov	r8, r0
 8007996:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800799a:	459c      	cmp	ip, r3
 800799c:	d107      	bne.n	80079ae <_malloc_r+0x106>
 800799e:	e16d      	b.n	8007c7c <_malloc_r+0x3d4>
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	f280 817b 	bge.w	8007c9c <_malloc_r+0x3f4>
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	459c      	cmp	ip, r3
 80079aa:	f000 8167 	beq.w	8007c7c <_malloc_r+0x3d4>
 80079ae:	6859      	ldr	r1, [r3, #4]
 80079b0:	f021 0103 	bic.w	r1, r1, #3
 80079b4:	1b8a      	subs	r2, r1, r6
 80079b6:	2a0f      	cmp	r2, #15
 80079b8:	ddf2      	ble.n	80079a0 <_malloc_r+0xf8>
 80079ba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80079be:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	199c      	adds	r4, r3, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	f046 0601 	orr.w	r6, r6, #1
 80079cc:	f042 0501 	orr.w	r5, r2, #1
 80079d0:	605e      	str	r6, [r3, #4]
 80079d2:	f8c8 c00c 	str.w	ip, [r8, #12]
 80079d6:	f8cc 8008 	str.w	r8, [ip, #8]
 80079da:	617c      	str	r4, [r7, #20]
 80079dc:	613c      	str	r4, [r7, #16]
 80079de:	f8c4 e00c 	str.w	lr, [r4, #12]
 80079e2:	f8c4 e008 	str.w	lr, [r4, #8]
 80079e6:	6065      	str	r5, [r4, #4]
 80079e8:	505a      	str	r2, [r3, r1]
 80079ea:	f000 fa0f 	bl	8007e0c <__malloc_unlock>
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	f103 0408 	add.w	r4, r3, #8
 80079f4:	e01e      	b.n	8007a34 <_malloc_r+0x18c>
 80079f6:	2910      	cmp	r1, #16
 80079f8:	d820      	bhi.n	8007a3c <_malloc_r+0x194>
 80079fa:	f000 fa05 	bl	8007e08 <__malloc_lock>
 80079fe:	2610      	movs	r6, #16
 8007a00:	2318      	movs	r3, #24
 8007a02:	2002      	movs	r0, #2
 8007a04:	4f79      	ldr	r7, [pc, #484]	; (8007bec <_malloc_r+0x344>)
 8007a06:	443b      	add	r3, r7
 8007a08:	f1a3 0208 	sub.w	r2, r3, #8
 8007a0c:	685c      	ldr	r4, [r3, #4]
 8007a0e:	4294      	cmp	r4, r2
 8007a10:	f000 813d 	beq.w	8007c8e <_malloc_r+0x3e6>
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	68e1      	ldr	r1, [r4, #12]
 8007a18:	68a6      	ldr	r6, [r4, #8]
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	4423      	add	r3, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	60f1      	str	r1, [r6, #12]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	608e      	str	r6, [r1, #8]
 8007a2c:	605a      	str	r2, [r3, #4]
 8007a2e:	f000 f9ed 	bl	8007e0c <__malloc_unlock>
 8007a32:	3408      	adds	r4, #8
 8007a34:	4620      	mov	r0, r4
 8007a36:	b003      	add	sp, #12
 8007a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3c:	2400      	movs	r4, #0
 8007a3e:	230c      	movs	r3, #12
 8007a40:	4620      	mov	r0, r4
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	b003      	add	sp, #12
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	2040      	movs	r0, #64	; 0x40
 8007a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a50:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8007a54:	e74a      	b.n	80078ec <_malloc_r+0x44>
 8007a56:	4423      	add	r3, r4
 8007a58:	68e1      	ldr	r1, [r4, #12]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	68a6      	ldr	r6, [r4, #8]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	60f1      	str	r1, [r6, #12]
 8007a64:	4628      	mov	r0, r5
 8007a66:	608e      	str	r6, [r1, #8]
 8007a68:	605a      	str	r2, [r3, #4]
 8007a6a:	f000 f9cf 	bl	8007e0c <__malloc_unlock>
 8007a6e:	3408      	adds	r4, #8
 8007a70:	4620      	mov	r0, r4
 8007a72:	b003      	add	sp, #12
 8007a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a78:	4423      	add	r3, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	605a      	str	r2, [r3, #4]
 8007a84:	f000 f9c2 	bl	8007e0c <__malloc_unlock>
 8007a88:	3408      	adds	r4, #8
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	b003      	add	sp, #12
 8007a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a92:	68bc      	ldr	r4, [r7, #8]
 8007a94:	6863      	ldr	r3, [r4, #4]
 8007a96:	f023 0803 	bic.w	r8, r3, #3
 8007a9a:	45b0      	cmp	r8, r6
 8007a9c:	d304      	bcc.n	8007aa8 <_malloc_r+0x200>
 8007a9e:	eba8 0306 	sub.w	r3, r8, r6
 8007aa2:	2b0f      	cmp	r3, #15
 8007aa4:	f300 8085 	bgt.w	8007bb2 <_malloc_r+0x30a>
 8007aa8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8007c04 <_malloc_r+0x35c>
 8007aac:	4b50      	ldr	r3, [pc, #320]	; (8007bf0 <_malloc_r+0x348>)
 8007aae:	f8d9 2000 	ldr.w	r2, [r9]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3201      	adds	r2, #1
 8007ab6:	4433      	add	r3, r6
 8007ab8:	eb04 0a08 	add.w	sl, r4, r8
 8007abc:	f000 8155 	beq.w	8007d6a <_malloc_r+0x4c2>
 8007ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac4:	330f      	adds	r3, #15
 8007ac6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 8007aca:	f02b 0b0f 	bic.w	fp, fp, #15
 8007ace:	4659      	mov	r1, fp
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 fb4b 	bl	800816c <_sbrk_r>
 8007ad6:	1c41      	adds	r1, r0, #1
 8007ad8:	4602      	mov	r2, r0
 8007ada:	f000 80fc 	beq.w	8007cd6 <_malloc_r+0x42e>
 8007ade:	4582      	cmp	sl, r0
 8007ae0:	f200 80f7 	bhi.w	8007cd2 <_malloc_r+0x42a>
 8007ae4:	4b43      	ldr	r3, [pc, #268]	; (8007bf4 <_malloc_r+0x34c>)
 8007ae6:	6819      	ldr	r1, [r3, #0]
 8007ae8:	4459      	add	r1, fp
 8007aea:	6019      	str	r1, [r3, #0]
 8007aec:	f000 814d 	beq.w	8007d8a <_malloc_r+0x4e2>
 8007af0:	f8d9 0000 	ldr.w	r0, [r9]
 8007af4:	3001      	adds	r0, #1
 8007af6:	bf1b      	ittet	ne
 8007af8:	eba2 0a0a 	subne.w	sl, r2, sl
 8007afc:	4451      	addne	r1, sl
 8007afe:	f8c9 2000 	streq.w	r2, [r9]
 8007b02:	6019      	strne	r1, [r3, #0]
 8007b04:	f012 0107 	ands.w	r1, r2, #7
 8007b08:	f000 8115 	beq.w	8007d36 <_malloc_r+0x48e>
 8007b0c:	f1c1 0008 	rsb	r0, r1, #8
 8007b10:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8007b14:	4402      	add	r2, r0
 8007b16:	3108      	adds	r1, #8
 8007b18:	eb02 090b 	add.w	r9, r2, fp
 8007b1c:	f3c9 090b 	ubfx	r9, r9, #0, #12
 8007b20:	eba1 0909 	sub.w	r9, r1, r9
 8007b24:	4649      	mov	r1, r9
 8007b26:	4628      	mov	r0, r5
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	9200      	str	r2, [sp, #0]
 8007b2c:	f000 fb1e 	bl	800816c <_sbrk_r>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007b36:	f000 8143 	beq.w	8007dc0 <_malloc_r+0x518>
 8007b3a:	1a80      	subs	r0, r0, r2
 8007b3c:	4448      	add	r0, r9
 8007b3e:	f040 0001 	orr.w	r0, r0, #1
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	60ba      	str	r2, [r7, #8]
 8007b46:	4449      	add	r1, r9
 8007b48:	42bc      	cmp	r4, r7
 8007b4a:	6050      	str	r0, [r2, #4]
 8007b4c:	6019      	str	r1, [r3, #0]
 8007b4e:	d017      	beq.n	8007b80 <_malloc_r+0x2d8>
 8007b50:	f1b8 0f0f 	cmp.w	r8, #15
 8007b54:	f240 80fb 	bls.w	8007d4e <_malloc_r+0x4a6>
 8007b58:	6860      	ldr	r0, [r4, #4]
 8007b5a:	f1a8 020c 	sub.w	r2, r8, #12
 8007b5e:	f022 0207 	bic.w	r2, r2, #7
 8007b62:	eb04 0e02 	add.w	lr, r4, r2
 8007b66:	f000 0001 	and.w	r0, r0, #1
 8007b6a:	f04f 0c05 	mov.w	ip, #5
 8007b6e:	4310      	orrs	r0, r2
 8007b70:	2a0f      	cmp	r2, #15
 8007b72:	6060      	str	r0, [r4, #4]
 8007b74:	f8ce c004 	str.w	ip, [lr, #4]
 8007b78:	f8ce c008 	str.w	ip, [lr, #8]
 8007b7c:	f200 8117 	bhi.w	8007dae <_malloc_r+0x506>
 8007b80:	4b1d      	ldr	r3, [pc, #116]	; (8007bf8 <_malloc_r+0x350>)
 8007b82:	68bc      	ldr	r4, [r7, #8]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4291      	cmp	r1, r2
 8007b88:	bf88      	it	hi
 8007b8a:	6019      	strhi	r1, [r3, #0]
 8007b8c:	4b1b      	ldr	r3, [pc, #108]	; (8007bfc <_malloc_r+0x354>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	4291      	cmp	r1, r2
 8007b92:	6862      	ldr	r2, [r4, #4]
 8007b94:	bf88      	it	hi
 8007b96:	6019      	strhi	r1, [r3, #0]
 8007b98:	f022 0203 	bic.w	r2, r2, #3
 8007b9c:	4296      	cmp	r6, r2
 8007b9e:	eba2 0306 	sub.w	r3, r2, r6
 8007ba2:	d801      	bhi.n	8007ba8 <_malloc_r+0x300>
 8007ba4:	2b0f      	cmp	r3, #15
 8007ba6:	dc04      	bgt.n	8007bb2 <_malloc_r+0x30a>
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 f92f 	bl	8007e0c <__malloc_unlock>
 8007bae:	2400      	movs	r4, #0
 8007bb0:	e740      	b.n	8007a34 <_malloc_r+0x18c>
 8007bb2:	19a2      	adds	r2, r4, r6
 8007bb4:	f043 0301 	orr.w	r3, r3, #1
 8007bb8:	f046 0601 	orr.w	r6, r6, #1
 8007bbc:	6066      	str	r6, [r4, #4]
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	60ba      	str	r2, [r7, #8]
 8007bc2:	6053      	str	r3, [r2, #4]
 8007bc4:	f000 f922 	bl	8007e0c <__malloc_unlock>
 8007bc8:	3408      	adds	r4, #8
 8007bca:	4620      	mov	r0, r4
 8007bcc:	b003      	add	sp, #12
 8007bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd2:	2b14      	cmp	r3, #20
 8007bd4:	d971      	bls.n	8007cba <_malloc_r+0x412>
 8007bd6:	2b54      	cmp	r3, #84	; 0x54
 8007bd8:	f200 80a3 	bhi.w	8007d22 <_malloc_r+0x47a>
 8007bdc:	0b33      	lsrs	r3, r6, #12
 8007bde:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8007be2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 8007be6:	00c3      	lsls	r3, r0, #3
 8007be8:	e680      	b.n	80078ec <_malloc_r+0x44>
 8007bea:	bf00      	nop
 8007bec:	20000590 	.word	0x20000590
 8007bf0:	200009fc 	.word	0x200009fc
 8007bf4:	200009cc 	.word	0x200009cc
 8007bf8:	200009f4 	.word	0x200009f4
 8007bfc:	200009f8 	.word	0x200009f8
 8007c00:	20000598 	.word	0x20000598
 8007c04:	20000998 	.word	0x20000998
 8007c08:	0a5a      	lsrs	r2, r3, #9
 8007c0a:	2a04      	cmp	r2, #4
 8007c0c:	d95b      	bls.n	8007cc6 <_malloc_r+0x41e>
 8007c0e:	2a14      	cmp	r2, #20
 8007c10:	f200 80ae 	bhi.w	8007d70 <_malloc_r+0x4c8>
 8007c14:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8007c18:	00c9      	lsls	r1, r1, #3
 8007c1a:	325b      	adds	r2, #91	; 0x5b
 8007c1c:	eb07 0c01 	add.w	ip, r7, r1
 8007c20:	5879      	ldr	r1, [r7, r1]
 8007c22:	f1ac 0c08 	sub.w	ip, ip, #8
 8007c26:	458c      	cmp	ip, r1
 8007c28:	f000 8088 	beq.w	8007d3c <_malloc_r+0x494>
 8007c2c:	684a      	ldr	r2, [r1, #4]
 8007c2e:	f022 0203 	bic.w	r2, r2, #3
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d273      	bcs.n	8007d1e <_malloc_r+0x476>
 8007c36:	6889      	ldr	r1, [r1, #8]
 8007c38:	458c      	cmp	ip, r1
 8007c3a:	d1f7      	bne.n	8007c2c <_malloc_r+0x384>
 8007c3c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60e2      	str	r2, [r4, #12]
 8007c44:	f8c4 c008 	str.w	ip, [r4, #8]
 8007c48:	6094      	str	r4, [r2, #8]
 8007c4a:	f8cc 400c 	str.w	r4, [ip, #12]
 8007c4e:	e68f      	b.n	8007970 <_malloc_r+0xc8>
 8007c50:	19a1      	adds	r1, r4, r6
 8007c52:	f046 0c01 	orr.w	ip, r6, #1
 8007c56:	f042 0601 	orr.w	r6, r2, #1
 8007c5a:	f8c4 c004 	str.w	ip, [r4, #4]
 8007c5e:	4628      	mov	r0, r5
 8007c60:	6179      	str	r1, [r7, #20]
 8007c62:	6139      	str	r1, [r7, #16]
 8007c64:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007c68:	f8c1 e008 	str.w	lr, [r1, #8]
 8007c6c:	604e      	str	r6, [r1, #4]
 8007c6e:	50e2      	str	r2, [r4, r3]
 8007c70:	f000 f8cc 	bl	8007e0c <__malloc_unlock>
 8007c74:	3408      	adds	r4, #8
 8007c76:	e6dd      	b.n	8007a34 <_malloc_r+0x18c>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	e679      	b.n	8007970 <_malloc_r+0xc8>
 8007c7c:	f108 0801 	add.w	r8, r8, #1
 8007c80:	f018 0f03 	tst.w	r8, #3
 8007c84:	f10c 0c08 	add.w	ip, ip, #8
 8007c88:	f47f ae85 	bne.w	8007996 <_malloc_r+0xee>
 8007c8c:	e02d      	b.n	8007cea <_malloc_r+0x442>
 8007c8e:	68dc      	ldr	r4, [r3, #12]
 8007c90:	42a3      	cmp	r3, r4
 8007c92:	bf08      	it	eq
 8007c94:	3002      	addeq	r0, #2
 8007c96:	f43f ae3e 	beq.w	8007916 <_malloc_r+0x6e>
 8007c9a:	e6bb      	b.n	8007a14 <_malloc_r+0x16c>
 8007c9c:	4419      	add	r1, r3
 8007c9e:	461c      	mov	r4, r3
 8007ca0:	684a      	ldr	r2, [r1, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f854 6f08 	ldr.w	r6, [r4, #8]!
 8007ca8:	f042 0201 	orr.w	r2, r2, #1
 8007cac:	604a      	str	r2, [r1, #4]
 8007cae:	4628      	mov	r0, r5
 8007cb0:	60f3      	str	r3, [r6, #12]
 8007cb2:	609e      	str	r6, [r3, #8]
 8007cb4:	f000 f8aa 	bl	8007e0c <__malloc_unlock>
 8007cb8:	e6bc      	b.n	8007a34 <_malloc_r+0x18c>
 8007cba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8007cbe:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 8007cc2:	00c3      	lsls	r3, r0, #3
 8007cc4:	e612      	b.n	80078ec <_malloc_r+0x44>
 8007cc6:	099a      	lsrs	r2, r3, #6
 8007cc8:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8007ccc:	00c9      	lsls	r1, r1, #3
 8007cce:	3238      	adds	r2, #56	; 0x38
 8007cd0:	e7a4      	b.n	8007c1c <_malloc_r+0x374>
 8007cd2:	42bc      	cmp	r4, r7
 8007cd4:	d054      	beq.n	8007d80 <_malloc_r+0x4d8>
 8007cd6:	68bc      	ldr	r4, [r7, #8]
 8007cd8:	6862      	ldr	r2, [r4, #4]
 8007cda:	f022 0203 	bic.w	r2, r2, #3
 8007cde:	e75d      	b.n	8007b9c <_malloc_r+0x2f4>
 8007ce0:	f859 3908 	ldr.w	r3, [r9], #-8
 8007ce4:	4599      	cmp	r9, r3
 8007ce6:	f040 8086 	bne.w	8007df6 <_malloc_r+0x54e>
 8007cea:	f010 0f03 	tst.w	r0, #3
 8007cee:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007cf2:	d1f5      	bne.n	8007ce0 <_malloc_r+0x438>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	ea23 0304 	bic.w	r3, r3, r4
 8007cfa:	607b      	str	r3, [r7, #4]
 8007cfc:	0064      	lsls	r4, r4, #1
 8007cfe:	429c      	cmp	r4, r3
 8007d00:	f63f aec7 	bhi.w	8007a92 <_malloc_r+0x1ea>
 8007d04:	2c00      	cmp	r4, #0
 8007d06:	f43f aec4 	beq.w	8007a92 <_malloc_r+0x1ea>
 8007d0a:	421c      	tst	r4, r3
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	f47f ae3e 	bne.w	800798e <_malloc_r+0xe6>
 8007d12:	0064      	lsls	r4, r4, #1
 8007d14:	421c      	tst	r4, r3
 8007d16:	f100 0004 	add.w	r0, r0, #4
 8007d1a:	d0fa      	beq.n	8007d12 <_malloc_r+0x46a>
 8007d1c:	e637      	b.n	800798e <_malloc_r+0xe6>
 8007d1e:	468c      	mov	ip, r1
 8007d20:	e78c      	b.n	8007c3c <_malloc_r+0x394>
 8007d22:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007d26:	d815      	bhi.n	8007d54 <_malloc_r+0x4ac>
 8007d28:	0bf3      	lsrs	r3, r6, #15
 8007d2a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8007d2e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 8007d32:	00c3      	lsls	r3, r0, #3
 8007d34:	e5da      	b.n	80078ec <_malloc_r+0x44>
 8007d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d3a:	e6ed      	b.n	8007b18 <_malloc_r+0x270>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	1092      	asrs	r2, r2, #2
 8007d40:	2101      	movs	r1, #1
 8007d42:	fa01 f202 	lsl.w	r2, r1, r2
 8007d46:	4313      	orrs	r3, r2
 8007d48:	607b      	str	r3, [r7, #4]
 8007d4a:	4662      	mov	r2, ip
 8007d4c:	e779      	b.n	8007c42 <_malloc_r+0x39a>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	6053      	str	r3, [r2, #4]
 8007d52:	e729      	b.n	8007ba8 <_malloc_r+0x300>
 8007d54:	f240 5254 	movw	r2, #1364	; 0x554
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d822      	bhi.n	8007da2 <_malloc_r+0x4fa>
 8007d5c:	0cb3      	lsrs	r3, r6, #18
 8007d5e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8007d62:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 8007d66:	00c3      	lsls	r3, r0, #3
 8007d68:	e5c0      	b.n	80078ec <_malloc_r+0x44>
 8007d6a:	f103 0b10 	add.w	fp, r3, #16
 8007d6e:	e6ae      	b.n	8007ace <_malloc_r+0x226>
 8007d70:	2a54      	cmp	r2, #84	; 0x54
 8007d72:	d829      	bhi.n	8007dc8 <_malloc_r+0x520>
 8007d74:	0b1a      	lsrs	r2, r3, #12
 8007d76:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8007d7a:	00c9      	lsls	r1, r1, #3
 8007d7c:	326e      	adds	r2, #110	; 0x6e
 8007d7e:	e74d      	b.n	8007c1c <_malloc_r+0x374>
 8007d80:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <_malloc_r+0x55c>)
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	4459      	add	r1, fp
 8007d86:	6019      	str	r1, [r3, #0]
 8007d88:	e6b2      	b.n	8007af0 <_malloc_r+0x248>
 8007d8a:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f47f aeae 	bne.w	8007af0 <_malloc_r+0x248>
 8007d94:	eb08 030b 	add.w	r3, r8, fp
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	f043 0301 	orr.w	r3, r3, #1
 8007d9e:	6053      	str	r3, [r2, #4]
 8007da0:	e6ee      	b.n	8007b80 <_malloc_r+0x2d8>
 8007da2:	207f      	movs	r0, #127	; 0x7f
 8007da4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8007da8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8007dac:	e59e      	b.n	80078ec <_malloc_r+0x44>
 8007dae:	f104 0108 	add.w	r1, r4, #8
 8007db2:	4628      	mov	r0, r5
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	f000 fa3b 	bl	8008230 <_free_r>
 8007dba:	9b00      	ldr	r3, [sp, #0]
 8007dbc:	6819      	ldr	r1, [r3, #0]
 8007dbe:	e6df      	b.n	8007b80 <_malloc_r+0x2d8>
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f04f 0900 	mov.w	r9, #0
 8007dc6:	e6bc      	b.n	8007b42 <_malloc_r+0x29a>
 8007dc8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007dcc:	d805      	bhi.n	8007dda <_malloc_r+0x532>
 8007dce:	0bda      	lsrs	r2, r3, #15
 8007dd0:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8007dd4:	00c9      	lsls	r1, r1, #3
 8007dd6:	3277      	adds	r2, #119	; 0x77
 8007dd8:	e720      	b.n	8007c1c <_malloc_r+0x374>
 8007dda:	f240 5154 	movw	r1, #1364	; 0x554
 8007dde:	428a      	cmp	r2, r1
 8007de0:	d805      	bhi.n	8007dee <_malloc_r+0x546>
 8007de2:	0c9a      	lsrs	r2, r3, #18
 8007de4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8007de8:	00c9      	lsls	r1, r1, #3
 8007dea:	327c      	adds	r2, #124	; 0x7c
 8007dec:	e716      	b.n	8007c1c <_malloc_r+0x374>
 8007dee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8007df2:	227e      	movs	r2, #126	; 0x7e
 8007df4:	e712      	b.n	8007c1c <_malloc_r+0x374>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	e780      	b.n	8007cfc <_malloc_r+0x454>
 8007dfa:	08f0      	lsrs	r0, r6, #3
 8007dfc:	f106 0308 	add.w	r3, r6, #8
 8007e00:	e600      	b.n	8007a04 <_malloc_r+0x15c>
 8007e02:	bf00      	nop
 8007e04:	200009cc 	.word	0x200009cc

08007e08 <__malloc_lock>:
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop

08007e0c <__malloc_unlock>:
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop

08007e10 <realloc>:
 8007e10:	4b02      	ldr	r3, [pc, #8]	; (8007e1c <realloc+0xc>)
 8007e12:	460a      	mov	r2, r1
 8007e14:	4601      	mov	r1, r0
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	f000 b802 	b.w	8007e20 <_realloc_r>
 8007e1c:	20000000 	.word	0x20000000

08007e20 <_realloc_r>:
 8007e20:	2900      	cmp	r1, #0
 8007e22:	f000 8095 	beq.w	8007f50 <_realloc_r+0x130>
 8007e26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	4616      	mov	r6, r2
 8007e2e:	b083      	sub	sp, #12
 8007e30:	4680      	mov	r8, r0
 8007e32:	f106 070b 	add.w	r7, r6, #11
 8007e36:	f7ff ffe7 	bl	8007e08 <__malloc_lock>
 8007e3a:	f855 ec04 	ldr.w	lr, [r5, #-4]
 8007e3e:	2f16      	cmp	r7, #22
 8007e40:	f02e 0403 	bic.w	r4, lr, #3
 8007e44:	f1a5 0908 	sub.w	r9, r5, #8
 8007e48:	d83c      	bhi.n	8007ec4 <_realloc_r+0xa4>
 8007e4a:	2210      	movs	r2, #16
 8007e4c:	4617      	mov	r7, r2
 8007e4e:	42be      	cmp	r6, r7
 8007e50:	d83d      	bhi.n	8007ece <_realloc_r+0xae>
 8007e52:	4294      	cmp	r4, r2
 8007e54:	da43      	bge.n	8007ede <_realloc_r+0xbe>
 8007e56:	4bc4      	ldr	r3, [pc, #784]	; (8008168 <_realloc_r+0x348>)
 8007e58:	6899      	ldr	r1, [r3, #8]
 8007e5a:	eb09 0004 	add.w	r0, r9, r4
 8007e5e:	4288      	cmp	r0, r1
 8007e60:	f000 80b4 	beq.w	8007fcc <_realloc_r+0x1ac>
 8007e64:	6843      	ldr	r3, [r0, #4]
 8007e66:	f023 0101 	bic.w	r1, r3, #1
 8007e6a:	4401      	add	r1, r0
 8007e6c:	6849      	ldr	r1, [r1, #4]
 8007e6e:	07c9      	lsls	r1, r1, #31
 8007e70:	d54c      	bpl.n	8007f0c <_realloc_r+0xec>
 8007e72:	f01e 0f01 	tst.w	lr, #1
 8007e76:	f000 809b 	beq.w	8007fb0 <_realloc_r+0x190>
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	f7ff fd13 	bl	80078a8 <_malloc_r>
 8007e82:	4606      	mov	r6, r0
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d03a      	beq.n	8007efe <_realloc_r+0xde>
 8007e88:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007e8c:	f023 0301 	bic.w	r3, r3, #1
 8007e90:	444b      	add	r3, r9
 8007e92:	f1a0 0208 	sub.w	r2, r0, #8
 8007e96:	429a      	cmp	r2, r3
 8007e98:	f000 8121 	beq.w	80080de <_realloc_r+0x2be>
 8007e9c:	1f22      	subs	r2, r4, #4
 8007e9e:	2a24      	cmp	r2, #36	; 0x24
 8007ea0:	f200 8107 	bhi.w	80080b2 <_realloc_r+0x292>
 8007ea4:	2a13      	cmp	r2, #19
 8007ea6:	f200 80db 	bhi.w	8008060 <_realloc_r+0x240>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	462a      	mov	r2, r5
 8007eae:	6811      	ldr	r1, [r2, #0]
 8007eb0:	6019      	str	r1, [r3, #0]
 8007eb2:	6851      	ldr	r1, [r2, #4]
 8007eb4:	6059      	str	r1, [r3, #4]
 8007eb6:	6892      	ldr	r2, [r2, #8]
 8007eb8:	609a      	str	r2, [r3, #8]
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	f000 f9b7 	bl	8008230 <_free_r>
 8007ec2:	e01c      	b.n	8007efe <_realloc_r+0xde>
 8007ec4:	f027 0707 	bic.w	r7, r7, #7
 8007ec8:	2f00      	cmp	r7, #0
 8007eca:	463a      	mov	r2, r7
 8007ecc:	dabf      	bge.n	8007e4e <_realloc_r+0x2e>
 8007ece:	2600      	movs	r6, #0
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f8c8 3000 	str.w	r3, [r8]
 8007ed8:	b003      	add	sp, #12
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	462e      	mov	r6, r5
 8007ee0:	1be3      	subs	r3, r4, r7
 8007ee2:	2b0f      	cmp	r3, #15
 8007ee4:	d81e      	bhi.n	8007f24 <_realloc_r+0x104>
 8007ee6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	4323      	orrs	r3, r4
 8007ef0:	444c      	add	r4, r9
 8007ef2:	f8c9 3004 	str.w	r3, [r9, #4]
 8007ef6:	6863      	ldr	r3, [r4, #4]
 8007ef8:	f043 0301 	orr.w	r3, r3, #1
 8007efc:	6063      	str	r3, [r4, #4]
 8007efe:	4640      	mov	r0, r8
 8007f00:	f7ff ff84 	bl	8007e0c <__malloc_unlock>
 8007f04:	4630      	mov	r0, r6
 8007f06:	b003      	add	sp, #12
 8007f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0c:	f023 0303 	bic.w	r3, r3, #3
 8007f10:	18e1      	adds	r1, r4, r3
 8007f12:	4291      	cmp	r1, r2
 8007f14:	db1f      	blt.n	8007f56 <_realloc_r+0x136>
 8007f16:	68c3      	ldr	r3, [r0, #12]
 8007f18:	6882      	ldr	r2, [r0, #8]
 8007f1a:	462e      	mov	r6, r5
 8007f1c:	60d3      	str	r3, [r2, #12]
 8007f1e:	460c      	mov	r4, r1
 8007f20:	609a      	str	r2, [r3, #8]
 8007f22:	e7dd      	b.n	8007ee0 <_realloc_r+0xc0>
 8007f24:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007f28:	eb09 0107 	add.w	r1, r9, r7
 8007f2c:	f002 0201 	and.w	r2, r2, #1
 8007f30:	444c      	add	r4, r9
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	4317      	orrs	r7, r2
 8007f38:	f8c9 7004 	str.w	r7, [r9, #4]
 8007f3c:	604b      	str	r3, [r1, #4]
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	f043 0301 	orr.w	r3, r3, #1
 8007f44:	3108      	adds	r1, #8
 8007f46:	6063      	str	r3, [r4, #4]
 8007f48:	4640      	mov	r0, r8
 8007f4a:	f000 f971 	bl	8008230 <_free_r>
 8007f4e:	e7d6      	b.n	8007efe <_realloc_r+0xde>
 8007f50:	4611      	mov	r1, r2
 8007f52:	f7ff bca9 	b.w	80078a8 <_malloc_r>
 8007f56:	f01e 0f01 	tst.w	lr, #1
 8007f5a:	d18e      	bne.n	8007e7a <_realloc_r+0x5a>
 8007f5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8007f60:	eba9 0a01 	sub.w	sl, r9, r1
 8007f64:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007f68:	f021 0103 	bic.w	r1, r1, #3
 8007f6c:	440b      	add	r3, r1
 8007f6e:	4423      	add	r3, r4
 8007f70:	4293      	cmp	r3, r2
 8007f72:	db25      	blt.n	8007fc0 <_realloc_r+0x1a0>
 8007f74:	68c2      	ldr	r2, [r0, #12]
 8007f76:	6881      	ldr	r1, [r0, #8]
 8007f78:	4656      	mov	r6, sl
 8007f7a:	60ca      	str	r2, [r1, #12]
 8007f7c:	6091      	str	r1, [r2, #8]
 8007f7e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007f82:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8007f86:	1f22      	subs	r2, r4, #4
 8007f88:	2a24      	cmp	r2, #36	; 0x24
 8007f8a:	60c1      	str	r1, [r0, #12]
 8007f8c:	6088      	str	r0, [r1, #8]
 8007f8e:	f200 8094 	bhi.w	80080ba <_realloc_r+0x29a>
 8007f92:	2a13      	cmp	r2, #19
 8007f94:	d96f      	bls.n	8008076 <_realloc_r+0x256>
 8007f96:	6829      	ldr	r1, [r5, #0]
 8007f98:	f8ca 1008 	str.w	r1, [sl, #8]
 8007f9c:	6869      	ldr	r1, [r5, #4]
 8007f9e:	f8ca 100c 	str.w	r1, [sl, #12]
 8007fa2:	2a1b      	cmp	r2, #27
 8007fa4:	f200 80a2 	bhi.w	80080ec <_realloc_r+0x2cc>
 8007fa8:	3508      	adds	r5, #8
 8007faa:	f10a 0210 	add.w	r2, sl, #16
 8007fae:	e063      	b.n	8008078 <_realloc_r+0x258>
 8007fb0:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8007fb4:	eba9 0a03 	sub.w	sl, r9, r3
 8007fb8:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007fbc:	f021 0103 	bic.w	r1, r1, #3
 8007fc0:	1863      	adds	r3, r4, r1
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	f6ff af59 	blt.w	8007e7a <_realloc_r+0x5a>
 8007fc8:	4656      	mov	r6, sl
 8007fca:	e7d8      	b.n	8007f7e <_realloc_r+0x15e>
 8007fcc:	6841      	ldr	r1, [r0, #4]
 8007fce:	f021 0b03 	bic.w	fp, r1, #3
 8007fd2:	44a3      	add	fp, r4
 8007fd4:	f107 0010 	add.w	r0, r7, #16
 8007fd8:	4583      	cmp	fp, r0
 8007fda:	da56      	bge.n	800808a <_realloc_r+0x26a>
 8007fdc:	f01e 0f01 	tst.w	lr, #1
 8007fe0:	f47f af4b 	bne.w	8007e7a <_realloc_r+0x5a>
 8007fe4:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8007fe8:	eba9 0a01 	sub.w	sl, r9, r1
 8007fec:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007ff0:	f021 0103 	bic.w	r1, r1, #3
 8007ff4:	448b      	add	fp, r1
 8007ff6:	4558      	cmp	r0, fp
 8007ff8:	dce2      	bgt.n	8007fc0 <_realloc_r+0x1a0>
 8007ffa:	4656      	mov	r6, sl
 8007ffc:	f8da 100c 	ldr.w	r1, [sl, #12]
 8008000:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8008004:	1f22      	subs	r2, r4, #4
 8008006:	2a24      	cmp	r2, #36	; 0x24
 8008008:	60c1      	str	r1, [r0, #12]
 800800a:	6088      	str	r0, [r1, #8]
 800800c:	f200 808f 	bhi.w	800812e <_realloc_r+0x30e>
 8008010:	2a13      	cmp	r2, #19
 8008012:	f240 808a 	bls.w	800812a <_realloc_r+0x30a>
 8008016:	6829      	ldr	r1, [r5, #0]
 8008018:	f8ca 1008 	str.w	r1, [sl, #8]
 800801c:	6869      	ldr	r1, [r5, #4]
 800801e:	f8ca 100c 	str.w	r1, [sl, #12]
 8008022:	2a1b      	cmp	r2, #27
 8008024:	f200 808a 	bhi.w	800813c <_realloc_r+0x31c>
 8008028:	3508      	adds	r5, #8
 800802a:	f10a 0210 	add.w	r2, sl, #16
 800802e:	6829      	ldr	r1, [r5, #0]
 8008030:	6011      	str	r1, [r2, #0]
 8008032:	6869      	ldr	r1, [r5, #4]
 8008034:	6051      	str	r1, [r2, #4]
 8008036:	68a9      	ldr	r1, [r5, #8]
 8008038:	6091      	str	r1, [r2, #8]
 800803a:	eb0a 0107 	add.w	r1, sl, r7
 800803e:	ebab 0207 	sub.w	r2, fp, r7
 8008042:	f042 0201 	orr.w	r2, r2, #1
 8008046:	6099      	str	r1, [r3, #8]
 8008048:	604a      	str	r2, [r1, #4]
 800804a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	431f      	orrs	r7, r3
 8008054:	4640      	mov	r0, r8
 8008056:	f8ca 7004 	str.w	r7, [sl, #4]
 800805a:	f7ff fed7 	bl	8007e0c <__malloc_unlock>
 800805e:	e751      	b.n	8007f04 <_realloc_r+0xe4>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	6003      	str	r3, [r0, #0]
 8008064:	686b      	ldr	r3, [r5, #4]
 8008066:	6043      	str	r3, [r0, #4]
 8008068:	2a1b      	cmp	r2, #27
 800806a:	d82d      	bhi.n	80080c8 <_realloc_r+0x2a8>
 800806c:	f100 0308 	add.w	r3, r0, #8
 8008070:	f105 0208 	add.w	r2, r5, #8
 8008074:	e71b      	b.n	8007eae <_realloc_r+0x8e>
 8008076:	4632      	mov	r2, r6
 8008078:	6829      	ldr	r1, [r5, #0]
 800807a:	6011      	str	r1, [r2, #0]
 800807c:	6869      	ldr	r1, [r5, #4]
 800807e:	6051      	str	r1, [r2, #4]
 8008080:	68a9      	ldr	r1, [r5, #8]
 8008082:	6091      	str	r1, [r2, #8]
 8008084:	461c      	mov	r4, r3
 8008086:	46d1      	mov	r9, sl
 8008088:	e72a      	b.n	8007ee0 <_realloc_r+0xc0>
 800808a:	eb09 0107 	add.w	r1, r9, r7
 800808e:	ebab 0b07 	sub.w	fp, fp, r7
 8008092:	f04b 0201 	orr.w	r2, fp, #1
 8008096:	6099      	str	r1, [r3, #8]
 8008098:	604a      	str	r2, [r1, #4]
 800809a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	431f      	orrs	r7, r3
 80080a4:	4640      	mov	r0, r8
 80080a6:	f845 7c04 	str.w	r7, [r5, #-4]
 80080aa:	f7ff feaf 	bl	8007e0c <__malloc_unlock>
 80080ae:	462e      	mov	r6, r5
 80080b0:	e728      	b.n	8007f04 <_realloc_r+0xe4>
 80080b2:	4629      	mov	r1, r5
 80080b4:	f000 f9a2 	bl	80083fc <memmove>
 80080b8:	e6ff      	b.n	8007eba <_realloc_r+0x9a>
 80080ba:	4629      	mov	r1, r5
 80080bc:	4630      	mov	r0, r6
 80080be:	461c      	mov	r4, r3
 80080c0:	46d1      	mov	r9, sl
 80080c2:	f000 f99b 	bl	80083fc <memmove>
 80080c6:	e70b      	b.n	8007ee0 <_realloc_r+0xc0>
 80080c8:	68ab      	ldr	r3, [r5, #8]
 80080ca:	6083      	str	r3, [r0, #8]
 80080cc:	68eb      	ldr	r3, [r5, #12]
 80080ce:	60c3      	str	r3, [r0, #12]
 80080d0:	2a24      	cmp	r2, #36	; 0x24
 80080d2:	d017      	beq.n	8008104 <_realloc_r+0x2e4>
 80080d4:	f100 0310 	add.w	r3, r0, #16
 80080d8:	f105 0210 	add.w	r2, r5, #16
 80080dc:	e6e7      	b.n	8007eae <_realloc_r+0x8e>
 80080de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	441c      	add	r4, r3
 80080e8:	462e      	mov	r6, r5
 80080ea:	e6f9      	b.n	8007ee0 <_realloc_r+0xc0>
 80080ec:	68a9      	ldr	r1, [r5, #8]
 80080ee:	f8ca 1010 	str.w	r1, [sl, #16]
 80080f2:	68e9      	ldr	r1, [r5, #12]
 80080f4:	f8ca 1014 	str.w	r1, [sl, #20]
 80080f8:	2a24      	cmp	r2, #36	; 0x24
 80080fa:	d00c      	beq.n	8008116 <_realloc_r+0x2f6>
 80080fc:	3510      	adds	r5, #16
 80080fe:	f10a 0218 	add.w	r2, sl, #24
 8008102:	e7b9      	b.n	8008078 <_realloc_r+0x258>
 8008104:	692b      	ldr	r3, [r5, #16]
 8008106:	6103      	str	r3, [r0, #16]
 8008108:	696b      	ldr	r3, [r5, #20]
 800810a:	6143      	str	r3, [r0, #20]
 800810c:	f105 0218 	add.w	r2, r5, #24
 8008110:	f100 0318 	add.w	r3, r0, #24
 8008114:	e6cb      	b.n	8007eae <_realloc_r+0x8e>
 8008116:	692a      	ldr	r2, [r5, #16]
 8008118:	f8ca 2018 	str.w	r2, [sl, #24]
 800811c:	696a      	ldr	r2, [r5, #20]
 800811e:	f8ca 201c 	str.w	r2, [sl, #28]
 8008122:	3518      	adds	r5, #24
 8008124:	f10a 0220 	add.w	r2, sl, #32
 8008128:	e7a6      	b.n	8008078 <_realloc_r+0x258>
 800812a:	4632      	mov	r2, r6
 800812c:	e77f      	b.n	800802e <_realloc_r+0x20e>
 800812e:	4629      	mov	r1, r5
 8008130:	4630      	mov	r0, r6
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	f000 f962 	bl	80083fc <memmove>
 8008138:	9b01      	ldr	r3, [sp, #4]
 800813a:	e77e      	b.n	800803a <_realloc_r+0x21a>
 800813c:	68a9      	ldr	r1, [r5, #8]
 800813e:	f8ca 1010 	str.w	r1, [sl, #16]
 8008142:	68e9      	ldr	r1, [r5, #12]
 8008144:	f8ca 1014 	str.w	r1, [sl, #20]
 8008148:	2a24      	cmp	r2, #36	; 0x24
 800814a:	d003      	beq.n	8008154 <_realloc_r+0x334>
 800814c:	3510      	adds	r5, #16
 800814e:	f10a 0218 	add.w	r2, sl, #24
 8008152:	e76c      	b.n	800802e <_realloc_r+0x20e>
 8008154:	692a      	ldr	r2, [r5, #16]
 8008156:	f8ca 2018 	str.w	r2, [sl, #24]
 800815a:	696a      	ldr	r2, [r5, #20]
 800815c:	f8ca 201c 	str.w	r2, [sl, #28]
 8008160:	3518      	adds	r5, #24
 8008162:	f10a 0220 	add.w	r2, sl, #32
 8008166:	e762      	b.n	800802e <_realloc_r+0x20e>
 8008168:	20000590 	.word	0x20000590

0800816c <_sbrk_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4c07      	ldr	r4, [pc, #28]	; (800818c <_sbrk_r+0x20>)
 8008170:	2300      	movs	r3, #0
 8008172:	4605      	mov	r5, r0
 8008174:	4608      	mov	r0, r1
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	f7fe f800 	bl	800617c <_sbrk>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d000      	beq.n	8008182 <_sbrk_r+0x16>
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0fb      	beq.n	8008180 <_sbrk_r+0x14>
 8008188:	602b      	str	r3, [r5, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20001420 	.word	0x20001420

08008190 <_malloc_trim_r>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	4f24      	ldr	r7, [pc, #144]	; (8008224 <_malloc_trim_r+0x94>)
 8008194:	460c      	mov	r4, r1
 8008196:	4606      	mov	r6, r0
 8008198:	f7ff fe36 	bl	8007e08 <__malloc_lock>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	685d      	ldr	r5, [r3, #4]
 80081a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 80081a4:	310f      	adds	r1, #15
 80081a6:	f025 0503 	bic.w	r5, r5, #3
 80081aa:	4429      	add	r1, r5
 80081ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80081b0:	f021 010f 	bic.w	r1, r1, #15
 80081b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80081b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80081bc:	db07      	blt.n	80081ce <_malloc_trim_r+0x3e>
 80081be:	2100      	movs	r1, #0
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff ffd3 	bl	800816c <_sbrk_r>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	442b      	add	r3, r5
 80081ca:	4298      	cmp	r0, r3
 80081cc:	d004      	beq.n	80081d8 <_malloc_trim_r+0x48>
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7ff fe1c 	bl	8007e0c <__malloc_unlock>
 80081d4:	2000      	movs	r0, #0
 80081d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d8:	4261      	negs	r1, r4
 80081da:	4630      	mov	r0, r6
 80081dc:	f7ff ffc6 	bl	800816c <_sbrk_r>
 80081e0:	3001      	adds	r0, #1
 80081e2:	d00d      	beq.n	8008200 <_malloc_trim_r+0x70>
 80081e4:	4b10      	ldr	r3, [pc, #64]	; (8008228 <_malloc_trim_r+0x98>)
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	1b2d      	subs	r5, r5, r4
 80081ec:	f045 0501 	orr.w	r5, r5, #1
 80081f0:	4630      	mov	r0, r6
 80081f2:	1b09      	subs	r1, r1, r4
 80081f4:	6055      	str	r5, [r2, #4]
 80081f6:	6019      	str	r1, [r3, #0]
 80081f8:	f7ff fe08 	bl	8007e0c <__malloc_unlock>
 80081fc:	2001      	movs	r0, #1
 80081fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008200:	2100      	movs	r1, #0
 8008202:	4630      	mov	r0, r6
 8008204:	f7ff ffb2 	bl	800816c <_sbrk_r>
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	1a83      	subs	r3, r0, r2
 800820c:	2b0f      	cmp	r3, #15
 800820e:	ddde      	ble.n	80081ce <_malloc_trim_r+0x3e>
 8008210:	4c06      	ldr	r4, [pc, #24]	; (800822c <_malloc_trim_r+0x9c>)
 8008212:	4905      	ldr	r1, [pc, #20]	; (8008228 <_malloc_trim_r+0x98>)
 8008214:	6824      	ldr	r4, [r4, #0]
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	1b00      	subs	r0, r0, r4
 800821c:	6053      	str	r3, [r2, #4]
 800821e:	6008      	str	r0, [r1, #0]
 8008220:	e7d5      	b.n	80081ce <_malloc_trim_r+0x3e>
 8008222:	bf00      	nop
 8008224:	20000590 	.word	0x20000590
 8008228:	200009cc 	.word	0x200009cc
 800822c:	20000998 	.word	0x20000998

08008230 <_free_r>:
 8008230:	2900      	cmp	r1, #0
 8008232:	d044      	beq.n	80082be <_free_r+0x8e>
 8008234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008238:	460d      	mov	r5, r1
 800823a:	4680      	mov	r8, r0
 800823c:	f7ff fde4 	bl	8007e08 <__malloc_lock>
 8008240:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8008244:	4969      	ldr	r1, [pc, #420]	; (80083ec <_free_r+0x1bc>)
 8008246:	f027 0301 	bic.w	r3, r7, #1
 800824a:	f1a5 0408 	sub.w	r4, r5, #8
 800824e:	18e2      	adds	r2, r4, r3
 8008250:	688e      	ldr	r6, [r1, #8]
 8008252:	6850      	ldr	r0, [r2, #4]
 8008254:	42b2      	cmp	r2, r6
 8008256:	f020 0003 	bic.w	r0, r0, #3
 800825a:	d05e      	beq.n	800831a <_free_r+0xea>
 800825c:	07fe      	lsls	r6, r7, #31
 800825e:	6050      	str	r0, [r2, #4]
 8008260:	d40b      	bmi.n	800827a <_free_r+0x4a>
 8008262:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8008266:	1be4      	subs	r4, r4, r7
 8008268:	f101 0e08 	add.w	lr, r1, #8
 800826c:	68a5      	ldr	r5, [r4, #8]
 800826e:	4575      	cmp	r5, lr
 8008270:	443b      	add	r3, r7
 8008272:	d06d      	beq.n	8008350 <_free_r+0x120>
 8008274:	68e7      	ldr	r7, [r4, #12]
 8008276:	60ef      	str	r7, [r5, #12]
 8008278:	60bd      	str	r5, [r7, #8]
 800827a:	1815      	adds	r5, r2, r0
 800827c:	686d      	ldr	r5, [r5, #4]
 800827e:	07ed      	lsls	r5, r5, #31
 8008280:	d53e      	bpl.n	8008300 <_free_r+0xd0>
 8008282:	f043 0201 	orr.w	r2, r3, #1
 8008286:	6062      	str	r2, [r4, #4]
 8008288:	50e3      	str	r3, [r4, r3]
 800828a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800828e:	d217      	bcs.n	80082c0 <_free_r+0x90>
 8008290:	08db      	lsrs	r3, r3, #3
 8008292:	1c58      	adds	r0, r3, #1
 8008294:	109a      	asrs	r2, r3, #2
 8008296:	684d      	ldr	r5, [r1, #4]
 8008298:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 800829c:	60a7      	str	r7, [r4, #8]
 800829e:	2301      	movs	r3, #1
 80082a0:	4093      	lsls	r3, r2
 80082a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 80082a6:	432b      	orrs	r3, r5
 80082a8:	3a08      	subs	r2, #8
 80082aa:	60e2      	str	r2, [r4, #12]
 80082ac:	604b      	str	r3, [r1, #4]
 80082ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 80082b2:	60fc      	str	r4, [r7, #12]
 80082b4:	4640      	mov	r0, r8
 80082b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ba:	f7ff bda7 	b.w	8007e0c <__malloc_unlock>
 80082be:	4770      	bx	lr
 80082c0:	0a5a      	lsrs	r2, r3, #9
 80082c2:	2a04      	cmp	r2, #4
 80082c4:	d852      	bhi.n	800836c <_free_r+0x13c>
 80082c6:	099a      	lsrs	r2, r3, #6
 80082c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
 80082cc:	00ff      	lsls	r7, r7, #3
 80082ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
 80082d2:	19c8      	adds	r0, r1, r7
 80082d4:	59ca      	ldr	r2, [r1, r7]
 80082d6:	3808      	subs	r0, #8
 80082d8:	4290      	cmp	r0, r2
 80082da:	d04f      	beq.n	800837c <_free_r+0x14c>
 80082dc:	6851      	ldr	r1, [r2, #4]
 80082de:	f021 0103 	bic.w	r1, r1, #3
 80082e2:	428b      	cmp	r3, r1
 80082e4:	d232      	bcs.n	800834c <_free_r+0x11c>
 80082e6:	6892      	ldr	r2, [r2, #8]
 80082e8:	4290      	cmp	r0, r2
 80082ea:	d1f7      	bne.n	80082dc <_free_r+0xac>
 80082ec:	68c3      	ldr	r3, [r0, #12]
 80082ee:	60a0      	str	r0, [r4, #8]
 80082f0:	60e3      	str	r3, [r4, #12]
 80082f2:	609c      	str	r4, [r3, #8]
 80082f4:	60c4      	str	r4, [r0, #12]
 80082f6:	4640      	mov	r0, r8
 80082f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	f7ff bd86 	b.w	8007e0c <__malloc_unlock>
 8008300:	6895      	ldr	r5, [r2, #8]
 8008302:	4f3b      	ldr	r7, [pc, #236]	; (80083f0 <_free_r+0x1c0>)
 8008304:	42bd      	cmp	r5, r7
 8008306:	4403      	add	r3, r0
 8008308:	d040      	beq.n	800838c <_free_r+0x15c>
 800830a:	68d0      	ldr	r0, [r2, #12]
 800830c:	60e8      	str	r0, [r5, #12]
 800830e:	f043 0201 	orr.w	r2, r3, #1
 8008312:	6085      	str	r5, [r0, #8]
 8008314:	6062      	str	r2, [r4, #4]
 8008316:	50e3      	str	r3, [r4, r3]
 8008318:	e7b7      	b.n	800828a <_free_r+0x5a>
 800831a:	07ff      	lsls	r7, r7, #31
 800831c:	4403      	add	r3, r0
 800831e:	d407      	bmi.n	8008330 <_free_r+0x100>
 8008320:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8008324:	1aa4      	subs	r4, r4, r2
 8008326:	4413      	add	r3, r2
 8008328:	68a0      	ldr	r0, [r4, #8]
 800832a:	68e2      	ldr	r2, [r4, #12]
 800832c:	60c2      	str	r2, [r0, #12]
 800832e:	6090      	str	r0, [r2, #8]
 8008330:	4a30      	ldr	r2, [pc, #192]	; (80083f4 <_free_r+0x1c4>)
 8008332:	6812      	ldr	r2, [r2, #0]
 8008334:	f043 0001 	orr.w	r0, r3, #1
 8008338:	4293      	cmp	r3, r2
 800833a:	6060      	str	r0, [r4, #4]
 800833c:	608c      	str	r4, [r1, #8]
 800833e:	d3b9      	bcc.n	80082b4 <_free_r+0x84>
 8008340:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <_free_r+0x1c8>)
 8008342:	4640      	mov	r0, r8
 8008344:	6819      	ldr	r1, [r3, #0]
 8008346:	f7ff ff23 	bl	8008190 <_malloc_trim_r>
 800834a:	e7b3      	b.n	80082b4 <_free_r+0x84>
 800834c:	4610      	mov	r0, r2
 800834e:	e7cd      	b.n	80082ec <_free_r+0xbc>
 8008350:	1811      	adds	r1, r2, r0
 8008352:	6849      	ldr	r1, [r1, #4]
 8008354:	07c9      	lsls	r1, r1, #31
 8008356:	d444      	bmi.n	80083e2 <_free_r+0x1b2>
 8008358:	6891      	ldr	r1, [r2, #8]
 800835a:	68d2      	ldr	r2, [r2, #12]
 800835c:	60ca      	str	r2, [r1, #12]
 800835e:	4403      	add	r3, r0
 8008360:	f043 0001 	orr.w	r0, r3, #1
 8008364:	6091      	str	r1, [r2, #8]
 8008366:	6060      	str	r0, [r4, #4]
 8008368:	50e3      	str	r3, [r4, r3]
 800836a:	e7a3      	b.n	80082b4 <_free_r+0x84>
 800836c:	2a14      	cmp	r2, #20
 800836e:	d816      	bhi.n	800839e <_free_r+0x16e>
 8008370:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8008374:	00ff      	lsls	r7, r7, #3
 8008376:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800837a:	e7aa      	b.n	80082d2 <_free_r+0xa2>
 800837c:	10aa      	asrs	r2, r5, #2
 800837e:	2301      	movs	r3, #1
 8008380:	684d      	ldr	r5, [r1, #4]
 8008382:	4093      	lsls	r3, r2
 8008384:	432b      	orrs	r3, r5
 8008386:	604b      	str	r3, [r1, #4]
 8008388:	4603      	mov	r3, r0
 800838a:	e7b0      	b.n	80082ee <_free_r+0xbe>
 800838c:	f043 0201 	orr.w	r2, r3, #1
 8008390:	614c      	str	r4, [r1, #20]
 8008392:	610c      	str	r4, [r1, #16]
 8008394:	60e5      	str	r5, [r4, #12]
 8008396:	60a5      	str	r5, [r4, #8]
 8008398:	6062      	str	r2, [r4, #4]
 800839a:	50e3      	str	r3, [r4, r3]
 800839c:	e78a      	b.n	80082b4 <_free_r+0x84>
 800839e:	2a54      	cmp	r2, #84	; 0x54
 80083a0:	d806      	bhi.n	80083b0 <_free_r+0x180>
 80083a2:	0b1a      	lsrs	r2, r3, #12
 80083a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80083a8:	00ff      	lsls	r7, r7, #3
 80083aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80083ae:	e790      	b.n	80082d2 <_free_r+0xa2>
 80083b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80083b4:	d806      	bhi.n	80083c4 <_free_r+0x194>
 80083b6:	0bda      	lsrs	r2, r3, #15
 80083b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80083bc:	00ff      	lsls	r7, r7, #3
 80083be:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80083c2:	e786      	b.n	80082d2 <_free_r+0xa2>
 80083c4:	f240 5054 	movw	r0, #1364	; 0x554
 80083c8:	4282      	cmp	r2, r0
 80083ca:	d806      	bhi.n	80083da <_free_r+0x1aa>
 80083cc:	0c9a      	lsrs	r2, r3, #18
 80083ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 80083d2:	00ff      	lsls	r7, r7, #3
 80083d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 80083d8:	e77b      	b.n	80082d2 <_free_r+0xa2>
 80083da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 80083de:	257e      	movs	r5, #126	; 0x7e
 80083e0:	e777      	b.n	80082d2 <_free_r+0xa2>
 80083e2:	f043 0101 	orr.w	r1, r3, #1
 80083e6:	6061      	str	r1, [r4, #4]
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	e763      	b.n	80082b4 <_free_r+0x84>
 80083ec:	20000590 	.word	0x20000590
 80083f0:	20000598 	.word	0x20000598
 80083f4:	2000099c 	.word	0x2000099c
 80083f8:	200009fc 	.word	0x200009fc

080083fc <memmove>:
 80083fc:	4288      	cmp	r0, r1
 80083fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008400:	d90d      	bls.n	800841e <memmove+0x22>
 8008402:	188b      	adds	r3, r1, r2
 8008404:	4298      	cmp	r0, r3
 8008406:	d20a      	bcs.n	800841e <memmove+0x22>
 8008408:	1884      	adds	r4, r0, r2
 800840a:	2a00      	cmp	r2, #0
 800840c:	d051      	beq.n	80084b2 <memmove+0xb6>
 800840e:	4622      	mov	r2, r4
 8008410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008414:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008418:	4299      	cmp	r1, r3
 800841a:	d1f9      	bne.n	8008410 <memmove+0x14>
 800841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841e:	2a0f      	cmp	r2, #15
 8008420:	d948      	bls.n	80084b4 <memmove+0xb8>
 8008422:	ea41 0300 	orr.w	r3, r1, r0
 8008426:	079b      	lsls	r3, r3, #30
 8008428:	d146      	bne.n	80084b8 <memmove+0xbc>
 800842a:	f100 0410 	add.w	r4, r0, #16
 800842e:	f101 0310 	add.w	r3, r1, #16
 8008432:	4615      	mov	r5, r2
 8008434:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8008438:	f844 6c10 	str.w	r6, [r4, #-16]
 800843c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8008440:	f844 6c0c 	str.w	r6, [r4, #-12]
 8008444:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8008448:	f844 6c08 	str.w	r6, [r4, #-8]
 800844c:	3d10      	subs	r5, #16
 800844e:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8008452:	f844 6c04 	str.w	r6, [r4, #-4]
 8008456:	2d0f      	cmp	r5, #15
 8008458:	f103 0310 	add.w	r3, r3, #16
 800845c:	f104 0410 	add.w	r4, r4, #16
 8008460:	d8e8      	bhi.n	8008434 <memmove+0x38>
 8008462:	f1a2 0310 	sub.w	r3, r2, #16
 8008466:	f023 030f 	bic.w	r3, r3, #15
 800846a:	f002 0e0f 	and.w	lr, r2, #15
 800846e:	3310      	adds	r3, #16
 8008470:	f1be 0f03 	cmp.w	lr, #3
 8008474:	4419      	add	r1, r3
 8008476:	4403      	add	r3, r0
 8008478:	d921      	bls.n	80084be <memmove+0xc2>
 800847a:	1f1e      	subs	r6, r3, #4
 800847c:	460d      	mov	r5, r1
 800847e:	4674      	mov	r4, lr
 8008480:	3c04      	subs	r4, #4
 8008482:	f855 7b04 	ldr.w	r7, [r5], #4
 8008486:	f846 7f04 	str.w	r7, [r6, #4]!
 800848a:	2c03      	cmp	r4, #3
 800848c:	d8f8      	bhi.n	8008480 <memmove+0x84>
 800848e:	f1ae 0404 	sub.w	r4, lr, #4
 8008492:	f024 0403 	bic.w	r4, r4, #3
 8008496:	3404      	adds	r4, #4
 8008498:	4421      	add	r1, r4
 800849a:	4423      	add	r3, r4
 800849c:	f002 0203 	and.w	r2, r2, #3
 80084a0:	b162      	cbz	r2, 80084bc <memmove+0xc0>
 80084a2:	3b01      	subs	r3, #1
 80084a4:	440a      	add	r2, r1
 80084a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ae:	428a      	cmp	r2, r1
 80084b0:	d1f9      	bne.n	80084a6 <memmove+0xaa>
 80084b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b4:	4603      	mov	r3, r0
 80084b6:	e7f3      	b.n	80084a0 <memmove+0xa4>
 80084b8:	4603      	mov	r3, r0
 80084ba:	e7f2      	b.n	80084a2 <memmove+0xa6>
 80084bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084be:	4672      	mov	r2, lr
 80084c0:	e7ee      	b.n	80084a0 <memmove+0xa4>
 80084c2:	bf00      	nop

080084c4 <_init>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	bf00      	nop
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr

080084d0 <_fini>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr
