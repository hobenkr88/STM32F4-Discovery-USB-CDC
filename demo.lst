
demo.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000194 l    d  .text	00000000 .text
08007494 l    d  .rodata	00000000 .rodata
08007504 l    d  .init_array	00000000 .init_array
0800750c l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
2000099c l    d  .bss	00000000 .bss
20001220 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 /tmp/ccuXfbie.o
080054f8 l       .text	00000000 LoopCopyDataInit
080054f0 l       .text	00000000 CopyDataInit
0800550c l       .text	00000000 LoopFillZerobss
08005506 l       .text	00000000 FillZerobss
08005538 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f4xx_hal.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim.c
08001168 l     F .text	00000060 TIM_OC1_SetConfig
080011c8 l     F .text	00000064 TIM_OC3_SetConfig
0800122c l     F .text	00000050 TIM_OC4_SetConfig
0800127c l     F .text	000000b0 TIM_SlaveTimer_SetConfig
08002770 l     F .text	00000010 TIM_DMAPeriodElapsedCplt
0800297c l     F .text	00000010 TIM_DMATriggerCplt
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim_ex.c
00000000 l    df *ABS*	00000000 stm32f4xx_ll_usb.c
080042ec l     F .text	00000034 USB_CoreReset
2000099c l     O .bss	00000004 debug.8417
00000000 l    df *ABS*	00000000 stm32f4xx_hal_dma.c
080074a4 l     O .rodata	00000008 flagBitshiftOffset.8481
00000000 l    df *ABS*	00000000 crtstuff.c
0800747c l     O .text	00000000 __EH_FRAME_BEGIN__
080052fc l     F .text	00000000 __do_global_dtors_aux
200009a0 l     O .bss	00000000 completed.9605
0800750c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08005320 l     F .text	00000000 frame_dummy
200009a4 l     O .bss	00000000 object.9610
08007508 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08005488 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 syscalls.c
200009bc l     O .bss	00000004 heap_end.7228
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 usbd_conf.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
08005d8e l     F .text	00000016 USBD_CtlError.constprop.0
200009c0 l     O .bss	00000001 cfgidx.9162
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_desc.c
00000000 l    df *ABS*	00000000 usb_device.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
08006250 l     F .text	00000012 USBD_CDC_DataIn
08006262 l     F .text	00000028 USBD_CDC_EP0_RxReady
0800628c l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08006298 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
080062a4 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
080062bc l     F .text	0000002e USBD_CDC_DataOut
080062ec l     F .text	00000068 USBD_CDC_Setup
08006354 l     F .text	0000003a USBD_CDC_DeInit
0800638e l     F .text	0000008c USBD_CDC_Init
200009c1 l     O .bss	00000001 ifalt.9157
2000052c l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_cdc_if.c
0800646a l     F .text	00000004 CDC_DeInit_FS
0800646e l     F .text	00000004 CDC_Control_FS
08006474 l     F .text	0000001c CDC_Receive_FS
08006490 l     F .text	00000028 CDC_Init_FS
00000000 l    df *ABS*	00000000 stm32f4xx_hal_pcd.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/6.1.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/6.1.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08007510 l       .fini_array	00000000 __fini_array_end
2000099c l       .bss	00000000 __bss_start__
20001220 l       .bss	00000000 __bss_end__
0800750c l       .fini_array	00000000 __fini_array_start
0800750c l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 __end__
08007504 l       .init_array	00000000 __preinit_array_end
08007504 l       .init_array	00000000 __init_array_start
08007504 l       .init_array	00000000 __preinit_array_start
08005538  w    F .text	00000002 RTC_Alarm_IRQHandler
08007494 g     O .rodata	00000010 APBAHBPrescTable
08005538  w    F .text	00000002 EXTI2_IRQHandler
080016d0 g     F .text	00000004 HAL_TIM_OC_Start_IT
080007f0 g     F .text	00000164 HAL_GPIO_DeInit
08002ee8 g     F .text	000000d4 HAL_TIM_PWM_ConfigChannel
080002e4 g     F .text	00000010 HAL_DBGMCU_EnableDBGStandbyMode
08006c0e g     F .text	0000004a HAL_PCD_EP_ClrStall
08005538  w    F .text	00000002 DebugMon_Handler
08005284 g     F .text	0000006a HAL_DMA_UnRegisterCallback
080059ae g     F .text	00000020 HAL_PCD_ResetCallback
08001370 g     F .text	00000020 HAL_TIM_Base_Start
08001390 g     F .text	0000002e HAL_TIM_Base_Stop
08001460 g     F .text	00000030 HAL_TIM_Base_Stop_DMA
080030d4  w    F .text	00000002 HAL_TIMEx_HallSensor_MspInit
08005538  w    F .text	00000002 SPI4_IRQHandler
08004270 g     F .text	00000036 USB_ActivateSetup
08003604 g     F .text	00000004 HAL_TIMEx_OCN_Stop_DMA
20000fec g     O .bss	00000224 hUsbDeviceFS
08004c08 g     F .text	00000130 HAL_DMA_Init
08001788 g     F .text	00000004 HAL_TIM_OC_Stop_IT
08006aa4 g     F .text	00000046 HAL_PCD_EP_Close
08002684 g     F .text	00000010 HAL_TIM_ConfigTI1Input
08002714 g     F .text	00000058 HAL_TIM_ReadCapturedValue
08002148 g     F .text	0000007e HAL_TIM_Encoder_Stop_DMA
08005a20 g     F .text	00000008 HAL_PCD_DisconnectCallback
08005b72 g     F .text	00000016 USBD_SetClassConfig
08000fc4 g     F .text	00000030 HAL_RCC_GetPCLK1Freq
0800035c g     F .text	0000006c HAL_NVIC_SetPriority
08005538  w    F .text	00000002 TIM1_CC_IRQHandler
08000ff4 g     F .text	00000030 HAL_RCC_GetPCLK2Freq
08005996 g     F .text	00000010 HAL_PCD_DataInStageCallback
08005538  w    F .text	00000002 DMA2_Stream5_IRQHandler
08005538  w    F .text	00000002 HardFault_Handler
08005538  w    F .text	00000002 DMA1_Stream5_IRQHandler
080071e8 g     F .text	00000002 __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08004260 g     F .text	00000008 USB_ClearInterrupts
08002b5c g     F .text	00000036 HAL_TIM_IC_Init
080058dc g     F .text	0000000e SysTick_Handler
08003684 g     F .text	00000004 HAL_TIMEx_OCN_Stop
2000057c g     O .data	00000010 USBD_Interface_fops_FS
08000960 g     F .text	00000008 HAL_GPIO_WritePin
08006444 g     F .text	00000026 USBD_CDC_ReceivePacket
08005538  w    F .text	00000002 PVD_IRQHandler
08005538  w    F .text	00000002 SDIO_IRQHandler
080059a6 g     F .text	00000008 HAL_PCD_SOFCallback
08002828 g     F .text	00000152 HAL_TIM_IRQHandler
08005538  w    F .text	00000002 TAMP_STAMP_IRQHandler
08007510 g       *ABS*	00000000 _sidata
08000fb8 g     F .text	0000000c HAL_RCC_GetHCLKFreq
08005538  w    F .text	00000002 PendSV_Handler
08005538  w    F .text	00000002 NMI_Handler
080003c8 g     F .text	00000018 HAL_NVIC_EnableIRQ
08007504 g       .init_array	00000000 __exidx_end
08005538  w    F .text	00000002 EXTI3_IRQHandler
08005d36 g     F .text	00000012 USBD_LL_Suspend
08000dd4  w    F .text	00000074 HAL_RCC_GetSysClockFreq
080032cc g     F .text	00000038 HAL_TIMEx_HallSensor_Stop_DMA
08006c58 g     F .text	0000000c __errno
08001334 g     F .text	0000003a HAL_TIM_Base_DeInit
08004dac g     F .text	0000005a HAL_DMA_Start
0800019c g     F .text	0000002c HAL_DeInit
08005da4 g     F .text	000001f4 USBD_StdDevReq
08003680 g     F .text	00000004 HAL_TIMEx_PWMN_Stop
080009a0 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08000194  w    F .text	00000002 HAL_MspInit
08003bcc g     F .text	0000008e USB_ActivateEndpoint
08005ad4 g     F .text	00000026 USBD_LL_IsStallEP
08005a88 g     F .text	0000000e USBD_LL_Start
080005a0  w    F .text	00000002 HAL_SYSTICK_Callback
08005538  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08005b68 g     F .text	0000000a USBD_Start
08000968 g     F .text	00000008 HAL_GPIO_TogglePin
08002000 g     F .text	00000148 HAL_TIM_Encoder_Start_DMA
2000121c g     O .bss	00000004 errno
08003dd4 g     F .text	000001bc USB_EPStartXfer
08007494 g       .text	00000000 _etext
2000099c g       .bss	00000000 _sbss
08000970 g     F .text	0000002a HAL_GPIO_LockPin
08001490  w    F .text	00000002 HAL_TIM_OC_MspInit
08003c5c g     F .text	000000c0 USB_ActivateDedicatedEndpoint
08003204 g     F .text	00000024 HAL_TIMEx_HallSensor_Start_IT
080029b0 g     F .text	00000006 HAL_TIM_PWM_GetState
080040e0 g     F .text	0000003a USB_EPSetStall
08000288 g     F .text	0000000c HAL_GetREVID
080044b0 g     F .text	00000044 USB_DriveVbus
08000a08  w    F .text	00000002 HAL_RCC_DeInit
08005538  w    F .text	00000002 I2C3_ER_IRQHandler
08003b84 g     F .text	00000010 USB_SetDevSpeed
08003978 g     F .text	0000000e USB_EnableGlobalInt
08004e08 g     F .text	00000082 HAL_DMA_Start_IT
20000430 g     O .data	00000004 __heap_limit
08005b5a g     F .text	0000000e USBD_RegisterClass
08001498 g     F .text	0000003a HAL_TIM_OC_DeInit
080005ac g     F .text	00000244 HAL_GPIO_Init
08005d30 g     F .text	00000006 USBD_LL_SetSpeed
08003b64 g     F .text	00000020 USB_FlushRxFifo
20000a34 g     O .bss	000003b8 hpcd_USB_OTG_FS
08000294 g     F .text	00000010 HAL_GetDEVID
08003560 g     F .text	000000a2 HAL_TIMEx_PWMN_Stop_DMA
08005a00 g     F .text	00000008 HAL_PCD_ResumeCallback
080021c8 g     F .text	000000e4 HAL_TIM_DMABurst_WriteStart
080038e8  w    F .text	00000002 HAL_TIMEx_CommutationCallback
08004a88 g     F .text	00000078 USB_DoPing
08005fc8 g     F .text	000000c6 USBD_StdEPReq
08001968  w    F .text	00000002 HAL_TIM_IC_MspDeInit
08005538  w    F .text	00000002 EXTI0_IRQHandler
080052f0 g     F .text	00000006 HAL_DMA_GetState
08005538  w    F .text	00000002 I2C2_EV_IRQHandler
08005d70 g     F .text	00000004 USBD_LL_IsoOUTIncomplete
08005538  w    F .text	00000002 DMA1_Stream2_IRQHandler
08006146 g     F .text	00000016 USBD_CtlSendStatus
08000244  w    F .text	0000001c HAL_Delay
08005538  w    F .text	00000002 FPU_IRQHandler
08005f98 g     F .text	00000030 USBD_StdItfReq
20000434 g     O .data	00000004 SystemCoreClock
08006b5c g     F .text	0000005a HAL_PCD_EP_Transmit
0800608e g     F .text	00000028 USBD_ParseSetupRequest
08003260 g     F .text	0000006c HAL_TIMEx_HallSensor_Start_DMA
080029b8 g     F .text	00000006 HAL_TIM_IC_GetState
08006c64 g     F .text	00000010 malloc
0800317c g     F .text	0000003a HAL_TIMEx_HallSensor_DeInit
08000550 g     F .text	0000001c HAL_NVIC_ClearPendingIRQ
080044f4 g     F .text	00000012 USB_GetHostSpeed
08005538  w    F .text	00000002 UsageFault_Handler
080029c8 g     F .text	00000006 HAL_TIM_Encoder_GetState
08002408 g     F .text	00000004 HAL_TIM_DMABurst_WriteStop
200009f4 g     O .bss	00000004 __malloc_top_pad
08005538  w    F .text	00000002 DMA2_Stream2_IRQHandler
080015cc g     F .text	00000004 HAL_TIM_OC_Start
08000954 g     F .text	0000000c HAL_GPIO_ReadPin
080018a8 g     F .text	000000b8 HAL_TIM_PWM_Stop_DMA
08002b94 g     F .text	00000048 HAL_TIM_OnePulse_Init
08005d54 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08005538  w    F .text	00000002 SPI1_IRQHandler
080004a8 g     F .text	00000010 HAL_NVIC_GetPriorityGrouping
080071ec g     F .text	00000024 _sbrk_r
08003334 g     F .text	00000078 HAL_TIMEx_PWMN_Start_IT
08002780  w    F .text	00000002 HAL_TIM_OC_DelayElapsedCallback
08005904 g     F .text	00000074 HAL_PCD_MspInit
080039cc g     F .text	00000174 USB_DevInit
08006bb6 g     F .text	00000058 HAL_PCD_EP_SetStall
08001eac g     F .text	00000054 HAL_TIM_Encoder_Stop
08002438 g     F .text	000000ca HAL_TIM_ConfigOCrefClear
08005538  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08005b30 g     F .text	0000002a USBD_Init
20001218 g     O .bss	00000004 uwTick
08005550 g     F .text	000000a8 SystemClock_Config
200009ec g     O .bss	00000004 __malloc_max_sbrked_mem
08000420 g     F .text	00000034 HAL_SYSTICK_Config
08007504 g       .init_array	00000000 __exidx_start
08005538  w    F .text	00000002 DMA2_Stream3_IRQHandler
08001144  w    F .text	00000002 HAL_RCC_CSSCallback
20000538 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080074ac g     O .rodata	00000004 _global_impure_ptr
080003fc g     F .text	00000024 HAL_NVIC_SystemReset
0800447c g     F .text	00000034 USB_ResetPort
08005394 g     F .text	00000050 __libc_init_array
08001494  w    F .text	00000002 HAL_TIM_OC_MspDeInit
08006136 g     F .text	00000010 USBD_CtlContinueRx
08006a48 g     F .text	0000005c HAL_PCD_EP_Open
080065ba g     F .text	0000046a HAL_PCD_IRQHandler
080016d4 g     F .text	000000b4 HAL_TIM_PWM_Stop_IT
20001210 g     O .bss	00000004 UserRxBufferFS
0800549c  w    F .text	0000004c _sbrk
08005538  w    F .text	00000002 USART6_IRQHandler
0800747c g     F .text	00000000 _init
200009f8 g     O .bss	0000003c htim3
08005a18 g     F .text	00000008 HAL_PCD_ConnectCallback
080031b8 g     F .text	0000001c HAL_TIMEx_HallSensor_Start
08005ab8 g     F .text	0000000e USBD_LL_StallEP
08000270  w    F .text	00000010 HAL_ResumeTick
08005360 g     F .text	00000034 __libc_fini_array
08001024  w    F .text	000000dc HAL_RCC_GetOscConfig
08001544  w    F .text	00000002 HAL_TIM_PWM_MspDeInit
08001f00 g     F .text	0000007e HAL_TIM_Encoder_Start_IT
20001220 g       .bss	00000000 _ebss
0800298c  w    F .text	00000002 HAL_TIM_ErrorCallback
08001c54  w    F .text	00000002 HAL_TIM_OnePulse_MspDeInit
080040c4 g     F .text	0000001c USB_ReadPacket
08003770 g     F .text	00000058 HAL_TIMEx_ConfigCommutationEvent_IT
080054e8  w    F .text	00000038 Reset_Handler
200004a4 g     O .data	00000043 USBD_CDC_CfgFSDesc
080041d0 g     F .text	00000018 USB_DevConnect
08005a08 g     F .text	00000008 HAL_PCD_ISOOUTIncompleteCallback
080029d0 g     F .text	000000e4 TIM_Base_SetConfig
0800196c g     F .text	0000003a HAL_TIM_IC_DeInit
08004200 g     F .text	00000008 USB_ReadInterrupts
08005a10 g     F .text	00000008 HAL_PCD_ISOINIncompleteCallback
08004d38 g     F .text	00000074 HAL_DMA_DeInit
080013c0 g     F .text	00000016 HAL_TIM_Base_Start_IT
20000454 g     O .data	00000012 USBD_FS_DeviceDesc
0800411c g     F .text	00000030 USB_EPClearStall
08005538  w    F .text	00000002 DMA2_Stream0_IRQHandler
080013d8 g     F .text	0000002a HAL_TIM_Base_Stop_IT
080001f4 g     F .text	00000034 HAL_Init
080036bc g     F .text	00000062 HAL_TIMEx_OnePulseN_Stop_IT
08006118 g     F .text	0000001e USBD_CtlPrepareRx
08005538  w    F .text	00000002 TIM4_IRQHandler
080002b4 g     F .text	00000010 HAL_DBGMCU_DisableDBGSleepMode
08001a00 g     F .text	00000068 HAL_TIM_IC_Start_IT
08001c50  w    F .text	00000002 HAL_TIM_OnePulse_MspInit
080002d4 g     F .text	00000010 HAL_DBGMCU_DisableDBGStopMode
00000000  w      *UND*	00000000 __deregister_frame_info
0800099c  w    F .text	00000002 HAL_GPIO_EXTI_Callback
0800615c g     F .text	00000016 USBD_CtlReceiveStatus
20001220 g       ._user_heap_stack	00000000 end
08005538  w    F .text	00000002 I2C1_EV_IRQHandler
08001c94 g     F .text	00000048 HAL_TIM_OnePulse_Start
08005538  w    F .text	00000002 DMA1_Stream6_IRQHandler
08005a96 g     F .text	00000014 USBD_LL_OpenEP
08004268 g     F .text	00000008 USB_GetMode
08000dbc g     F .text	0000000c HAL_RCC_EnableCSS
08005c54 g     F .text	0000009e USBD_LL_DataInStage
080015d0 g     F .text	00000070 HAL_TIM_PWM_Stop
08005a28 g     F .text	00000060 USBD_LL_Init
08004b00 g     F .text	00000108 USB_StopHost
08005538  w    F .text	00000002 DMA1_Stream1_IRQHandler
08004228 g     F .text	00000014 USB_ReadDevOutEPInterrupt
08006218 g     F .text	00000038 MX_USB_DEVICE_Init
2000046c g     O .data	00000038 USBD_CDC
08005b88 g     F .text	0000000e USBD_ClrClassConfig
0800641a g     F .text	0000000e USBD_CDC_RegisterInterface
080029a0 g     F .text	00000006 HAL_TIM_Base_GetState
080072b0 g     F .text	000001cc _free_r
080022ac g     F .text	000000e4 HAL_TIM_DMABurst_ReadStart
080058ec g     F .text	0000000c TIM3_IRQHandler
080058ea g     F .text	00000002 RCC_IRQHandler
080009b8 g     F .text	00000048 HAL_PCDEx_SetTxFiFo
08002c80 g     F .text	0000007c TIM_TI1_SetConfig
00000200 g       *ABS*	00000000 _Min_Heap_Size
08003228 g     F .text	00000038 HAL_TIMEx_HallSensor_Stop_IT
08005984 g     F .text	00000012 HAL_PCD_DataOutStageCallback
08005538 g       .text	00000002 Default_Handler
20000994 g     O .data	00000004 __malloc_sbrk_base
08006b4c g     F .text	00000010 HAL_PCD_EP_GetRxCount
08000260  w    F .text	00000010 HAL_SuspendTick
20001214 g     O .bss	00000004 UserTxBufferFS
08005d6c g     F .text	00000004 USBD_LL_IsoINIncomplete
08004e8c g     F .text	0000008e HAL_DMA_Abort
08005ac6 g     F .text	0000000e USBD_LL_ClearStallEP
0800414c g     F .text	00000064 USB_StopDevice
08005538  w    F .text	00000002 EXTI15_10_IRQHandler
080033b0 g     F .text	000000a8 HAL_TIMEx_PWMN_Stop_IT
080053e4 g     F .text	000000a4 __register_exitproc
0800355c g     F .text	00000004 HAL_TIMEx_OCN_Start_DMA
08006a24 g     F .text	00000024 HAL_PCD_SetAddress
08005538  w    F .text	00000002 ADC_IRQHandler
080018a4 g     F .text	00000004 HAL_TIM_OC_Start_DMA
08004514 g     F .text	00000104 USB_HC_Init
080030d8 g     F .text	000000a0 HAL_TIMEx_HallSensor_Init
08000e48 g     F .text	00000170 HAL_RCC_ClockConfig
08000338 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200009c4 g     O .bss	00000028 __malloc_current_mallinfo
08001e24 g     F .text	0000003a HAL_TIM_Encoder_DeInit
08005538  w    F .text	00000002 DMA1_Stream7_IRQHandler
08006180 g     F .text	0000000c USBD_FS_LangIDStrDescriptor
08002788 g     F .text	0000004a TIM_DMACaptureCplt
08003330 g     F .text	00000004 HAL_TIMEx_OCN_Start
080003e0 g     F .text	0000001c HAL_NVIC_DisableIRQ
08004320 g     F .text	00000120 USB_HostInit
080059d0 g     F .text	00000030 HAL_PCD_SuspendCallback
080062b0 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08005538  w    F .text	00000002 TIM5_IRQHandler
08005538  w    F .text	00000002 DMA2_Stream7_IRQHandler
08002ab4 g     F .text	00000036 HAL_TIM_Base_Init
0800553c g     F .text	00000010 HAL_TIM_PeriodElapsedCallback
08005538  w    F .text	00000002 I2C3_EV_IRQHandler
08002bdc g     F .text	000000a4 HAL_TIM_Encoder_Init
08001e60 g     F .text	0000004c HAL_TIM_Encoder_Start
08003458 g     F .text	00000004 HAL_TIMEx_OCN_Stop_IT
08006174 g     F .text	0000000c USBD_FS_DeviceDescriptor
08005538  w    F .text	00000002 EXTI9_5_IRQHandler
08005d74 g     F .text	00000004 USBD_LL_DevConnected
08001bc8 g     F .text	00000086 HAL_TIM_IC_Stop_DMA
08002990 g     F .text	00000010 TIM_DMAError
08005538  w    F .text	00000002 RTC_WKUP_IRQHandler
2000058c g     O .data	00000408 __malloc_av_
08003b94 g     F .text	00000036 USB_GetDevSpeed
08000280 g     F .text	00000008 HAL_GetHalVersion
20000438 g     O .data	0000001c FS_Desc
08000238  w    F .text	0000000c HAL_GetTick
080071e4 g     F .text	00000002 __malloc_lock
08000a00 g     F .text	00000008 HAL_PCDEx_SetRxFiFo
08005538  w    F .text	00000002 SPI2_IRQHandler
080038ec g     F .text	00000010 TIMEx_DMACommutationCplt
08002504 g     F .text	00000180 HAL_TIM_ConfigClockSource
08005538  w    F .text	00000002 MemManage_Handler
08005654 g     F .text	00000238 main
080014d4 g     F .text	0000006c HAL_TIM_OC_Stop
08001330  w    F .text	00000002 HAL_TIM_Base_MspDeInit
08001cdc g     F .text	0000006c HAL_TIM_OnePulse_Stop
0800056c g     F .text	0000001c HAL_NVIC_GetActive
200009f0 g     O .bss	00000004 __malloc_max_total_mem
080061fc g     F .text	0000001c USBD_FS_InterfaceStrDescriptor
08005538  w    F .text	00000002 DMA1_Stream0_IRQHandler
08001c58 g     F .text	0000003a HAL_TIM_OnePulse_DeInit
080061a8 g     F .text	0000001c USBD_FS_ProductStrDescriptor
08007eac g       *ABS*	00000000 _siccmram
08002b24 g     F .text	00000036 HAL_TIM_PWM_Init
08005538  w    F .text	00000002 SVC_Handler
08001960 g     F .text	00000004 HAL_TIM_OC_Stop_DMA
08001640 g     F .text	00000090 HAL_TIM_PWM_Start_IT
08002e88 g     F .text	0000005e HAL_TIM_OC_ConfigChannel
08006c84 g     F .text	00000560 _malloc_r
08001100 g     F .text	00000044 HAL_RCC_GetClockConfig
0800554c g     F .text	00000002 HAL_TIM_IC_CaptureCallback
08001964  w    F .text	00000002 HAL_TIM_IC_MspInit
0800031c g     F .text	0000001c HAL_DisableCompensationCell
08001a68 g     F .text	0000007a HAL_TIM_IC_Stop_IT
080038c0 g     F .text	00000028 HAL_TIMEx_RemapConfig
08005cf2 g     F .text	0000003e USBD_LL_Reset
00000000  w      *UND*	00000000 __libc_fini
08005b24 g     F .text	0000000c USBD_LL_GetRxDataSize
08002694 g     F .text	00000040 HAL_TIM_SlaveConfigSynchronization
20000468 g     O .data	00000004 USBD_LangIDDesc
08005538  w    F .text	00000002 EXTI4_IRQHandler
08005bf0 g     F .text	00000064 USBD_LL_DataOutStage
08007210 g     F .text	000000a0 _malloc_trim_r
0800345c g     F .text	00000100 HAL_TIMEx_PWMN_Start_DMA
08003908 g     F .text	00000070 USB_CoreInit
08005224 g     F .text	00000060 HAL_DMA_RegisterCallback
08005890 g     F .text	0000004c SystemInit
08003988 g     F .text	0000000e USB_DisableGlobalInt
08007488 g     F .text	00000000 _fini
08006590 g     F .text	0000002a HAL_PCD_Start
08003998 g     F .text	00000034 USB_SetCurrentMode
0800240c g     F .text	0000002c HAL_TIM_GenerateEvent
080027d4  w    F .text	00000002 HAL_TIM_PWM_PulseFinishedCallback
08003f90 g     F .text	00000106 USB_EP0StartXfer
08000534 g     F .text	0000001c HAL_NVIC_GetPendingIRQ
08005354 g     F .text	0000000c atexit
08001d48 g     F .text	00000058 HAL_TIM_OnePulse_Start_IT
10000000 g       .ccmram	00000000 _eccmram
080037c8 g     F .text	00000068 HAL_TIMEx_ConfigCommutationEvent_DMA
080001c8  w    F .text	0000002c HAL_InitTick
08005afa g     F .text	0000000e USBD_LL_SetUSBAddress
20000000 g     O .data	00000004 _impure_ptr
08000228  w    F .text	00000010 HAL_IncTick
080061e0 g     F .text	0000001c USBD_FS_ConfigStrDescriptor
08005aaa g     F .text	0000000e USBD_LL_CloseEP
0800507c g     F .text	000001a8 HAL_DMA_IRQHandler
08003900 g     F .text	00000006 HAL_TIMEx_HallSensor_GetState
08006108 g     F .text	00000010 USBD_CtlContinueSendData
08005d48 g     F .text	0000000c USBD_LL_Resume
08005538  w    F .text	00000002 WWDG_IRQHandler
080033ac g     F .text	00000004 HAL_TIMEx_OCN_Start_IT
080052f8 g     F .text	00000004 HAL_DMA_GetError
08002824  w    F .text	00000002 HAL_TIM_TriggerCallback
08005b08 g     F .text	0000000e USBD_LL_Transmit
08005538  w    F .text	00000002 TIM2_IRQHandler
080064b8 g     F .text	000000d8 HAL_PCD_Init
200004e8 g     O .data	00000043 USBD_CDC_CfgHSDesc
08003830 g     F .text	0000004a HAL_TIMEx_MasterConfigSynchronization
080026d4 g     F .text	00000040 HAL_TIM_SlaveConfigSynchronization_IT
080002c4 g     F .text	00000010 HAL_DBGMCU_EnableDBGStopMode
08005538  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08002e24 g     F .text	00000064 TIM_OC2_SetConfig
08005538  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
080060b6 g     F .text	00000038 USBD_GetString
0800178c g     F .text	00000118 HAL_TIM_PWM_Start_DMA
08005978 g     F .text	0000000c HAL_PCD_SetupStageCallback
08000588 g     F .text	00000018 HAL_SYSTICK_CLKSourceConfig
2001ffff g       *ABS*	00000000 _estack
080027d8 g     F .text	0000004a TIM_DMADelayPulseCplt
080031d4 g     F .text	00000030 HAL_TIMEx_HallSensor_Stop
08005538  w    F .text	00000002 EXTI1_IRQHandler
08004894 g     F .text	0000001e USB_HC_ReadInterrupt
0800618c g     F .text	0000001c USBD_FS_ManufacturerStrDescriptor
08000198  w    F .text	00000002 HAL_MspDeInit
08001404 g     F .text	0000005c HAL_TIM_Base_Start_DMA
2000099c g       .data	00000000 _edata
080002a4 g     F .text	00000010 HAL_DBGMCU_EnableDBGSleepMode
080019cc g     F .text	00000034 HAL_TIM_IC_Stop
10000000 g       .ccmram	00000000 _sccmram
080048b4 g     F .text	000001d2 USB_HC_Halt
08001584 g     F .text	00000048 HAL_TIM_PWM_Start
0800387c g     F .text	00000044 HAL_TIMEx_ConfigBreakDeadTime
0800423c g     F .text	00000024 USB_ReadDevInEPInterrupt
0800132c  w    F .text	00000002 HAL_TIM_Base_MspInit
08000dc8 g     F .text	0000000c HAL_RCC_DisableCSS
08002390 g     F .text	00000076 HAL_TIM_DMABurst_ReadStop
08004218 g     F .text	00000010 USB_ReadDevAllInEpInterrupt
08003178  w    F .text	00000002 HAL_TIMEx_HallSensor_MspDeInit
080061c4 g     F .text	0000001c USBD_FS_SerialStrDescriptor
080029a8 g     F .text	00000006 HAL_TIM_OC_GetState
08005538  w    F .text	00000002 USART2_IRQHandler
08000a0c  w    F .text	0000030c HAL_RCC_OscConfig
08003608 g     F .text	00000022 HAL_TIMEx_OnePulseN_Start
20000998 g     O .data	00000004 __malloc_trim_threshold
08000000 g     O .isr_vector	00000000 g_pfnVectors
08002cfc g     F .text	00000128 HAL_TIM_IC_ConfigChannel
080060ee g     F .text	0000001a USBD_CtlSendData
080055f8 g     F .text	0000005c LEDsInit
08003720 g     F .text	00000050 HAL_TIMEx_ConfigCommutationEvent
080019a8 g     F .text	00000022 HAL_TIM_IC_Start
08005538  w    F .text	00000002 I2C2_ER_IRQHandler
08003304 g     F .text	0000002a HAL_TIMEx_PWMN_Start
08000454 g     F .text	00000054 HAL_MPU_ConfigRegion
08001e1c  w    F .text	00000002 HAL_TIM_Encoder_MspInit
08005538  w    F .text	00000002 DMA2_Stream1_IRQHandler
08003d1c g     F .text	0000005a USB_DeactivateEndpoint
08004098 g     F .text	0000002c USB_WritePacket
080004b8 g     F .text	00000060 HAL_NVIC_GetPriority
080030b8 g     F .text	0000001c TIM_CCxChannelCmd
08005538  w    F .text	00000002 FLASH_IRQHandler
08001f80 g     F .text	0000007e HAL_TIM_Encoder_Stop_IT
08004208 g     F .text	00000010 USB_ReadDevAllOutEpInterrupt
20000dec g     O .bss	00000200 USBD_StrDesc
08005538  w    F .text	00000002 DMA2_Stream4_IRQHandler
08005538  w    F .text	00000002 BusFault_Handler
08005538  w    F .text	00000002 USART1_IRQHandler
08005d78 g     F .text	00000016 USBD_LL_DevDisconnected
080005a4 g     F .text	00000008 HAL_SYSTICK_IRQHandler
080058f8 g     F .text	0000000c OTG_FS_IRQHandler
08005538  w    F .text	00000002 SPI3_IRQHandler
08001148 g     F .text	00000020 HAL_RCC_NMI_IRQHandler
080041e8 g     F .text	00000018 USB_DevDisconnect
08005538  w    F .text	00000002 DMA1_Stream4_IRQHandler
08000304 g     F .text	00000018 HAL_EnableCompensationCell
08001540  w    F .text	00000002 HAL_TIM_PWM_MspInit
08002fbc g     F .text	000000fc HAL_TIM_OnePulse_ConfigChannel
08000d18 g     F .text	000000a4 HAL_RCC_MCOConfig
08005538  w    F .text	00000002 I2C1_ER_IRQHandler
080002f4 g     F .text	00000010 HAL_DBGMCU_DisableDBGStandbyMode
080029c0 g     F .text	00000006 HAL_TIM_OnePulse_GetState
08002aec g     F .text	00000036 HAL_TIM_OC_Init
08005b16 g     F .text	0000000e USBD_LL_PrepareReceive
08001da0 g     F .text	0000007c HAL_TIM_OnePulse_Stop_IT
08004440 g     F .text	0000003a USB_InitFSLSPClkSel
080038fc  w    F .text	00000002 HAL_TIMEx_BreakCallback
08001e20  w    F .text	00000002 HAL_TIM_Encoder_MspDeInit
08004618 g     F .text	0000027c USB_HC_StartXfer
08004f40 g     F .text	0000013c HAL_DMA_PollForTransfer
08003d78 g     F .text	0000005c USB_DeactivateDedicatedEndpoint
08001548 g     F .text	0000003a HAL_TIM_PWM_DeInit
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08006438 g     F .text	0000000c USBD_CDC_SetRxBuffer
0800362c g     F .text	00000052 HAL_TIMEx_OnePulseN_Stop
08003b40 g     F .text	00000024 USB_FlushTxFifo
080041b0 g     F .text	00000020 USB_SetDevAddress
08000518 g     F .text	0000001c HAL_NVIC_SetPendingIRQ
08006aea g     F .text	00000062 HAL_PCD_EP_Receive
00000000  w      *UND*	00000000 __register_frame_info
08005538  w    F .text	00000002 DMA2_Stream6_IRQHandler
08004508 g     F .text	0000000a USB_GetCurrentFrame
08003688 g     F .text	00000032 HAL_TIMEx_OnePulseN_Start_IT
080042a8 g     F .text	00000044 USB_EP0_OutStart
08004f1c g     F .text	00000024 HAL_DMA_Abort_IT
08001ae4 g     F .text	000000e4 HAL_TIM_IC_Start_DMA
08005538  w    F .text	00000002 DMA1_Stream3_IRQHandler
08006428 g     F .text	00000010 USBD_CDC_SetTxBuffer
08006c74 g     F .text	00000010 free
08005b96 g     F .text	0000005a USBD_LL_SetupStage
0800588c g     F .text	00000002 Error_Handler



Disassembly of section .text:

08000194 <HAL_MspInit>:
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop

08000198 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop

0800019c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800019c:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800019e:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <HAL_DeInit+0x28>)
 80001a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  __HAL_RCC_APB1_RELEASE_RESET();
 80001a4:	2400      	movs	r4, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80001a6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80001a8:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80001aa:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80001ac:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80001ae:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80001b0:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80001b2:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80001b4:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80001b6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80001b8:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80001ba:	f7ff ffed 	bl	8000198 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 80001be:	4620      	mov	r0, r4
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	bf00      	nop
 80001c4:	40023800 	.word	0x40023800

080001c8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001c8:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
 80001ca:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <HAL_InitTick+0x28>)
 80001cc:	681b      	ldr	r3, [r3, #0]
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001ce:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001d0:	fba2 2303 	umull	r2, r3, r2, r3
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001d6:	0998      	lsrs	r0, r3, #6
 80001d8:	f000 f922 	bl	8000420 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	4621      	mov	r1, r4
 80001de:	2200      	movs	r2, #0
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 f8ba 	bl	800035c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000434 	.word	0x20000434
 80001f0:	10624dd3 	.word	0x10624dd3

080001f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001f4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <HAL_Init+0x30>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fe:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000206:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000210:	2003      	movs	r0, #3
 8000212:	f000 f891 	bl	8000338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000216:	2000      	movs	r0, #0
 8000218:	f7ff ffd6 	bl	80001c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800021c:	f7ff ffba 	bl	8000194 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000220:	2000      	movs	r0, #0
 8000222:	bd08      	pop	{r3, pc}
 8000224:	40023c00 	.word	0x40023c00

08000228 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000228:	4a02      	ldr	r2, [pc, #8]	; (8000234 <HAL_IncTick+0xc>)
 800022a:	6813      	ldr	r3, [r2, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	6013      	str	r3, [r2, #0]
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20001218 	.word	0x20001218

08000238 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000238:	4b01      	ldr	r3, [pc, #4]	; (8000240 <HAL_GetTick+0x8>)
 800023a:	6818      	ldr	r0, [r3, #0]
}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	20001218 	.word	0x20001218

08000244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 800024a:	f7ff fff5 	bl	8000238 <HAL_GetTick>
 800024e:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000250:	f7ff fff2 	bl	8000238 <HAL_GetTick>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	1b00      	subs	r0, r0, r4
 8000258:	4298      	cmp	r0, r3
 800025a:	d3f9      	bcc.n	8000250 <HAL_Delay+0xc>
  {
  }
}
 800025c:	b002      	add	sp, #8
 800025e:	bd10      	pop	{r4, pc}

08000260 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000260:	4a02      	ldr	r2, [pc, #8]	; (800026c <HAL_SuspendTick+0xc>)
 8000262:	6813      	ldr	r3, [r2, #0]
 8000264:	f023 0302 	bic.w	r3, r3, #2
 8000268:	6013      	str	r3, [r2, #0]
 800026a:	4770      	bx	lr
 800026c:	e000e010 	.word	0xe000e010

08000270 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000270:	4a02      	ldr	r2, [pc, #8]	; (800027c <HAL_ResumeTick+0xc>)
 8000272:	6813      	ldr	r3, [r2, #0]
 8000274:	f043 0302 	orr.w	r3, r3, #2
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	4770      	bx	lr
 800027c:	e000e010 	.word	0xe000e010

08000280 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F4xx_HAL_VERSION;
}
 8000280:	4800      	ldr	r0, [pc, #0]	; (8000284 <HAL_GetHalVersion+0x4>)
 8000282:	4770      	bx	lr
 8000284:	01050000 	.word	0x01050000

08000288 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetREVID+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	0c00      	lsrs	r0, r0, #16
 800028e:	4770      	bx	lr
 8000290:	e0042000 	.word	0xe0042000

08000294 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000294:	4b02      	ldr	r3, [pc, #8]	; (80002a0 <HAL_GetDEVID+0xc>)
 8000296:	6818      	ldr	r0, [r3, #0]
}
 8000298:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e0042000 	.word	0xe0042000

080002a4 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80002a4:	4a02      	ldr	r2, [pc, #8]	; (80002b0 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80002a6:	6853      	ldr	r3, [r2, #4]
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6053      	str	r3, [r2, #4]
 80002ae:	4770      	bx	lr
 80002b0:	e0042000 	.word	0xe0042000

080002b4 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80002b4:	4a02      	ldr	r2, [pc, #8]	; (80002c0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80002b6:	6853      	ldr	r3, [r2, #4]
 80002b8:	f023 0301 	bic.w	r3, r3, #1
 80002bc:	6053      	str	r3, [r2, #4]
 80002be:	4770      	bx	lr
 80002c0:	e0042000 	.word	0xe0042000

080002c4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80002c4:	4a02      	ldr	r2, [pc, #8]	; (80002d0 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80002c6:	6853      	ldr	r3, [r2, #4]
 80002c8:	f043 0302 	orr.w	r3, r3, #2
 80002cc:	6053      	str	r3, [r2, #4]
 80002ce:	4770      	bx	lr
 80002d0:	e0042000 	.word	0xe0042000

080002d4 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80002d4:	4a02      	ldr	r2, [pc, #8]	; (80002e0 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80002d6:	6853      	ldr	r3, [r2, #4]
 80002d8:	f023 0302 	bic.w	r3, r3, #2
 80002dc:	6053      	str	r3, [r2, #4]
 80002de:	4770      	bx	lr
 80002e0:	e0042000 	.word	0xe0042000

080002e4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80002e4:	4a02      	ldr	r2, [pc, #8]	; (80002f0 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80002e6:	6853      	ldr	r3, [r2, #4]
 80002e8:	f043 0304 	orr.w	r3, r3, #4
 80002ec:	6053      	str	r3, [r2, #4]
 80002ee:	4770      	bx	lr
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80002f4:	4a02      	ldr	r2, [pc, #8]	; (8000300 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80002f6:	6853      	ldr	r3, [r2, #4]
 80002f8:	f023 0304 	bic.w	r3, r3, #4
 80002fc:	6053      	str	r3, [r2, #4]
 80002fe:	4770      	bx	lr
 8000300:	e0042000 	.word	0xe0042000

08000304 <HAL_EnableCompensationCell>:
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000304:	2101      	movs	r1, #1
 8000306:	fa91 f2a1 	rbit	r2, r1
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 800030a:	4b03      	ldr	r3, [pc, #12]	; (8000318 <HAL_EnableCompensationCell+0x14>)
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	4413      	add	r3, r2
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	6019      	str	r1, [r3, #0]
 8000316:	4770      	bx	lr
 8000318:	1089c100 	.word	0x1089c100

0800031c <HAL_DisableCompensationCell>:
 800031c:	2201      	movs	r2, #1
 800031e:	fa92 f2a2 	rbit	r2, r2
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <HAL_DisableCompensationCell+0x18>)
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	4413      	add	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	1089c100 	.word	0x1089c100

08000338 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800033a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800033c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000340:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000342:	0200      	lsls	r0, r0, #8
 8000344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000348:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800034c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000350:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000352:	60d3      	str	r3, [r2, #12]
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800035e:	b470      	push	{r4, r5, r6}
 8000360:	68dc      	ldr	r4, [r3, #12]
 8000362:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000366:	f1c4 0607 	rsb	r6, r4, #7
 800036a:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036c:	f104 0304 	add.w	r3, r4, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000370:	bf28      	it	cs
 8000372:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000374:	2b06      	cmp	r3, #6
 8000376:	d917      	bls.n	80003a8 <HAL_NVIC_SetPriority+0x4c>
 8000378:	3c03      	subs	r4, #3
 800037a:	2501      	movs	r5, #1
 800037c:	40a5      	lsls	r5, r4
 800037e:	3d01      	subs	r5, #1
 8000380:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000382:	2301      	movs	r3, #1
 8000384:	40b3      	lsls	r3, r6
 8000386:	3b01      	subs	r3, #1
 8000388:	4019      	ands	r1, r3
 800038a:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800038c:	2800      	cmp	r0, #0

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800038e:	ea41 0102 	orr.w	r1, r1, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000392:	db0c      	blt.n	80003ae <HAL_NVIC_SetPriority+0x52>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000398:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800039c:	0109      	lsls	r1, r1, #4
 800039e:	b2c9      	uxtb	r1, r1
 80003a0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80003a4:	bc70      	pop	{r4, r5, r6}
 80003a6:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a8:	2200      	movs	r2, #0
 80003aa:	4614      	mov	r4, r2
 80003ac:	e7e9      	b.n	8000382 <HAL_NVIC_SetPriority+0x26>
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <HAL_NVIC_SetPriority+0x68>)
 80003b0:	f000 000f 	and.w	r0, r0, #15
 80003b4:	0109      	lsls	r1, r1, #4
 80003b6:	4403      	add	r3, r0
 80003b8:	b2c9      	uxtb	r1, r1
 80003ba:	7619      	strb	r1, [r3, #24]
 80003bc:	bc70      	pop	{r4, r5, r6}
 80003be:	4770      	bx	lr
 80003c0:	e000ed00 	.word	0xe000ed00
 80003c4:	e000ecfc 	.word	0xe000ecfc

080003c8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003c8:	f000 011f 	and.w	r1, r0, #31
 80003cc:	2301      	movs	r3, #1
 80003ce:	0940      	lsrs	r0, r0, #5
 80003d0:	4a02      	ldr	r2, [pc, #8]	; (80003dc <HAL_NVIC_EnableIRQ+0x14>)
 80003d2:	408b      	lsls	r3, r1
 80003d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000e100 	.word	0xe000e100

080003e0 <HAL_NVIC_DisableIRQ>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003e0:	0943      	lsrs	r3, r0, #5
 80003e2:	3320      	adds	r3, #32
 80003e4:	f000 001f 	and.w	r0, r0, #31
 80003e8:	2201      	movs	r2, #1
 80003ea:	4903      	ldr	r1, [pc, #12]	; (80003f8 <HAL_NVIC_DisableIRQ+0x18>)
 80003ec:	fa02 f000 	lsl.w	r0, r2, r0
 80003f0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e100 	.word	0xe000e100

080003fc <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003fc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000400:	4905      	ldr	r1, [pc, #20]	; (8000418 <HAL_NVIC_SystemReset+0x1c>)
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000404:	68ca      	ldr	r2, [r1, #12]
 8000406:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800040a:	4313      	orrs	r3, r2
 800040c:	60cb      	str	r3, [r1, #12]
 800040e:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000412:	bf00      	nop
 8000414:	e7fd      	b.n	8000412 <HAL_NVIC_SystemReset+0x16>
 8000416:	bf00      	nop
 8000418:	e000ed00 	.word	0xe000ed00
 800041c:	05fa0004 	.word	0x05fa0004

08000420 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000420:	3801      	subs	r0, #1
 8000422:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000426:	d20e      	bcs.n	8000446 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800042a:	b410      	push	{r4}
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042c:	4c08      	ldr	r4, [pc, #32]	; (8000450 <HAL_SYSTICK_Config+0x30>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800042e:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000430:	20f0      	movs	r0, #240	; 0xf0
 8000432:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000436:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000438:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800043a:	4610      	mov	r0, r2
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800043c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800043e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000444:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000446:	2001      	movs	r0, #1
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000e010 	.word	0xe000e010
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000454:	4913      	ldr	r1, [pc, #76]	; (80004a4 <HAL_MPU_ConfigRegion+0x50>)
 8000456:	7843      	ldrb	r3, [r0, #1]
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000458:	b4f0      	push	{r4, r5, r6, r7}
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800045a:	608b      	str	r3, [r1, #8]

  if ((MPU_Init->Enable) != RESET)
 800045c:	7804      	ldrb	r4, [r0, #0]
 800045e:	b91c      	cbnz	r4, 8000468 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00U;
 8000460:	60cc      	str	r4, [r1, #12]
    MPU->RASR = 0x00U;
 8000462:	610c      	str	r4, [r1, #16]
  }
}
 8000464:	bcf0      	pop	{r4, r5, r6, r7}
 8000466:	4770      	bx	lr
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000468:	6843      	ldr	r3, [r0, #4]
 800046a:	60cb      	str	r3, [r1, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800046c:	7ac2      	ldrb	r2, [r0, #11]
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800046e:	7b03      	ldrb	r3, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000470:	7a87      	ldrb	r7, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000472:	7b45      	ldrb	r5, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000474:	7b86      	ldrb	r6, [r0, #14]
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000476:	0612      	lsls	r2, r2, #24
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000478:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800047c:	4323      	orrs	r3, r4
 800047e:	ea43 43c7 	orr.w	r3, r3, r7, lsl #19
 8000482:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000486:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000488:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800048a:	7a02      	ldrb	r2, [r0, #8]
 800048c:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8000490:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8000494:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000498:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800049c:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800049e:	bcf0      	pop	{r4, r5, r6, r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000ed90 	.word	0xe000ed90

080004a8 <HAL_NVIC_GetPriorityGrouping>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004a8:	4b02      	ldr	r3, [pc, #8]	; (80004b4 <HAL_NVIC_GetPriorityGrouping+0xc>)
 80004aa:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 80004ac:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <HAL_NVIC_GetPriority>:
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) < 0)
 80004b8:	2800      	cmp	r0, #0
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80004ba:	b470      	push	{r4, r5, r6}
 80004bc:	db22      	blt.n	8000504 <HAL_NVIC_GetPriority+0x4c>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80004be:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80004c2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80004c6:	f890 4300 	ldrb.w	r4, [r0, #768]	; 0x300
 80004ca:	0924      	lsrs	r4, r4, #4
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004cc:	f001 0107 	and.w	r1, r1, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004d0:	f1c1 0607 	rsb	r6, r1, #7
 80004d4:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004d6:	f101 0004 	add.w	r0, r1, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004da:	bf28      	it	cs
 80004dc:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004de:	2806      	cmp	r0, #6
 80004e0:	d90d      	bls.n	80004fe <HAL_NVIC_GetPriority+0x46>
 80004e2:	3903      	subs	r1, #3
 80004e4:	2501      	movs	r5, #1
 80004e6:	408d      	lsls	r5, r1
 80004e8:	3d01      	subs	r5, #1
 80004ea:	4025      	ands	r5, r4

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80004ec:	2001      	movs	r0, #1
 80004ee:	40b0      	lsls	r0, r6
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	1e41      	subs	r1, r0, #1
 80004f4:	4021      	ands	r1, r4
 80004f6:	6011      	str	r1, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 80004f8:	601d      	str	r5, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 80004fa:	bc70      	pop	{r4, r5, r6}
 80004fc:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004fe:	2500      	movs	r5, #0
 8000500:	4629      	mov	r1, r5
 8000502:	e7f3      	b.n	80004ec <HAL_NVIC_GetPriority+0x34>
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) < 0)
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000504:	4c03      	ldr	r4, [pc, #12]	; (8000514 <HAL_NVIC_GetPriority+0x5c>)
 8000506:	f000 000f 	and.w	r0, r0, #15
 800050a:	4404      	add	r4, r0
 800050c:	7e24      	ldrb	r4, [r4, #24]
 800050e:	0924      	lsrs	r4, r4, #4
 8000510:	e7dc      	b.n	80004cc <HAL_NVIC_GetPriority+0x14>
 8000512:	bf00      	nop
 8000514:	e000ecfc 	.word	0xe000ecfc

08000518 <HAL_NVIC_SetPendingIRQ>:
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000518:	0943      	lsrs	r3, r0, #5
 800051a:	3340      	adds	r3, #64	; 0x40
 800051c:	f000 001f 	and.w	r0, r0, #31
 8000520:	2201      	movs	r2, #1
 8000522:	4903      	ldr	r1, [pc, #12]	; (8000530 <HAL_NVIC_SetPendingIRQ+0x18>)
 8000524:	fa02 f000 	lsl.w	r0, r2, r0
 8000528:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000e100 	.word	0xe000e100

08000534 <HAL_NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000534:	0943      	lsrs	r3, r0, #5
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <HAL_NVIC_GetPendingIRQ+0x18>)
 8000538:	3340      	adds	r3, #64	; 0x40
 800053a:	f000 001f 	and.w	r0, r0, #31
 800053e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000542:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8000546:	f000 0001 	and.w	r0, r0, #1
 800054a:	4770      	bx	lr
 800054c:	e000e100 	.word	0xe000e100

08000550 <HAL_NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000550:	0943      	lsrs	r3, r0, #5
 8000552:	3360      	adds	r3, #96	; 0x60
 8000554:	f000 001f 	and.w	r0, r0, #31
 8000558:	2201      	movs	r2, #1
 800055a:	4903      	ldr	r1, [pc, #12]	; (8000568 <HAL_NVIC_ClearPendingIRQ+0x18>)
 800055c:	fa02 f000 	lsl.w	r0, r2, r0
 8000560:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000e100 	.word	0xe000e100

0800056c <HAL_NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800056c:	0943      	lsrs	r3, r0, #5
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <HAL_NVIC_GetActive+0x18>)
 8000570:	3380      	adds	r3, #128	; 0x80
 8000572:	f000 001f 	and.w	r0, r0, #31
 8000576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057a:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 800057e:	f000 0001 	and.w	r0, r0, #1
 8000582:	4770      	bx	lr
 8000584:	e000e100 	.word	0xe000e100

08000588 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800058a:	6813      	ldr	r3, [r2, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800058c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800058e:	bf0c      	ite	eq
 8000590:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000594:	f023 0304 	bicne.w	r3, r3, #4
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	4770      	bx	lr
 800059c:	e000e010 	.word	0xe000e010

080005a0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80005a4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80005a6:	f7ff fffb 	bl	80005a0 <HAL_SYSTICK_Callback>
 80005aa:	bd08      	pop	{r3, pc}

080005ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005b0:	f8d1 c000 	ldr.w	ip, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b4:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80007e0 <HAL_GPIO_Init+0x234>
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005b8:	f8df e228 	ldr.w	lr, [pc, #552]	; 80007e4 <HAL_GPIO_Init+0x238>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005bc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005be:	2500      	movs	r5, #0
 80005c0:	e003      	b.n	80005ca <HAL_GPIO_Init+0x1e>
 80005c2:	3501      	adds	r5, #1
 80005c4:	2d10      	cmp	r5, #16
 80005c6:	f000 80a0 	beq.w	800070a <HAL_GPIO_Init+0x15e>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80005ca:	2301      	movs	r3, #1
 80005cc:	40ab      	lsls	r3, r5
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005ce:	ea03 020c 	and.w	r2, r3, ip

    if(iocurrent == ioposition)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d1f5      	bne.n	80005c2 <HAL_GPIO_Init+0x16>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d6:	684e      	ldr	r6, [r1, #4]
 80005d8:	f026 0a10 	bic.w	sl, r6, #16
 80005dc:	f1ba 0f02 	cmp.w	sl, #2
 80005e0:	f000 8096 	beq.w	8000710 <HAL_GPIO_Init+0x164>
 80005e4:	ea4f 0945 	mov.w	r9, r5, lsl #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005e8:	2403      	movs	r4, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005ea:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ee:	fa04 f409 	lsl.w	r4, r4, r9
 80005f2:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005f4:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005f8:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005fc:	fa07 f709 	lsl.w	r7, r7, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000600:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000604:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000608:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 800060c:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800060e:	f240 80a5 	bls.w	800075c <HAL_GPIO_Init+0x1b0>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000612:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000614:	688b      	ldr	r3, [r1, #8]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000616:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000618:	fa03 f309 	lsl.w	r3, r3, r9
 800061c:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 800061e:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000620:	00f3      	lsls	r3, r6, #3
 8000622:	d5ce      	bpl.n	80005c2 <HAL_GPIO_Init+0x16>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000624:	f04f 0900 	mov.w	r9, #0
 8000628:	f8cd 9004 	str.w	r9, [sp, #4]
 800062c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8000630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000634:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8000638:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 800063c:	f025 0303 	bic.w	r3, r5, #3
 8000640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000644:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000648:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800064c:	9401      	str	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800064e:	f005 0403 	and.w	r4, r5, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	9f01      	ldr	r7, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000654:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000658:	00a4      	lsls	r4, r4, #2
 800065a:	270f      	movs	r7, #15
 800065c:	40a7      	lsls	r7, r4
 800065e:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000662:	4f59      	ldr	r7, [pc, #356]	; (80007c8 <HAL_GPIO_Init+0x21c>)
 8000664:	42b8      	cmp	r0, r7
 8000666:	d027      	beq.n	80006b8 <HAL_GPIO_Init+0x10c>
 8000668:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800066c:	42b8      	cmp	r0, r7
 800066e:	f000 8088 	beq.w	8000782 <HAL_GPIO_Init+0x1d6>
 8000672:	4f56      	ldr	r7, [pc, #344]	; (80007cc <HAL_GPIO_Init+0x220>)
 8000674:	42b8      	cmp	r0, r7
 8000676:	f000 8089 	beq.w	800078c <HAL_GPIO_Init+0x1e0>
 800067a:	4f55      	ldr	r7, [pc, #340]	; (80007d0 <HAL_GPIO_Init+0x224>)
 800067c:	42b8      	cmp	r0, r7
 800067e:	f000 808a 	beq.w	8000796 <HAL_GPIO_Init+0x1ea>
 8000682:	4f54      	ldr	r7, [pc, #336]	; (80007d4 <HAL_GPIO_Init+0x228>)
 8000684:	42b8      	cmp	r0, r7
 8000686:	f000 808b 	beq.w	80007a0 <HAL_GPIO_Init+0x1f4>
 800068a:	4f53      	ldr	r7, [pc, #332]	; (80007d8 <HAL_GPIO_Init+0x22c>)
 800068c:	42b8      	cmp	r0, r7
 800068e:	f000 808c 	beq.w	80007aa <HAL_GPIO_Init+0x1fe>
 8000692:	4f52      	ldr	r7, [pc, #328]	; (80007dc <HAL_GPIO_Init+0x230>)
 8000694:	42b8      	cmp	r0, r7
 8000696:	f000 808d 	beq.w	80007b4 <HAL_GPIO_Init+0x208>
 800069a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80007e8 <HAL_GPIO_Init+0x23c>
 800069e:	4548      	cmp	r0, r9
 80006a0:	f000 808d 	beq.w	80007be <HAL_GPIO_Init+0x212>
 80006a4:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80007ec <HAL_GPIO_Init+0x240>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	bf0c      	ite	eq
 80006ac:	f04f 0908 	moveq.w	r9, #8
 80006b0:	f04f 0909 	movne.w	r9, #9
 80006b4:	fa09 f904 	lsl.w	r9, r9, r4
 80006b8:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006bc:	609f      	str	r7, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006be:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 80006c2:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c4:	03f7      	lsls	r7, r6, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80006c6:	bf54      	ite	pl
 80006c8:	4023      	andpl	r3, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80006ca:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 80006cc:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80006d0:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006d4:	03b7      	lsls	r7, r6, #14
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80006d6:	bf54      	ite	pl
 80006d8:	4023      	andpl	r3, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80006da:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 80006dc:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006e0:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006e4:	02f7      	lsls	r7, r6, #11
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80006e6:	bf54      	ite	pl
 80006e8:	4023      	andpl	r3, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80006ea:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 80006ec:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80006f0:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f4:	02b6      	lsls	r6, r6, #10
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006f6:	f105 0501 	add.w	r5, r5, #1
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80006fa:	bf54      	ite	pl
 80006fc:	4023      	andpl	r3, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80006fe:	4313      	orrmi	r3, r2
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000700:	2d10      	cmp	r5, #16
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000702:	f8ce 300c 	str.w	r3, [lr, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000706:	f47f af60 	bne.w	80005ca <HAL_GPIO_Init+0x1e>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800070a:	b003      	add	sp, #12
 800070c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000710:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8000714:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000718:	f005 0707 	and.w	r7, r5, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800071c:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000720:	00bf      	lsls	r7, r7, #2
 8000722:	f04f 0b0f 	mov.w	fp, #15
 8000726:	fa0b fb07 	lsl.w	fp, fp, r7
 800072a:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800072e:	690c      	ldr	r4, [r1, #16]
 8000730:	40bc      	lsls	r4, r7
 8000732:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000736:	f8c9 4020 	str.w	r4, [r9, #32]
 800073a:	ea4f 0945 	mov.w	r9, r5, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800073e:	2403      	movs	r4, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000740:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000744:	fa04 f409 	lsl.w	r4, r4, r9
 8000748:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074a:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074e:	ea0a 0a04 	and.w	sl, sl, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000752:	fa07 f709 	lsl.w	r7, r7, r9
 8000756:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 800075a:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800075c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800075e:	ea07 0a04 	and.w	sl, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000762:	68cf      	ldr	r7, [r1, #12]
 8000764:	fa07 f709 	lsl.w	r7, r7, r9
 8000768:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800076c:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800076e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000772:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000776:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800077a:	40af      	lsls	r7, r5
 800077c:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 800077e:	6047      	str	r7, [r0, #4]
 8000780:	e747      	b.n	8000612 <HAL_GPIO_Init+0x66>
 8000782:	f04f 0901 	mov.w	r9, #1
 8000786:	fa09 f904 	lsl.w	r9, r9, r4
 800078a:	e795      	b.n	80006b8 <HAL_GPIO_Init+0x10c>
 800078c:	f04f 0902 	mov.w	r9, #2
 8000790:	fa09 f904 	lsl.w	r9, r9, r4
 8000794:	e790      	b.n	80006b8 <HAL_GPIO_Init+0x10c>
 8000796:	f04f 0903 	mov.w	r9, #3
 800079a:	fa09 f904 	lsl.w	r9, r9, r4
 800079e:	e78b      	b.n	80006b8 <HAL_GPIO_Init+0x10c>
 80007a0:	f04f 0904 	mov.w	r9, #4
 80007a4:	fa09 f904 	lsl.w	r9, r9, r4
 80007a8:	e786      	b.n	80006b8 <HAL_GPIO_Init+0x10c>
 80007aa:	f04f 0905 	mov.w	r9, #5
 80007ae:	fa09 f904 	lsl.w	r9, r9, r4
 80007b2:	e781      	b.n	80006b8 <HAL_GPIO_Init+0x10c>
 80007b4:	f04f 0906 	mov.w	r9, #6
 80007b8:	fa09 f904 	lsl.w	r9, r9, r4
 80007bc:	e77c      	b.n	80006b8 <HAL_GPIO_Init+0x10c>
 80007be:	f04f 0907 	mov.w	r9, #7
 80007c2:	fa09 f904 	lsl.w	r9, r9, r4
 80007c6:	e777      	b.n	80006b8 <HAL_GPIO_Init+0x10c>
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40021400 	.word	0x40021400
 80007dc:	40021800 	.word	0x40021800
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40013c00 	.word	0x40013c00
 80007e8:	40021c00 	.word	0x40021c00
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80007f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f4:	2300      	movs	r3, #0
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80007f6:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8000948 <HAL_GPIO_DeInit+0x158>
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80007fa:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800094c <HAL_GPIO_DeInit+0x15c>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80007fe:	f8df a150 	ldr.w	sl, [pc, #336]	; 8000950 <HAL_GPIO_DeInit+0x160>
 8000802:	e002      	b.n	800080a <HAL_GPIO_DeInit+0x1a>

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000804:	3301      	adds	r3, #1
 8000806:	2b10      	cmp	r3, #16
 8000808:	d070      	beq.n	80008ec <HAL_GPIO_DeInit+0xfc>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800080a:	2601      	movs	r6, #1
 800080c:	fa06 f203 	lsl.w	r2, r6, r3
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;

    if(iocurrent == ioposition)
 8000810:	ea32 0401 	bics.w	r4, r2, r1
 8000814:	d1f6      	bne.n	8000804 <HAL_GPIO_DeInit+0x14>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000816:	f04f 0c03 	mov.w	ip, #3
 800081a:	fa03 f406 	lsl.w	r4, r3, r6
 800081e:	6805      	ldr	r5, [r0, #0]
 8000820:	fa0c f404 	lsl.w	r4, ip, r4
 8000824:	43e4      	mvns	r4, r4

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000826:	fa23 f70c 	lsr.w	r7, r3, ip

    if(iocurrent == ioposition)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800082a:	4025      	ands	r5, r4
 800082c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8000830:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000832:	f003 0507 	and.w	r5, r3, #7
 8000836:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800083a:	f04f 0e0f 	mov.w	lr, #15
 800083e:	00ad      	lsls	r5, r5, #2
 8000840:	fa0e f505 	lsl.w	r5, lr, r5
 8000844:	ea2b 0505 	bic.w	r5, fp, r5
 8000848:	623d      	str	r5, [r7, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800084a:	6885      	ldr	r5, [r0, #8]
 800084c:	4025      	ands	r5, r4
 800084e:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000850:	6845      	ldr	r5, [r0, #4]
 8000852:	43d2      	mvns	r2, r2
 8000854:	4015      	ands	r5, r2
 8000856:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000858:	68c7      	ldr	r7, [r0, #12]
 800085a:	f023 0503 	bic.w	r5, r3, #3
 800085e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000862:	403c      	ands	r4, r7
 8000864:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
 8000868:	60c4      	str	r4, [r0, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800086a:	ea03 040c 	and.w	r4, r3, ip

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800086e:	68af      	ldr	r7, [r5, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000870:	00a4      	lsls	r4, r4, #2
 8000872:	fa0e fe04 	lsl.w	lr, lr, r4
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000876:	4548      	cmp	r0, r9
      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000878:	ea07 070e 	and.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800087c:	d03c      	beq.n	80008f8 <HAL_GPIO_DeInit+0x108>
 800087e:	4550      	cmp	r0, sl
 8000880:	d037      	beq.n	80008f2 <HAL_GPIO_DeInit+0x102>
 8000882:	4e2a      	ldr	r6, [pc, #168]	; (800092c <HAL_GPIO_DeInit+0x13c>)
 8000884:	42b0      	cmp	r0, r6
 8000886:	d039      	beq.n	80008fc <HAL_GPIO_DeInit+0x10c>
 8000888:	4e29      	ldr	r6, [pc, #164]	; (8000930 <HAL_GPIO_DeInit+0x140>)
 800088a:	42b0      	cmp	r0, r6
 800088c:	d03a      	beq.n	8000904 <HAL_GPIO_DeInit+0x114>
 800088e:	4e29      	ldr	r6, [pc, #164]	; (8000934 <HAL_GPIO_DeInit+0x144>)
 8000890:	42b0      	cmp	r0, r6
 8000892:	d03a      	beq.n	800090a <HAL_GPIO_DeInit+0x11a>
 8000894:	4e28      	ldr	r6, [pc, #160]	; (8000938 <HAL_GPIO_DeInit+0x148>)
 8000896:	42b0      	cmp	r0, r6
 8000898:	d03b      	beq.n	8000912 <HAL_GPIO_DeInit+0x122>
 800089a:	4e28      	ldr	r6, [pc, #160]	; (800093c <HAL_GPIO_DeInit+0x14c>)
 800089c:	42b0      	cmp	r0, r6
 800089e:	d03c      	beq.n	800091a <HAL_GPIO_DeInit+0x12a>
 80008a0:	4e27      	ldr	r6, [pc, #156]	; (8000940 <HAL_GPIO_DeInit+0x150>)
 80008a2:	42b0      	cmp	r0, r6
 80008a4:	d03d      	beq.n	8000922 <HAL_GPIO_DeInit+0x132>
 80008a6:	4e27      	ldr	r6, [pc, #156]	; (8000944 <HAL_GPIO_DeInit+0x154>)
 80008a8:	42b0      	cmp	r0, r6
 80008aa:	d021      	beq.n	80008f0 <HAL_GPIO_DeInit+0x100>
 80008ac:	2609      	movs	r6, #9
 80008ae:	fa06 f404 	lsl.w	r4, r6, r4
 80008b2:	42a7      	cmp	r7, r4
 80008b4:	d1a6      	bne.n	8000804 <HAL_GPIO_DeInit+0x14>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80008b6:	68ac      	ldr	r4, [r5, #8]
 80008b8:	ea24 040e 	bic.w	r4, r4, lr
 80008bc:	60ac      	str	r4, [r5, #8]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80008be:	f8d8 4000 	ldr.w	r4, [r8]
 80008c2:	4014      	ands	r4, r2
 80008c4:	f8c8 4000 	str.w	r4, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80008c8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80008cc:	4014      	ands	r4, r2
 80008ce:	f8c8 4004 	str.w	r4, [r8, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80008d2:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80008d6:	4014      	ands	r4, r2
 80008d8:	f8c8 4008 	str.w	r4, [r8, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80008dc:	f8d8 400c 	ldr.w	r4, [r8, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e0:	3301      	adds	r3, #1
        EXTI->IMR &= ~((uint32_t)iocurrent);
        EXTI->EMR &= ~((uint32_t)iocurrent);
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80008e2:	4022      	ands	r2, r4

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e4:	2b10      	cmp	r3, #16
        EXTI->IMR &= ~((uint32_t)iocurrent);
        EXTI->EMR &= ~((uint32_t)iocurrent);
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80008e6:	f8c8 200c 	str.w	r2, [r8, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ea:	d18e      	bne.n	800080a <HAL_GPIO_DeInit+0x1a>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
  }
}
 80008ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008f0:	2608      	movs	r6, #8
 80008f2:	fa06 f404 	lsl.w	r4, r6, r4
 80008f6:	e7dc      	b.n	80008b2 <HAL_GPIO_DeInit+0xc2>
 80008f8:	2400      	movs	r4, #0
 80008fa:	e7da      	b.n	80008b2 <HAL_GPIO_DeInit+0xc2>
 80008fc:	2602      	movs	r6, #2
 80008fe:	fa06 f404 	lsl.w	r4, r6, r4
 8000902:	e7d6      	b.n	80008b2 <HAL_GPIO_DeInit+0xc2>
 8000904:	fa0c f404 	lsl.w	r4, ip, r4
 8000908:	e7d3      	b.n	80008b2 <HAL_GPIO_DeInit+0xc2>
 800090a:	2604      	movs	r6, #4
 800090c:	fa06 f404 	lsl.w	r4, r6, r4
 8000910:	e7cf      	b.n	80008b2 <HAL_GPIO_DeInit+0xc2>
 8000912:	2605      	movs	r6, #5
 8000914:	fa06 f404 	lsl.w	r4, r6, r4
 8000918:	e7cb      	b.n	80008b2 <HAL_GPIO_DeInit+0xc2>
 800091a:	2606      	movs	r6, #6
 800091c:	fa06 f404 	lsl.w	r4, r6, r4
 8000920:	e7c7      	b.n	80008b2 <HAL_GPIO_DeInit+0xc2>
 8000922:	2607      	movs	r6, #7
 8000924:	fa06 f404 	lsl.w	r4, r6, r4
 8000928:	e7c3      	b.n	80008b2 <HAL_GPIO_DeInit+0xc2>
 800092a:	bf00      	nop
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40021000 	.word	0x40021000
 8000938:	40021400 	.word	0x40021400
 800093c:	40021800 	.word	0x40021800
 8000940:	40021c00 	.word	0x40021c00
 8000944:	40022000 	.word	0x40022000
 8000948:	40020000 	.word	0x40020000
 800094c:	40013c00 	.word	0x40013c00
 8000950:	40020400 	.word	0x40020400

08000954 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000954:	6903      	ldr	r3, [r0, #16]
 8000956:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000958:	bf14      	ite	ne
 800095a:	2001      	movne	r0, #1
 800095c:	2000      	moveq	r0, #0
 800095e:	4770      	bx	lr

08000960 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000960:	b902      	cbnz	r2, 8000964 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000962:	0409      	lsls	r1, r1, #16
 8000964:	6181      	str	r1, [r0, #24]
 8000966:	4770      	bx	lr

08000968 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000968:	6943      	ldr	r3, [r0, #20]
 800096a:	4059      	eors	r1, r3
 800096c:	6141      	str	r1, [r0, #20]
 800096e:	4770      	bx	lr

08000970 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000970:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8000972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000976:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8000978:	9b01      	ldr	r3, [sp, #4]
 800097a:	430b      	orrs	r3, r1
 800097c:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800097e:	9b01      	ldr	r3, [sp, #4]
 8000980:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8000982:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000984:	9b01      	ldr	r3, [sp, #4]
 8000986:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000988:	69c3      	ldr	r3, [r0, #28]
 800098a:	9301      	str	r3, [sp, #4]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800098c:	69c0      	ldr	r0, [r0, #28]
 800098e:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 8000992:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8000996:	b002      	add	sp, #8
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80009a2:	6951      	ldr	r1, [r2, #20]
 80009a4:	4201      	tst	r1, r0
 80009a6:	d100      	bne.n	80009aa <HAL_GPIO_EXTI_IRQHandler+0xa>
 80009a8:	4770      	bx	lr
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80009aa:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009ac:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009ae:	f7ff fff5 	bl	800099c <HAL_GPIO_EXTI_Callback>
 80009b2:	bd08      	pop	{r3, pc}
 80009b4:	40013c00 	.word	0x40013c00

080009b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80009b8:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80009ba:	6805      	ldr	r5, [r0, #0]
 80009bc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  
  if(fifo == 0U)
 80009be:	b1c9      	cbz	r1, 80009f4 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80009c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80009c2:	3901      	subs	r1, #1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80009c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80009c8:	d00b      	beq.n	80009e2 <HAL_PCDEx_SetTxFiFo+0x2a>
 80009ca:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80009cc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80009d0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
    for (i = 0U; i < (fifo - 1U); i++)
 80009d4:	3301      	adds	r3, #1
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80009d6:	6840      	ldr	r0, [r0, #4]
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
    for (i = 0U; i < (fifo - 1U); i++)
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	428b      	cmp	r3, r1
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80009dc:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
    for (i = 0U; i < (fifo - 1U); i++)
 80009e0:	d3f4      	bcc.n	80009cc <HAL_PCDEx_SetTxFiFo+0x14>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80009e2:	3140      	adds	r1, #64	; 0x40
 80009e4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80009e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ec:	604c      	str	r4, [r1, #4]
  }
  
  return HAL_OK;
}
 80009ee:	2000      	movs	r0, #0
 80009f0:	bc30      	pop	{r4, r5}
 80009f2:	4770      	bx	lr
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
  
  if(fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80009f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f8:	62ac      	str	r4, [r5, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 80009fa:	2000      	movs	r0, #0
 80009fc:	bc30      	pop	{r4, r5}
 80009fe:	4770      	bx	lr

08000a00 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8000a00:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8000a02:	2000      	movs	r0, #0
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8000a04:	6259      	str	r1, [r3, #36]	; 0x24
  
  return HAL_OK;
}
 8000a06:	4770      	bx	lr

08000a08 <HAL_RCC_DeInit>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a0e:	6803      	ldr	r3, [r0, #0]
 8000a10:	07dd      	lsls	r5, r3, #31
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a12:	b083      	sub	sp, #12
 8000a14:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a16:	d522      	bpl.n	8000a5e <HAL_RCC_OscConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a18:	49aa      	ldr	r1, [pc, #680]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
 8000a1a:	688a      	ldr	r2, [r1, #8]
 8000a1c:	f002 020c 	and.w	r2, r2, #12
 8000a20:	2a04      	cmp	r2, #4
 8000a22:	f000 80e9 	beq.w	8000bf8 <HAL_RCC_OscConfig+0x1ec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a26:	688a      	ldr	r2, [r1, #8]
 8000a28:	f002 020c 	and.w	r2, r2, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a2c:	2a08      	cmp	r2, #8
 8000a2e:	f000 80df 	beq.w	8000bf0 <HAL_RCC_OscConfig+0x1e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a32:	4ba5      	ldr	r3, [pc, #660]	; (8000cc8 <HAL_RCC_OscConfig+0x2bc>)
 8000a34:	7922      	ldrb	r2, [r4, #4]
 8000a36:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a38:	6863      	ldr	r3, [r4, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f000 80ca 	beq.w	8000bd4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a40:	f7ff fbfa 	bl	8000238 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a44:	4d9f      	ldr	r5, [pc, #636]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a46:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a48:	e005      	b.n	8000a56 <HAL_RCC_OscConfig+0x4a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a4a:	f7ff fbf5 	bl	8000238 <HAL_GetTick>
 8000a4e:	1b80      	subs	r0, r0, r6
 8000a50:	2864      	cmp	r0, #100	; 0x64
 8000a52:	f200 809e 	bhi.w	8000b92 <HAL_RCC_OscConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a56:	682b      	ldr	r3, [r5, #0]
 8000a58:	039a      	lsls	r2, r3, #14
 8000a5a:	d5f6      	bpl.n	8000a4a <HAL_RCC_OscConfig+0x3e>
 8000a5c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a5e:	079f      	lsls	r7, r3, #30
 8000a60:	d52c      	bpl.n	8000abc <HAL_RCC_OscConfig+0xb0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a62:	4a98      	ldr	r2, [pc, #608]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
 8000a64:	6891      	ldr	r1, [r2, #8]
 8000a66:	f011 0f0c 	tst.w	r1, #12
 8000a6a:	f000 8099 	beq.w	8000ba0 <HAL_RCC_OscConfig+0x194>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a6e:	6891      	ldr	r1, [r2, #8]
 8000a70:	f001 010c 	and.w	r1, r1, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a74:	2908      	cmp	r1, #8
 8000a76:	f000 808f 	beq.w	8000b98 <HAL_RCC_OscConfig+0x18c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a7a:	68e3      	ldr	r3, [r4, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 80d6 	beq.w	8000c2e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a82:	4b92      	ldr	r3, [pc, #584]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a84:	4d8f      	ldr	r5, [pc, #572]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a8a:	f7ff fbd5 	bl	8000238 <HAL_GetTick>
 8000a8e:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a90:	e004      	b.n	8000a9c <HAL_RCC_OscConfig+0x90>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a92:	f7ff fbd1 	bl	8000238 <HAL_GetTick>
 8000a96:	1b80      	subs	r0, r0, r6
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	d87a      	bhi.n	8000b92 <HAL_RCC_OscConfig+0x186>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	0798      	lsls	r0, r3, #30
 8000aa0:	d5f7      	bpl.n	8000a92 <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aa2:	6829      	ldr	r1, [r5, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa4:	22f8      	movs	r2, #248	; 0xf8
 8000aa6:	fa92 f2a2 	rbit	r2, r2
 8000aaa:	6923      	ldr	r3, [r4, #16]
 8000aac:	fab2 f282 	clz	r2, r2
 8000ab0:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8000ab4:	4093      	lsls	r3, r2
 8000ab6:	430b      	orrs	r3, r1
 8000ab8:	602b      	str	r3, [r5, #0]
 8000aba:	6823      	ldr	r3, [r4, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000abc:	071a      	lsls	r2, r3, #28
 8000abe:	d420      	bmi.n	8000b02 <HAL_RCC_OscConfig+0xf6>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac0:	0759      	lsls	r1, r3, #29
 8000ac2:	d434      	bmi.n	8000b2e <HAL_RCC_OscConfig+0x122>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ac4:	69a3      	ldr	r3, [r4, #24]
 8000ac6:	b1cb      	cbz	r3, 8000afc <HAL_RCC_OscConfig+0xf0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ac8:	4d7e      	ldr	r5, [pc, #504]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
 8000aca:	68aa      	ldr	r2, [r5, #8]
 8000acc:	f002 020c 	and.w	r2, r2, #12
 8000ad0:	2a08      	cmp	r2, #8
 8000ad2:	d06c      	beq.n	8000bae <HAL_RCC_OscConfig+0x1a2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad4:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ad6:	4b7e      	ldr	r3, [pc, #504]	; (8000cd0 <HAL_RCC_OscConfig+0x2c4>)
 8000ad8:	f04f 0200 	mov.w	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ade:	f000 80b7 	beq.w	8000c50 <HAL_RCC_OscConfig+0x244>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae2:	f7ff fba9 	bl	8000238 <HAL_GetTick>
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ae6:	462c      	mov	r4, r5
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae8:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aea:	e004      	b.n	8000af6 <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aec:	f7ff fba4 	bl	8000238 <HAL_GetTick>
 8000af0:	1b40      	subs	r0, r0, r5
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d84d      	bhi.n	8000b92 <HAL_RCC_OscConfig+0x186>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	019b      	lsls	r3, r3, #6
 8000afa:	d4f7      	bmi.n	8000aec <HAL_RCC_OscConfig+0xe0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000afc:	2000      	movs	r0, #0
}
 8000afe:	b003      	add	sp, #12
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b02:	6963      	ldr	r3, [r4, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d055      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b08:	4b72      	ldr	r3, [pc, #456]	; (8000cd4 <HAL_RCC_OscConfig+0x2c8>)
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b0a:	4d6e      	ldr	r5, [pc, #440]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b10:	f7ff fb92 	bl	8000238 <HAL_GetTick>
 8000b14:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b16:	e004      	b.n	8000b22 <HAL_RCC_OscConfig+0x116>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b18:	f7ff fb8e 	bl	8000238 <HAL_GetTick>
 8000b1c:	1b80      	subs	r0, r0, r6
 8000b1e:	2802      	cmp	r0, #2
 8000b20:	d837      	bhi.n	8000b92 <HAL_RCC_OscConfig+0x186>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b22:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b24:	079f      	lsls	r7, r3, #30
 8000b26:	d5f7      	bpl.n	8000b18 <HAL_RCC_OscConfig+0x10c>
 8000b28:	6823      	ldr	r3, [r4, #0]
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b2a:	0759      	lsls	r1, r3, #29
 8000b2c:	d5ca      	bpl.n	8000ac4 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b65      	ldr	r3, [pc, #404]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000b30:	4d69      	ldr	r5, [pc, #420]	; (8000cd8 <HAL_RCC_OscConfig+0x2cc>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2200      	movs	r2, #0
 8000b34:	9201      	str	r2, [sp, #4]
 8000b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4e:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000b50:	f7ff fb72 	bl	8000238 <HAL_GetTick>
 8000b54:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000b56:	e004      	b.n	8000b62 <HAL_RCC_OscConfig+0x156>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000b58:	f7ff fb6e 	bl	8000238 <HAL_GetTick>
 8000b5c:	1b80      	subs	r0, r0, r6
 8000b5e:	2802      	cmp	r0, #2
 8000b60:	d817      	bhi.n	8000b92 <HAL_RCC_OscConfig+0x186>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	05da      	lsls	r2, r3, #23
 8000b66:	d5f7      	bpl.n	8000b58 <HAL_RCC_OscConfig+0x14c>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b68:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <HAL_RCC_OscConfig+0x2d0>)
 8000b6a:	7a22      	ldrb	r2, [r4, #8]
 8000b6c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b6e:	68a3      	ldr	r3, [r4, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 80bf 	beq.w	8000cf4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b76:	f7ff fb5f 	bl	8000238 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b7a:	4d52      	ldr	r5, [pc, #328]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b7c:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b7e:	f241 3688 	movw	r6, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b84:	079b      	lsls	r3, r3, #30
 8000b86:	d49d      	bmi.n	8000ac4 <HAL_RCC_OscConfig+0xb8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b88:	f7ff fb56 	bl	8000238 <HAL_GetTick>
 8000b8c:	1bc0      	subs	r0, r0, r7
 8000b8e:	42b0      	cmp	r0, r6
 8000b90:	d9f7      	bls.n	8000b82 <HAL_RCC_OscConfig+0x176>
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000b92:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b94:	b003      	add	sp, #12
 8000b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b98:	6852      	ldr	r2, [r2, #4]
 8000b9a:	0256      	lsls	r6, r2, #9
 8000b9c:	f53f af6d 	bmi.w	8000a7a <HAL_RCC_OscConfig+0x6e>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	0795      	lsls	r5, r2, #30
 8000ba6:	d531      	bpl.n	8000c0c <HAL_RCC_OscConfig+0x200>
 8000ba8:	68e2      	ldr	r2, [r4, #12]
 8000baa:	2a01      	cmp	r2, #1
 8000bac:	d02e      	beq.n	8000c0c <HAL_RCC_OscConfig+0x200>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8000bae:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bb4:	4a47      	ldr	r2, [pc, #284]	; (8000cd4 <HAL_RCC_OscConfig+0x2c8>)
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb6:	4d43      	ldr	r5, [pc, #268]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bba:	f7ff fb3d 	bl	8000238 <HAL_GetTick>
 8000bbe:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bc0:	e004      	b.n	8000bcc <HAL_RCC_OscConfig+0x1c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bc2:	f7ff fb39 	bl	8000238 <HAL_GetTick>
 8000bc6:	1b80      	subs	r0, r0, r6
 8000bc8:	2802      	cmp	r0, #2
 8000bca:	d8e2      	bhi.n	8000b92 <HAL_RCC_OscConfig+0x186>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bcc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bce:	0798      	lsls	r0, r3, #30
 8000bd0:	d4f7      	bmi.n	8000bc2 <HAL_RCC_OscConfig+0x1b6>
 8000bd2:	e7a9      	b.n	8000b28 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fb30 	bl	8000238 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd8:	4d3a      	ldr	r5, [pc, #232]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bda:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bdc:	e004      	b.n	8000be8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bde:	f7ff fb2b 	bl	8000238 <HAL_GetTick>
 8000be2:	1b80      	subs	r0, r0, r6
 8000be4:	2864      	cmp	r0, #100	; 0x64
 8000be6:	d8d4      	bhi.n	8000b92 <HAL_RCC_OscConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	039b      	lsls	r3, r3, #14
 8000bec:	d4f7      	bmi.n	8000bde <HAL_RCC_OscConfig+0x1d2>
 8000bee:	e735      	b.n	8000a5c <HAL_RCC_OscConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bf0:	684a      	ldr	r2, [r1, #4]
 8000bf2:	0250      	lsls	r0, r2, #9
 8000bf4:	f57f af1d 	bpl.w	8000a32 <HAL_RCC_OscConfig+0x26>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
 8000bfa:	6812      	ldr	r2, [r2, #0]
 8000bfc:	0391      	lsls	r1, r2, #14
 8000bfe:	f57f af2e 	bpl.w	8000a5e <HAL_RCC_OscConfig+0x52>
 8000c02:	6862      	ldr	r2, [r4, #4]
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f47f af2a 	bne.w	8000a5e <HAL_RCC_OscConfig+0x52>
 8000c0a:	e7d0      	b.n	8000bae <HAL_RCC_OscConfig+0x1a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c0c:	4d2d      	ldr	r5, [pc, #180]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
 8000c0e:	21f8      	movs	r1, #248	; 0xf8
 8000c10:	6828      	ldr	r0, [r5, #0]
 8000c12:	fa91 f1a1 	rbit	r1, r1
 8000c16:	6922      	ldr	r2, [r4, #16]
 8000c18:	fab1 f181 	clz	r1, r1
 8000c1c:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8000c20:	408a      	lsls	r2, r1
 8000c22:	4302      	orrs	r2, r0
 8000c24:	602a      	str	r2, [r5, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c26:	071a      	lsls	r2, r3, #28
 8000c28:	f57f af4a 	bpl.w	8000ac0 <HAL_RCC_OscConfig+0xb4>
 8000c2c:	e769      	b.n	8000b02 <HAL_RCC_OscConfig+0xf6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c2e:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c30:	4d24      	ldr	r5, [pc, #144]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c34:	f7ff fb00 	bl	8000238 <HAL_GetTick>
 8000c38:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3a:	e004      	b.n	8000c46 <HAL_RCC_OscConfig+0x23a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fafc 	bl	8000238 <HAL_GetTick>
 8000c40:	1b80      	subs	r0, r0, r6
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d8a5      	bhi.n	8000b92 <HAL_RCC_OscConfig+0x186>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c46:	682b      	ldr	r3, [r5, #0]
 8000c48:	0799      	lsls	r1, r3, #30
 8000c4a:	d4f7      	bmi.n	8000c3c <HAL_RCC_OscConfig+0x230>
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	e735      	b.n	8000abc <HAL_RCC_OscConfig+0xb0>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c50:	f7ff faf2 	bl	8000238 <HAL_GetTick>
 8000c54:	4606      	mov	r6, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c56:	e004      	b.n	8000c62 <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c58:	f7ff faee 	bl	8000238 <HAL_GetTick>
 8000c5c:	1b80      	subs	r0, r0, r6
 8000c5e:	2802      	cmp	r0, #2
 8000c60:	d897      	bhi.n	8000b92 <HAL_RCC_OscConfig+0x186>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c62:	682b      	ldr	r3, [r5, #0]
 8000c64:	0199      	lsls	r1, r3, #6
 8000c66:	d4f7      	bmi.n	8000c58 <HAL_RCC_OscConfig+0x24c>
 8000c68:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8000c6c:	fa96 f6a6 	rbit	r6, r6
 8000c70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c74:	fab6 f686 	clz	r6, r6
 8000c78:	fa92 f2a2 	rbit	r2, r2
 8000c7c:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000c80:	fab2 f082 	clz	r0, r2
 8000c84:	fa91 f1a1 	rbit	r1, r1
 8000c88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c8a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8000c8c:	69e3      	ldr	r3, [r4, #28]
 8000c8e:	f8d4 e020 	ldr.w	lr, [r4, #32]
 8000c92:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8000c94:	0852      	lsrs	r2, r2, #1
 8000c96:	ea43 030e 	orr.w	r3, r3, lr
 8000c9a:	fa07 f606 	lsl.w	r6, r7, r6
 8000c9e:	3a01      	subs	r2, #1
 8000ca0:	4082      	lsls	r2, r0
 8000ca2:	fab1 f181 	clz	r1, r1
 8000ca6:	4333      	orrs	r3, r6
 8000ca8:	fa04 f101 	lsl.w	r1, r4, r1
 8000cac:	4313      	orrs	r3, r2
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_RCC_OscConfig+0x2c4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb0:	4c04      	ldr	r4, [pc, #16]	; (8000cc4 <HAL_RCC_OscConfig+0x2b8>)
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cb2:	430b      	orrs	r3, r1
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cb4:	2101      	movs	r1, #1
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cb6:	606b      	str	r3, [r5, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cb8:	6011      	str	r1, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cba:	f7ff fabd 	bl	8000238 <HAL_GetTick>
 8000cbe:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cc0:	e014      	b.n	8000cec <HAL_RCC_OscConfig+0x2e0>
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40023802 	.word	0x40023802
 8000ccc:	42470000 	.word	0x42470000
 8000cd0:	42470060 	.word	0x42470060
 8000cd4:	42470e80 	.word	0x42470e80
 8000cd8:	40007000 	.word	0x40007000
 8000cdc:	40023870 	.word	0x40023870
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce0:	f7ff faaa 	bl	8000238 <HAL_GetTick>
 8000ce4:	1b40      	subs	r0, r0, r5
 8000ce6:	2802      	cmp	r0, #2
 8000ce8:	f63f af53 	bhi.w	8000b92 <HAL_RCC_OscConfig+0x186>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	019a      	lsls	r2, r3, #6
 8000cf0:	d5f6      	bpl.n	8000ce0 <HAL_RCC_OscConfig+0x2d4>
 8000cf2:	e703      	b.n	8000afc <HAL_RCC_OscConfig+0xf0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf4:	f7ff faa0 	bl	8000238 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cf8:	4d06      	ldr	r5, [pc, #24]	; (8000d14 <HAL_RCC_OscConfig+0x308>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cfa:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cfc:	f241 3688 	movw	r6, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d02:	0798      	lsls	r0, r3, #30
 8000d04:	f57f aede 	bpl.w	8000ac4 <HAL_RCC_OscConfig+0xb8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d08:	f7ff fa96 	bl	8000238 <HAL_GetTick>
 8000d0c:	1bc0      	subs	r0, r0, r7
 8000d0e:	42b0      	cmp	r0, r6
 8000d10:	d9f6      	bls.n	8000d00 <HAL_RCC_OscConfig+0x2f4>
 8000d12:	e73e      	b.n	8000b92 <HAL_RCC_OscConfig+0x186>
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	b089      	sub	sp, #36	; 0x24
 8000d1e:	4616      	mov	r6, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000d20:	b310      	cbz	r0, 8000d68 <HAL_RCC_MCOConfig+0x50>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000d22:	4d23      	ldr	r5, [pc, #140]	; (8000db0 <HAL_RCC_MCOConfig+0x98>)
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000d24:	4823      	ldr	r0, [pc, #140]	; (8000db4 <HAL_RCC_MCOConfig+0x9c>)
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000d2c:	f042 0204 	orr.w	r2, r2, #4
 8000d30:	632a      	str	r2, [r5, #48]	; 0x30
 8000d32:	6b29      	ldr	r1, [r5, #48]	; 0x30
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	9305      	str	r3, [sp, #20]
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000d36:	f001 0104 	and.w	r1, r1, #4
 8000d3a:	9102      	str	r1, [sp, #8]
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000d3c:	f44f 7e00 	mov.w	lr, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2203      	movs	r2, #3
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000d42:	9902      	ldr	r1, [sp, #8]
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	9206      	str	r2, [sp, #24]
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000d48:	a903      	add	r1, sp, #12
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d4a:	9307      	str	r3, [sp, #28]
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000d4c:	f8cd e00c 	str.w	lr, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000d52:	f7ff fc2b 	bl	80005ac <HAL_GPIO_Init>
    
    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000d56:	68aa      	ldr	r2, [r5, #8]
 8000d58:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
 8000d5c:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8000d60:	4314      	orrs	r4, r2
 8000d62:	60ac      	str	r4, [r5, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000d64:	b009      	add	sp, #36	; 0x24
 8000d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8000d68:	4d11      	ldr	r5, [pc, #68]	; (8000db0 <HAL_RCC_MCOConfig+0x98>)
 8000d6a:	9001      	str	r0, [sp, #4]
 8000d6c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	632a      	str	r2, [r5, #48]	; 0x30
 8000d74:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000d76:	f002 0201 	and.w	r2, r2, #1
 8000d7a:	9201      	str	r2, [sp, #4]
 8000d7c:	4603      	mov	r3, r0
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000d7e:	f44f 7e80 	mov.w	lr, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2203      	movs	r2, #3
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8000d84:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000d86:	480c      	ldr	r0, [pc, #48]	; (8000db8 <HAL_RCC_MCOConfig+0xa0>)
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	9305      	str	r3, [sp, #20]
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000d8c:	a903      	add	r1, sp, #12
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d8e:	9307      	str	r3, [sp, #28]
    __MCO1_CLK_ENABLE();
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	9206      	str	r2, [sp, #24]
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000d92:	f8cd e00c 	str.w	lr, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000d98:	f7ff fc08 	bl	80005ac <HAL_GPIO_Init>
    
    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000d9c:	68ab      	ldr	r3, [r5, #8]
 8000d9e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000da2:	ea43 0206 	orr.w	r2, r3, r6
 8000da6:	4314      	orrs	r4, r2
 8000da8:	60ac      	str	r4, [r5, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000daa:	b009      	add	sp, #36	; 0x24
 8000dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8000dbc:	4b01      	ldr	r3, [pc, #4]	; (8000dc4 <HAL_RCC_EnableCSS+0x8>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	4770      	bx	lr
 8000dc4:	4247004c 	.word	0x4247004c

08000dc8 <HAL_RCC_DisableCSS>:
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8000dc8:	4b01      	ldr	r3, [pc, #4]	; (8000dd0 <HAL_RCC_DisableCSS+0x8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	4770      	bx	lr
 8000dd0:	4247004c 	.word	0x4247004c

08000dd4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x68>)
 8000dd6:	6893      	ldr	r3, [r2, #8]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d02b      	beq.n	8000e38 <HAL_RCC_GetSysClockFreq+0x64>
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d127      	bne.n	8000e34 <HAL_RCC_GetSysClockFreq+0x60>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000de4:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000de6:	6853      	ldr	r3, [r2, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000de8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000df0:	6853      	ldr	r3, [r2, #4]
 8000df2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000df6:	fa92 f0a2 	rbit	r0, r2
 8000dfa:	fab0 f080 	clz	r0, r0
 8000dfe:	ea03 0302 	and.w	r3, r3, r2
 8000e02:	fa23 f300 	lsr.w	r3, r3, r0
 8000e06:	bf14      	ite	ne
 8000e08:	480d      	ldrne	r0, [pc, #52]	; (8000e40 <HAL_RCC_GetSysClockFreq+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000e0a:	480e      	ldreq	r0, [pc, #56]	; (8000e44 <HAL_RCC_GetSysClockFreq+0x70>)
 8000e0c:	fbb0 f0f1 	udiv	r0, r0, r1
 8000e10:	fb00 f003 	mul.w	r0, r0, r3
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x68>)
 8000e16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	fa92 f2a2 	rbit	r2, r2
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e28:	40d3      	lsrs	r3, r2
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8000e2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e32:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e36:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e38:	4801      	ldr	r0, [pc, #4]	; (8000e40 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000e3a:	4770      	bx	lr
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	007a1200 	.word	0x007a1200
 8000e44:	00f42400 	.word	0x00f42400

08000e48 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e48:	4a57      	ldr	r2, [pc, #348]	; (8000fa8 <HAL_RCC_ClockConfig+0x160>)
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	f003 030f 	and.w	r3, r3, #15
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d208      	bcs.n	8000e66 <HAL_RCC_ClockConfig+0x1e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e54:	b2cb      	uxtb	r3, r1
 8000e56:	7013      	strb	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e58:	6813      	ldr	r3, [r2, #0]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d001      	beq.n	8000e66 <HAL_RCC_ClockConfig+0x1e>
    {
      return HAL_ERROR;
 8000e62:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8000e64:	4770      	bx	lr
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e66:	6803      	ldr	r3, [r0, #0]
 8000e68:	079a      	lsls	r2, r3, #30
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e6e:	d506      	bpl.n	8000e7e <HAL_RCC_ClockConfig+0x36>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e70:	4c4e      	ldr	r4, [pc, #312]	; (8000fac <HAL_RCC_ClockConfig+0x164>)
 8000e72:	6885      	ldr	r5, [r0, #8]
 8000e74:	68a2      	ldr	r2, [r4, #8]
 8000e76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	60a2      	str	r2, [r4, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e7e:	07df      	lsls	r7, r3, #31
 8000e80:	4606      	mov	r6, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	d526      	bpl.n	8000ed4 <HAL_RCC_ClockConfig+0x8c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e86:	6842      	ldr	r2, [r0, #4]
 8000e88:	2a01      	cmp	r2, #1
 8000e8a:	f000 8087 	beq.w	8000f9c <HAL_RCC_ClockConfig+0x154>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e8e:	1e93      	subs	r3, r2, #2
 8000e90:	2b01      	cmp	r3, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <HAL_RCC_ClockConfig+0x164>)
 8000e94:	681b      	ldr	r3, [r3, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e96:	d97b      	bls.n	8000f90 <HAL_RCC_ClockConfig+0x148>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	0799      	lsls	r1, r3, #30
 8000e9a:	d528      	bpl.n	8000eee <HAL_RCC_ClockConfig+0xa6>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e9c:	4d43      	ldr	r5, [pc, #268]	; (8000fac <HAL_RCC_ClockConfig+0x164>)
 8000e9e:	68ab      	ldr	r3, [r5, #8]
 8000ea0:	f023 0303 	bic.w	r3, r3, #3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60ab      	str	r3, [r5, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ea8:	f7ff f9c6 	bl	8000238 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eac:	6873      	ldr	r3, [r6, #4]
 8000eae:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000eb0:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb2:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eb6:	d04f      	beq.n	8000f58 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d058      	beq.n	8000f6e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d105      	bne.n	8000ecc <HAL_RCC_ClockConfig+0x84>
 8000ec0:	e060      	b.n	8000f84 <HAL_RCC_ClockConfig+0x13c>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ec2:	f7ff f9b9 	bl	8000238 <HAL_GetTick>
 8000ec6:	1bc0      	subs	r0, r0, r7
 8000ec8:	4540      	cmp	r0, r8
 8000eca:	d864      	bhi.n	8000f96 <HAL_RCC_ClockConfig+0x14e>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ecc:	68ab      	ldr	r3, [r5, #8]
 8000ece:	f013 0f0c 	tst.w	r3, #12
 8000ed2:	d1f6      	bne.n	8000ec2 <HAL_RCC_ClockConfig+0x7a>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ed4:	4a34      	ldr	r2, [pc, #208]	; (8000fa8 <HAL_RCC_ClockConfig+0x160>)
 8000ed6:	6813      	ldr	r3, [r2, #0]
 8000ed8:	f003 030f 	and.w	r3, r3, #15
 8000edc:	429c      	cmp	r4, r3
 8000ede:	d209      	bcs.n	8000ef4 <HAL_RCC_ClockConfig+0xac>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee0:	b2e3      	uxtb	r3, r4
 8000ee2:	7013      	strb	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ee4:	6813      	ldr	r3, [r2, #0]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	429c      	cmp	r4, r3
 8000eec:	d002      	beq.n	8000ef4 <HAL_RCC_ClockConfig+0xac>
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
 8000ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef4:	6833      	ldr	r3, [r6, #0]
 8000ef6:	075a      	lsls	r2, r3, #29
 8000ef8:	d506      	bpl.n	8000f08 <HAL_RCC_ClockConfig+0xc0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000efa:	492c      	ldr	r1, [pc, #176]	; (8000fac <HAL_RCC_ClockConfig+0x164>)
 8000efc:	68f0      	ldr	r0, [r6, #12]
 8000efe:	688a      	ldr	r2, [r1, #8]
 8000f00:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000f04:	4302      	orrs	r2, r0
 8000f06:	608a      	str	r2, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f08:	071b      	lsls	r3, r3, #28
 8000f0a:	d507      	bpl.n	8000f1c <HAL_RCC_ClockConfig+0xd4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f0c:	4a27      	ldr	r2, [pc, #156]	; (8000fac <HAL_RCC_ClockConfig+0x164>)
 8000f0e:	6931      	ldr	r1, [r6, #16]
 8000f10:	6893      	ldr	r3, [r2, #8]
 8000f12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f1a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000f1c:	f7ff ff5a 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <HAL_RCC_ClockConfig+0x164>)
 8000f22:	4601      	mov	r1, r0
 8000f24:	22f0      	movs	r2, #240	; 0xf0
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	fa92 f2a2 	rbit	r2, r2
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f34:	40d3      	lsrs	r3, r2
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <HAL_RCC_ClockConfig+0x168>)
 8000f38:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <HAL_RCC_ClockConfig+0x16c>)
 8000f3a:	5cc3      	ldrb	r3, [r0, r3]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f3c:	2000      	movs	r0, #0
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f44:	f7ff f940 	bl	80001c8 <HAL_InitTick>
  
  return HAL_OK;
 8000f48:	2000      	movs	r0, #0
}
 8000f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f4e:	f7ff f973 	bl	8000238 <HAL_GetTick>
 8000f52:	1bc0      	subs	r0, r0, r7
 8000f54:	4540      	cmp	r0, r8
 8000f56:	d81e      	bhi.n	8000f96 <HAL_RCC_ClockConfig+0x14e>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f58:	68ab      	ldr	r3, [r5, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d1f5      	bne.n	8000f4e <HAL_RCC_ClockConfig+0x106>
 8000f62:	e7b7      	b.n	8000ed4 <HAL_RCC_ClockConfig+0x8c>
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f64:	f7ff f968 	bl	8000238 <HAL_GetTick>
 8000f68:	1bc0      	subs	r0, r0, r7
 8000f6a:	4540      	cmp	r0, r8
 8000f6c:	d813      	bhi.n	8000f96 <HAL_RCC_ClockConfig+0x14e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f6e:	68ab      	ldr	r3, [r5, #8]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d1f5      	bne.n	8000f64 <HAL_RCC_ClockConfig+0x11c>
 8000f78:	e7ac      	b.n	8000ed4 <HAL_RCC_ClockConfig+0x8c>
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f7a:	f7ff f95d 	bl	8000238 <HAL_GetTick>
 8000f7e:	1bc0      	subs	r0, r0, r7
 8000f80:	4540      	cmp	r0, r8
 8000f82:	d808      	bhi.n	8000f96 <HAL_RCC_ClockConfig+0x14e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f84:	68ab      	ldr	r3, [r5, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b0c      	cmp	r3, #12
 8000f8c:	d1f5      	bne.n	8000f7a <HAL_RCC_ClockConfig+0x132>
 8000f8e:	e7a1      	b.n	8000ed4 <HAL_RCC_ClockConfig+0x8c>
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f90:	0198      	lsls	r0, r3, #6
 8000f92:	d483      	bmi.n	8000e9c <HAL_RCC_ClockConfig+0x54>
 8000f94:	e7ab      	b.n	8000eee <HAL_RCC_ClockConfig+0xa6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000f96:	2003      	movs	r0, #3
 8000f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_RCC_ClockConfig+0x164>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	039d      	lsls	r5, r3, #14
 8000fa2:	f53f af7b 	bmi.w	8000e9c <HAL_RCC_ClockConfig+0x54>
 8000fa6:	e7a2      	b.n	8000eee <HAL_RCC_ClockConfig+0xa6>
 8000fa8:	40023c00 	.word	0x40023c00
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	08007494 	.word	0x08007494
 8000fb4:	20000434 	.word	0x20000434

08000fb8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000fb8:	4b01      	ldr	r3, [pc, #4]	; (8000fc0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000434 	.word	0x20000434

08000fc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fc6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	fa92 f2a2 	rbit	r2, r2
 8000fd0:	fab2 f282 	clz	r2, r2
 8000fd4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000fd8:	40d3      	lsrs	r3, r2
 8000fda:	4904      	ldr	r1, [pc, #16]	; (8000fec <HAL_RCC_GetPCLK1Freq+0x28>)
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_RCC_GetPCLK1Freq+0x2c>)
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000fde:	5ccb      	ldrb	r3, [r1, r3]
 8000fe0:	6810      	ldr	r0, [r2, #0]
}
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	08007494 	.word	0x08007494
 8000ff0:	20000434 	.word	0x20000434

08000ff4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ff6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	fa92 f2a2 	rbit	r2, r2
 8001000:	fab2 f282 	clz	r2, r2
 8001004:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001008:	40d3      	lsrs	r3, r2
 800100a:	4904      	ldr	r1, [pc, #16]	; (800101c <HAL_RCC_GetPCLK2Freq+0x28>)
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_RCC_GetPCLK2Freq+0x2c>)
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800100e:	5ccb      	ldrb	r3, [r1, r3]
 8001010:	6810      	ldr	r0, [r2, #0]
} 
 8001012:	40d8      	lsrs	r0, r3
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	08007494 	.word	0x08007494
 8001020:	20000434 	.word	0x20000434

08001024 <HAL_RCC_GetOscConfig>:
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8001024:	220f      	movs	r2, #15
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_RCC_GetOscConfig+0xd8>)
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8001028:	6002      	str	r2, [r0, #0]
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	0351      	lsls	r1, r2, #13
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102e:	b410      	push	{r4}
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001030:	d555      	bpl.n	80010de <HAL_RCC_GetOscConfig+0xba>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8001032:	2305      	movs	r3, #5
 8001034:	6043      	str	r3, [r0, #4]
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
  
  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HAL_RCC_GetOscConfig+0xd8>)
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8001038:	4930      	ldr	r1, [pc, #192]	; (80010fc <HAL_RCC_GetOscConfig+0xd8>)
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
  
  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f013 0301 	ands.w	r3, r3, #1
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8001040:	bf18      	it	ne
 8001042:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8001044:	60c3      	str	r3, [r0, #12]
 8001046:	22f8      	movs	r2, #248	; 0xf8
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8001048:	680b      	ldr	r3, [r1, #0]
 800104a:	fa92 f2a2 	rbit	r2, r2
 800104e:	fab2 f282 	clz	r2, r2
 8001052:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001056:	40d3      	lsrs	r3, r2
 8001058:	6103      	str	r3, [r0, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800105a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800105c:	075a      	lsls	r2, r3, #29
 800105e:	d545      	bpl.n	80010ec <HAL_RCC_GetOscConfig+0xc8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8001060:	2305      	movs	r3, #5
 8001062:	6083      	str	r3, [r0, #8]
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_RCC_GetOscConfig+0xd8>)
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001066:	4a25      	ldr	r2, [pc, #148]	; (80010fc <HAL_RCC_GetOscConfig+0xd8>)
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800106a:	f013 0301 	ands.w	r3, r3, #1
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800106e:	bf18      	it	ne
 8001070:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8001072:	6143      	str	r3, [r0, #20]
  }
  
  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_RCC_GetOscConfig+0xd8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	01db      	lsls	r3, r3, #7
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800107a:	bf4c      	ite	mi
 800107c:	2302      	movmi	r3, #2
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800107e:	2301      	movpl	r3, #1
 8001080:	6183      	str	r3, [r0, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001082:	6853      	ldr	r3, [r2, #4]
 8001084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001088:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 800108a:	6853      	ldr	r3, [r2, #4]
 800108c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001090:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001092:	6853      	ldr	r3, [r2, #4]
 8001094:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 8001098:	fa94 f1a4 	rbit	r1, r4
 800109c:	fab1 f181 	clz	r1, r1
 80010a0:	4023      	ands	r3, r4
 80010a2:	40cb      	lsrs	r3, r1
 80010a4:	6243      	str	r3, [r0, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
 80010a6:	6853      	ldr	r3, [r2, #4]
 80010a8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80010ac:	fa91 f1a1 	rbit	r1, r1
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010b8:	fab1 f181 	clz	r1, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	40cb      	lsrs	r3, r1
 80010c0:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
 80010c2:	6853      	ldr	r3, [r2, #4]
 80010c4:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80010d4:	40d3      	lsrs	r3, r2
 80010d6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80010d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010dc:	4770      	bx	lr
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80010e4:	bf18      	it	ne
 80010e6:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80010e8:	6043      	str	r3, [r0, #4]
 80010ea:	e7a4      	b.n	8001036 <HAL_RCC_GetOscConfig+0x12>
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80010ec:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80010ee:	f013 0301 	ands.w	r3, r3, #1
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80010f2:	bf18      	it	ne
 80010f4:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80010f6:	6083      	str	r3, [r0, #8]
 80010f8:	e7b4      	b.n	8001064 <HAL_RCC_GetOscConfig+0x40>
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_RCC_GetClockConfig+0x3c>)
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001102:	220f      	movs	r2, #15
 8001104:	6002      	str	r2, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001114:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800111c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	08db      	lsrs	r3, r3, #3
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001122:	b410      	push	{r4}
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001124:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001128:	4c05      	ldr	r4, [pc, #20]	; (8001140 <HAL_RCC_GetClockConfig+0x40>)
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800112a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800112c:	6823      	ldr	r3, [r4, #0]
}
 800112e:	f85d 4b04 	ldr.w	r4, [sp], #4
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	600b      	str	r3, [r1, #0]
}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40023c00 	.word	0x40023c00

08001144 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001148:	b508      	push	{r3, lr}
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_RCC_NMI_IRQHandler+0x18>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	061b      	lsls	r3, r3, #24
 8001150:	d504      	bpl.n	800115c <HAL_RCC_NMI_IRQHandler+0x14>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001152:	f7ff fff7 	bl	8001144 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	bd08      	pop	{r3, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	4002380e 	.word	0x4002380e

08001168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800116a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800116c:	f8d1 e008 	ldr.w	lr, [r1, #8]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001170:	680e      	ldr	r6, [r1, #0]
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001172:	4d13      	ldr	r5, [pc, #76]	; (80011c0 <TIM_OC1_SetConfig+0x58>)
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001174:	f024 0401 	bic.w	r4, r4, #1
 8001178:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800117a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800117c:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800117e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001180:	f023 0302 	bic.w	r3, r3, #2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001184:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001188:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800118a:	ea43 030e 	orr.w	r3, r3, lr
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800118e:	ea42 0206 	orr.w	r2, r2, r6
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001192:	d008      	beq.n	80011a6 <TIM_OC1_SetConfig+0x3e>
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <TIM_OC1_SetConfig+0x5c>)
 8001196:	42a0      	cmp	r0, r4
 8001198:	d005      	beq.n	80011a6 <TIM_OC1_SetConfig+0x3e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800119a:	6849      	ldr	r1, [r1, #4]
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800119c:	6047      	str	r7, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800119e:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011a0:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80011a2:	6203      	str	r3, [r0, #32]
} 
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011a6:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011a8:	694d      	ldr	r5, [r1, #20]
 80011aa:	698c      	ldr	r4, [r1, #24]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80011ac:	f023 0308 	bic.w	r3, r3, #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011b0:	f427 7740 	bic.w	r7, r7, #768	; 0x300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011b4:	4333      	orrs	r3, r6
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011b6:	432c      	orrs	r4, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80011b8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011bc:	4327      	orrs	r7, r4
 80011be:	e7ec      	b.n	800119a <TIM_OC1_SetConfig+0x32>
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40010400 	.word	0x40010400

080011c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011ca:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011cc:	f8d1 e008 	ldr.w	lr, [r1, #8]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011d0:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80011d2:	4d14      	ldr	r5, [pc, #80]	; (8001224 <TIM_OC3_SetConfig+0x5c>)
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011d4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80011d8:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80011dc:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80011de:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80011e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80011e4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80011e8:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011ea:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011ee:	ea42 0206 	orr.w	r2, r2, r6
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80011f2:	d008      	beq.n	8001206 <TIM_OC3_SetConfig+0x3e>
 80011f4:	4c0c      	ldr	r4, [pc, #48]	; (8001228 <TIM_OC3_SetConfig+0x60>)
 80011f6:	42a0      	cmp	r0, r4
 80011f8:	d005      	beq.n	8001206 <TIM_OC3_SetConfig+0x3e>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80011fa:	6849      	ldr	r1, [r1, #4]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011fc:	6047      	str	r7, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011fe:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001200:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001202:	6203      	str	r3, [r0, #32]
}
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001206:	68ce      	ldr	r6, [r1, #12]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001208:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800120a:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800120c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001210:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001214:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001218:	432c      	orrs	r4, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800121a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800121e:	ea47 1704 	orr.w	r7, r7, r4, lsl #4
 8001222:	e7ea      	b.n	80011fa <TIM_OC3_SetConfig+0x32>
 8001224:	40010000 	.word	0x40010000
 8001228:	40010400 	.word	0x40010400

0800122c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800122c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800122e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001230:	688f      	ldr	r7, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001232:	680e      	ldr	r6, [r1, #0]
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001234:	4d10      	ldr	r5, [pc, #64]	; (8001278 <TIM_OC4_SetConfig+0x4c>)
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001236:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800123a:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800123c:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800123e:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001240:	69c3      	ldr	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001246:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800124a:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800124c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001250:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001254:	d00a      	beq.n	800126c <TIM_OC4_SetConfig+0x40>
 8001256:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800125a:	42a8      	cmp	r0, r5
 800125c:	d006      	beq.n	800126c <TIM_OC4_SetConfig+0x40>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800125e:	6849      	ldr	r1, [r1, #4]
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001260:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001262:	61c3      	str	r3, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001264:	bcf0      	pop	{r4, r5, r6, r7}
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001266:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001268:	6202      	str	r2, [r0, #32]
}
 800126a:	4770      	bx	lr
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800126c:	694d      	ldr	r5, [r1, #20]
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800126e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001272:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001276:	e7f2      	b.n	800125e <TIM_OC4_SetConfig+0x32>
 8001278:	40010000 	.word	0x40010000

0800127c <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800127c:	6802      	ldr	r2, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800127e:	6848      	ldr	r0, [r1, #4]
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001280:	6893      	ldr	r3, [r2, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  * @param  sSlaveConfig: The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8001286:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001288:	4303      	orrs	r3, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800128a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800128c:	f023 0307 	bic.w	r3, r3, #7
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001290:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001292:	2850      	cmp	r0, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001294:	6093      	str	r3, [r2, #8]
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001296:	d036      	beq.n	8001306 <TIM_SlaveTimer_SetConfig+0x8a>
 8001298:	d924      	bls.n	80012e4 <TIM_SlaveTimer_SetConfig+0x68>
 800129a:	2860      	cmp	r0, #96	; 0x60
 800129c:	d00e      	beq.n	80012bc <TIM_SlaveTimer_SetConfig+0x40>
 800129e:	2870      	cmp	r0, #112	; 0x70
 80012a0:	d10a      	bne.n	80012b8 <TIM_SlaveTimer_SetConfig+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80012a2:	68cb      	ldr	r3, [r1, #12]
 80012a4:	688c      	ldr	r4, [r1, #8]
 80012a6:	6908      	ldr	r0, [r1, #16]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80012a8:	6891      	ldr	r1, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80012aa:	4323      	orrs	r3, r4
 80012ac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012b0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80012b4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012b6:	6093      	str	r3, [r2, #8]
    break;
       
  default:
    break;
  }
}
 80012b8:	bc70      	pop	{r4, r5, r6}
 80012ba:	4770      	bx	lr
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012bc:	6a10      	ldr	r0, [r2, #32]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      
      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012be:	688c      	ldr	r4, [r1, #8]
 80012c0:	690d      	ldr	r5, [r1, #16]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012c2:	f020 0010 	bic.w	r0, r0, #16
 80012c6:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012c8:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80012ca:	6a13      	ldr	r3, [r2, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012cc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80012d4:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);
 80012d8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80012dc:	6191      	str	r1, [r2, #24]
    break;
       
  default:
    break;
  }
}
 80012de:	bc70      	pop	{r4, r5, r6}
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  TIMx->CCER = tmpccer;
 80012e0:	6213      	str	r3, [r2, #32]
    break;
       
  default:
    break;
  }
}
 80012e2:	4770      	bx	lr

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80012e4:	2840      	cmp	r0, #64	; 0x40
 80012e6:	d1e7      	bne.n	80012b8 <TIM_SlaveTimer_SetConfig+0x3c>
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      
      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80012e8:	6a14      	ldr	r4, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80012ea:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
      
      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80012ec:	690d      	ldr	r5, [r1, #16]
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      
      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80012ee:	f020 0001 	bic.w	r0, r0, #1
 80012f2:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 80012f4:	6993      	ldr	r3, [r2, #24]
      
      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80012fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
      
      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80012fe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;                               
 8001300:	6214      	str	r4, [r2, #32]
    break;
       
  default:
    break;
  }
}
 8001302:	bc70      	pop	{r4, r5, r6}
 8001304:	4770      	bx	lr
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001306:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001308:	6a15      	ldr	r5, [r2, #32]
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800130a:	690e      	ldr	r6, [r1, #16]
 800130c:	6888      	ldr	r0, [r1, #8]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800130e:	f025 0501 	bic.w	r5, r5, #1
 8001312:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001314:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001316:	f024 010a 	bic.w	r1, r4, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800131a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800131e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001322:	4301      	orrs	r1, r0
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001324:	6193      	str	r3, [r2, #24]
    break;
       
  default:
    break;
  }
}
 8001326:	bc70      	pop	{r4, r5, r6}
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  TIMx->CCER = tmpccer;
 8001328:	6211      	str	r1, [r2, #32]
    break;
       
  default:
    break;
  }
}
 800132a:	4770      	bx	lr

0800132c <HAL_TIM_Base_MspInit>:
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop

08001330 <HAL_TIM_Base_MspDeInit>:
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <HAL_TIM_Base_DeInit>:
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{  
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001334:	2202      	movs	r2, #2
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001336:	6803      	ldr	r3, [r0, #0]
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{  
 8001338:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800133a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800133e:	6a19      	ldr	r1, [r3, #32]
 8001340:	f241 1211 	movw	r2, #4369	; 0x1111
 8001344:	4211      	tst	r1, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{  
 8001346:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001348:	d108      	bne.n	800135c <HAL_TIM_Base_DeInit+0x28>
 800134a:	6a19      	ldr	r1, [r3, #32]
 800134c:	f240 4244 	movw	r2, #1092	; 0x444
 8001350:	4211      	tst	r1, r2
 8001352:	d103      	bne.n	800135c <HAL_TIM_Base_DeInit+0x28>
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff ffe7 	bl	8001330 <HAL_TIM_Base_MspDeInit>
  
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 8001362:	2000      	movs	r0, #0
 8001364:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  
  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001368:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 800136c:	bd10      	pop	{r4, pc}
 800136e:	bf00      	nop

08001370 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001370:	6801      	ldr	r1, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001372:	2202      	movs	r2, #2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001374:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001376:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800137a:	680a      	ldr	r2, [r1, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800137c:	2401      	movs	r4, #1
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800137e:	4603      	mov	r3, r0
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001380:	4322      	orrs	r2, r4
 8001382:	600a      	str	r2, [r1, #0]
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8001384:	2000      	movs	r0, #0
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001386:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 800138a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001390:	2202      	movs	r2, #2
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001392:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001394:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001398:	6a19      	ldr	r1, [r3, #32]
 800139a:	f241 1211 	movw	r2, #4369	; 0x1111
 800139e:	4211      	tst	r1, r2
 80013a0:	d108      	bne.n	80013b4 <HAL_TIM_Base_Stop+0x24>
 80013a2:	6a19      	ldr	r1, [r3, #32]
 80013a4:	f240 4244 	movw	r2, #1092	; 0x444
 80013a8:	4211      	tst	r1, r2
 80013aa:	d103      	bne.n	80013b4 <HAL_TIM_Base_Stop+0x24>
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 80013ba:	2000      	movs	r0, #0
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013c0:	6803      	ldr	r3, [r0, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	f042 0201 	orr.w	r2, r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80013d2:	2000      	movs	r0, #0
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80013d8:	6803      	ldr	r3, [r0, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80013e2:	6a19      	ldr	r1, [r3, #32]
 80013e4:	f241 1211 	movw	r2, #4369	; 0x1111
 80013e8:	4211      	tst	r1, r2
 80013ea:	d108      	bne.n	80013fe <HAL_TIM_Base_Stop_IT+0x26>
 80013ec:	6a19      	ldr	r1, [r3, #32]
 80013ee:	f240 4244 	movw	r2, #1092	; 0x444
 80013f2:	4211      	tst	r1, r2
 80013f4:	d103      	bne.n	80013fe <HAL_TIM_Base_Stop_IT+0x26>
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 80013fe:	2000      	movs	r0, #0
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <HAL_TIM_Base_Start_DMA>:
  * @param  pData: The source Buffer address.
  * @param  Length: The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8001404:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance)); 
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001406:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800140a:	b2e4      	uxtb	r4, r4
 800140c:	2c02      	cmp	r4, #2
 800140e:	d021      	beq.n	8001454 <HAL_TIM_Base_Start_DMA+0x50>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8001410:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8001414:	b2e4      	uxtb	r4, r4
 8001416:	2c01      	cmp	r4, #1
 8001418:	d015      	beq.n	8001446 <HAL_TIM_Base_Start_DMA+0x42>
 800141a:	4604      	mov	r4, r0
 800141c:	4613      	mov	r3, r2
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }  
  /* Set the DMA Period elapsed callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800141e:	69c0      	ldr	r0, [r0, #28]
     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 8001420:	6822      	ldr	r2, [r4, #0]
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }  
  /* Set the DMA Period elapsed callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8001422:	4e0d      	ldr	r6, [pc, #52]	; (8001458 <HAL_TIM_Base_Start_DMA+0x54>)
     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8001424:	4d0d      	ldr	r5, [pc, #52]	; (800145c <HAL_TIM_Base_Start_DMA+0x58>)
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }  
  /* Set the DMA Period elapsed callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8001426:	63c6      	str	r6, [r0, #60]	; 0x3c
     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8001428:	64c5      	str	r5, [r0, #76]	; 0x4c
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 800142a:	322c      	adds	r2, #44	; 0x2c
 800142c:	f003 fcec 	bl	8004e08 <HAL_DMA_Start_IT>
  
  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001438:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001442:	2000      	movs	r0, #0
 8001444:	bd70      	pop	{r4, r5, r6, pc}
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((pData == 0U) && (Length > 0U)) 
 8001446:	b119      	cbz	r1, 8001450 <HAL_TIM_Base_Start_DMA+0x4c>
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8001448:	2302      	movs	r3, #2
 800144a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800144e:	e7e4      	b.n	800141a <HAL_TIM_Base_Start_DMA+0x16>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((pData == 0U) && (Length > 0U)) 
 8001450:	2a00      	cmp	r2, #0
 8001452:	d0f9      	beq.n	8001448 <HAL_TIM_Base_Start_DMA+0x44>
    {
      return HAL_ERROR;                                    
 8001454:	4620      	mov	r0, r4
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
  
  /* Return function status */
  return HAL_OK;
}
 8001456:	bd70      	pop	{r4, r5, r6, pc}
 8001458:	08002771 	.word	0x08002771
 800145c:	08002991 	.word	0x08002991

08001460 <HAL_TIM_Base_Stop_DMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8001460:	6803      	ldr	r3, [r0, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001468:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	f241 1111 	movw	r1, #4369	; 0x1111
 8001470:	420a      	tst	r2, r1
 8001472:	d108      	bne.n	8001486 <HAL_TIM_Base_Stop_DMA+0x26>
 8001474:	6a19      	ldr	r1, [r3, #32]
 8001476:	f240 4244 	movw	r2, #1092	; 0x444
 800147a:	4211      	tst	r1, r2
 800147c:	d103      	bne.n	8001486 <HAL_TIM_Base_Stop_DMA+0x26>
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f022 0201 	bic.w	r2, r2, #1
 8001484:	601a      	str	r2, [r3, #0]
    
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001486:	2301      	movs	r3, #1
 8001488:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      
  /* Return function status */
  return HAL_OK;
}
 800148c:	2000      	movs	r0, #0
 800148e:	4770      	bx	lr

08001490 <HAL_TIM_OC_MspInit>:
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <HAL_TIM_OC_MspDeInit>:
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <HAL_TIM_OC_DeInit>:
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   htim->State = HAL_TIM_STATE_BUSY;
 8001498:	2202      	movs	r2, #2
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800149a:	6803      	ldr	r3, [r0, #0]
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 800149c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   htim->State = HAL_TIM_STATE_BUSY;
 800149e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80014a2:	6a19      	ldr	r1, [r3, #32]
 80014a4:	f241 1211 	movw	r2, #4369	; 0x1111
 80014a8:	4211      	tst	r1, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 80014aa:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   htim->State = HAL_TIM_STATE_BUSY;
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80014ac:	d108      	bne.n	80014c0 <HAL_TIM_OC_DeInit+0x28>
 80014ae:	6a19      	ldr	r1, [r3, #32]
 80014b0:	f240 4244 	movw	r2, #1092	; 0x444
 80014b4:	4211      	tst	r1, r2
 80014b6:	d103      	bne.n	80014c0 <HAL_TIM_OC_DeInit+0x28>
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff ffe7 	bl	8001494 <HAL_TIM_OC_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 80014c6:	2000      	movs	r0, #0
 80014c8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80014cc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	bf00      	nop

080014d4 <HAL_TIM_OC_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80014d4:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80014d6:	2001      	movs	r0, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80014d8:	6a1a      	ldr	r2, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80014da:	fa00 f101 	lsl.w	r1, r0, r1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014de:	b410      	push	{r4}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80014e0:	ea22 0201 	bic.w	r2, r2, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80014e4:	4c14      	ldr	r4, [pc, #80]	; (8001538 <HAL_TIM_OC_Stop+0x64>)
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80014e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80014ec:	42a3      	cmp	r3, r4
 80014ee:	d014      	beq.n	800151a <HAL_TIM_OC_Stop+0x46>
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <HAL_TIM_OC_Stop+0x68>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d011      	beq.n	800151a <HAL_TIM_OC_Stop+0x46>
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
  }  
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);  
 80014f6:	6a19      	ldr	r1, [r3, #32]
 80014f8:	f241 1211 	movw	r2, #4369	; 0x1111
 80014fc:	4211      	tst	r1, r2
 80014fe:	d108      	bne.n	8001512 <HAL_TIM_OC_Stop+0x3e>
 8001500:	6a19      	ldr	r1, [r3, #32]
 8001502:	f240 4244 	movw	r2, #1092	; 0x444
 8001506:	4211      	tst	r1, r2
 8001508:	d103      	bne.n	8001512 <HAL_TIM_OC_Stop+0x3e>
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}  
 8001512:	2000      	movs	r0, #0
 8001514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001518:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800151a:	6a19      	ldr	r1, [r3, #32]
 800151c:	f241 1211 	movw	r2, #4369	; 0x1111
 8001520:	4211      	tst	r1, r2
 8001522:	d1e8      	bne.n	80014f6 <HAL_TIM_OC_Stop+0x22>
 8001524:	6a19      	ldr	r1, [r3, #32]
 8001526:	f240 4244 	movw	r2, #1092	; 0x444
 800152a:	4211      	tst	r1, r2
 800152c:	d1e3      	bne.n	80014f6 <HAL_TIM_OC_Stop+0x22>
 800152e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
 8001536:	e7de      	b.n	80014f6 <HAL_TIM_OC_Stop+0x22>
 8001538:	40010000 	.word	0x40010000
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_TIM_PWM_MspInit>:
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <HAL_TIM_PWM_MspDeInit>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <HAL_TIM_PWM_DeInit>:
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001548:	2202      	movs	r2, #2
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800154a:	6803      	ldr	r3, [r0, #0]
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800154c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 800154e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001552:	6a19      	ldr	r1, [r3, #32]
 8001554:	f241 1211 	movw	r2, #4369	; 0x1111
 8001558:	4211      	tst	r1, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800155a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800155c:	d108      	bne.n	8001570 <HAL_TIM_PWM_DeInit+0x28>
 800155e:	6a19      	ldr	r1, [r3, #32]
 8001560:	f240 4244 	movw	r2, #1092	; 0x444
 8001564:	4211      	tst	r1, r2
 8001566:	d103      	bne.n	8001570 <HAL_TIM_PWM_DeInit+0x28>
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff ffe7 	bl	8001544 <HAL_TIM_PWM_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 8001576:	2000      	movs	r0, #0
 8001578:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800157c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8001580:	bd10      	pop	{r4, pc}
 8001582:	bf00      	nop

08001584 <HAL_TIM_PWM_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001584:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001586:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001588:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800158a:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800158e:	ea20 0001 	bic.w	r0, r0, r1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001592:	b410      	push	{r4}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001594:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001596:	6a1a      	ldr	r2, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <HAL_TIM_PWM_Start+0x40>)

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800159a:	4311      	orrs	r1, r2
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800159c:	42a3      	cmp	r3, r4

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800159e:	6219      	str	r1, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80015a0:	d00a      	beq.n	80015b8 <HAL_TIM_PWM_Start+0x34>
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_TIM_PWM_Start+0x44>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d007      	beq.n	80015b8 <HAL_TIM_PWM_Start+0x34>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015a8:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80015aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015ae:	f042 0201 	orr.w	r2, r2, #1
  
  /* Return function status */
  return HAL_OK;
} 
 80015b2:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015b4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80015b6:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80015b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
 80015c0:	e7f2      	b.n	80015a8 <HAL_TIM_PWM_Start+0x24>
 80015c2:	bf00      	nop
 80015c4:	40010000 	.word	0x40010000
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_TIM_OC_Start>:
 80015cc:	f7ff bfda 	b.w	8001584 <HAL_TIM_PWM_Start>

080015d0 <HAL_TIM_PWM_Stop>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80015d0:	6803      	ldr	r3, [r0, #0]
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 80015d2:	b430      	push	{r4, r5}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80015d4:	6a1a      	ldr	r2, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80015d6:	4d18      	ldr	r5, [pc, #96]	; (8001638 <HAL_TIM_PWM_Stop+0x68>)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80015d8:	2401      	movs	r4, #1
 80015da:	fa04 f101 	lsl.w	r1, r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80015de:	ea22 0201 	bic.w	r2, r2, r1
 80015e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80015e4:	6a1a      	ldr	r2, [r3, #32]
 80015e6:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80015e8:	42ab      	cmp	r3, r5
 80015ea:	d016      	beq.n	800161a <HAL_TIM_PWM_Stop+0x4a>
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <HAL_TIM_PWM_Stop+0x6c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_TIM_PWM_Stop+0x4a>
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80015f2:	6a19      	ldr	r1, [r3, #32]
 80015f4:	f241 1211 	movw	r2, #4369	; 0x1111
 80015f8:	4211      	tst	r1, r2
 80015fa:	d108      	bne.n	800160e <HAL_TIM_PWM_Stop+0x3e>
 80015fc:	6a19      	ldr	r1, [r3, #32]
 80015fe:	f240 4244 	movw	r2, #1092	; 0x444
 8001602:	4211      	tst	r1, r2
 8001604:	d103      	bne.n	800160e <HAL_TIM_PWM_Stop+0x3e>
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	f022 0201 	bic.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800160e:	2301      	movs	r3, #1
 8001610:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
} 
 8001614:	bc30      	pop	{r4, r5}
 8001616:	2000      	movs	r0, #0
 8001618:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800161a:	6a19      	ldr	r1, [r3, #32]
 800161c:	f241 1211 	movw	r2, #4369	; 0x1111
 8001620:	4211      	tst	r1, r2
 8001622:	d1e6      	bne.n	80015f2 <HAL_TIM_PWM_Stop+0x22>
 8001624:	6a19      	ldr	r1, [r3, #32]
 8001626:	f240 4244 	movw	r2, #1092	; 0x444
 800162a:	4211      	tst	r1, r2
 800162c:	d1e1      	bne.n	80015f2 <HAL_TIM_PWM_Stop+0x22>
 800162e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
 8001636:	e7dc      	b.n	80015f2 <HAL_TIM_PWM_Stop+0x22>
 8001638:	40010000 	.word	0x40010000
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001640:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8001642:	290c      	cmp	r1, #12
 8001644:	d838      	bhi.n	80016b8 <HAL_TIM_PWM_Start_IT+0x78>
 8001646:	e8df f001 	tbb	[pc, r1]
 800164a:	372b      	.short	0x372b
 800164c:	37313737 	.word	0x37313737
 8001650:	37253737 	.word	0x37253737
 8001654:	3737      	.short	0x3737
 8001656:	07          	.byte	0x07
 8001657:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001658:	6803      	ldr	r3, [r0, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	f042 0210 	orr.w	r2, r2, #16
 8001660:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001662:	6a18      	ldr	r0, [r3, #32]
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001664:	4c18      	ldr	r4, [pc, #96]	; (80016c8 <HAL_TIM_PWM_Start_IT+0x88>)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001666:	2201      	movs	r2, #1
 8001668:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800166c:	ea20 0001 	bic.w	r0, r0, r1
 8001670:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001672:	6a1a      	ldr	r2, [r3, #32]
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001674:	42a3      	cmp	r3, r4

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001676:	ea41 0102 	orr.w	r1, r1, r2
 800167a:	6219      	str	r1, [r3, #32]
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800167c:	d01e      	beq.n	80016bc <HAL_TIM_PWM_Start_IT+0x7c>
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <HAL_TIM_PWM_Start_IT+0x8c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d01b      	beq.n	80016bc <HAL_TIM_PWM_Start_IT+0x7c>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001684:	681a      	ldr	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8001686:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800168a:	f042 0201 	orr.w	r2, r2, #1
  
  /* Return function status */
  return HAL_OK;
} 
 800168e:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001690:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8001692:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001694:	6803      	ldr	r3, [r0, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	f042 0208 	orr.w	r2, r2, #8
 800169c:	60da      	str	r2, [r3, #12]
    }
    break;
 800169e:	e7e0      	b.n	8001662 <HAL_TIM_PWM_Start_IT+0x22>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80016a0:	6803      	ldr	r3, [r0, #0]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	f042 0202 	orr.w	r2, r2, #2
 80016a8:	60da      	str	r2, [r3, #12]
    }
    break;
 80016aa:	e7da      	b.n	8001662 <HAL_TIM_PWM_Start_IT+0x22>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80016ac:	6803      	ldr	r3, [r0, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	f042 0204 	orr.w	r2, r2, #4
 80016b4:	60da      	str	r2, [r3, #12]
    }
    break;
 80016b6:	e7d4      	b.n	8001662 <HAL_TIM_PWM_Start_IT+0x22>
 80016b8:	6803      	ldr	r3, [r0, #0]
 80016ba:	e7d2      	b.n	8001662 <HAL_TIM_PWM_Start_IT+0x22>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80016bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
 80016c4:	e7de      	b.n	8001684 <HAL_TIM_PWM_Start_IT+0x44>
 80016c6:	bf00      	nop
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_TIM_OC_Start_IT>:
 80016d0:	f7ff bfb6 	b.w	8001640 <HAL_TIM_PWM_Start_IT>

080016d4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016d4:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 80016d6:	290c      	cmp	r1, #12
 80016d8:	d840      	bhi.n	800175c <HAL_TIM_PWM_Stop_IT+0x88>
 80016da:	e8df f001 	tbb	[pc, r1]
 80016de:	3f39      	.short	0x3f39
 80016e0:	3f333f3f 	.word	0x3f333f3f
 80016e4:	3f2d3f3f 	.word	0x3f2d3f3f
 80016e8:	3f3f      	.short	0x3f3f
 80016ea:	07          	.byte	0x07
 80016eb:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80016ec:	6803      	ldr	r3, [r0, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	f022 0210 	bic.w	r2, r2, #16
 80016f4:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80016f6:	6a1a      	ldr	r2, [r3, #32]
  }
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80016f8:	4c21      	ldr	r4, [pc, #132]	; (8001780 <HAL_TIM_PWM_Stop_IT+0xac>)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80016fa:	2001      	movs	r0, #1
 80016fc:	fa00 f101 	lsl.w	r1, r0, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001700:	ea22 0101 	bic.w	r1, r2, r1
 8001704:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001706:	6a1a      	ldr	r2, [r3, #32]
 8001708:	621a      	str	r2, [r3, #32]
  }
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800170a:	42a3      	cmp	r3, r4
 800170c:	d028      	beq.n	8001760 <HAL_TIM_PWM_Stop_IT+0x8c>
 800170e:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_TIM_PWM_Stop_IT+0xb0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d025      	beq.n	8001760 <HAL_TIM_PWM_Stop_IT+0x8c>
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001714:	6a19      	ldr	r1, [r3, #32]
 8001716:	f241 1211 	movw	r2, #4369	; 0x1111
 800171a:	4211      	tst	r1, r2
 800171c:	d108      	bne.n	8001730 <HAL_TIM_PWM_Stop_IT+0x5c>
 800171e:	6a19      	ldr	r1, [r3, #32]
 8001720:	f240 4244 	movw	r2, #1092	; 0x444
 8001724:	4211      	tst	r1, r2
 8001726:	d103      	bne.n	8001730 <HAL_TIM_PWM_Stop_IT+0x5c>
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8001730:	2000      	movs	r0, #0
 8001732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001736:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	f022 0208 	bic.w	r2, r2, #8
 8001740:	60da      	str	r2, [r3, #12]
    }
    break;
 8001742:	e7d8      	b.n	80016f6 <HAL_TIM_PWM_Stop_IT+0x22>
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001744:	6803      	ldr	r3, [r0, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	f022 0204 	bic.w	r2, r2, #4
 800174c:	60da      	str	r2, [r3, #12]
    }
    break;
 800174e:	e7d2      	b.n	80016f6 <HAL_TIM_PWM_Stop_IT+0x22>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001750:	6803      	ldr	r3, [r0, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	f022 0202 	bic.w	r2, r2, #2
 8001758:	60da      	str	r2, [r3, #12]
    }
    break;
 800175a:	e7cc      	b.n	80016f6 <HAL_TIM_PWM_Stop_IT+0x22>
 800175c:	6803      	ldr	r3, [r0, #0]
 800175e:	e7ca      	b.n	80016f6 <HAL_TIM_PWM_Stop_IT+0x22>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001760:	6a19      	ldr	r1, [r3, #32]
 8001762:	f241 1211 	movw	r2, #4369	; 0x1111
 8001766:	4211      	tst	r1, r2
 8001768:	d1d4      	bne.n	8001714 <HAL_TIM_PWM_Stop_IT+0x40>
 800176a:	6a19      	ldr	r1, [r3, #32]
 800176c:	f240 4244 	movw	r2, #1092	; 0x444
 8001770:	4211      	tst	r1, r2
 8001772:	d1cf      	bne.n	8001714 <HAL_TIM_PWM_Stop_IT+0x40>
 8001774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800177a:	645a      	str	r2, [r3, #68]	; 0x44
 800177c:	e7ca      	b.n	8001714 <HAL_TIM_PWM_Stop_IT+0x40>
 800177e:	bf00      	nop
 8001780:	40010000 	.word	0x40010000
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_TIM_OC_Stop_IT>:
 8001788:	f7ff bfa4 	b.w	80016d4 <HAL_TIM_PWM_Stop_IT>

0800178c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData: The source Buffer address.
  * @param  Length: The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800178e:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8001792:	b2e4      	uxtb	r4, r4
 8001794:	2c02      	cmp	r4, #2
 8001796:	d015      	beq.n	80017c4 <HAL_TIM_PWM_Start_DMA+0x38>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8001798:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800179c:	b2e4      	uxtb	r4, r4
 800179e:	2c01      	cmp	r4, #1
 80017a0:	d00c      	beq.n	80017bc <HAL_TIM_PWM_Start_DMA+0x30>
 80017a2:	460d      	mov	r5, r1
 80017a4:	4604      	mov	r4, r0
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }    
  switch (Channel)
 80017a6:	2d0c      	cmp	r5, #12
 80017a8:	d868      	bhi.n	800187c <HAL_TIM_PWM_Start_DMA+0xf0>
 80017aa:	e8df f005 	tbb	[pc, r5]
 80017ae:	670d      	.short	0x670d
 80017b0:	67456767 	.word	0x67456767
 80017b4:	67346767 	.word	0x67346767
 80017b8:	6767      	.short	0x6767
 80017ba:	56          	.byte	0x56
 80017bb:	00          	.byte	0x00
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if(((uint32_t)pData == 0U) && (Length > 0U)) 
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d15f      	bne.n	8001880 <HAL_TIM_PWM_Start_DMA+0xf4>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d05d      	beq.n	8001880 <HAL_TIM_PWM_Start_DMA+0xf4>
    {
      return HAL_ERROR;                                    
 80017c4:	4620      	mov	r0, r4
 80017c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80017c8:	6826      	ldr	r6, [r4, #0]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80017ca:	6a00      	ldr	r0, [r0, #32]
 80017cc:	4931      	ldr	r1, [pc, #196]	; (8001894 <HAL_TIM_PWM_Start_DMA+0x108>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80017ce:	4f32      	ldr	r7, [pc, #200]	; (8001898 <HAL_TIM_PWM_Start_DMA+0x10c>)
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80017d0:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80017d2:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80017d4:	4611      	mov	r1, r2
 80017d6:	f106 0234 	add.w	r2, r6, #52	; 0x34
 80017da:	f003 fb15 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e6:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80017e8:	6a18      	ldr	r0, [r3, #32]
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80017ea:	4c2c      	ldr	r4, [pc, #176]	; (800189c <HAL_TIM_PWM_Start_DMA+0x110>)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80017ec:	2201      	movs	r2, #1
 80017ee:	fa02 f105 	lsl.w	r1, r2, r5

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80017f2:	ea20 0001 	bic.w	r0, r0, r1
 80017f6:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80017f8:	6a1a      	ldr	r2, [r3, #32]
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80017fa:	42a3      	cmp	r3, r4

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80017fc:	ea41 0102 	orr.w	r1, r1, r2
 8001800:	6219      	str	r1, [r3, #32]
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001802:	d041      	beq.n	8001888 <HAL_TIM_PWM_Start_DMA+0xfc>
 8001804:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <HAL_TIM_PWM_Start_DMA+0x114>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d03e      	beq.n	8001888 <HAL_TIM_PWM_Start_DMA+0xfc>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
 8001814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8001816:	6826      	ldr	r6, [r4, #0]
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001818:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800181a:	491e      	ldr	r1, [pc, #120]	; (8001894 <HAL_TIM_PWM_Start_DMA+0x108>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800181c:	4f1e      	ldr	r7, [pc, #120]	; (8001898 <HAL_TIM_PWM_Start_DMA+0x10c>)
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800181e:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001820:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8001822:	4611      	mov	r1, r2
 8001824:	f106 023c 	add.w	r2, r6, #60	; 0x3c
 8001828:	f003 faee 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001834:	60da      	str	r2, [r3, #12]
    }
    break;
 8001836:	e7d7      	b.n	80017e8 <HAL_TIM_PWM_Start_DMA+0x5c>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8001838:	6826      	ldr	r6, [r4, #0]
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800183a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800183c:	4915      	ldr	r1, [pc, #84]	; (8001894 <HAL_TIM_PWM_Start_DMA+0x108>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800183e:	4f16      	ldr	r7, [pc, #88]	; (8001898 <HAL_TIM_PWM_Start_DMA+0x10c>)
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001840:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001842:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8001844:	4611      	mov	r1, r2
 8001846:	f106 0238 	add.w	r2, r6, #56	; 0x38
 800184a:	f003 fadd 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001856:	60da      	str	r2, [r3, #12]
    }
    break;
 8001858:	e7c6      	b.n	80017e8 <HAL_TIM_PWM_Start_DMA+0x5c>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800185a:	6826      	ldr	r6, [r4, #0]
    break;
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800185c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <HAL_TIM_PWM_Start_DMA+0x108>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001860:	4f0d      	ldr	r7, [pc, #52]	; (8001898 <HAL_TIM_PWM_Start_DMA+0x10c>)
    break;
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001862:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001864:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8001866:	4611      	mov	r1, r2
 8001868:	f106 0240 	add.w	r2, r6, #64	; 0x40
 800186c:	f003 facc 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001878:	60da      	str	r2, [r3, #12]
    }
    break;
 800187a:	e7b5      	b.n	80017e8 <HAL_TIM_PWM_Start_DMA+0x5c>
 800187c:	6803      	ldr	r3, [r0, #0]
 800187e:	e7b3      	b.n	80017e8 <HAL_TIM_PWM_Start_DMA+0x5c>
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8001880:	2402      	movs	r4, #2
 8001882:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8001886:	e78c      	b.n	80017a2 <HAL_TIM_PWM_Start_DMA+0x16>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800188a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800188e:	645a      	str	r2, [r3, #68]	; 0x44
 8001890:	e7bb      	b.n	800180a <HAL_TIM_PWM_Start_DMA+0x7e>
 8001892:	bf00      	nop
 8001894:	080027d9 	.word	0x080027d9
 8001898:	08002991 	.word	0x08002991
 800189c:	40010000 	.word	0x40010000
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_TIM_OC_Start_DMA>:
 80018a4:	f7ff bf72 	b.w	800178c <HAL_TIM_PWM_Start_DMA>

080018a8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018a8:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 80018aa:	290c      	cmp	r1, #12
 80018ac:	d842      	bhi.n	8001934 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80018ae:	e8df f001 	tbb	[pc, r1]
 80018b2:	413b      	.short	0x413b
 80018b4:	41354141 	.word	0x41354141
 80018b8:	412f4141 	.word	0x412f4141
 80018bc:	4141      	.short	0x4141
 80018be:	07          	.byte	0x07
 80018bf:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80018c0:	6803      	ldr	r3, [r0, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018c8:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80018ca:	6a1a      	ldr	r2, [r3, #32]
  } 
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80018cc:	4d22      	ldr	r5, [pc, #136]	; (8001958 <HAL_TIM_PWM_Stop_DMA+0xb0>)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80018ce:	2401      	movs	r4, #1
 80018d0:	fa04 f101 	lsl.w	r1, r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80018d4:	ea22 0101 	bic.w	r1, r2, r1
 80018d8:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80018da:	6a1a      	ldr	r2, [r3, #32]
 80018dc:	621a      	str	r2, [r3, #32]
  } 
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80018de:	42ab      	cmp	r3, r5
 80018e0:	d02a      	beq.n	8001938 <HAL_TIM_PWM_Stop_DMA+0x90>
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <HAL_TIM_PWM_Stop_DMA+0xb4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d027      	beq.n	8001938 <HAL_TIM_PWM_Stop_DMA+0x90>
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80018e8:	6a19      	ldr	r1, [r3, #32]
 80018ea:	f241 1211 	movw	r2, #4369	; 0x1111
 80018ee:	4211      	tst	r1, r2
 80018f0:	d108      	bne.n	8001904 <HAL_TIM_PWM_Stop_DMA+0x5c>
 80018f2:	6a19      	ldr	r1, [r3, #32]
 80018f4:	f240 4244 	movw	r2, #1092	; 0x444
 80018f8:	4211      	tst	r1, r2
 80018fa:	d103      	bne.n	8001904 <HAL_TIM_PWM_Stop_DMA+0x5c>
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001904:	2301      	movs	r3, #1
 8001906:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 800190a:	bc30      	pop	{r4, r5}
 800190c:	2000      	movs	r0, #0
 800190e:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001910:	6803      	ldr	r3, [r0, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001918:	60da      	str	r2, [r3, #12]
    }
    break;
 800191a:	e7d6      	b.n	80018ca <HAL_TIM_PWM_Stop_DMA+0x22>
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001924:	60da      	str	r2, [r3, #12]
    }
    break;
 8001926:	e7d0      	b.n	80018ca <HAL_TIM_PWM_Stop_DMA+0x22>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001928:	6803      	ldr	r3, [r0, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001930:	60da      	str	r2, [r3, #12]
    }
    break;
 8001932:	e7ca      	b.n	80018ca <HAL_TIM_PWM_Stop_DMA+0x22>
 8001934:	6803      	ldr	r3, [r0, #0]
 8001936:	e7c8      	b.n	80018ca <HAL_TIM_PWM_Stop_DMA+0x22>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001938:	6a19      	ldr	r1, [r3, #32]
 800193a:	f241 1211 	movw	r2, #4369	; 0x1111
 800193e:	4211      	tst	r1, r2
 8001940:	d1d2      	bne.n	80018e8 <HAL_TIM_PWM_Stop_DMA+0x40>
 8001942:	6a19      	ldr	r1, [r3, #32]
 8001944:	f240 4244 	movw	r2, #1092	; 0x444
 8001948:	4211      	tst	r1, r2
 800194a:	d1cd      	bne.n	80018e8 <HAL_TIM_PWM_Stop_DMA+0x40>
 800194c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800194e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001952:	645a      	str	r2, [r3, #68]	; 0x44
 8001954:	e7c8      	b.n	80018e8 <HAL_TIM_PWM_Stop_DMA+0x40>
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_TIM_OC_Stop_DMA>:
 8001960:	f7ff bfa2 	b.w	80018a8 <HAL_TIM_PWM_Stop_DMA>

08001964 <HAL_TIM_IC_MspInit>:
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop

08001968 <HAL_TIM_IC_MspDeInit>:
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop

0800196c <HAL_TIM_IC_DeInit>:
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800196c:	2202      	movs	r2, #2
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800196e:	6803      	ldr	r3, [r0, #0]
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8001970:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001972:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001976:	6a19      	ldr	r1, [r3, #32]
 8001978:	f241 1211 	movw	r2, #4369	; 0x1111
 800197c:	4211      	tst	r1, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 800197e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001980:	d108      	bne.n	8001994 <HAL_TIM_IC_DeInit+0x28>
 8001982:	6a19      	ldr	r1, [r3, #32]
 8001984:	f240 4244 	movw	r2, #1092	; 0x444
 8001988:	4211      	tst	r1, r2
 800198a:	d103      	bne.n	8001994 <HAL_TIM_IC_DeInit+0x28>
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff ffe7 	bl	8001968 <HAL_TIM_IC_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 800199a:	2000      	movs	r0, #0
 800199c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80019a0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 80019a4:	bd10      	pop	{r4, pc}
 80019a6:	bf00      	nop

080019a8 <HAL_TIM_IC_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019a8:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80019aa:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019ac:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80019ae:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019b2:	ea20 0001 	bic.w	r0, r0, r1
 80019b6:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80019b8:	6a1a      	ldr	r2, [r3, #32]
 80019ba:	4311      	orrs	r1, r2
 80019bc:	6219      	str	r1, [r3, #32]
  
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	f042 0201 	orr.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;  
} 
 80019c6:	2000      	movs	r0, #0
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop

080019cc <HAL_TIM_IC_Stop>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80019cc:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80019ce:	2001      	movs	r0, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019d0:	6a1a      	ldr	r2, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80019d2:	fa00 f101 	lsl.w	r1, r0, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019d6:	ea22 0201 	bic.w	r2, r2, r1
 80019da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	621a      	str	r2, [r3, #32]
  
  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 80019e0:	6a19      	ldr	r1, [r3, #32]
 80019e2:	f241 1211 	movw	r2, #4369	; 0x1111
 80019e6:	4211      	tst	r1, r2
 80019e8:	d108      	bne.n	80019fc <HAL_TIM_IC_Stop+0x30>
 80019ea:	6a19      	ldr	r1, [r3, #32]
 80019ec:	f240 4244 	movw	r2, #1092	; 0x444
 80019f0:	4211      	tst	r1, r2
 80019f2:	d103      	bne.n	80019fc <HAL_TIM_IC_Stop+0x30>
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 80019fc:	2000      	movs	r0, #0
 80019fe:	4770      	bx	lr

08001a00 <HAL_TIM_IC_Start_IT>:
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8001a00:	290c      	cmp	r1, #12
 8001a02:	d82f      	bhi.n	8001a64 <HAL_TIM_IC_Start_IT+0x64>
 8001a04:	e8df f001 	tbb	[pc, r1]
 8001a08:	2e2e2e28 	.word	0x2e2e2e28
 8001a0c:	2e2e2e22 	.word	0x2e2e2e22
 8001a10:	2e2e2e1c 	.word	0x2e2e2e1c
 8001a14:	07          	.byte	0x07
 8001a15:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001a16:	6803      	ldr	r3, [r0, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	f042 0210 	orr.w	r2, r2, #16
 8001a1e:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a20:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a22:	2201      	movs	r2, #1
 8001a24:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a28:	ea20 0001 	bic.w	r0, r0, r1
 8001a2c:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	4311      	orrs	r1, r2
 8001a32:	6219      	str	r1, [r3, #32]
  }  
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);  
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;  
} 
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001a40:	6803      	ldr	r3, [r0, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	f042 0208 	orr.w	r2, r2, #8
 8001a48:	60da      	str	r2, [r3, #12]
    }
    break;
 8001a4a:	e7e9      	b.n	8001a20 <HAL_TIM_IC_Start_IT+0x20>
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001a4c:	6803      	ldr	r3, [r0, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	f042 0204 	orr.w	r2, r2, #4
 8001a54:	60da      	str	r2, [r3, #12]
    }
    break;
 8001a56:	e7e3      	b.n	8001a20 <HAL_TIM_IC_Start_IT+0x20>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001a58:	6803      	ldr	r3, [r0, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	f042 0202 	orr.w	r2, r2, #2
 8001a60:	60da      	str	r2, [r3, #12]
    }
    break;
 8001a62:	e7dd      	b.n	8001a20 <HAL_TIM_IC_Start_IT+0x20>
 8001a64:	6803      	ldr	r3, [r0, #0]
 8001a66:	e7db      	b.n	8001a20 <HAL_TIM_IC_Start_IT+0x20>

08001a68 <HAL_TIM_IC_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8001a68:	290c      	cmp	r1, #12
 8001a6a:	d838      	bhi.n	8001ade <HAL_TIM_IC_Stop_IT+0x76>
 8001a6c:	e8df f001 	tbb	[pc, r1]
 8001a70:	37373731 	.word	0x37373731
 8001a74:	3737372b 	.word	0x3737372b
 8001a78:	37373725 	.word	0x37373725
 8001a7c:	07          	.byte	0x07
 8001a7d:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001a7e:	6803      	ldr	r3, [r0, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	f022 0210 	bic.w	r2, r2, #16
 8001a86:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a88:	6a1a      	ldr	r2, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	fa00 f101 	lsl.w	r1, r0, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a90:	ea22 0101 	bic.w	r1, r2, r1
 8001a94:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	621a      	str	r2, [r3, #32]
  
  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 8001a9a:	6a19      	ldr	r1, [r3, #32]
 8001a9c:	f241 1211 	movw	r2, #4369	; 0x1111
 8001aa0:	4211      	tst	r1, r2
 8001aa2:	d108      	bne.n	8001ab6 <HAL_TIM_IC_Stop_IT+0x4e>
 8001aa4:	6a19      	ldr	r1, [r3, #32]
 8001aa6:	f240 4244 	movw	r2, #1092	; 0x444
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d103      	bne.n	8001ab6 <HAL_TIM_IC_Stop_IT+0x4e>
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001aba:	6803      	ldr	r3, [r0, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	f022 0208 	bic.w	r2, r2, #8
 8001ac2:	60da      	str	r2, [r3, #12]
    }
    break;
 8001ac4:	e7e0      	b.n	8001a88 <HAL_TIM_IC_Stop_IT+0x20>
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001ac6:	6803      	ldr	r3, [r0, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	60da      	str	r2, [r3, #12]
    }
    break;
 8001ad0:	e7da      	b.n	8001a88 <HAL_TIM_IC_Stop_IT+0x20>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	f022 0202 	bic.w	r2, r2, #2
 8001ada:	60da      	str	r2, [r3, #12]
    }
    break;
 8001adc:	e7d4      	b.n	8001a88 <HAL_TIM_IC_Stop_IT+0x20>
 8001ade:	6803      	ldr	r3, [r0, #0]
 8001ae0:	e7d2      	b.n	8001a88 <HAL_TIM_IC_Stop_IT+0x20>
 8001ae2:	bf00      	nop

08001ae4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001ae6:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8001aea:	b2e4      	uxtb	r4, r4
 8001aec:	2c02      	cmp	r4, #2
 8001aee:	d012      	beq.n	8001b16 <HAL_TIM_IC_Start_DMA+0x32>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8001af0:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8001af4:	b2e4      	uxtb	r4, r4
 8001af6:	2c01      	cmp	r4, #1
 8001af8:	d00f      	beq.n	8001b1a <HAL_TIM_IC_Start_DMA+0x36>
 8001afa:	460d      	mov	r5, r1
 8001afc:	4604      	mov	r4, r0
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }  
   
  switch (Channel)
 8001afe:	2d0c      	cmp	r5, #12
 8001b00:	d85c      	bhi.n	8001bbc <HAL_TIM_IC_Start_DMA+0xd8>
 8001b02:	e8df f005 	tbb	[pc, r5]
 8001b06:	5b10      	.short	0x5b10
 8001b08:	5b2e5b5b 	.word	0x5b2e5b5b
 8001b0c:	5b3d5b5b 	.word	0x5b3d5b5b
 8001b10:	5b5b      	.short	0x5b5b
 8001b12:	4c          	.byte	0x4c
 8001b13:	00          	.byte	0x00
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((pData == 0U) && (Length > 0U)) 
 8001b14:	b11b      	cbz	r3, 8001b1e <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;                                    
 8001b16:	4620      	mov	r0, r4
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
  
  /* Return function status */
  return HAL_OK;
}
 8001b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((pData == 0U) && (Length > 0U)) 
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d0fa      	beq.n	8001b14 <HAL_TIM_IC_Start_DMA+0x30>
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8001b1e:	2402      	movs	r4, #2
 8001b20:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8001b24:	e7e9      	b.n	8001afa <HAL_TIM_IC_Start_DMA+0x16>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length); 
 8001b26:	6821      	ldr	r1, [r4, #0]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001b28:	6a00      	ldr	r0, [r0, #32]
 8001b2a:	4f25      	ldr	r7, [pc, #148]	; (8001bc0 <HAL_TIM_IC_Start_DMA+0xdc>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001b2c:	4e25      	ldr	r6, [pc, #148]	; (8001bc4 <HAL_TIM_IC_Start_DMA+0xe0>)
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001b2e:	63c7      	str	r7, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001b30:	64c6      	str	r6, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length); 
 8001b32:	3134      	adds	r1, #52	; 0x34
 8001b34:	f003 f968 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */      
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001b38:	6820      	ldr	r0, [r4, #0]
 8001b3a:	68c3      	ldr	r3, [r0, #12]
 8001b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b40:	60c3      	str	r3, [r0, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b42:	6a02      	ldr	r2, [r0, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001b44:	2301      	movs	r3, #1
 8001b46:	fa03 f105 	lsl.w	r1, r3, r5

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b4a:	ea22 0201 	bic.w	r2, r2, r1
 8001b4e:	6202      	str	r2, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001b50:	6a03      	ldr	r3, [r0, #32]
 8001b52:	4319      	orrs	r1, r3
 8001b54:	6201      	str	r1, [r0, #32]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
   
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 8001b56:	6803      	ldr	r3, [r0, #0]
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6003      	str	r3, [r0, #0]
  
  /* Return function status */
  return HAL_OK;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001b62:	6821      	ldr	r1, [r4, #0]
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001b64:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001b66:	4f16      	ldr	r7, [pc, #88]	; (8001bc0 <HAL_TIM_IC_Start_DMA+0xdc>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001b68:	4e16      	ldr	r6, [pc, #88]	; (8001bc4 <HAL_TIM_IC_Start_DMA+0xe0>)
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001b6a:	63c7      	str	r7, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001b6c:	64c6      	str	r6, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001b6e:	3138      	adds	r1, #56	; 0x38
 8001b70:	f003 f94a 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001b74:	6820      	ldr	r0, [r4, #0]
 8001b76:	68c3      	ldr	r3, [r0, #12]
 8001b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7c:	60c3      	str	r3, [r0, #12]
    }
    break;
 8001b7e:	e7e0      	b.n	8001b42 <HAL_TIM_IC_Start_DMA+0x5e>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001b80:	6821      	ldr	r1, [r4, #0]
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001b82:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001b84:	4f0e      	ldr	r7, [pc, #56]	; (8001bc0 <HAL_TIM_IC_Start_DMA+0xdc>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001b86:	4e0f      	ldr	r6, [pc, #60]	; (8001bc4 <HAL_TIM_IC_Start_DMA+0xe0>)
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001b88:	63c7      	str	r7, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001b8a:	64c6      	str	r6, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001b8c:	313c      	adds	r1, #60	; 0x3c
 8001b8e:	f003 f93b 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001b92:	6820      	ldr	r0, [r4, #0]
 8001b94:	68c3      	ldr	r3, [r0, #12]
 8001b96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9a:	60c3      	str	r3, [r0, #12]
    }
    break;
 8001b9c:	e7d1      	b.n	8001b42 <HAL_TIM_IC_Start_DMA+0x5e>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001b9e:	6821      	ldr	r1, [r4, #0]
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001ba0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001ba2:	4f07      	ldr	r7, [pc, #28]	; (8001bc0 <HAL_TIM_IC_Start_DMA+0xdc>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001ba4:	4e07      	ldr	r6, [pc, #28]	; (8001bc4 <HAL_TIM_IC_Start_DMA+0xe0>)
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001ba6:	63c7      	str	r7, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001ba8:	64c6      	str	r6, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001baa:	3140      	adds	r1, #64	; 0x40
 8001bac:	f003 f92c 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001bb0:	6820      	ldr	r0, [r4, #0]
 8001bb2:	68c3      	ldr	r3, [r0, #12]
 8001bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb8:	60c3      	str	r3, [r0, #12]
    }
    break;
 8001bba:	e7c2      	b.n	8001b42 <HAL_TIM_IC_Start_DMA+0x5e>
 8001bbc:	6800      	ldr	r0, [r0, #0]
 8001bbe:	e7c0      	b.n	8001b42 <HAL_TIM_IC_Start_DMA+0x5e>
 8001bc0:	08002789 	.word	0x08002789
 8001bc4:	08002991 	.word	0x08002991

08001bc8 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bc8:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  switch (Channel)
 8001bca:	290c      	cmp	r1, #12
 8001bcc:	d83d      	bhi.n	8001c4a <HAL_TIM_IC_Stop_DMA+0x82>
 8001bce:	e8df f001 	tbb	[pc, r1]
 8001bd2:	3c36      	.short	0x3c36
 8001bd4:	3c303c3c 	.word	0x3c303c3c
 8001bd8:	3c2a3c3c 	.word	0x3c2a3c3c
 8001bdc:	3c3c      	.short	0x3c3c
 8001bde:	07          	.byte	0x07
 8001bdf:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001be0:	6803      	ldr	r3, [r0, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001be8:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001bea:	6a1a      	ldr	r2, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001bec:	2401      	movs	r4, #1
 8001bee:	fa04 f101 	lsl.w	r1, r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001bf2:	ea22 0101 	bic.w	r1, r2, r1
 8001bf6:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001bf8:	6a1a      	ldr	r2, [r3, #32]
 8001bfa:	621a      	str	r2, [r3, #32]

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 8001bfc:	6a19      	ldr	r1, [r3, #32]
 8001bfe:	f241 1211 	movw	r2, #4369	; 0x1111
 8001c02:	4211      	tst	r1, r2
 8001c04:	d108      	bne.n	8001c18 <HAL_TIM_IC_Stop_DMA+0x50>
 8001c06:	6a19      	ldr	r1, [r3, #32]
 8001c08:	f240 4244 	movw	r2, #1092	; 0x444
 8001c0c:	4211      	tst	r1, r2
 8001c0e:	d103      	bne.n	8001c18 <HAL_TIM_IC_Stop_DMA+0x50>
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}  
 8001c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c22:	2000      	movs	r0, #0
 8001c24:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001c26:	6803      	ldr	r3, [r0, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2e:	60da      	str	r2, [r3, #12]
    }
    break;
 8001c30:	e7db      	b.n	8001bea <HAL_TIM_IC_Stop_DMA+0x22>
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001c32:	6803      	ldr	r3, [r0, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3a:	60da      	str	r2, [r3, #12]
    }
    break;
 8001c3c:	e7d5      	b.n	8001bea <HAL_TIM_IC_Stop_DMA+0x22>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001c3e:	6803      	ldr	r3, [r0, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c46:	60da      	str	r2, [r3, #12]
    }
    break;
 8001c48:	e7cf      	b.n	8001bea <HAL_TIM_IC_Stop_DMA+0x22>
 8001c4a:	6803      	ldr	r3, [r0, #0]
 8001c4c:	e7cd      	b.n	8001bea <HAL_TIM_IC_Stop_DMA+0x22>
 8001c4e:	bf00      	nop

08001c50 <HAL_TIM_OnePulse_MspInit>:
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop

08001c54 <HAL_TIM_OnePulse_MspDeInit>:
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop

08001c58 <HAL_TIM_OnePulse_DeInit>:
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	2202      	movs	r2, #2
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001c5a:	6803      	ldr	r3, [r0, #0]
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 8001c5c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001c62:	6a19      	ldr	r1, [r3, #32]
 8001c64:	f241 1211 	movw	r2, #4369	; 0x1111
 8001c68:	4211      	tst	r1, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 8001c6a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001c6c:	d108      	bne.n	8001c80 <HAL_TIM_OnePulse_DeInit+0x28>
 8001c6e:	6a19      	ldr	r1, [r3, #32]
 8001c70:	f240 4244 	movw	r2, #1092	; 0x444
 8001c74:	4211      	tst	r1, r2
 8001c76:	d103      	bne.n	8001c80 <HAL_TIM_OnePulse_DeInit+0x28>
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff ffe7 	bl	8001c54 <HAL_TIM_OnePulse_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 8001c86:	2000      	movs	r0, #0
 8001c88:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001c8c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8001c90:	bd10      	pop	{r4, pc}
 8001c92:	bf00      	nop

08001c94 <HAL_TIM_OnePulse_Start>:
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 
    
    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 8001c94:	6803      	ldr	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001c96:	490f      	ldr	r1, [pc, #60]	; (8001cd4 <HAL_TIM_OnePulse_Start+0x40>)
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001ca0:	6a1a      	ldr	r2, [r3, #32]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	f022 0210 	bic.w	r2, r2, #16
 8001cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
    (the counter starts in response to a stimulus and generate a pulse */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001cb2:	428b      	cmp	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001cb4:	f042 0210 	orr.w	r2, r2, #16
 8001cb8:	621a      	str	r2, [r3, #32]
    (the counter starts in response to a stimulus and generate a pulse */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001cba:	d004      	beq.n	8001cc6 <HAL_TIM_OnePulse_Start+0x32>
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_TIM_OnePulse_Start+0x44>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d001      	beq.n	8001cc6 <HAL_TIM_OnePulse_Start+0x32>
    __HAL_TIM_MOE_ENABLE(htim);
  }
  
  /* Return function status */
  return HAL_OK;
}
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
}
 8001cce:	2000      	movs	r0, #0
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_TIM_OnePulse_Stop>:
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8001cdc:	6803      	ldr	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001cde:	4918      	ldr	r1, [pc, #96]	; (8001d40 <HAL_TIM_OnePulse_Stop+0x64>)
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cec:	6a1a      	ldr	r2, [r3, #32]
 8001cee:	f022 0210 	bic.w	r2, r2, #16
 8001cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	621a      	str	r2, [r3, #32]
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001cf8:	428b      	cmp	r3, r1
 8001cfa:	d012      	beq.n	8001d22 <HAL_TIM_OnePulse_Stop+0x46>
 8001cfc:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_TIM_OnePulse_Stop+0x68>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00f      	beq.n	8001d22 <HAL_TIM_OnePulse_Stop+0x46>
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
  }
    
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 8001d02:	6a19      	ldr	r1, [r3, #32]
 8001d04:	f241 1211 	movw	r2, #4369	; 0x1111
 8001d08:	4211      	tst	r1, r2
 8001d0a:	d108      	bne.n	8001d1e <HAL_TIM_OnePulse_Stop+0x42>
 8001d0c:	6a19      	ldr	r1, [r3, #32]
 8001d0e:	f240 4244 	movw	r2, #1092	; 0x444
 8001d12:	4211      	tst	r1, r2
 8001d14:	d103      	bne.n	8001d1e <HAL_TIM_OnePulse_Stop+0x42>
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001d1e:	2000      	movs	r0, #0
 8001d20:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001d22:	6a19      	ldr	r1, [r3, #32]
 8001d24:	f241 1211 	movw	r2, #4369	; 0x1111
 8001d28:	4211      	tst	r1, r2
 8001d2a:	d1ea      	bne.n	8001d02 <HAL_TIM_OnePulse_Stop+0x26>
 8001d2c:	6a19      	ldr	r1, [r3, #32]
 8001d2e:	f240 4244 	movw	r2, #1092	; 0x444
 8001d32:	4211      	tst	r1, r2
 8001d34:	d1e5      	bne.n	8001d02 <HAL_TIM_OnePulse_Stop+0x26>
 8001d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d3e:	e7e0      	b.n	8001d02 <HAL_TIM_OnePulse_Stop+0x26>
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_TIM_OnePulse_Start_IT>:
    
    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */
 
  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d48:	6803      	ldr	r3, [r0, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001d4a:	4913      	ldr	r1, [pc, #76]	; (8001d98 <HAL_TIM_OnePulse_Start_IT+0x50>)
    
    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */
 
  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	f042 0202 	orr.w	r2, r2, #2
 8001d52:	60da      	str	r2, [r3, #12]
  
  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	f042 0204 	orr.w	r2, r2, #4
 8001d5a:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d5c:	6a1a      	ldr	r2, [r3, #32]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d6c:	6a1a      	ldr	r2, [r3, #32]
 8001d6e:	f022 0210 	bic.w	r2, r2, #16
 8001d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d74:	6a1a      	ldr	r2, [r3, #32]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001d76:	428b      	cmp	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d78:	f042 0210 	orr.w	r2, r2, #16
 8001d7c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001d7e:	d004      	beq.n	8001d8a <HAL_TIM_OnePulse_Start_IT+0x42>
 8001d80:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <HAL_TIM_OnePulse_Start_IT+0x54>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d001      	beq.n	8001d8a <HAL_TIM_OnePulse_Start_IT+0x42>
    __HAL_TIM_MOE_ENABLE(htim);
  }
  
  /* Return function status */
  return HAL_OK;
}
 8001d86:	2000      	movs	r0, #0
 8001d88:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
}
 8001d92:	2000      	movs	r0, #0
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_TIM_OnePulse_Stop_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  
 8001da0:	6803      	ldr	r3, [r0, #0]
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001da2:	491c      	ldr	r1, [pc, #112]	; (8001e14 <HAL_TIM_OnePulse_Stop_IT+0x74>)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	f022 0202 	bic.w	r2, r2, #2
 8001daa:	60da      	str	r2, [r3, #12]
  
  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	f022 0204 	bic.w	r2, r2, #4
 8001db2:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001db4:	6a1a      	ldr	r2, [r3, #32]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	f022 0210 	bic.w	r2, r2, #16
 8001dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	621a      	str	r2, [r3, #32]
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	d012      	beq.n	8001df6 <HAL_TIM_OnePulse_Stop_IT+0x56>
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_TIM_OnePulse_Stop_IT+0x78>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00f      	beq.n	8001df6 <HAL_TIM_OnePulse_Stop_IT+0x56>
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
  }
    
  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);  
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	f241 1211 	movw	r2, #4369	; 0x1111
 8001ddc:	4211      	tst	r1, r2
 8001dde:	d108      	bne.n	8001df2 <HAL_TIM_OnePulse_Stop_IT+0x52>
 8001de0:	6a19      	ldr	r1, [r3, #32]
 8001de2:	f240 4244 	movw	r2, #1092	; 0x444
 8001de6:	4211      	tst	r1, r2
 8001de8:	d103      	bne.n	8001df2 <HAL_TIM_OnePulse_Stop_IT+0x52>
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001df2:	2000      	movs	r0, #0
 8001df4:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001df6:	6a19      	ldr	r1, [r3, #32]
 8001df8:	f241 1211 	movw	r2, #4369	; 0x1111
 8001dfc:	4211      	tst	r1, r2
 8001dfe:	d1ea      	bne.n	8001dd6 <HAL_TIM_OnePulse_Stop_IT+0x36>
 8001e00:	6a19      	ldr	r1, [r3, #32]
 8001e02:	f240 4244 	movw	r2, #1092	; 0x444
 8001e06:	4211      	tst	r1, r2
 8001e08:	d1e5      	bne.n	8001dd6 <HAL_TIM_OnePulse_Stop_IT+0x36>
 8001e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
 8001e12:	e7e0      	b.n	8001dd6 <HAL_TIM_OnePulse_Stop_IT+0x36>
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_TIM_Encoder_MspInit>:
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop

08001e20 <HAL_TIM_Encoder_MspDeInit>:
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop

08001e24 <HAL_TIM_Encoder_DeInit>:
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	2202      	movs	r2, #2
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001e26:	6803      	ldr	r3, [r0, #0]
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8001e28:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001e2e:	6a19      	ldr	r1, [r3, #32]
 8001e30:	f241 1211 	movw	r2, #4369	; 0x1111
 8001e34:	4211      	tst	r1, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8001e36:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  htim->State = HAL_TIM_STATE_BUSY;
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001e38:	d108      	bne.n	8001e4c <HAL_TIM_Encoder_DeInit+0x28>
 8001e3a:	6a19      	ldr	r1, [r3, #32]
 8001e3c:	f240 4244 	movw	r2, #1092	; 0x444
 8001e40:	4211      	tst	r1, r2
 8001e42:	d103      	bne.n	8001e4c <HAL_TIM_Encoder_DeInit+0x28>
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff ffe7 	bl	8001e20 <HAL_TIM_Encoder_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET;
 8001e52:	2000      	movs	r0, #0
 8001e54:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 
  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001e58:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	bf00      	nop

08001e60 <HAL_TIM_Encoder_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8001e60:	b1d1      	cbz	r1, 8001e98 <HAL_TIM_Encoder_Start+0x38>
 8001e62:	2904      	cmp	r1, #4
 8001e64:	d016      	beq.n	8001e94 <HAL_TIM_Encoder_Start+0x34>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
      break;
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001e66:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001e70:	6a1a      	ldr	r2, [r3, #32]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	f022 0210 	bic.w	r2, r2, #16
 8001e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	f042 0210 	orr.w	r2, r2, #16
 8001e86:	621a      	str	r2, [r3, #32]
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
     break; 
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001e90:	2000      	movs	r0, #0
 8001e92:	4770      	bx	lr
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      break; 
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8001e94:	6803      	ldr	r3, [r0, #0]
 8001e96:	e7ef      	b.n	8001e78 <HAL_TIM_Encoder_Start+0x18>
  /* Enable the encoder interface channels */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001e98:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	621a      	str	r2, [r3, #32]
 8001eaa:	e7ed      	b.n	8001e88 <HAL_TIM_Encoder_Start+0x28>

08001eac <HAL_TIM_Encoder_Stop>:
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  switch (Channel)
 8001eac:	b301      	cbz	r1, 8001ef0 <HAL_TIM_Encoder_Stop+0x44>
 8001eae:	2904      	cmp	r1, #4
 8001eb0:	d01c      	beq.n	8001eec <HAL_TIM_Encoder_Stop+0x40>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
      break;
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8001eb2:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	f022 0210 	bic.w	r2, r2, #16
 8001ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	621a      	str	r2, [r3, #32]
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
     break; 
    }
  }  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ecc:	6a19      	ldr	r1, [r3, #32]
 8001ece:	f241 1211 	movw	r2, #4369	; 0x1111
 8001ed2:	4211      	tst	r1, r2
 8001ed4:	d108      	bne.n	8001ee8 <HAL_TIM_Encoder_Stop+0x3c>
 8001ed6:	6a19      	ldr	r1, [r3, #32]
 8001ed8:	f240 4244 	movw	r2, #1092	; 0x444
 8001edc:	4211      	tst	r1, r2
 8001ede:	d103      	bne.n	8001ee8 <HAL_TIM_Encoder_Stop+0x3c>
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001ee8:	2000      	movs	r0, #0
 8001eea:	4770      	bx	lr
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
      break; 
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 8001eec:	6803      	ldr	r3, [r0, #0]
 8001eee:	e7e7      	b.n	8001ec0 <HAL_TIM_Encoder_Stop+0x14>
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8001ef0:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	e7e5      	b.n	8001ecc <HAL_TIM_Encoder_Stop+0x20>

08001f00 <HAL_TIM_Encoder_Start_IT>:
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8001f00:	2900      	cmp	r1, #0
 8001f02:	d02e      	beq.n	8001f62 <HAL_TIM_Encoder_Start_IT+0x62>
 8001f04:	2904      	cmp	r1, #4
 8001f06:	d01e      	beq.n	8001f46 <HAL_TIM_Encoder_Start_IT+0x46>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
      break;
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f08:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f12:	6a1a      	ldr	r2, [r3, #32]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	f022 0210 	bic.w	r2, r2, #16
 8001f20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	f042 0210 	orr.w	r2, r2, #16
 8001f28:	621a      	str	r2, [r3, #32]
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	f042 0202 	orr.w	r2, r2, #2
 8001f30:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	f042 0204 	orr.w	r2, r2, #4
 8001f38:	60da      	str	r2, [r3, #12]
     break; 
    }
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001f42:	2000      	movs	r0, #0
 8001f44:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
      break; 
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f46:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	f022 0210 	bic.w	r2, r2, #16
 8001f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	f042 0210 	orr.w	r2, r2, #16
 8001f56:	621a      	str	r2, [r3, #32]
      break; 
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2); 
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	f042 0204 	orr.w	r2, r2, #4
 8001f5e:	60da      	str	r2, [r3, #12]
      break;
 8001f60:	e7eb      	b.n	8001f3a <HAL_TIM_Encoder_Start_IT+0x3a>
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f62:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	621a      	str	r2, [r3, #32]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	f042 0202 	orr.w	r2, r2, #2
 8001f7a:	60da      	str	r2, [r3, #12]
      break; 
 8001f7c:	e7dd      	b.n	8001f3a <HAL_TIM_Encoder_Start_IT+0x3a>
 8001f7e:	bf00      	nop

08001f80 <HAL_TIM_Encoder_Stop_IT>:
    
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  if(Channel == TIM_CHANNEL_1)
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8001f80:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f82:	6a1a      	ldr	r2, [r3, #32]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  if(Channel == TIM_CHANNEL_1)
 8001f84:	b9d9      	cbnz	r1, 8001fbe <HAL_TIM_Encoder_Stop_IT+0x3e>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	621a      	str	r2, [r3, #32]
  if(Channel == TIM_CHANNEL_1)
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
    
    /* Disable the capture compare Interrupts 1 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	f022 0202 	bic.w	r2, r2, #2
 8001f96:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
  }
    
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f98:	6a19      	ldr	r1, [r3, #32]
 8001f9a:	f241 1211 	movw	r2, #4369	; 0x1111
 8001f9e:	4211      	tst	r1, r2
 8001fa0:	d108      	bne.n	8001fb4 <HAL_TIM_Encoder_Stop_IT+0x34>
 8001fa2:	6a19      	ldr	r1, [r3, #32]
 8001fa4:	f240 4244 	movw	r2, #1092	; 0x444
 8001fa8:	4211      	tst	r1, r2
 8001faa:	d103      	bne.n	8001fb4 <HAL_TIM_Encoder_Stop_IT+0x34>
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 8001fba:	2000      	movs	r0, #0
 8001fbc:	4770      	bx	lr
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
    
    /* Disable the capture compare Interrupts 1 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
  }  
  else if(Channel == TIM_CHANNEL_2)
 8001fbe:	2904      	cmp	r1, #4
 8001fc0:	d013      	beq.n	8001fea <HAL_TIM_Encoder_Stop_IT+0x6a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	f022 0210 	bic.w	r2, r2, #16
 8001fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	621a      	str	r2, [r3, #32]
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	f022 0202 	bic.w	r2, r2, #2
 8001fde:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	f022 0204 	bic.w	r2, r2, #4
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	e7d6      	b.n	8001f98 <HAL_TIM_Encoder_Stop_IT+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fea:	f022 0210 	bic.w	r2, r2, #16
 8001fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001ff0:	6a1a      	ldr	r2, [r3, #32]
 8001ff2:	621a      	str	r2, [r3, #32]
  else if(Channel == TIM_CHANNEL_2)
  {  
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
    /* Disable the capture compare Interrupts 2 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	f022 0204 	bic.w	r2, r2, #4
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	e7cc      	b.n	8001f98 <HAL_TIM_Encoder_Stop_IT+0x18>
 8001ffe:	bf00      	nop

08002000 <HAL_TIM_Encoder_Start_DMA>:
  * @param  pData2: The destination Buffer address for IC2.
  * @param  Length: The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 8002000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 8002004:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
  * @param  pData2: The destination Buffer address for IC2.
  * @param  Length: The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 8002008:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800200c:	b2e4      	uxtb	r4, r4
 800200e:	2c02      	cmp	r4, #2
 8002010:	d00f      	beq.n	8002032 <HAL_TIM_Encoder_Start_DMA+0x32>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8002012:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8002016:	2c01      	cmp	r4, #1
 8002018:	d00e      	beq.n	8002038 <HAL_TIM_Encoder_Start_DMA+0x38>
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }  
   
  switch (Channel)
 800201a:	2904      	cmp	r1, #4
 800201c:	461f      	mov	r7, r3
 800201e:	460c      	mov	r4, r1
 8002020:	4605      	mov	r5, r0
 8002022:	d015      	beq.n	8002050 <HAL_TIM_Encoder_Start_DMA+0x50>
 8002024:	2918      	cmp	r1, #24
 8002026:	d050      	beq.n	80020ca <HAL_TIM_Encoder_Start_DMA+0xca>
 8002028:	2900      	cmp	r1, #0
 800202a:	d030      	beq.n	800208e <HAL_TIM_Encoder_Start_DMA+0x8e>
    
    default:
    break;
  }  
  /* Return function status */
  return HAL_OK;
 800202c:	2000      	movs	r0, #0
}
 800202e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
  {
     return HAL_BUSY;
 8002032:	4620      	mov	r0, r4
 8002034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U)) 
 8002038:	2a00      	cmp	r2, #0
 800203a:	d07c      	beq.n	8002136 <HAL_TIM_Encoder_Start_DMA+0x136>
 800203c:	2b00      	cmp	r3, #0
 800203e:	d07a      	beq.n	8002136 <HAL_TIM_Encoder_Start_DMA+0x136>
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002040:	2402      	movs	r4, #2
    }
  }  
   
  switch (Channel)
 8002042:	2904      	cmp	r1, #4
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002044:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8002048:	461f      	mov	r7, r3
 800204a:	460c      	mov	r4, r1
 800204c:	4605      	mov	r5, r0
    }
  }  
   
  switch (Channel)
 800204e:	d1e9      	bne.n	8002024 <HAL_TIM_Encoder_Start_DMA+0x24>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8002050:	6829      	ldr	r1, [r5, #0]
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002052:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002054:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_TIM_Encoder_Start_DMA+0x140>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8002056:	4c3b      	ldr	r4, [pc, #236]	; (8002144 <HAL_TIM_Encoder_Start_DMA+0x144>)
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002058:	63c3      	str	r3, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 800205a:	463a      	mov	r2, r7
 800205c:	4633      	mov	r3, r6
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800205e:	64c4      	str	r4, [r0, #76]	; 0x4c
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8002060:	3138      	adds	r1, #56	; 0x38
 8002062:	f002 fed1 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002066:	682b      	ldr	r3, [r5, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800206e:	60da      	str	r2, [r3, #12]
     
      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002078:	6a1a      	ldr	r2, [r3, #32]
 800207a:	f022 0210 	bic.w	r2, r2, #16
 800207e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	f042 0210 	orr.w	r2, r2, #16
 8002086:	621a      	str	r2, [r3, #32]
    
    default:
    break;
  }  
  /* Return function status */
  return HAL_OK;
 8002088:	2000      	movs	r0, #0
 800208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length); 
 800208e:	6829      	ldr	r1, [r5, #0]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002090:	6a00      	ldr	r0, [r0, #32]
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_TIM_Encoder_Start_DMA+0x140>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002094:	4f2b      	ldr	r7, [pc, #172]	; (8002144 <HAL_TIM_Encoder_Start_DMA+0x144>)
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002096:	63c3      	str	r3, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002098:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length); 
 800209a:	4633      	mov	r3, r6
 800209c:	3134      	adds	r1, #52	; 0x34
 800209e:	f002 feb3 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Input Capture DMA request */      
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80020a2:	682b      	ldr	r3, [r5, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020aa:	60da      	str	r2, [r3, #12]
            
      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020b4:	6a1a      	ldr	r2, [r3, #32]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	f042 0201 	orr.w	r2, r2, #1
    
    default:
    break;
  }  
  /* Return function status */
  return HAL_OK;
 80020c2:	4620      	mov	r0, r4

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80020c4:	621a      	str	r2, [r3, #32]
 80020c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 80020ca:	6829      	ldr	r1, [r5, #0]
    break;
    
    case TIM_CHANNEL_ALL:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80020cc:	6a00      	ldr	r0, [r0, #32]
 80020ce:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002140 <HAL_TIM_Encoder_Start_DMA+0x140>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80020d2:	4c1c      	ldr	r4, [pc, #112]	; (8002144 <HAL_TIM_Encoder_Start_DMA+0x144>)
    break;
    
    case TIM_CHANNEL_ALL:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80020d4:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 80020d8:	4633      	mov	r3, r6
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80020da:	64c4      	str	r4, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 80020dc:	3134      	adds	r1, #52	; 0x34
 80020de:	f002 fe93 	bl	8004e08 <HAL_DMA_Start_IT>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 80020e2:	6829      	ldr	r1, [r5, #0]
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80020e4:	6a68      	ldr	r0, [r5, #36]	; 0x24
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 80020e6:	4633      	mov	r3, r6
 80020e8:	463a      	mov	r2, r7
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80020ea:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80020ee:	64c4      	str	r4, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 80020f0:	3138      	adds	r1, #56	; 0x38
 80020f2:	f002 fe89 	bl	8004e08 <HAL_DMA_Start_IT>
          
     /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 80020f6:	682b      	ldr	r3, [r5, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002110:	6a1a      	ldr	r2, [r3, #32]
 8002112:	f022 0210 	bic.w	r2, r2, #16
 8002116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	f042 0210 	orr.w	r2, r2, #16
 800211e:	621a      	str	r2, [r3, #32]
      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
      
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002126:	60da      	str	r2, [r3, #12]
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800212e:	60da      	str	r2, [r3, #12]
    
    default:
    break;
  }  
  /* Return function status */
  return HAL_OK;
 8002130:	2000      	movs	r0, #0
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
    }
    break;
 8002132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U)) 
 8002136:	2e00      	cmp	r6, #0
 8002138:	d082      	beq.n	8002040 <HAL_TIM_Encoder_Start_DMA+0x40>
    {
      return HAL_ERROR;                                    
 800213a:	2001      	movs	r0, #1
 800213c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002140:	08002789 	.word	0x08002789
 8002144:	08002991 	.word	0x08002991

08002148 <HAL_TIM_Encoder_Stop_DMA>:
  
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  if(Channel == TIM_CHANNEL_1)
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8002148:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800214a:	6a1a      	ldr	r2, [r3, #32]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  if(Channel == TIM_CHANNEL_1)
 800214c:	b9d9      	cbnz	r1, 8002186 <HAL_TIM_Encoder_Stop_DMA+0x3e>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	621a      	str	r2, [r3, #32]
  if(Channel == TIM_CHANNEL_1)
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
    
    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800215e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002160:	6a19      	ldr	r1, [r3, #32]
 8002162:	f241 1211 	movw	r2, #4369	; 0x1111
 8002166:	4211      	tst	r1, r2
 8002168:	d108      	bne.n	800217c <HAL_TIM_Encoder_Stop_DMA+0x34>
 800216a:	6a19      	ldr	r1, [r3, #32]
 800216c:	f240 4244 	movw	r2, #1092	; 0x444
 8002170:	4211      	tst	r1, r2
 8002172:	d103      	bne.n	800217c <HAL_TIM_Encoder_Stop_DMA+0x34>
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800217c:	2301      	movs	r3, #1
 800217e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 8002182:	2000      	movs	r0, #0
 8002184:	4770      	bx	lr
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
    
    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
  }  
  else if(Channel == TIM_CHANNEL_2)
 8002186:	2904      	cmp	r1, #4
 8002188:	d013      	beq.n	80021b2 <HAL_TIM_Encoder_Stop_DMA+0x6a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	621a      	str	r2, [r3, #32]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002194:	6a1a      	ldr	r2, [r3, #32]
 8002196:	f022 0210 	bic.w	r2, r2, #16
 800219a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	621a      	str	r2, [r3, #32]
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a6:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	e7d6      	b.n	8002160 <HAL_TIM_Encoder_Stop_DMA+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021b2:	f022 0210 	bic.w	r2, r2, #16
 80021b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	621a      	str	r2, [r3, #32]
  else if(Channel == TIM_CHANNEL_2)
  {  
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
    
    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	e7cc      	b.n	8002160 <HAL_TIM_Encoder_Stop_DMA+0x18>
 80021c6:	bf00      	nop

080021c8 <HAL_TIM_DMABurst_WriteStart>:
  *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t* BurstBuffer, uint32_t  BurstLength)
{
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 80021ca:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
  *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t* BurstBuffer, uint32_t  BurstLength)
{
 80021ce:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 80021d0:	b2e4      	uxtb	r4, r4
 80021d2:	2c02      	cmp	r4, #2
 80021d4:	d019      	beq.n	800220a <HAL_TIM_DMABurst_WriteStart+0x42>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80021d6:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80021da:	b2e4      	uxtb	r4, r4
 80021dc:	2c01      	cmp	r4, #1
 80021de:	d02a      	beq.n	8002236 <HAL_TIM_DMABurst_WriteStart+0x6e>
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }
  switch(BurstRequestSrc)
 80021e0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80021e4:	4616      	mov	r6, r2
 80021e6:	460f      	mov	r7, r1
 80021e8:	4604      	mov	r4, r0
 80021ea:	d02f      	beq.n	800224c <HAL_TIM_DMABurst_WriteStart+0x84>
 80021ec:	d80f      	bhi.n	800220e <HAL_TIM_DMABurst_WriteStart+0x46>
 80021ee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80021f2:	d040      	beq.n	8002276 <HAL_TIM_DMABurst_WriteStart+0xae>
 80021f4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80021f8:	d041      	beq.n	800227e <HAL_TIM_DMABurst_WriteStart+0xb6>
 80021fa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80021fe:	d10f      	bne.n	8002220 <HAL_TIM_DMABurst_WriteStart+0x58>
  {
    case TIM_DMA_UPDATE:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8002200:	69c0      	ldr	r0, [r0, #28]
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U); 
 8002202:	6822      	ldr	r2, [r4, #0]
  switch(BurstRequestSrc)
  {
    case TIM_DMA_UPDATE:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8002204:	4924      	ldr	r1, [pc, #144]	; (8002298 <HAL_TIM_DMABurst_WriteStart+0xd0>)
 8002206:	e024      	b.n	8002252 <HAL_TIM_DMABurst_WriteStart+0x8a>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 8002208:	b1bd      	cbz	r5, 800223a <HAL_TIM_DMABurst_WriteStart+0x72>
    {
      return HAL_ERROR;                                    
 800220a:	4620      	mov	r0, r4
   
   htim->State = HAL_TIM_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 800220c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }
  switch(BurstRequestSrc)
 800220e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002212:	d02c      	beq.n	800226e <HAL_TIM_DMABurst_WriteStart+0xa6>
 8002214:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002218:	d039      	beq.n	800228e <HAL_TIM_DMABurst_WriteStart+0xc6>
 800221a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800221e:	d032      	beq.n	8002286 <HAL_TIM_DMABurst_WriteStart+0xbe>
    break;
    default:
    break;  
  }
   /* configure the DMA Burst Mode */
   htim->Instance->DCR = BurstBaseAddress | BurstLength;  
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	433d      	orrs	r5, r7
 8002224:	649d      	str	r5, [r3, #72]	; 0x48
   
   /* Enable the TIM DMA Request */
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
 8002226:	68da      	ldr	r2, [r3, #12]
   
   htim->State = HAL_TIM_STATE_READY;
 8002228:	2101      	movs	r1, #1
  }
   /* configure the DMA Burst Mode */
   htim->Instance->DCR = BurstBaseAddress | BurstLength;  
   
   /* Enable the TIM DMA Request */
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
 800222a:	4332      	orrs	r2, r6
 800222c:	60da      	str	r2, [r3, #12]
   
   htim->State = HAL_TIM_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 800222e:	2000      	movs	r0, #0
   htim->Instance->DCR = BurstBaseAddress | BurstLength;  
   
   /* Enable the TIM DMA Request */
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);  
   
   htim->State = HAL_TIM_STATE_READY;
 8002230:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8002234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0e6      	beq.n	8002208 <HAL_TIM_DMABurst_WriteStart+0x40>
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800223a:	2402      	movs	r4, #2
    }
  }
  switch(BurstRequestSrc)
 800223c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002240:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8002244:	4616      	mov	r6, r2
 8002246:	460f      	mov	r7, r1
 8002248:	4604      	mov	r4, r0
    }
  }
  switch(BurstRequestSrc)
 800224a:	d1cf      	bne.n	80021ec <HAL_TIM_DMABurst_WriteStart+0x24>
    }
    break;
    case TIM_DMA_CC3:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800224c:	6a80      	ldr	r0, [r0, #40]	; 0x28
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 800224e:	6822      	ldr	r2, [r4, #0]
    }
    break;
    case TIM_DMA_CC3:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002250:	4912      	ldr	r1, [pc, #72]	; (800229c <HAL_TIM_DMABurst_WriteStart+0xd4>)
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8002252:	f8df c054 	ldr.w	ip, [pc, #84]	; 80022a8 <HAL_TIM_DMABurst_WriteStart+0xe0>
    }
    break;
    case TIM_DMA_TRIGGER:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002256:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002258:	ea4f 2e15 	mov.w	lr, r5, lsr #8
 800225c:	4619      	mov	r1, r3
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800225e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002262:	324c      	adds	r2, #76	; 0x4c
 8002264:	f10e 0301 	add.w	r3, lr, #1
 8002268:	f002 fdce 	bl	8004e08 <HAL_DMA_Start_IT>
    }
    break;
 800226c:	e7d8      	b.n	8002220 <HAL_TIM_DMABurst_WriteStart+0x58>
    }
    break;
    case TIM_DMA_COM:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800226e:	6b00      	ldr	r0, [r0, #48]	; 0x30
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002270:	6822      	ldr	r2, [r4, #0]
    }
    break;
    case TIM_DMA_COM:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8002272:	490b      	ldr	r1, [pc, #44]	; (80022a0 <HAL_TIM_DMABurst_WriteStart+0xd8>)
 8002274:	e7ed      	b.n	8002252 <HAL_TIM_DMABurst_WriteStart+0x8a>
    }
    break;
    case TIM_DMA_CC1:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002276:	6a00      	ldr	r0, [r0, #32]
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002278:	6822      	ldr	r2, [r4, #0]
    }
    break;
    case TIM_DMA_CC1:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <HAL_TIM_DMABurst_WriteStart+0xd4>)
 800227c:	e7e9      	b.n	8002252 <HAL_TIM_DMABurst_WriteStart+0x8a>
    }
    break;
    case TIM_DMA_CC2:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800227e:	6a40      	ldr	r0, [r0, #36]	; 0x24
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002280:	6822      	ldr	r2, [r4, #0]
    }
    break;
    case TIM_DMA_CC2:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002282:	4906      	ldr	r1, [pc, #24]	; (800229c <HAL_TIM_DMABurst_WriteStart+0xd4>)
 8002284:	e7e5      	b.n	8002252 <HAL_TIM_DMABurst_WriteStart+0x8a>
    }
    break;
    case TIM_DMA_CC4:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002286:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002288:	6822      	ldr	r2, [r4, #0]
    }
    break;
    case TIM_DMA_CC4:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800228a:	4904      	ldr	r1, [pc, #16]	; (800229c <HAL_TIM_DMABurst_WriteStart+0xd4>)
 800228c:	e7e1      	b.n	8002252 <HAL_TIM_DMABurst_WriteStart+0x8a>
    }
    break;
    case TIM_DMA_TRIGGER:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800228e:	6b40      	ldr	r0, [r0, #52]	; 0x34
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);     
 8002290:	6822      	ldr	r2, [r4, #0]
    }
    break;
    case TIM_DMA_TRIGGER:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002292:	4904      	ldr	r1, [pc, #16]	; (80022a4 <HAL_TIM_DMABurst_WriteStart+0xdc>)
 8002294:	e7dd      	b.n	8002252 <HAL_TIM_DMABurst_WriteStart+0x8a>
 8002296:	bf00      	nop
 8002298:	08002771 	.word	0x08002771
 800229c:	080027d9 	.word	0x080027d9
 80022a0:	080038ed 	.word	0x080038ed
 80022a4:	0800297d 	.word	0x0800297d
 80022a8:	08002991 	.word	0x08002991

080022ac <HAL_TIM_DMABurst_ReadStart>:
  *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 80022ae:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
  *         between TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 80022b2:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 80022b4:	b2e4      	uxtb	r4, r4
 80022b6:	2c02      	cmp	r4, #2
 80022b8:	d019      	beq.n	80022ee <HAL_TIM_DMABurst_ReadStart+0x42>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80022ba:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80022be:	b2e4      	uxtb	r4, r4
 80022c0:	2c01      	cmp	r4, #1
 80022c2:	d02a      	beq.n	800231a <HAL_TIM_DMABurst_ReadStart+0x6e>
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }  
  switch(BurstRequestSrc)
 80022c4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80022c8:	4616      	mov	r6, r2
 80022ca:	460f      	mov	r7, r1
 80022cc:	4604      	mov	r4, r0
 80022ce:	d02f      	beq.n	8002330 <HAL_TIM_DMABurst_ReadStart+0x84>
 80022d0:	d80f      	bhi.n	80022f2 <HAL_TIM_DMABurst_ReadStart+0x46>
 80022d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80022d6:	d040      	beq.n	800235a <HAL_TIM_DMABurst_ReadStart+0xae>
 80022d8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80022dc:	d041      	beq.n	8002362 <HAL_TIM_DMABurst_ReadStart+0xb6>
 80022de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80022e2:	d10f      	bne.n	8002304 <HAL_TIM_DMABurst_ReadStart+0x58>
  {
    case TIM_DMA_UPDATE:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80022e4:	69c0      	ldr	r0, [r0, #28]
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);     
 80022e6:	6821      	ldr	r1, [r4, #0]
  switch(BurstRequestSrc)
  {
    case TIM_DMA_UPDATE:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80022e8:	4a24      	ldr	r2, [pc, #144]	; (800237c <HAL_TIM_DMABurst_ReadStart+0xd0>)
 80022ea:	e024      	b.n	8002336 <HAL_TIM_DMABurst_ReadStart+0x8a>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 80022ec:	b1bd      	cbz	r5, 800231e <HAL_TIM_DMABurst_ReadStart+0x72>
    {
      return HAL_ERROR;                                    
 80022ee:	4620      	mov	r0, r4
  
  htim->State = HAL_TIM_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 80022f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }  
  switch(BurstRequestSrc)
 80022f2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80022f6:	d02c      	beq.n	8002352 <HAL_TIM_DMABurst_ReadStart+0xa6>
 80022f8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80022fc:	d039      	beq.n	8002372 <HAL_TIM_DMABurst_ReadStart+0xc6>
 80022fe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002302:	d032      	beq.n	800236a <HAL_TIM_DMABurst_ReadStart+0xbe>
    default:
    break;  
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = BurstBaseAddress | BurstLength;  
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	433d      	orrs	r5, r7
 8002308:	649d      	str	r5, [r3, #72]	; 0x48
  
  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800230a:	68da      	ldr	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 800230c:	2101      	movs	r1, #1

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = BurstBaseAddress | BurstLength;  
  
  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800230e:	4332      	orrs	r2, r6
 8002310:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 8002312:	2000      	movs	r0, #0
  htim->Instance->DCR = BurstBaseAddress | BurstLength;  
  
  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
  
  htim->State = HAL_TIM_STATE_READY;
 8002314:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8002318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U)) 
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0e6      	beq.n	80022ec <HAL_TIM_DMABurst_ReadStart+0x40>
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800231e:	2402      	movs	r4, #2
    }
  }  
  switch(BurstRequestSrc)
 8002320:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002324:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8002328:	4616      	mov	r6, r2
 800232a:	460f      	mov	r7, r1
 800232c:	4604      	mov	r4, r0
    }
  }  
  switch(BurstRequestSrc)
 800232e:	d1cf      	bne.n	80022d0 <HAL_TIM_DMABurst_ReadStart+0x24>
    }
    break;
    case TIM_DMA_CC3:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002330:	6a80      	ldr	r0, [r0, #40]	; 0x28
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 8002332:	6821      	ldr	r1, [r4, #0]
    }
    break;
    case TIM_DMA_CC3:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_TIM_DMABurst_ReadStart+0xd4>)
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8002336:	f8df c054 	ldr.w	ip, [pc, #84]	; 800238c <HAL_TIM_DMABurst_ReadStart+0xe0>
    }
    break;
    case TIM_DMA_TRIGGER:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800233a:	63c2      	str	r2, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
 800233c:	ea4f 2e15 	mov.w	lr, r5, lsr #8
 8002340:	461a      	mov	r2, r3
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8002342:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
 8002346:	314c      	adds	r1, #76	; 0x4c
 8002348:	f10e 0301 	add.w	r3, lr, #1
 800234c:	f002 fd5c 	bl	8004e08 <HAL_DMA_Start_IT>
    }
    break;
 8002350:	e7d8      	b.n	8002304 <HAL_TIM_DMABurst_ReadStart+0x58>
    }
    break;
    case TIM_DMA_COM:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8002352:	6b00      	ldr	r0, [r0, #48]	; 0x30
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 8002354:	6821      	ldr	r1, [r4, #0]
    }
    break;
    case TIM_DMA_COM:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_TIM_DMABurst_ReadStart+0xd8>)
 8002358:	e7ed      	b.n	8002336 <HAL_TIM_DMABurst_ReadStart+0x8a>
    }
    break;
    case TIM_DMA_CC1:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800235a:	6a00      	ldr	r0, [r0, #32]
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800235c:	6821      	ldr	r1, [r4, #0]
    }
    break;
    case TIM_DMA_CC1:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_TIM_DMABurst_ReadStart+0xd4>)
 8002360:	e7e9      	b.n	8002336 <HAL_TIM_DMABurst_ReadStart+0x8a>
    }
    break;
    case TIM_DMA_CC2:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002362:	6a40      	ldr	r0, [r0, #36]	; 0x24
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);     
 8002364:	6821      	ldr	r1, [r4, #0]
    }
    break;
    case TIM_DMA_CC2:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002366:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_TIM_DMABurst_ReadStart+0xd4>)
 8002368:	e7e5      	b.n	8002336 <HAL_TIM_DMABurst_ReadStart+0x8a>
    }
    break;
    case TIM_DMA_CC4:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800236a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);      
 800236c:	6821      	ldr	r1, [r4, #0]
    }
    break;
    case TIM_DMA_CC4:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_TIM_DMABurst_ReadStart+0xd4>)
 8002370:	e7e1      	b.n	8002336 <HAL_TIM_DMABurst_ReadStart+0x8a>
    }
    break;
    case TIM_DMA_TRIGGER:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002372:	6b40      	ldr	r0, [r0, #52]	; 0x34
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
  
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1);      
 8002374:	6821      	ldr	r1, [r4, #0]
    }
    break;
    case TIM_DMA_TRIGGER:
    {  
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_TIM_DMABurst_ReadStart+0xdc>)
 8002378:	e7dd      	b.n	8002336 <HAL_TIM_DMABurst_ReadStart+0x8a>
 800237a:	bf00      	nop
 800237c:	08002771 	.word	0x08002771
 8002380:	08002789 	.word	0x08002789
 8002384:	080038ed 	.word	0x080038ed
 8002388:	0800297d 	.word	0x0800297d
 800238c:	08002991 	.word	0x08002991

08002390 <HAL_TIM_DMABurst_ReadStop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 8002390:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  *                the configuration information for TIM module.
  * @param  BurstRequestSrc: TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	460c      	mov	r4, r1
 8002398:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800239a:	d030      	beq.n	80023fe <HAL_TIM_DMABurst_ReadStop+0x6e>
 800239c:	d912      	bls.n	80023c4 <HAL_TIM_DMABurst_ReadStop+0x34>
 800239e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80023a2:	d024      	beq.n	80023ee <HAL_TIM_DMABurst_ReadStop+0x5e>
 80023a4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80023a8:	d01d      	beq.n	80023e6 <HAL_TIM_DMABurst_ReadStop+0x56>
 80023aa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80023ae:	d102      	bne.n	80023b6 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
    }
    break;
    case TIM_DMA_CC4:
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 80023b0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80023b2:	f002 fd6b 	bl	8004e8c <HAL_DMA_Abort>
    default:
    break;  
  }
  
  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 80023b6:	682b      	ldr	r3, [r5, #0]
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	ea21 0404 	bic.w	r4, r1, r4
 80023be:	60dc      	str	r4, [r3, #12]
      
  /* Return function status */
  return HAL_OK;  
}
 80023c0:	2000      	movs	r0, #0
 80023c2:	bd38      	pop	{r3, r4, r5, pc}
{
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 80023c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80023c8:	d015      	beq.n	80023f6 <HAL_TIM_DMABurst_ReadStop+0x66>
 80023ca:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80023ce:	d006      	beq.n	80023de <HAL_TIM_DMABurst_ReadStop+0x4e>
 80023d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80023d4:	d1ef      	bne.n	80023b6 <HAL_TIM_DMABurst_ReadStop+0x26>
  {
    case TIM_DMA_UPDATE:
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 80023d6:	69c0      	ldr	r0, [r0, #28]
 80023d8:	f002 fd58 	bl	8004e8c <HAL_DMA_Abort>
    }
    break;
 80023dc:	e7eb      	b.n	80023b6 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
    }
    break;
    case TIM_DMA_CC2:
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 80023de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80023e0:	f002 fd54 	bl	8004e8c <HAL_DMA_Abort>
    }
    break;
 80023e4:	e7e7      	b.n	80023b6 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
    }
    break;
    case TIM_DMA_TRIGGER:
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 80023e6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80023e8:	f002 fd50 	bl	8004e8c <HAL_DMA_Abort>
    }
    break;
 80023ec:	e7e3      	b.n	80023b6 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
    }
    break;
    case TIM_DMA_COM:
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 80023ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80023f0:	f002 fd4c 	bl	8004e8c <HAL_DMA_Abort>
    }
    break;
 80023f4:	e7df      	b.n	80023b6 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
    }
    break;
    case TIM_DMA_CC1:
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 80023f6:	6a00      	ldr	r0, [r0, #32]
 80023f8:	f002 fd48 	bl	8004e8c <HAL_DMA_Abort>
    }
    break;
 80023fc:	e7db      	b.n	80023b6 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
    }
    break;
    case TIM_DMA_CC3:
    {  
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 80023fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002400:	f002 fd44 	bl	8004e8c <HAL_DMA_Abort>
    }
    break;
 8002404:	e7d7      	b.n	80023b6 <HAL_TIM_DMABurst_ReadStop+0x26>
 8002406:	bf00      	nop

08002408 <HAL_TIM_DMABurst_WriteStop>:
 8002408:	f7ff bfc2 	b.w	8002390 <HAL_TIM_DMABurst_ReadStop>

0800240c <HAL_TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800240c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002410:	2a01      	cmp	r2, #1
 8002412:	d00f      	beq.n	8002434 <HAL_TIM_GenerateEvent+0x28>
  * @note   TIM_EVENTSOURCE_COM and TIM_EVENTSOURCE_BREAK are used only with TIM1 and TIM8.
  * @retval HAL status
  */ 

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8002414:	b430      	push	{r4, r5}
 8002416:	4603      	mov	r3, r0
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
  
  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8002418:	6805      	ldr	r5, [r0, #0]
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800241a:	2401      	movs	r4, #1
  
  /* Process Locked */
  __HAL_LOCK(htim);
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	2002      	movs	r0, #2
  htim->Instance->EGR = EventSource;
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 800241e:	2200      	movs	r2, #0
  
  /* Process Locked */
  __HAL_LOCK(htim);
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  
  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8002424:	6169      	str	r1, [r5, #20]
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  /* Return function status */
  return HAL_OK;  
 8002426:	4610      	mov	r0, r2
  
  /* Set the event sources */
  htim->Instance->EGR = EventSource;
  
  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002428:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800242c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Return function status */
  return HAL_OK;  
}
 8002430:	bc30      	pop	{r4, r5}
 8002432:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002434:	2002      	movs	r0, #2
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_ConfigOCrefClear>:
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
   
  /* Process Locked */
  __HAL_LOCK(htim);
 8002438:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800243c:	2b01      	cmp	r3, #1
 800243e:	d025      	beq.n	800248c <HAL_TIM_ConfigOCrefClear+0x54>
  
  htim->State = HAL_TIM_STATE_BUSY;
  
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
 8002440:	684b      	ldr	r3, [r1, #4]
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)
{ 
 8002442:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
   
  /* Process Locked */
  __HAL_LOCK(htim);
 8002444:	2501      	movs	r5, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002446:	2402      	movs	r4, #2
  
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
 8002448:	42ab      	cmp	r3, r5
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
   
  /* Process Locked */
  __HAL_LOCK(htim);
 800244a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800244e:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
 8002452:	d01d      	beq.n	8002490 <HAL_TIM_ConfigOCrefClear+0x58>
                      sClearInputConfig->ClearInputPrescaler,
                      sClearInputConfig->ClearInputPolarity,
                      sClearInputConfig->ClearInputFilter);
  }
  
  switch (Channel)
 8002454:	2a0c      	cmp	r2, #12
 8002456:	d810      	bhi.n	800247a <HAL_TIM_ConfigOCrefClear+0x42>
 8002458:	e8df f002 	tbb	[pc, r2]
 800245c:	0f0f0f27 	.word	0x0f0f0f27
 8002460:	0f0f0f2f 	.word	0x0f0f0f2f
 8002464:	0f0f0f07 	.word	0x0f0f0f07
 8002468:	37          	.byte	0x37
 8002469:	00          	.byte	0x00
    } 
    break;
    case TIM_CHANNEL_3:   
    {  
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      if(sClearInputConfig->ClearInputState != RESET)  
 800246a:	680b      	ldr	r3, [r1, #0]
      {
        /* Enable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 800246c:	6802      	ldr	r2, [r0, #0]
    } 
    break;
    case TIM_CHANNEL_3:   
    {  
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      if(sClearInputConfig->ClearInputState != RESET)  
 800246e:	2b00      	cmp	r3, #0
 8002470:	d042      	beq.n	80024f8 <HAL_TIM_ConfigOCrefClear+0xc0>
      {
        /* Enable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 8002472:	69d3      	ldr	r3, [r2, #28]
 8002474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002478:	61d3      	str	r3, [r2, #28]
    break;
  } 

  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 800247a:	2300      	movs	r3, #0
    break;
    default:  
    break;
  } 

  htim->State = HAL_TIM_STATE_READY;
 800247c:	2201      	movs	r2, #1
 800247e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002482:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;  
}  
 8002486:	bcf0      	pop	{r4, r5, r6, r7}

  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;  
 8002488:	4618      	mov	r0, r3
}  
 800248a:	4770      	bx	lr
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
   
  /* Process Locked */
  __HAL_LOCK(htim);
 800248c:	2002      	movs	r0, #2
 800248e:	4770      	bx	lr
  
  htim->State = HAL_TIM_STATE_BUSY;
  
  if(sClearInputConfig->ClearInputSource == TIM_CLEARINPUTSOURCE_ETR)
  {
    TIM_ETR_SetConfig(htim->Instance, 
 8002490:	6806      	ldr	r6, [r0, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002492:	68cb      	ldr	r3, [r1, #12]
 8002494:	688f      	ldr	r7, [r1, #8]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002496:	68b4      	ldr	r4, [r6, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002498:	690d      	ldr	r5, [r1, #16]
 800249a:	433b      	orrs	r3, r7
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800249c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80024a0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80024a4:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024a6:	60b3      	str	r3, [r6, #8]
 80024a8:	e7d4      	b.n	8002454 <HAL_TIM_ConfigOCrefClear+0x1c>
  
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {        
      if(sClearInputConfig->ClearInputState != RESET)  
 80024aa:	680b      	ldr	r3, [r1, #0]
      {
        /* Enable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 80024ac:	6802      	ldr	r2, [r0, #0]
  
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {        
      if(sClearInputConfig->ClearInputState != RESET)  
 80024ae:	b1a3      	cbz	r3, 80024da <HAL_TIM_ConfigOCrefClear+0xa2>
      {
        /* Enable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 80024b0:	6993      	ldr	r3, [r2, #24]
 80024b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	e7df      	b.n	800247a <HAL_TIM_ConfigOCrefClear+0x42>
    }    
    break;
    case TIM_CHANNEL_2:    
    { 
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      if(sClearInputConfig->ClearInputState != RESET)  
 80024ba:	680b      	ldr	r3, [r1, #0]
      {
        /* Enable the Ocref clear feature for Channel 2 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 80024bc:	6802      	ldr	r2, [r0, #0]
    }    
    break;
    case TIM_CHANNEL_2:    
    { 
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      if(sClearInputConfig->ClearInputState != RESET)  
 80024be:	b1b3      	cbz	r3, 80024ee <HAL_TIM_ConfigOCrefClear+0xb6>
      {
        /* Enable the Ocref clear feature for Channel 2 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 80024c0:	6993      	ldr	r3, [r2, #24]
 80024c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	e7d7      	b.n	800247a <HAL_TIM_ConfigOCrefClear+0x42>
    } 
    break;
    case TIM_CHANNEL_4:    
    {  
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      if(sClearInputConfig->ClearInputState != RESET)  
 80024ca:	680b      	ldr	r3, [r1, #0]
      {
        /* Enable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 80024cc:	6802      	ldr	r2, [r0, #0]
    } 
    break;
    case TIM_CHANNEL_4:    
    {  
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      if(sClearInputConfig->ClearInputState != RESET)  
 80024ce:	b14b      	cbz	r3, 80024e4 <HAL_TIM_ConfigOCrefClear+0xac>
      {
        /* Enable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 80024d0:	69d3      	ldr	r3, [r2, #28]
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	61d3      	str	r3, [r2, #28]
 80024d8:	e7cf      	b.n	800247a <HAL_TIM_ConfigOCrefClear+0x42>
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
      }
      else
      {
        /* Disable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
 80024da:	6993      	ldr	r3, [r2, #24]
 80024dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e0:	6193      	str	r3, [r2, #24]
 80024e2:	e7ca      	b.n	800247a <HAL_TIM_ConfigOCrefClear+0x42>
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
      }
      else
      {
        /* Disable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
 80024e4:	69d3      	ldr	r3, [r2, #28]
 80024e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80024ea:	61d3      	str	r3, [r2, #28]
 80024ec:	e7c5      	b.n	800247a <HAL_TIM_ConfigOCrefClear+0x42>
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
      }
      else
      {
        /* Disable the Ocref clear feature for Channel 2 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
 80024ee:	6993      	ldr	r3, [r2, #24]
 80024f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80024f4:	6193      	str	r3, [r2, #24]
 80024f6:	e7c0      	b.n	800247a <HAL_TIM_ConfigOCrefClear+0x42>
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
      }
      else
      {
        /* Disable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
 80024f8:	69d3      	ldr	r3, [r2, #28]
 80024fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024fe:	61d3      	str	r3, [r2, #28]
 8002500:	e7bb      	b.n	800247a <HAL_TIM_ConfigOCrefClear+0x42>
 8002502:	bf00      	nop

08002504 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8002504:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002508:	2b01      	cmp	r3, #1
 800250a:	d040      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x8a>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	2202      	movs	r2, #2
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250e:	6803      	ldr	r3, [r0, #0]
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8002510:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002512:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002516:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002518:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800251e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8002522:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002524:	2c40      	cmp	r4, #64	; 0x40
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8002526:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
 800252a:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800252c:	d073      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0x112>
 800252e:	d918      	bls.n	8002562 <HAL_TIM_ConfigClockSource+0x5e>
 8002530:	2c70      	cmp	r4, #112	; 0x70
 8002532:	d060      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0xf2>
 8002534:	d92d      	bls.n	8002592 <HAL_TIM_ConfigClockSource+0x8e>
 8002536:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800253a:	d057      	beq.n	80025ec <HAL_TIM_ConfigClockSource+0xe8>
 800253c:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8002540:	d11c      	bne.n	800257c <HAL_TIM_ConfigClockSource+0x78>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002542:	688a      	ldr	r2, [r1, #8]
 8002544:	684d      	ldr	r5, [r1, #4]
 8002546:	68cc      	ldr	r4, [r1, #12]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002548:	6899      	ldr	r1, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800254a:	432a      	orrs	r2, r5
 800254c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002550:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002554:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002556:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800255e:	609a      	str	r2, [r3, #8]
    }
    break;
 8002560:	e00c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002562:	2c10      	cmp	r4, #16
 8002564:	d032      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0xc8>
 8002566:	d938      	bls.n	80025da <HAL_TIM_ConfigClockSource+0xd6>
 8002568:	2c20      	cmp	r4, #32
 800256a:	d06c      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x142>
 800256c:	2c30      	cmp	r4, #48	; 0x30
 800256e:	d105      	bne.n	800257c <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002570:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002572:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002576:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800257a:	609a      	str	r2, [r3, #8]
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 800257c:	2300      	movs	r3, #0
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 800257e:	2201      	movs	r2, #1
 8002580:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002584:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
}
 8002588:	bcf0      	pop	{r4, r5, r6, r7}
  }
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
 800258a:	4618      	mov	r0, r3
}
 800258c:	4770      	bx	lr
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800258e:	2002      	movs	r0, #2
 8002590:	4770      	bx	lr
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002592:	2c50      	cmp	r4, #80	; 0x50
 8002594:	d05e      	beq.n	8002654 <HAL_TIM_ConfigClockSource+0x150>
 8002596:	2c60      	cmp	r4, #96	; 0x60
 8002598:	d1f0      	bne.n	800257c <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800259a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 800259c:	684d      	ldr	r5, [r1, #4]
 800259e:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a0:	f024 0410 	bic.w	r4, r4, #16
 80025a4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80025a8:	6a1a      	ldr	r2, [r3, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025aa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80025b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025b6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ba:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80025be:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80025c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025c4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e7d7      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80025cc:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80025ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025d2:	f042 0217 	orr.w	r2, r2, #23
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	e7d0      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80025da:	2c00      	cmp	r4, #0
 80025dc:	d1ce      	bne.n	800257c <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80025de:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80025e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025e4:	f042 0207 	orr.w	r2, r2, #7
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	e7c7      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	f022 0207 	bic.w	r2, r2, #7
 80025f2:	609a      	str	r2, [r3, #8]
    }
    break;
 80025f4:	e7c2      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80025f6:	688a      	ldr	r2, [r1, #8]
 80025f8:	684d      	ldr	r5, [r1, #4]
 80025fa:	68cc      	ldr	r4, [r1, #12]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80025fc:	6899      	ldr	r1, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80025fe:	432a      	orrs	r2, r5
 8002600:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002604:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002608:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800260a:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800260c:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800260e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002612:	609a      	str	r2, [r3, #8]
    }
    break;
 8002614:	e7b2      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002616:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002618:	6a1e      	ldr	r6, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 800261a:	684c      	ldr	r4, [r1, #4]
 800261c:	68cf      	ldr	r7, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800261e:	f026 0601 	bic.w	r6, r6, #1
 8002622:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002624:	699a      	ldr	r2, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002626:	f025 010a 	bic.w	r1, r5, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800262a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002632:	4321      	orrs	r1, r4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002636:	6219      	str	r1, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002638:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800263a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800263e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	e79a      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002646:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002648:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800264c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	e793      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002654:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002656:	6a1e      	ldr	r6, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002658:	684c      	ldr	r4, [r1, #4]
 800265a:	68cf      	ldr	r7, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265c:	f026 0601 	bic.w	r6, r6, #1
 8002660:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002662:	699a      	ldr	r2, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002664:	f025 010a 	bic.w	r1, r5, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002668:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800266c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002670:	4321      	orrs	r1, r4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002674:	6219      	str	r1, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002676:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002678:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800267c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	e77b      	b.n	800257c <HAL_TIM_ConfigClockSource+0x78>

08002684 <HAL_TIM_ConfigTI1Input>:
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002684:	6802      	ldr	r2, [r0, #0]
 8002686:	6853      	ldr	r3, [r2, #4]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8002688:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 800268c:	4319      	orrs	r1, r3
  
  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800268e:	6051      	str	r1, [r2, #4]

  return HAL_OK;
}
 8002690:	2000      	movs	r0, #0
 8002692:	4770      	bx	lr

08002694 <HAL_TIM_SlaveConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
   
  __HAL_LOCK(htim);
 8002694:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002698:	2a01      	cmp	r2, #1
 800269a:	d101      	bne.n	80026a0 <HAL_TIM_SlaveConfigSynchronization+0xc>
 800269c:	2002      	movs	r0, #2
 800269e:	4770      	bx	lr
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
   
  __HAL_LOCK(htim);
 80026a4:	2501      	movs	r5, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
 80026a6:	2302      	movs	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
   
  __HAL_LOCK(htim);
 80026a8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80026b0:	f7fe fde4 	bl	800127c <TIM_SlaveTimer_SetConfig>
  
  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026bc:	60da      	str	r2, [r3, #12]
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80026be:	68da      	ldr	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
     
  __HAL_UNLOCK(htim);  
 80026c0:	2100      	movs	r1, #0
  
  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80026c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026c6:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
     
  __HAL_UNLOCK(htim);  
  
  return HAL_OK;
 80026c8:	4608      	mov	r0, r1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
  
  htim->State = HAL_TIM_STATE_READY;
 80026ca:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
     
  __HAL_UNLOCK(htim);  
 80026ce:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  
  return HAL_OK;
 80026d2:	bd38      	pop	{r3, r4, r5, pc}

080026d4 <HAL_TIM_SlaveConfigSynchronization_IT>:
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 80026d4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80026d8:	2a01      	cmp	r2, #1
 80026da:	d101      	bne.n	80026e0 <HAL_TIM_SlaveConfigSynchronization_IT+0xc>
 80026dc:	2002      	movs	r0, #2
 80026de:	4770      	bx	lr
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim, 
                                                        TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 80026e0:	b538      	push	{r3, r4, r5, lr}
 80026e2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 80026e4:	2501      	movs	r5, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80026e6:	2302      	movs	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 80026e8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80026f0:	f7fe fdc4 	bl	800127c <TIM_SlaveTimer_SetConfig>
  
  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026fc:	60da      	str	r2, [r3, #12]
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80026fe:	68da      	ldr	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
     
  __HAL_UNLOCK(htim);  
 8002700:	2100      	movs	r1, #0
  
  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002702:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002706:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
     
  __HAL_UNLOCK(htim);  
  
  return HAL_OK;
 8002708:	4608      	mov	r0, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
  
  htim->State = HAL_TIM_STATE_READY;
 800270a:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
     
  __HAL_UNLOCK(htim);  
 800270e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  
  return HAL_OK;
 8002712:	bd38      	pop	{r3, r4, r5, pc}

08002714 <HAL_TIM_ReadCapturedValue>:
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
  uint32_t tmpreg = 0U;
  
  __HAL_LOCK(htim);
 8002714:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002718:	2a01      	cmp	r2, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800271a:	4603      	mov	r3, r0
  uint32_t tmpreg = 0U;
  
  __HAL_LOCK(htim);
 800271c:	d00a      	beq.n	8002734 <HAL_TIM_ReadCapturedValue+0x20>
  
  switch (Channel)
 800271e:	290c      	cmp	r1, #12
 8002720:	d822      	bhi.n	8002768 <HAL_TIM_ReadCapturedValue+0x54>
 8002722:	e8df f001 	tbb	[pc, r1]
 8002726:	210f      	.short	0x210f
 8002728:	21152121 	.word	0x21152121
 800272c:	211b2121 	.word	0x211b2121
 8002730:	2121      	.short	0x2121
 8002732:	09          	.byte	0x09
 8002733:	00          	.byte	0x00
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
  uint32_t tmpreg = 0U;
  
  __HAL_LOCK(htim);
 8002734:	2002      	movs	r0, #2
    break;  
  }
     
  __HAL_UNLOCK(htim);  
  return tmpreg;
}
 8002736:	4770      	bx	lr
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      
      /* Return the capture 4 value */
      tmpreg = htim->Instance->CCR4;
 8002738:	6802      	ldr	r2, [r0, #0]
 800273a:	6c10      	ldr	r0, [r2, #64]	; 0x40
    
    default:
    break;  
  }
     
  __HAL_UNLOCK(htim);  
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 8002742:	4770      	bx	lr
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      
      /* Return the capture 1 value */
      tmpreg = htim->Instance->CCR1;
 8002744:	6802      	ldr	r2, [r0, #0]
 8002746:	6b50      	ldr	r0, [r2, #52]	; 0x34
    
    default:
    break;  
  }
     
  __HAL_UNLOCK(htim);  
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 800274e:	4770      	bx	lr
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      
      /* Return the capture 2 value */
      tmpreg = htim->Instance->CCR2;
 8002750:	6802      	ldr	r2, [r0, #0]
 8002752:	6b90      	ldr	r0, [r2, #56]	; 0x38
    
    default:
    break;  
  }
     
  __HAL_UNLOCK(htim);  
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 800275a:	4770      	bx	lr
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      
      /* Return the capture 3 value */
      tmpreg = htim->Instance->CCR3;
 800275c:	6802      	ldr	r2, [r0, #0]
 800275e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    
    default:
    break;  
  }
     
  __HAL_UNLOCK(htim);  
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 8002766:	4770      	bx	lr
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
  uint32_t tmpreg = 0U;
 8002768:	2000      	movs	r0, #0
 800276a:	e7e7      	b.n	800273c <HAL_TIM_ReadCapturedValue+0x28>
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <TIM_DMAPeriodElapsedCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8002770:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002772:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  htim->State= HAL_TIM_STATE_READY;
 8002774:	2301      	movs	r3, #1
 8002776:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  HAL_TIM_PeriodElapsedCallback(htim);
 800277a:	f002 fedf 	bl	800553c <HAL_TIM_PeriodElapsedCallback>
 800277e:	bd08      	pop	{r3, pc}

08002780 <HAL_TIM_OC_DelayElapsedCallback>:
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <TIM_DMACaptureCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8002788:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800278a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  htim->State= HAL_TIM_STATE_READY;
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 800278c:	6a22      	ldr	r2, [r4, #32]
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  htim->State= HAL_TIM_STATE_READY;
 800278e:	2301      	movs	r3, #1
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002790:	4290      	cmp	r0, r2
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  htim->State= HAL_TIM_STATE_READY;
 8002792:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002796:	d00f      	beq.n	80027b8 <TIM_DMACaptureCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800279a:	4298      	cmp	r0, r3
 800279c:	d013      	beq.n	80027c6 <TIM_DMACaptureCplt+0x3e>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800279e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027a0:	4298      	cmp	r0, r3
 80027a2:	d013      	beq.n	80027cc <TIM_DMACaptureCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027a6:	4298      	cmp	r0, r3
 80027a8:	d005      	beq.n	80027b6 <TIM_DMACaptureCplt+0x2e>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
  }
  
  HAL_TIM_IC_CaptureCallback(htim); 
 80027aa:	4620      	mov	r0, r4
 80027ac:	f002 fece 	bl	800554c <HAL_TIM_IC_CaptureCallback>
  
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b0:	2300      	movs	r3, #0
 80027b2:	7623      	strb	r3, [r4, #24]
 80027b4:	bd10      	pop	{r4, pc}
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027b6:	2308      	movs	r3, #8
 80027b8:	7623      	strb	r3, [r4, #24]
  }
  
  HAL_TIM_IC_CaptureCallback(htim); 
 80027ba:	4620      	mov	r0, r4
 80027bc:	f002 fec6 	bl	800554c <HAL_TIM_IC_CaptureCallback>
  
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	2300      	movs	r3, #0
 80027c2:	7623      	strb	r3, [r4, #24]
 80027c4:	bd10      	pop	{r4, pc}
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c6:	2302      	movs	r3, #2
 80027c8:	7623      	strb	r3, [r4, #24]
 80027ca:	e7ee      	b.n	80027aa <TIM_DMACaptureCplt+0x22>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027cc:	2304      	movs	r3, #4
 80027ce:	7623      	strb	r3, [r4, #24]
 80027d0:	e7eb      	b.n	80027aa <TIM_DMACaptureCplt+0x22>
 80027d2:	bf00      	nop

080027d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop

080027d8 <TIM_DMADelayPulseCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80027d8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027da:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  htim->State= HAL_TIM_STATE_READY; 
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027dc:	6a22      	ldr	r2, [r4, #32]
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  htim->State= HAL_TIM_STATE_READY; 
 80027de:	2301      	movs	r3, #1
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027e0:	4290      	cmp	r0, r2
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  htim->State= HAL_TIM_STATE_READY; 
 80027e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  if(hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027e6:	d00f      	beq.n	8002808 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80027e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ea:	4298      	cmp	r0, r3
 80027ec:	d013      	beq.n	8002816 <TIM_DMADelayPulseCplt+0x3e>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80027ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027f0:	4298      	cmp	r0, r3
 80027f2:	d013      	beq.n	800281c <TIM_DMADelayPulseCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027f6:	4298      	cmp	r0, r3
 80027f8:	d005      	beq.n	8002806 <TIM_DMADelayPulseCplt+0x2e>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff ffea 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;  
 8002800:	2300      	movs	r3, #0
 8002802:	7623      	strb	r3, [r4, #24]
 8002804:	bd10      	pop	{r4, pc}
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002806:	2308      	movs	r3, #8
 8002808:	7623      	strb	r3, [r4, #24]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff ffe2 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;  
 8002810:	2300      	movs	r3, #0
 8002812:	7623      	strb	r3, [r4, #24]
 8002814:	bd10      	pop	{r4, pc}
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002816:	2302      	movs	r3, #2
 8002818:	7623      	strb	r3, [r4, #24]
 800281a:	e7ee      	b.n	80027fa <TIM_DMADelayPulseCplt+0x22>
  }
  else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281c:	2304      	movs	r3, #4
 800281e:	7623      	strb	r3, [r4, #24]
 8002820:	e7eb      	b.n	80027fa <TIM_DMADelayPulseCplt+0x22>
 8002822:	bf00      	nop

08002824 <HAL_TIM_TriggerCallback>:
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002828:	6803      	ldr	r3, [r0, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800282e:	b510      	push	{r4, lr}
 8002830:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002832:	d502      	bpl.n	800283a <HAL_TIM_IRQHandler+0x12>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	0792      	lsls	r2, r2, #30
 8002838:	d462      	bmi.n	8002900 <HAL_TIM_IRQHandler+0xd8>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	0750      	lsls	r0, r2, #29
 800283e:	d502      	bpl.n	8002846 <HAL_TIM_IRQHandler+0x1e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	0751      	lsls	r1, r2, #29
 8002844:	d449      	bmi.n	80028da <HAL_TIM_IRQHandler+0xb2>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	0712      	lsls	r2, r2, #28
 800284a:	d502      	bpl.n	8002852 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	0710      	lsls	r0, r2, #28
 8002850:	d431      	bmi.n	80028b6 <HAL_TIM_IRQHandler+0x8e>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	06d2      	lsls	r2, r2, #27
 8002856:	d502      	bpl.n	800285e <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	06d0      	lsls	r0, r2, #27
 800285c:	d418      	bmi.n	8002890 <HAL_TIM_IRQHandler+0x68>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	07d1      	lsls	r1, r2, #31
 8002862:	d502      	bpl.n	800286a <HAL_TIM_IRQHandler+0x42>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	07d2      	lsls	r2, r2, #31
 8002868:	d46b      	bmi.n	8002942 <HAL_TIM_IRQHandler+0x11a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
      HAL_TIM_PeriodElapsedCallback(htim);
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	0610      	lsls	r0, r2, #24
 800286e:	d502      	bpl.n	8002876 <HAL_TIM_IRQHandler+0x4e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	0611      	lsls	r1, r2, #24
 8002874:	d46d      	bmi.n	8002952 <HAL_TIM_IRQHandler+0x12a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
      HAL_TIMEx_BreakCallback(htim);
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	0652      	lsls	r2, r2, #25
 800287a:	d502      	bpl.n	8002882 <HAL_TIM_IRQHandler+0x5a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	0650      	lsls	r0, r2, #25
 8002880:	d457      	bmi.n	8002932 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
      HAL_TIM_TriggerCallback(htim);
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	0691      	lsls	r1, r2, #26
 8002886:	d502      	bpl.n	800288e <HAL_TIM_IRQHandler+0x66>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	0692      	lsls	r2, r2, #26
 800288c:	d449      	bmi.n	8002922 <HAL_TIM_IRQHandler+0xfa>
 800288e:	bd10      	pop	{r4, pc}
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002890:	f06f 0210 	mvn.w	r2, #16
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002896:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002898:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800289a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80028a0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a2:	d161      	bne.n	8002968 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_IC_CaptureCallback(htim);
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a4:	f7ff ff6c 	bl	8002780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7ff ff93 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	2200      	movs	r2, #0
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	7622      	strb	r2, [r4, #24]
 80028b4:	e7d3      	b.n	800285e <HAL_TIM_IRQHandler+0x36>
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028b6:	f06f 0208 	mvn.w	r2, #8
 80028ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028bc:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028be:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c0:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028c2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80028c4:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c6:	d155      	bne.n	8002974 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_IC_CaptureCallback(htim);
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c8:	f7ff ff5a 	bl	8002780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff ff81 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	2200      	movs	r2, #0
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	7622      	strb	r2, [r4, #24]
 80028d8:	e7bb      	b.n	8002852 <HAL_TIM_IRQHandler+0x2a>
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028da:	f06f 0204 	mvn.w	r2, #4
 80028de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e2:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e4:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ec:	d13f      	bne.n	800296e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	f7ff ff47 	bl	8002780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7ff ff6e 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f8:	2200      	movs	r2, #0
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	7622      	strb	r2, [r4, #24]
 80028fe:	e7a2      	b.n	8002846 <HAL_TIM_IRQHandler+0x1e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002900:	f06f 0202 	mvn.w	r2, #2
 8002904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002906:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002908:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290a:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290c:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290e:	d128      	bne.n	8002962 <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_IC_CaptureCallback(htim);
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002910:	f7ff ff36 	bl	8002780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff ff5d 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	2200      	movs	r2, #0
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	7622      	strb	r2, [r4, #24]
 8002920:	e78b      	b.n	800283a <HAL_TIM_IRQHandler+0x12>
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002922:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002926:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002928:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 800292a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 800292e:	f000 bfdb 	b.w	80038e8 <HAL_TIMEx_CommutationCallback>
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002936:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff ff73 	bl	8002824 <HAL_TIM_TriggerCallback>
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	e79f      	b.n	8002882 <HAL_TIM_IRQHandler+0x5a>
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002942:	f06f 0201 	mvn.w	r2, #1
 8002946:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002948:	4620      	mov	r0, r4
 800294a:	f002 fdf7 	bl	800553c <HAL_TIM_PeriodElapsedCallback>
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	e78b      	b.n	800286a <HAL_TIM_IRQHandler+0x42>
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002952:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002956:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002958:	4620      	mov	r0, r4
 800295a:	f000 ffcf 	bl	80038fc <HAL_TIMEx_BreakCallback>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	e789      	b.n	8002876 <HAL_TIM_IRQHandler+0x4e>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002962:	f002 fdf3 	bl	800554c <HAL_TIM_IC_CaptureCallback>
 8002966:	e7d8      	b.n	800291a <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002968:	f002 fdf0 	bl	800554c <HAL_TIM_IC_CaptureCallback>
 800296c:	e79f      	b.n	80028ae <HAL_TIM_IRQHandler+0x86>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	f002 fded 	bl	800554c <HAL_TIM_IC_CaptureCallback>
 8002972:	e7c1      	b.n	80028f8 <HAL_TIM_IRQHandler+0xd0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002974:	f002 fdea 	bl	800554c <HAL_TIM_IC_CaptureCallback>
 8002978:	e7ab      	b.n	80028d2 <HAL_TIM_IRQHandler+0xaa>
 800297a:	bf00      	nop

0800297c <TIM_DMATriggerCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 800297c:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;  
 800297e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  htim->State= HAL_TIM_STATE_READY; 
 8002980:	2301      	movs	r3, #1
 8002982:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  HAL_TIM_TriggerCallback(htim);
 8002986:	f7ff ff4d 	bl	8002824 <HAL_TIM_TriggerCallback>
 800298a:	bd08      	pop	{r3, pc}

0800298c <HAL_TIM_ErrorCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop

08002990 <TIM_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002990:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002992:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  htim->State= HAL_TIM_STATE_READY;
 8002994:	2301      	movs	r3, #1
 8002996:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   
  HAL_TIM_ErrorCallback(htim);
 800299a:	f7ff fff7 	bl	800298c <HAL_TIM_ErrorCallback>
 800299e:	bd08      	pop	{r3, pc}

080029a0 <HAL_TIM_Base_GetState>:
 80029a0:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop

080029a8 <HAL_TIM_OC_GetState>:
 80029a8:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <HAL_TIM_PWM_GetState>:
 80029b0:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <HAL_TIM_IC_GetState>:
 80029b8:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <HAL_TIM_OnePulse_GetState>:
 80029c0:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <HAL_TIM_Encoder_GetState>:
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
  return htim->State;
 80029c8:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80029d0:	4a36      	ldr	r2, [pc, #216]	; (8002aac <TIM_Base_SetConfig+0xdc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80029d2:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80029d4:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029d6:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80029d8:	d054      	beq.n	8002a84 <TIM_Base_SetConfig+0xb4>
 80029da:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029de:	d030      	beq.n	8002a42 <TIM_Base_SetConfig+0x72>
 80029e0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80029e4:	4290      	cmp	r0, r2
 80029e6:	d02c      	beq.n	8002a42 <TIM_Base_SetConfig+0x72>
 80029e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ec:	4290      	cmp	r0, r2
 80029ee:	d028      	beq.n	8002a42 <TIM_Base_SetConfig+0x72>
 80029f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029f4:	4290      	cmp	r0, r2
 80029f6:	d024      	beq.n	8002a42 <TIM_Base_SetConfig+0x72>
 80029f8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029fc:	4290      	cmp	r0, r2
 80029fe:	d020      	beq.n	8002a42 <TIM_Base_SetConfig+0x72>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002a00:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002a04:	4290      	cmp	r0, r2
 8002a06:	d030      	beq.n	8002a6a <TIM_Base_SetConfig+0x9a>
 8002a08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a0c:	4290      	cmp	r0, r2
 8002a0e:	d02c      	beq.n	8002a6a <TIM_Base_SetConfig+0x9a>
 8002a10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a14:	4290      	cmp	r0, r2
 8002a16:	d028      	beq.n	8002a6a <TIM_Base_SetConfig+0x9a>
 8002a18:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002a1c:	4290      	cmp	r0, r2
 8002a1e:	d024      	beq.n	8002a6a <TIM_Base_SetConfig+0x9a>
 8002a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a24:	4290      	cmp	r0, r2
 8002a26:	d020      	beq.n	8002a6a <TIM_Base_SetConfig+0x9a>
 8002a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a2c:	4290      	cmp	r0, r2
 8002a2e:	d01c      	beq.n	8002a6a <TIM_Base_SetConfig+0x9a>
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a30:	688c      	ldr	r4, [r1, #8]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a32:	680a      	ldr	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8002a34:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a36:	2301      	movs	r3, #1
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a38:	62c4      	str	r4, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a3a:	6282      	str	r2, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
}
 8002a3c:	bc70      	pop	{r4, r5, r6}
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3e:	6143      	str	r3, [r0, #20]
}
 8002a40:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002a42:	684a      	ldr	r2, [r1, #4]
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a44:	68ce      	ldr	r6, [r1, #12]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a46:	688d      	ldr	r5, [r1, #8]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a48:	680c      	ldr	r4, [r1, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a4e:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <TIM_Base_SetConfig+0xe0>)
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a56:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002a58:	4290      	cmp	r0, r2
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8002a5a:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5c:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a5e:	6284      	str	r4, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002a60:	d01d      	beq.n	8002a9e <TIM_Base_SetConfig+0xce>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a62:	2301      	movs	r3, #1
 8002a64:	6143      	str	r3, [r0, #20]
}
 8002a66:	bc70      	pop	{r4, r5, r6}
 8002a68:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6a:	68cd      	ldr	r5, [r1, #12]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a6c:	688c      	ldr	r4, [r1, #8]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a6e:	680a      	ldr	r2, [r1, #0]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a74:	432b      	orrs	r3, r5
  }

  TIMx->CR1 = tmpcr1;
 8002a76:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a78:	2301      	movs	r3, #1
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7a:	62c4      	str	r4, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a7c:	6282      	str	r2, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
}
 8002a7e:	bc70      	pop	{r4, r5, r6}
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a80:	6143      	str	r3, [r0, #20]
}
 8002a82:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002a84:	684e      	ldr	r6, [r1, #4]
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a86:	68cc      	ldr	r4, [r1, #12]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a88:	688d      	ldr	r5, [r1, #8]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a8a:	680a      	ldr	r2, [r1, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a90:	4333      	orrs	r3, r6
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a96:	4323      	orrs	r3, r4
  }

  TIMx->CR1 = tmpcr1;
 8002a98:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a9a:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a9c:	6282      	str	r2, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9e:	690b      	ldr	r3, [r1, #16]
 8002aa0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	6143      	str	r3, [r0, #20]
}
 8002aa6:	bc70      	pop	{r4, r5, r6}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40010400 	.word	0x40010400

08002ab4 <HAL_TIM_Base_Init>:
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
	HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_13);
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002ab4:	b1b8      	cbz	r0, 8002ae6 <HAL_TIM_Base_Init+0x32>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002aba:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002abc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	b15b      	cbz	r3, 8002adc <HAL_TIM_Base_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002aca:	6820      	ldr	r0, [r4, #0]
 8002acc:	1d21      	adds	r1, r4, #4
 8002ace:	f7ff ff7f 	bl	80029d0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002ad8:	2000      	movs	r0, #0
 8002ada:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002adc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae0:	f7fe fc24 	bl	800132c <HAL_TIM_Base_MspInit>
 8002ae4:	e7ee      	b.n	8002ac4 <HAL_TIM_Base_Init+0x10>
{ 
	HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_13);
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop

08002aec <HAL_TIM_OC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002aec:	b1b8      	cbz	r0, 8002b1e <HAL_TIM_OC_Init+0x32>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8002aee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002af2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8002af4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002af8:	4604      	mov	r4, r0
 8002afa:	b15b      	cbz	r3, 8002b14 <HAL_TIM_OC_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002afc:	2302      	movs	r3, #2
 8002afe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8002b02:	6820      	ldr	r0, [r4, #0]
 8002b04:	1d21      	adds	r1, r4, #4
 8002b06:	f7ff ff63 	bl	80029d0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002b10:	2000      	movs	r0, #0
 8002b12:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b14:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002b18:	f7fe fcba 	bl	8001490 <HAL_TIM_OC_MspInit>
 8002b1c:	e7ee      	b.n	8002afc <HAL_TIM_OC_Init+0x10>
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002b1e:	2001      	movs	r0, #1
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b24:	b1b8      	cbz	r0, 8002b56 <HAL_TIM_PWM_Init+0x32>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002b26:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b2a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002b2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b30:	4604      	mov	r4, r0
 8002b32:	b15b      	cbz	r3, 8002b4c <HAL_TIM_PWM_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002b34:	2302      	movs	r3, #2
 8002b36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	1d21      	adds	r1, r4, #4
 8002b3e:	f7ff ff47 	bl	80029d0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002b48:	2000      	movs	r0, #0
 8002b4a:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b50:	f7fe fcf6 	bl	8001540 <HAL_TIM_PWM_MspInit>
 8002b54:	e7ee      	b.n	8002b34 <HAL_TIM_PWM_Init+0x10>
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002b56:	2001      	movs	r0, #1
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop

08002b5c <HAL_TIM_IC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b5c:	b1b8      	cbz	r0, 8002b8e <HAL_TIM_IC_Init+0x32>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 8002b5e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b62:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 8002b64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b68:	4604      	mov	r4, r0
 8002b6a:	b15b      	cbz	r3, 8002b84 <HAL_TIM_IC_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002b72:	6820      	ldr	r0, [r4, #0]
 8002b74:	1d21      	adds	r1, r4, #4
 8002b76:	f7ff ff2b 	bl	80029d0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002b80:	2000      	movs	r0, #0
 8002b82:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b88:	f7fe feec 	bl	8001964 <HAL_TIM_IC_MspInit>
 8002b8c:	e7ee      	b.n	8002b6c <HAL_TIM_IC_Init+0x10>
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop

08002b94 <HAL_TIM_OnePulse_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b94:	b300      	cbz	r0, 8002bd8 <HAL_TIM_OnePulse_Init+0x44>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002b96:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002b9a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002b9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	460d      	mov	r5, r1
 8002ba4:	b19b      	cbz	r3, 8002bce <HAL_TIM_OnePulse_Init+0x3a>
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bac:	6820      	ldr	r0, [r4, #0]
 8002bae:	1d21      	adds	r1, r4, #4
 8002bb0:	f7ff ff0e 	bl	80029d0 <TIM_Base_SetConfig>
  
  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	f022 0208 	bic.w	r2, r2, #8
 8002bbc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002bbe:	681a      	ldr	r2, [r3, #0]
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002bc0:	2601      	movs	r6, #1
  
  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002bc2:	432a      	orrs	r2, r5
 8002bc4:	601a      	str	r2, [r3, #0]
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
 8002bc6:	2000      	movs	r0, #0

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002bc8:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  
  if(htim->State == HAL_TIM_STATE_RESET)
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bce:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002bd2:	f7ff f83d 	bl	8001c50 <HAL_TIM_OnePulse_MspInit>
 8002bd6:	e7e6      	b.n	8002ba6 <HAL_TIM_OnePulse_Init+0x12>
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002bd8:	2001      	movs	r0, #1
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_Encoder_Init>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d04d      	beq.n	8002c7c <HAL_TIM_Encoder_Init+0xa0>
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002be2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002be6:	b083      	sub	sp, #12
 8002be8:	4605      	mov	r5, r0
 8002bea:	460c      	mov	r4, r1
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002bec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03e      	beq.n	8002c72 <HAL_TIM_Encoder_Init+0x96>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002bf4:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002bf6:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002bf8:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002bfc:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c00:	6883      	ldr	r3, [r0, #8]
 8002c02:	f023 0307 	bic.w	r3, r3, #7
 8002c06:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002c08:	f7ff fee2 	bl	80029d0 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c0c:	6829      	ldr	r1, [r5, #0]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c0e:	6923      	ldr	r3, [r4, #16]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	6888      	ldr	r0, [r1, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c12:	698e      	ldr	r6, [r1, #24]
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c14:	69a7      	ldr	r7, [r4, #24]
 8002c16:	68a2      	ldr	r2, [r4, #8]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c18:	f8d4 e000 	ldr.w	lr, [r4]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c1c:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c20:	69e6      	ldr	r6, [r4, #28]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8002c28:	6a26      	ldr	r6, [r4, #32]
 8002c2a:	9601      	str	r6, [sp, #4]
 8002c2c:	68e6      	ldr	r6, [r4, #12]
 8002c2e:	4333      	orrs	r3, r6
 8002c30:	9e01      	ldr	r6, [sp, #4]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c32:	f02c 0c03 	bic.w	ip, ip, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c36:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002c3a:	ea42 020c 	orr.w	r2, r2, ip

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c3e:	6a0f      	ldr	r7, [r1, #32]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c40:	ea43 3306 	orr.w	r3, r3, r6, lsl #12

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c44:	6966      	ldr	r6, [r4, #20]
 8002c46:	6864      	ldr	r4, [r4, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c48:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c4c:	ea44 1406 	orr.w	r4, r4, r6, lsl #4

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c50:	ea40 000e 	orr.w	r0, r0, lr
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c54:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c58:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c5c:	6088      	str	r0, [r1, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c5e:	4327      	orrs	r7, r4
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c60:	4313      	orrs	r3, r2

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002c62:	2401      	movs	r4, #1
  
  return HAL_OK;
 8002c64:	2000      	movs	r0, #0
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c66:	618b      	str	r3, [r1, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c68:	620f      	str	r7, [r1, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002c6a:	f885 4039 	strb.w	r4, [r5, #57]	; 0x39
  
  return HAL_OK;
}
 8002c6e:	b003      	add	sp, #12
 8002c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c76:	f7ff f8d1 	bl	8001e1c <HAL_TIM_Encoder_MspInit>
 8002c7a:	e7bb      	b.n	8002bf4 <HAL_TIM_Encoder_Init+0x18>
  uint32_t tmpccer = 0U;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	4770      	bx	lr

08002c80 <TIM_TI1_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c80:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c84:	4e1c      	ldr	r6, [pc, #112]	; (8002cf8 <TIM_TI1_SetConfig+0x78>)
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c86:	f024 0401 	bic.w	r4, r4, #1
 8002c8a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c8c:	42b0      	cmp	r0, r6
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8002c8e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c90:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c92:	d01f      	beq.n	8002cd4 <TIM_TI1_SetConfig+0x54>
 8002c94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c98:	d01c      	beq.n	8002cd4 <TIM_TI1_SetConfig+0x54>
 8002c9a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8002c9e:	42b0      	cmp	r0, r6
 8002ca0:	d018      	beq.n	8002cd4 <TIM_TI1_SetConfig+0x54>
 8002ca2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ca6:	42b0      	cmp	r0, r6
 8002ca8:	d014      	beq.n	8002cd4 <TIM_TI1_SetConfig+0x54>
 8002caa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002cae:	42b0      	cmp	r0, r6
 8002cb0:	d010      	beq.n	8002cd4 <TIM_TI1_SetConfig+0x54>
 8002cb2:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002cb6:	42b0      	cmp	r0, r6
 8002cb8:	d00c      	beq.n	8002cd4 <TIM_TI1_SetConfig+0x54>
 8002cba:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002cbe:	42b0      	cmp	r0, r6
 8002cc0:	d008      	beq.n	8002cd4 <TIM_TI1_SetConfig+0x54>
 8002cc2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002cc6:	42b0      	cmp	r0, r6
 8002cc8:	d004      	beq.n	8002cd4 <TIM_TI1_SetConfig+0x54>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  } 
  else
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cca:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	e002      	b.n	8002cda <TIM_TI1_SetConfig+0x5a>
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cd4:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002cd8:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002cda:	011b      	lsls	r3, r3, #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cdc:	f025 050a 	bic.w	r5, r5, #10
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ce0:	b2db      	uxtb	r3, r3
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ce6:	f001 010a 	and.w	r1, r1, #10
 8002cea:	4329      	orrs	r1, r5
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002cec:	431a      	orrs	r2, r3
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cee:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
}
 8002cf0:	bc70      	pop	{r4, r5, r6}
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  TIMx->CCER = tmpccer;
 8002cf2:	6201      	str	r1, [r0, #32]
}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40010000 	.word	0x40010000

08002cfc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8002cfe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d038      	beq.n	8002d78 <HAL_TIM_IC_ConfigChannel+0x7c>
 8002d06:	460d      	mov	r5, r1
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	2302      	movs	r3, #2
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002d12:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  if (Channel == TIM_CHANNEL_1)
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d030      	beq.n	8002d7c <HAL_TIM_IC_ConfigChannel+0x80>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d1a:	2a04      	cmp	r2, #4
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 8002d1c:	6803      	ldr	r3, [r0, #0]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d1e:	d03d      	beq.n	8002d9c <HAL_TIM_IC_ConfigChannel+0xa0>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d20:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d22:	6a1e      	ldr	r6, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 8002d24:	682a      	ldr	r2, [r5, #0]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d26:	d05d      	beq.n	8002de4 <HAL_TIM_IC_ConfigChannel+0xe8>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d28:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 8002d2c:	686f      	ldr	r7, [r5, #4]
 8002d2e:	68e9      	ldr	r1, [r5, #12]
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d30:	68ad      	ldr	r5, [r5, #8]
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d32:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d34:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 8002d36:	6a1e      	ldr	r6, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d38:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d3c:	0312      	lsls	r2, r2, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d3e:	0309      	lsls	r1, r1, #12
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d40:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d44:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d48:	b289      	uxth	r1, r1
  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d4a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d4e:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d52:	4332      	orrs	r2, r6
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d54:	4301      	orrs	r1, r0
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d56:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d58:	621a      	str	r2, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8002d68:	61dd      	str	r5, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8002d6c:	2000      	movs	r0, #0

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002d6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002d72:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK; 
 8002d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8002d78:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;
    
  __HAL_UNLOCK(htim);
  
  return HAL_OK; 
}
 8002d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  htim->State = HAL_TIM_STATE_BUSY;
  
  if (Channel == TIM_CHANNEL_1)
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d7c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002d80:	68eb      	ldr	r3, [r5, #12]
 8002d82:	6800      	ldr	r0, [r0, #0]
 8002d84:	f7ff ff7c 	bl	8002c80 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d88:	6823      	ldr	r3, [r4, #0]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d8a:	68a8      	ldr	r0, [r5, #8]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d8c:	6999      	ldr	r1, [r3, #24]
 8002d8e:	f021 010c 	bic.w	r1, r1, #12
 8002d92:	6199      	str	r1, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	4302      	orrs	r2, r0
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	e7e6      	b.n	8002d6a <HAL_TIM_IC_ConfigChannel+0x6e>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9c:	6a1e      	ldr	r6, [r3, #32]
  else if (Channel == TIM_CHANNEL_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 8002d9e:	682a      	ldr	r2, [r5, #0]
 8002da0:	686f      	ldr	r7, [r5, #4]
 8002da2:	68e9      	ldr	r1, [r5, #12]
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002da4:	68ad      	ldr	r5, [r5, #8]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da6:	f026 0610 	bic.w	r6, r6, #16
 8002daa:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dac:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8002dae:	6a1e      	ldr	r6, [r3, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002db0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002db4:	0112      	lsls	r2, r2, #4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002db6:	0309      	lsls	r1, r1, #12
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002db8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002dbc:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002dc0:	b289      	uxth	r1, r1
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc2:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc6:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002dca:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002dcc:	4301      	orrs	r1, r0
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dce:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd0:	621a      	str	r2, [r3, #32]
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002dd2:	699a      	ldr	r2, [r3, #24]
 8002dd4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002dd8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8002de0:	619d      	str	r5, [r3, #24]
 8002de2:	e7c2      	b.n	8002d6a <HAL_TIM_IC_ConfigChannel+0x6e>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002de4:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  else if (Channel == TIM_CHANNEL_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 8002de8:	6868      	ldr	r0, [r5, #4]
 8002dea:	68e9      	ldr	r1, [r5, #12]
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002dec:	68ad      	ldr	r5, [r5, #8]
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dee:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002df0:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 8002df2:	6a1e      	ldr	r6, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002df4:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002df8:	0212      	lsls	r2, r2, #8
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002dfa:	0109      	lsls	r1, r1, #4
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;
 8002dfc:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002dfe:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e02:	b2c9      	uxtb	r1, r1
  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e04:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e08:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e0c:	4332      	orrs	r2, r6
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e0e:	4301      	orrs	r1, r0
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e10:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e12:	621a      	str	r2, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	f022 020c 	bic.w	r2, r2, #12
 8002e1a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	432a      	orrs	r2, r5
 8002e20:	61da      	str	r2, [r3, #28]
 8002e22:	e7a2      	b.n	8002d6a <HAL_TIM_IC_ConfigChannel+0x6e>

08002e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e26:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e28:	f8d1 e008 	ldr.w	lr, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e2c:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e2e:	4d14      	ldr	r5, [pc, #80]	; (8002e80 <TIM_OC2_SetConfig+0x5c>)
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e30:	f024 0410 	bic.w	r4, r4, #16
 8002e34:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002e36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002e38:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e3a:	6982      	ldr	r2, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e3c:	f023 0320 	bic.w	r3, r3, #32
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e40:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e44:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e46:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e4a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e4e:	d008      	beq.n	8002e62 <TIM_OC2_SetConfig+0x3e>
 8002e50:	4c0c      	ldr	r4, [pc, #48]	; (8002e84 <TIM_OC2_SetConfig+0x60>)
 8002e52:	42a0      	cmp	r0, r4
 8002e54:	d005      	beq.n	8002e62 <TIM_OC2_SetConfig+0x3e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e56:	6849      	ldr	r1, [r1, #4]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e58:	6047      	str	r7, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e5a:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e5c:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5e:	6203      	str	r3, [r0, #32]
}
 8002e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e62:	68ce      	ldr	r6, [r1, #12]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e64:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e66:	698c      	ldr	r4, [r1, #24]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e6c:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e70:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e74:	432c      	orrs	r4, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e7a:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 8002e7e:	e7ea      	b.n	8002e56 <TIM_OC2_SetConfig+0x32>
 8002e80:	40010000 	.word	0x40010000
 8002e84:	40010400 	.word	0x40010400

08002e88 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8002e88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d01c      	beq.n	8002eca <HAL_TIM_OC_ConfigChannel+0x42>
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002e90:	b510      	push	{r4, lr}
 8002e92:	4604      	mov	r4, r0
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	2302      	movs	r3, #2
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8002e96:	2001      	movs	r0, #1
 8002e98:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  switch (Channel)
 8002ea0:	2a0c      	cmp	r2, #12
 8002ea2:	d80b      	bhi.n	8002ebc <HAL_TIM_OC_ConfigChannel+0x34>
 8002ea4:	e8df f002 	tbb	[pc, r2]
 8002ea8:	0a0a0a17 	.word	0x0a0a0a17
 8002eac:	0a0a0a07 	.word	0x0a0a0a07
 8002eb0:	0a0a0a1b 	.word	0x0a0a0a1b
 8002eb4:	13          	.byte	0x13
 8002eb5:	00          	.byte	0x00
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	f7ff ffb4 	bl	8002e24 <TIM_OC2_SetConfig>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim); 
 8002ebe:	2000      	movs	r0, #0
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8002ec4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
 8002ec8:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8002eca:	2002      	movs	r0, #2
 8002ecc:	4770      	bx	lr
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ece:	6820      	ldr	r0, [r4, #0]
 8002ed0:	f7fe f9ac 	bl	800122c <TIM_OC4_SetConfig>
    }
    break;
 8002ed4:	e7f2      	b.n	8002ebc <HAL_TIM_OC_ConfigChannel+0x34>
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	f7fe f946 	bl	8001168 <TIM_OC1_SetConfig>
    }
    break;
 8002edc:	e7ee      	b.n	8002ebc <HAL_TIM_OC_ConfigChannel+0x34>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ede:	6820      	ldr	r0, [r4, #0]
 8002ee0:	f7fe f972 	bl	80011c8 <TIM_OC3_SetConfig>
    }
    break;
 8002ee4:	e7ea      	b.n	8002ebc <HAL_TIM_OC_ConfigChannel+0x34>
 8002ee6:	bf00      	nop

08002ee8 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002ee8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002eea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d02b      	beq.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x62>
 8002ef2:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	2302      	movs	r3, #2
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4604      	mov	r4, r0
 8002efa:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002efe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    
  switch (Channel)
 8002f02:	2a0c      	cmp	r2, #12
 8002f04:	d81a      	bhi.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x54>
 8002f06:	e8df f002 	tbb	[pc, r2]
 8002f0a:	1935      	.short	0x1935
 8002f0c:	19071919 	.word	0x19071919
 8002f10:	19471919 	.word	0x19471919
 8002f14:	1919      	.short	0x1919
 8002f16:	22          	.byte	0x22
 8002f17:	00          	.byte	0x00
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f18:	4629      	mov	r1, r5
 8002f1a:	6800      	ldr	r0, [r0, #0]
 8002f1c:	f7ff ff82 	bl	8002e24 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f20:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f22:	6928      	ldr	r0, [r5, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002f2a:	6199      	str	r1, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f2c:	6999      	ldr	r1, [r3, #24]
 8002f2e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002f32:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002f3a:	619a      	str	r2, [r3, #24]
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8002f3e:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002f44:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
 8002f48:	bd38      	pop	{r3, r4, r5, pc}
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 8002f4a:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;
    
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8002f4c:	bd38      	pop	{r3, r4, r5, pc}
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f4e:	4629      	mov	r1, r5
 8002f50:	6800      	ldr	r0, [r0, #0]
 8002f52:	f7fe f96b 	bl	800122c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f56:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002f58:	6928      	ldr	r0, [r5, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f5a:	69d9      	ldr	r1, [r3, #28]
 8002f5c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002f60:	61d9      	str	r1, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f62:	69d9      	ldr	r1, [r3, #28]
 8002f64:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002f68:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002f70:	61da      	str	r2, [r3, #28]
    }
    break;
 8002f72:	e7e3      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x54>
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f74:	4629      	mov	r1, r5
 8002f76:	6800      	ldr	r0, [r0, #0]
 8002f78:	f7fe f8f6 	bl	8001168 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f7c:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f7e:	6928      	ldr	r0, [r5, #16]
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f80:	6999      	ldr	r1, [r3, #24]
 8002f82:	f041 0108 	orr.w	r1, r1, #8
 8002f86:	6199      	str	r1, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	f021 0104 	bic.w	r1, r1, #4
 8002f8e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	4302      	orrs	r2, r0
 8002f94:	619a      	str	r2, [r3, #24]
    }
    break;
 8002f96:	e7d1      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x54>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f98:	4629      	mov	r1, r5
 8002f9a:	6800      	ldr	r0, [r0, #0]
 8002f9c:	f7fe f914 	bl	80011c8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa0:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002fa2:	6928      	ldr	r0, [r5, #16]
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa4:	69d9      	ldr	r1, [r3, #28]
 8002fa6:	f041 0108 	orr.w	r1, r1, #8
 8002faa:	61d9      	str	r1, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fac:	69d9      	ldr	r1, [r3, #28]
 8002fae:	f021 0104 	bic.w	r1, r1, #4
 8002fb2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	4302      	orrs	r2, r0
 8002fb8:	61da      	str	r2, [r3, #28]
    }
    break;
 8002fba:	e7bf      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x54>

08002fbc <HAL_TIM_OnePulse_ConfigChannel>:
  
  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)  
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d074      	beq.n	80030aa <HAL_TIM_OnePulse_ConfigChannel+0xee>
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)  
  {
    __HAL_LOCK(htim);
 8002fc2:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 8002fc6:	2d01      	cmp	r5, #1
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 8002fc8:	b089      	sub	sp, #36	; 0x24
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)  
  {
    __HAL_LOCK(htim);
 8002fca:	d052      	beq.n	8003072 <HAL_TIM_OnePulse_ConfigChannel+0xb6>
 8002fcc:	460c      	mov	r4, r1
 8002fce:	461e      	mov	r6, r3
  
    htim->State = HAL_TIM_STATE_BUSY;

    /* Extract the Output compare configuration from sConfig structure */  
    temp1.OCMode = sConfig->OCMode;
    temp1.Pulse = sConfig->Pulse;
 8002fd0:	c90a      	ldmia	r1, {r1, r3}
 8002fd2:	4605      	mov	r5, r0
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)  
  {
    __HAL_LOCK(htim);
 8002fd4:	2701      	movs	r7, #1
  
    htim->State = HAL_TIM_STATE_BUSY;
 8002fd6:	2002      	movs	r0, #2
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)  
  {
    __HAL_LOCK(htim);
 8002fd8:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
  
    htim->State = HAL_TIM_STATE_BUSY;

    /* Extract the Output compare configuration from sConfig structure */  
    temp1.OCMode = sConfig->OCMode;
 8002fdc:	9101      	str	r1, [sp, #4]
    temp1.Pulse = sConfig->Pulse;
    temp1.OCPolarity = sConfig->OCPolarity;
 8002fde:	68a7      	ldr	r7, [r4, #8]
    temp1.OCNPolarity = sConfig->OCNPolarity;
    temp1.OCIdleState = sConfig->OCIdleState;
 8002fe0:	6921      	ldr	r1, [r4, #16]

  if(OutputChannel != InputChannel)  
  {
    __HAL_LOCK(htim);
  
    htim->State = HAL_TIM_STATE_BUSY;
 8002fe2:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39

    /* Extract the Output compare configuration from sConfig structure */  
    temp1.OCMode = sConfig->OCMode;
    temp1.Pulse = sConfig->Pulse;
 8002fe6:	9302      	str	r3, [sp, #8]
    temp1.OCPolarity = sConfig->OCPolarity;
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8002fe8:	68e0      	ldr	r0, [r4, #12]
    temp1.OCIdleState = sConfig->OCIdleState;
    temp1.OCNIdleState = sConfig->OCNIdleState; 
 8002fea:	6963      	ldr	r3, [r4, #20]
    htim->State = HAL_TIM_STATE_BUSY;

    /* Extract the Output compare configuration from sConfig structure */  
    temp1.OCMode = sConfig->OCMode;
    temp1.Pulse = sConfig->Pulse;
    temp1.OCPolarity = sConfig->OCPolarity;
 8002fec:	9703      	str	r7, [sp, #12]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8002fee:	9004      	str	r0, [sp, #16]
    temp1.OCIdleState = sConfig->OCIdleState;
 8002ff0:	9106      	str	r1, [sp, #24]
    temp1.OCNIdleState = sConfig->OCNIdleState; 
 8002ff2:	9307      	str	r3, [sp, #28]
    
    switch (OutputChannel)
 8002ff4:	2a00      	cmp	r2, #0
 8002ff6:	d05a      	beq.n	80030ae <HAL_TIM_OnePulse_ConfigChannel+0xf2>
 8002ff8:	2a04      	cmp	r2, #4
 8002ffa:	d03d      	beq.n	8003078 <HAL_TIM_OnePulse_ConfigChannel+0xbc>
      }
      break;
      default:
      break;  
    } 
    switch (InputChannel)
 8002ffc:	2e00      	cmp	r6, #0
 8002ffe:	d041      	beq.n	8003084 <HAL_TIM_OnePulse_ConfigChannel+0xc8>
 8003000:	2e04      	cmp	r6, #4
 8003002:	d12e      	bne.n	8003062 <HAL_TIM_OnePulse_ConfigChannel+0xa6>
      break;
      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	69a2      	ldr	r2, [r4, #24]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003008:	6a1e      	ldr	r6, [r3, #32]
      break;
      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800300a:	69e7      	ldr	r7, [r4, #28]
 800300c:	6a21      	ldr	r1, [r4, #32]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300e:	f026 0610 	bic.w	r6, r6, #16
 8003012:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003014:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8003016:	6a1c      	ldr	r4, [r3, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003018:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800301c:	0112      	lsls	r2, r2, #4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800301e:	0309      	lsls	r1, r1, #12
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003020:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003024:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003028:	b289      	uxth	r1, r1
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800302a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302e:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003032:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003034:	4301      	orrs	r1, r0
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003036:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003038:	621a      	str	r2, [r3, #32]
      
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
                 sConfig->ICSelection, sConfig->ICFilter);
               
        /* Reset the IC2PSC Bits */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003040:	619a      	str	r2, [r3, #24]

        /* Select the Trigger source */
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003048:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003050:	609a      	str	r2, [r3, #8]
      
        /* Select the Slave Mode */      
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	f022 0207 	bic.w	r2, r2, #7
 8003058:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	f042 0206 	orr.w	r2, r2, #6
 8003060:	609a      	str	r2, [r3, #8]
      break;  
    }
  
    htim->State = HAL_TIM_STATE_READY;
    
    __HAL_UNLOCK(htim);
 8003062:	2000      	movs	r0, #0
    
      default:
      break;  
    }
  
    htim->State = HAL_TIM_STATE_READY;
 8003064:	2301      	movs	r3, #1
 8003066:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
    __HAL_UNLOCK(htim);
 800306a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  }
  else
  {
    return HAL_ERROR;
  }
} 
 800306e:	b009      	add	sp, #36	; 0x24
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)  
  {
    __HAL_LOCK(htim);
 8003072:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_ERROR;
  }
} 
 8003074:	b009      	add	sp, #36	; 0x24
 8003076:	bdf0      	pop	{r4, r5, r6, r7, pc}
      break;
      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8003078:	a901      	add	r1, sp, #4
 800307a:	6828      	ldr	r0, [r5, #0]
 800307c:	f7ff fed2 	bl	8002e24 <TIM_OC2_SetConfig>
      }
      break;
      default:
      break;  
    } 
    switch (InputChannel)
 8003080:	2e00      	cmp	r6, #0
 8003082:	d1bd      	bne.n	8003000 <HAL_TIM_OnePulse_ConfigChannel+0x44>
    {
      case TIM_CHANNEL_1:
      {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8003084:	f104 0118 	add.w	r1, r4, #24
 8003088:	c90e      	ldmia	r1, {r1, r2, r3}
 800308a:	6828      	ldr	r0, [r5, #0]
 800308c:	f7ff fdf8 	bl	8002c80 <TIM_TI1_SetConfig>
                        sConfig->ICSelection, sConfig->ICFilter);
               
        /* Reset the IC1PSC Bits */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	f022 020c 	bic.w	r2, r2, #12
 8003098:	619a      	str	r2, [r3, #24]

        /* Select the Trigger source */
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030a0:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80030a8:	e7d2      	b.n	8003050 <HAL_TIM_OnePulse_ConfigChannel+0x94>
  
    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 80030aa:	2001      	movs	r0, #1
 80030ac:	4770      	bx	lr
    {
      case TIM_CHANNEL_1:
      {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      
        TIM_OC1_SetConfig(htim->Instance, &temp1); 
 80030ae:	a901      	add	r1, sp, #4
 80030b0:	6828      	ldr	r0, [r5, #0]
 80030b2:	f7fe f859 	bl	8001168 <TIM_OC1_SetConfig>
      }
      break;
 80030b6:	e7a1      	b.n	8002ffc <HAL_TIM_OnePulse_ConfigChannel+0x40>

080030b8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030b8:	6a03      	ldr	r3, [r0, #32]
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030ba:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80030bc:	2401      	movs	r4, #1
 80030be:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030c0:	ea23 0304 	bic.w	r3, r3, r4
 80030c4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80030c6:	6a03      	ldr	r3, [r0, #32]
}
 80030c8:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80030cc:	408a      	lsls	r2, r1
 80030ce:	431a      	orrs	r2, r3
 80030d0:	6202      	str	r2, [r0, #32]
}
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIMEx_HallSensor_MspInit>:
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop

080030d8 <HAL_TIMEx_HallSensor_Init>:
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
  TIM_OC_InitTypeDef OC_Config;
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80030d8:	2800      	cmp	r0, #0
 80030da:	d04b      	beq.n	8003174 <HAL_TIMEx_HallSensor_Init+0x9c>
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
 80030dc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80030de:	2302      	movs	r3, #2
 80030e0:	4604      	mov	r4, r0
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
 80030e2:	b088      	sub	sp, #32
 80030e4:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80030e6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
  HAL_TIMEx_HallSensor_MspInit(htim);
 80030ea:	f7ff fff3 	bl	80030d4 <HAL_TIMEx_HallSensor_MspInit>
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ee:	1d21      	adds	r1, r4, #4
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	f7ff fc6d 	bl	80029d0 <TIM_Base_SetConfig>
  
  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80030f6:	68ab      	ldr	r3, [r5, #8]
 80030f8:	6829      	ldr	r1, [r5, #0]
 80030fa:	6820      	ldr	r0, [r4, #0]
 80030fc:	2203      	movs	r2, #3
 80030fe:	f7ff fdbf 	bl	8002c80 <TIM_TI1_SetConfig>
  
  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003102:	6820      	ldr	r0, [r4, #0]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003104:	686e      	ldr	r6, [r5, #4]
  
  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
  
  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003106:	6982      	ldr	r2, [r0, #24]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
  OC_Config.OCMode = TIM_OCMODE_PWM2;
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
  OC_Config.Pulse = sConfig->Commutation_Delay; 
 8003108:	68e9      	ldr	r1, [r5, #12]
  
  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
  
  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800310a:	f022 020c 	bic.w	r2, r2, #12
 800310e:	6182      	str	r2, [r0, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003110:	6983      	ldr	r3, [r0, #24]
 8003112:	4333      	orrs	r3, r6
 8003114:	6183      	str	r3, [r0, #24]
  
  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003116:	6843      	ldr	r3, [r0, #4]
 8003118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311c:	6043      	str	r3, [r0, #4]
  
  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800311e:	6883      	ldr	r3, [r0, #8]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
  OC_Config.OCMode = TIM_OCMODE_PWM2;
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
  OC_Config.Pulse = sConfig->Commutation_Delay; 
 8003120:	9102      	str	r1, [sp, #8]
  
  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
  
  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003128:	6883      	ldr	r3, [r0, #8]
 800312a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800312e:	6083      	str	r3, [r0, #8]
  
  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003130:	6883      	ldr	r3, [r0, #8]
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003138:	6883      	ldr	r3, [r0, #8]
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6083      	str	r3, [r0, #8]
  
  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003140:	2500      	movs	r5, #0
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003142:	2370      	movs	r3, #112	; 0x70
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
  OC_Config.Pulse = sConfig->Commutation_Delay; 
    
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003144:	a901      	add	r1, sp, #4
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
  
  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003146:	9301      	str	r3, [sp, #4]
  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
  
  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003148:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800314a:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800314c:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800314e:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003150:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay; 
    
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003152:	f7ff fe67 	bl	8002e24 <TIM_OC2_SetConfig>
  
  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800315e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
 8003160:	685a      	ldr	r2, [r3, #4]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003162:	2101      	movs	r1, #1
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
  
  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
  htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
 8003164:	f042 0250 	orr.w	r2, r2, #80	; 0x50
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
 8003168:	4628      	mov	r0, r5
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
  
  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
  htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
 800316a:	605a      	str	r2, [r3, #4]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800316c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39

  return HAL_OK;
}
 8003170:	b008      	add	sp, #32
 8003172:	bd70      	pop	{r4, r5, r6, pc}
  TIM_OC_InitTypeDef OC_Config;
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8003174:	2001      	movs	r0, #1
 8003176:	4770      	bx	lr

08003178 <HAL_TIMEx_HallSensor_MspDeInit>:
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop

0800317c <HAL_TIMEx_HallSensor_DeInit>:
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	2202      	movs	r2, #2
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800317e:	6803      	ldr	r3, [r0, #0]
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 8003180:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003182:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003186:	6a19      	ldr	r1, [r3, #32]
 8003188:	f241 1211 	movw	r2, #4369	; 0x1111
 800318c:	4211      	tst	r1, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800318e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
  
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003190:	d108      	bne.n	80031a4 <HAL_TIMEx_HallSensor_DeInit+0x28>
 8003192:	6a19      	ldr	r1, [r3, #32]
 8003194:	f240 4244 	movw	r2, #1092	; 0x444
 8003198:	4211      	tst	r1, r2
 800319a:	d103      	bne.n	80031a4 <HAL_TIMEx_HallSensor_DeInit+0x28>
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7ff ffe7 	bl	8003178 <HAL_TIMEx_HallSensor_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 80031aa:	2000      	movs	r0, #0
 80031ac:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80031b0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 80031b4:	bd10      	pop	{r4, pc}
 80031b6:	bf00      	nop

080031b8 <HAL_TIMEx_HallSensor_Start>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 80031b8:	b510      	push	{r4, lr}
 80031ba:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 80031bc:	2201      	movs	r2, #1
 80031be:	6800      	ldr	r0, [r0, #0]
 80031c0:	2100      	movs	r1, #0
 80031c2:	f7ff ff79 	bl	80030b8 <TIM_CCxChannelCmd>
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031c6:	6822      	ldr	r2, [r4, #0]
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
}
 80031d0:	2000      	movs	r0, #0
 80031d2:	bd10      	pop	{r4, pc}

080031d4 <HAL_TIMEx_HallSensor_Stop>:
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 80031d4:	2200      	movs	r2, #0
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 80031d6:	b510      	push	{r4, lr}
 80031d8:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 80031da:	4611      	mov	r1, r2
 80031dc:	6800      	ldr	r0, [r0, #0]
 80031de:	f7ff ff6b 	bl	80030b8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	6a19      	ldr	r1, [r3, #32]
 80031e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80031ea:	4211      	tst	r1, r2
 80031ec:	d108      	bne.n	8003200 <HAL_TIMEx_HallSensor_Stop+0x2c>
 80031ee:	6a19      	ldr	r1, [r3, #32]
 80031f0:	f240 4244 	movw	r2, #1092	; 0x444
 80031f4:	4211      	tst	r1, r2
 80031f6:	d103      	bne.n	8003200 <HAL_TIMEx_HallSensor_Stop+0x2c>
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003200:	2000      	movs	r0, #0
 8003202:	bd10      	pop	{r4, pc}

08003204 <HAL_TIMEx_HallSensor_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{ 
 8003204:	b510      	push	{r4, lr}
 8003206:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003208:	6800      	ldr	r0, [r0, #0]
 800320a:	68c3      	ldr	r3, [r0, #12]
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	60c3      	str	r3, [r0, #12]
  
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
 8003212:	2201      	movs	r2, #1
 8003214:	2100      	movs	r1, #0
 8003216:	f7ff ff4f 	bl	80030b8 <TIM_CCxChannelCmd>
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	6813      	ldr	r3, [r2, #0]
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003224:	2000      	movs	r0, #0
 8003226:	bd10      	pop	{r4, pc}

08003228 <HAL_TIMEx_HallSensor_Stop_IT>:
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 8003228:	2200      	movs	r2, #0
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 800322a:	b510      	push	{r4, lr}
 800322c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 800322e:	4611      	mov	r1, r2
 8003230:	6800      	ldr	r0, [r0, #0]
 8003232:	f7ff ff41 	bl	80030b8 <TIM_CCxChannelCmd>
  
  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	f022 0202 	bic.w	r2, r2, #2
 800323e:	60da      	str	r2, [r3, #12]
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003240:	6a19      	ldr	r1, [r3, #32]
 8003242:	f241 1211 	movw	r2, #4369	; 0x1111
 8003246:	4211      	tst	r1, r2
 8003248:	d108      	bne.n	800325c <HAL_TIMEx_HallSensor_Stop_IT+0x34>
 800324a:	6a19      	ldr	r1, [r3, #32]
 800324c:	f240 4244 	movw	r2, #1092	; 0x444
 8003250:	4211      	tst	r1, r2
 8003252:	d103      	bne.n	800325c <HAL_TIMEx_HallSensor_Stop_IT+0x34>
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 800325c:	2000      	movs	r0, #0
 800325e:	bd10      	pop	{r4, pc}

08003260 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
   if((htim->State == HAL_TIM_STATE_BUSY))
 8003262:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8003266:	b2e4      	uxtb	r4, r4
 8003268:	2c02      	cmp	r4, #2
 800326a:	d028      	beq.n	80032be <HAL_TIMEx_HallSensor_Start_DMA+0x5e>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800326c:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8003270:	b2e4      	uxtb	r4, r4
 8003272:	2c01      	cmp	r4, #1
 8003274:	d01d      	beq.n	80032b2 <HAL_TIMEx_HallSensor_Start_DMA+0x52>
 8003276:	4604      	mov	r4, r0
 8003278:	4616      	mov	r6, r2
 800327a:	460d      	mov	r5, r1
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 800327c:	2201      	movs	r2, #1
 800327e:	2100      	movs	r1, #0
 8003280:	6800      	ldr	r0, [r0, #0]
  
  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003282:	4f10      	ldr	r7, [pc, #64]	; (80032c4 <HAL_TIMEx_HallSensor_Start_DMA+0x64>)
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
 8003284:	f7ff ff18 	bl	80030b8 <TIM_CCxChannelCmd>
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
  
  /* Enable the DMA Stream for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
 8003288:	6821      	ldr	r1, [r4, #0]
  /* Enable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
  
  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
 800328a:	6a20      	ldr	r0, [r4, #32]
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_TIMEx_HallSensor_Start_DMA+0x68>)
 800328e:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
  
  /* Enable the DMA Stream for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
 8003290:	462a      	mov	r2, r5
 8003292:	4633      	mov	r3, r6
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
  
  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003294:	64c7      	str	r7, [r0, #76]	; 0x4c
  
  /* Enable the DMA Stream for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
 8003296:	3134      	adds	r1, #52	; 0x34
 8003298:	f001 fdb6 	bl	8004e08 <HAL_DMA_Start_IT>
  
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a4:	60da      	str	r2, [r3, #12]
 
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80032ae:	2000      	movs	r0, #0
 80032b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if(((uint32_t)pData == 0U) && (Length > 0U)) 
 80032b2:	b901      	cbnz	r1, 80032b6 <HAL_TIMEx_HallSensor_Start_DMA+0x56>
 80032b4:	b91a      	cbnz	r2, 80032be <HAL_TIMEx_HallSensor_Start_DMA+0x5e>
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80032bc:	e7db      	b.n	8003276 <HAL_TIMEx_HallSensor_Start_DMA+0x16>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if(((uint32_t)pData == 0U) && (Length > 0U)) 
    {
      return HAL_ERROR;                                    
 80032be:	4620      	mov	r0, r4
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Return function status */
  return HAL_OK;
}
 80032c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c2:	bf00      	nop
 80032c4:	08002991 	.word	0x08002991
 80032c8:	08002789 	.word	0x08002789

080032cc <HAL_TIMEx_HallSensor_Stop_DMA>:
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 80032cc:	2200      	movs	r2, #0
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80032ce:	b510      	push	{r4, lr}
 80032d0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  
  /* Disable the Input Capture channels 1
    (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
 80032d2:	4611      	mov	r1, r2
 80032d4:	6800      	ldr	r0, [r0, #0]
 80032d6:	f7ff feef 	bl	80030b8 <TIM_CCxChannelCmd>
 
  
  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e2:	60da      	str	r2, [r3, #12]
 
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032e4:	6a19      	ldr	r1, [r3, #32]
 80032e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80032ea:	4211      	tst	r1, r2
 80032ec:	d108      	bne.n	8003300 <HAL_TIMEx_HallSensor_Stop_DMA+0x34>
 80032ee:	6a19      	ldr	r1, [r3, #32]
 80032f0:	f240 4244 	movw	r2, #1092	; 0x444
 80032f4:	4211      	tst	r1, r2
 80032f6:	d103      	bne.n	8003300 <HAL_TIMEx_HallSensor_Stop_DMA+0x34>
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003300:	2000      	movs	r0, #0
 8003302:	bd10      	pop	{r4, pc}

08003304 <HAL_TIMEx_PWMN_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003304:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8003306:	2204      	movs	r2, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003308:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800330a:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800330e:	ea20 0001 	bic.w	r0, r0, r1
 8003312:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	4311      	orrs	r1, r2
 8003318:	6219      	str	r1, [r3, #32]
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800331a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003320:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 800332a:	2000      	movs	r0, #0
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop

08003330 <HAL_TIMEx_OCN_Start>:
 8003330:	f7ff bfe8 	b.w	8003304 <HAL_TIMEx_PWMN_Start>

08003334 <HAL_TIMEx_PWMN_Start_IT>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 8003334:	290c      	cmp	r1, #12
 8003336:	d837      	bhi.n	80033a8 <HAL_TIMEx_PWMN_Start_IT+0x74>
 8003338:	e8df f001 	tbb	[pc, r1]
 800333c:	36363630 	.word	0x36363630
 8003340:	3636362a 	.word	0x3636362a
 8003344:	36363624 	.word	0x36363624
 8003348:	07          	.byte	0x07
 8003349:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800334a:	6803      	ldr	r3, [r0, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	f042 0210 	orr.w	r2, r2, #16
 8003352:	60da      	str	r2, [r3, #12]
    default:
    break;
  } 
  
  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800335a:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800335c:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800335e:	2204      	movs	r2, #4
 8003360:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003364:	ea20 0001 	bic.w	r0, r0, r1
 8003368:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	4311      	orrs	r1, r2
 800336e:	6219      	str	r1, [r3, #32]
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003376:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8003380:	2000      	movs	r0, #0
 8003382:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003384:	6803      	ldr	r3, [r0, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	f042 0208 	orr.w	r2, r2, #8
 800338c:	60da      	str	r2, [r3, #12]
    }
    break;
 800338e:	e7e1      	b.n	8003354 <HAL_TIMEx_PWMN_Start_IT+0x20>
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	f042 0204 	orr.w	r2, r2, #4
 8003398:	60da      	str	r2, [r3, #12]
    }
    break;
 800339a:	e7db      	b.n	8003354 <HAL_TIMEx_PWMN_Start_IT+0x20>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800339c:	6803      	ldr	r3, [r0, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	f042 0202 	orr.w	r2, r2, #2
 80033a4:	60da      	str	r2, [r3, #12]
    }
    break;
 80033a6:	e7d5      	b.n	8003354 <HAL_TIMEx_PWMN_Start_IT+0x20>
 80033a8:	6803      	ldr	r3, [r0, #0]
 80033aa:	e7d3      	b.n	8003354 <HAL_TIMEx_PWMN_Start_IT+0x20>

080033ac <HAL_TIMEx_OCN_Start_IT>:
 80033ac:	f7ff bfc2 	b.w	8003334 <HAL_TIMEx_PWMN_Start_IT>

080033b0 <HAL_TIMEx_PWMN_Stop_IT>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 

  switch (Channel)
 80033b0:	290c      	cmp	r1, #12
 80033b2:	d84f      	bhi.n	8003454 <HAL_TIMEx_PWMN_Stop_IT+0xa4>
 80033b4:	e8df f001 	tbb	[pc, r1]
 80033b8:	4e4e4e48 	.word	0x4e4e4e48
 80033bc:	4e4e4e42 	.word	0x4e4e4e42
 80033c0:	4e4e4e3c 	.word	0x4e4e4e3c
 80033c4:	07          	.byte	0x07
 80033c5:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80033c6:	6803      	ldr	r3, [r0, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	f022 0210 	bic.w	r2, r2, #16
 80033ce:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80033d0:	6a1a      	ldr	r2, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 80033d2:	2004      	movs	r0, #4
 80033d4:	fa00 f101 	lsl.w	r1, r0, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80033d8:	ea22 0101 	bic.w	r1, r2, r1
 80033dc:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	621a      	str	r2, [r3, #32]
  
  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
  
  /* Disable the TIM Break interrupt (only if no more channel is active) */
  if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 80033e2:	6a19      	ldr	r1, [r3, #32]
 80033e4:	f240 4244 	movw	r2, #1092	; 0x444
 80033e8:	4211      	tst	r1, r2
 80033ea:	d103      	bne.n	80033f4 <HAL_TIMEx_PWMN_Stop_IT+0x44>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f2:	60da      	str	r2, [r3, #12]
  }
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80033f4:	6a19      	ldr	r1, [r3, #32]
 80033f6:	f241 1211 	movw	r2, #4369	; 0x1111
 80033fa:	4211      	tst	r1, r2
 80033fc:	d108      	bne.n	8003410 <HAL_TIMEx_PWMN_Stop_IT+0x60>
 80033fe:	6a19      	ldr	r1, [r3, #32]
 8003400:	f240 4244 	movw	r2, #1092	; 0x444
 8003404:	4211      	tst	r1, r2
 8003406:	d103      	bne.n	8003410 <HAL_TIMEx_PWMN_Stop_IT+0x60>
 8003408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800340e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003410:	6a19      	ldr	r1, [r3, #32]
 8003412:	f241 1211 	movw	r2, #4369	; 0x1111
 8003416:	4211      	tst	r1, r2
 8003418:	d108      	bne.n	800342c <HAL_TIMEx_PWMN_Stop_IT+0x7c>
 800341a:	6a19      	ldr	r1, [r3, #32]
 800341c:	f240 4244 	movw	r2, #1092	; 0x444
 8003420:	4211      	tst	r1, r2
 8003422:	d103      	bne.n	800342c <HAL_TIMEx_PWMN_Stop_IT+0x7c>
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 800342c:	2000      	movs	r0, #0
 800342e:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003430:	6803      	ldr	r3, [r0, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	f022 0208 	bic.w	r2, r2, #8
 8003438:	60da      	str	r2, [r3, #12]
    }
    break;
 800343a:	e7c9      	b.n	80033d0 <HAL_TIMEx_PWMN_Stop_IT+0x20>
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800343c:	6803      	ldr	r3, [r0, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	f022 0204 	bic.w	r2, r2, #4
 8003444:	60da      	str	r2, [r3, #12]
    }
    break;
 8003446:	e7c3      	b.n	80033d0 <HAL_TIMEx_PWMN_Stop_IT+0x20>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003448:	6803      	ldr	r3, [r0, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	f022 0202 	bic.w	r2, r2, #2
 8003450:	60da      	str	r2, [r3, #12]
    }
    break;
 8003452:	e7bd      	b.n	80033d0 <HAL_TIMEx_PWMN_Stop_IT+0x20>
 8003454:	6803      	ldr	r3, [r0, #0]
 8003456:	e7bb      	b.n	80033d0 <HAL_TIMEx_PWMN_Stop_IT+0x20>

08003458 <HAL_TIMEx_OCN_Stop_IT>:
 8003458:	f7ff bfaa 	b.w	80033b0 <HAL_TIMEx_PWMN_Stop_IT>

0800345c <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData: The source Buffer address.
  * @param  Length: The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  if((htim->State == HAL_TIM_STATE_BUSY))
 800345e:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8003462:	b2e4      	uxtb	r4, r4
 8003464:	2c02      	cmp	r4, #2
 8003466:	d015      	beq.n	8003494 <HAL_TIMEx_PWMN_Start_DMA+0x38>
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8003468:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800346c:	b2e4      	uxtb	r4, r4
 800346e:	2c01      	cmp	r4, #1
 8003470:	d00c      	beq.n	800348c <HAL_TIMEx_PWMN_Start_DMA+0x30>
 8003472:	460d      	mov	r5, r1
 8003474:	4604      	mov	r4, r0
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }    
  switch (Channel)
 8003476:	2d0c      	cmp	r5, #12
 8003478:	d865      	bhi.n	8003546 <HAL_TIMEx_PWMN_Start_DMA+0xea>
 800347a:	e8df f005 	tbb	[pc, r5]
 800347e:	640d      	.short	0x640d
 8003480:	64536464 	.word	0x64536464
 8003484:	64316464 	.word	0x64316464
 8003488:	6464      	.short	0x6464
 800348a:	42          	.byte	0x42
 800348b:	00          	.byte	0x00
  {
     return HAL_BUSY;
  }
  else if((htim->State == HAL_TIM_STATE_READY))
  {
    if(((uint32_t)pData == 0U) && (Length > 0U)) 
 800348c:	2a00      	cmp	r2, #0
 800348e:	d15c      	bne.n	800354a <HAL_TIMEx_PWMN_Start_DMA+0xee>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05a      	beq.n	800354a <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;                                    
 8003494:	4620      	mov	r0, r4
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
  
  /* Return function status */
  return HAL_OK;
}
 8003496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8003498:	6826      	ldr	r6, [r4, #0]
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800349a:	6a00      	ldr	r0, [r0, #32]
 800349c:	492d      	ldr	r1, [pc, #180]	; (8003554 <HAL_TIMEx_PWMN_Start_DMA+0xf8>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800349e:	4f2e      	ldr	r7, [pc, #184]	; (8003558 <HAL_TIMEx_PWMN_Start_DMA+0xfc>)
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {      
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034a0:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80034a2:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80034a4:	4611      	mov	r1, r2
 80034a6:	f106 0234 	add.w	r2, r6, #52	; 0x34
 80034aa:	f001 fcad 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b6:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80034b8:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 80034ba:	2204      	movs	r2, #4
 80034bc:	fa02 f105 	lsl.w	r1, r2, r5

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80034c0:	ea20 0001 	bic.w	r0, r0, r1
 80034c4:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	4311      	orrs	r1, r2
 80034ca:	6219      	str	r1, [r3, #32]

  /* Enable the complementary PWM output  */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
    
  /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80034dc:	2000      	movs	r0, #0
 80034de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 80034e0:	6826      	ldr	r6, [r4, #0]
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80034e4:	491b      	ldr	r1, [pc, #108]	; (8003554 <HAL_TIMEx_PWMN_Start_DMA+0xf8>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80034e6:	4f1c      	ldr	r7, [pc, #112]	; (8003558 <HAL_TIMEx_PWMN_Start_DMA+0xfc>)
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034e8:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80034ea:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 80034ec:	4611      	mov	r1, r2
 80034ee:	f106 023c 	add.w	r2, r6, #60	; 0x3c
 80034f2:	f001 fc89 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	60da      	str	r2, [r3, #12]
    }
    break;
 8003500:	e7da      	b.n	80034b8 <HAL_TIMEx_PWMN_Start_DMA+0x5c>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8003502:	6826      	ldr	r6, [r4, #0]
    break;
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003504:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003506:	4913      	ldr	r1, [pc, #76]	; (8003554 <HAL_TIMEx_PWMN_Start_DMA+0xf8>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003508:	4f13      	ldr	r7, [pc, #76]	; (8003558 <HAL_TIMEx_PWMN_Start_DMA+0xfc>)
    break;
    
    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800350a:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800350c:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800350e:	4611      	mov	r1, r2
 8003510:	f106 0240 	add.w	r2, r6, #64	; 0x40
 8003514:	f001 fc78 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003520:	60da      	str	r2, [r3, #12]
    }
    break;
 8003522:	e7c9      	b.n	80034b8 <HAL_TIMEx_PWMN_Start_DMA+0x5c>
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8003524:	6826      	ldr	r6, [r4, #0]
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003526:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003528:	490a      	ldr	r1, [pc, #40]	; (8003554 <HAL_TIMEx_PWMN_Start_DMA+0xf8>)
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800352a:	4f0b      	ldr	r7, [pc, #44]	; (8003558 <HAL_TIMEx_PWMN_Start_DMA+0xfc>)
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800352c:	63c1      	str	r1, [r0, #60]	; 0x3c
     
      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800352e:	64c7      	str	r7, [r0, #76]	; 0x4c
      
      /* Enable the DMA Stream */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8003530:	4611      	mov	r1, r2
 8003532:	f106 0238 	add.w	r2, r6, #56	; 0x38
 8003536:	f001 fc67 	bl	8004e08 <HAL_DMA_Start_IT>
      
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003542:	60da      	str	r2, [r3, #12]
    }
    break;
 8003544:	e7b8      	b.n	80034b8 <HAL_TIMEx_PWMN_Start_DMA+0x5c>
 8003546:	6803      	ldr	r3, [r0, #0]
 8003548:	e7b6      	b.n	80034b8 <HAL_TIMEx_PWMN_Start_DMA+0x5c>
    {
      return HAL_ERROR;                                    
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800354a:	2402      	movs	r4, #2
 800354c:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
 8003550:	e78f      	b.n	8003472 <HAL_TIMEx_PWMN_Start_DMA+0x16>
 8003552:	bf00      	nop
 8003554:	080027d9 	.word	0x080027d9
 8003558:	08002991 	.word	0x08002991

0800355c <HAL_TIMEx_OCN_Start_DMA>:
 800355c:	f7ff bf7e 	b.w	800345c <HAL_TIMEx_PWMN_Start_DMA>

08003560 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003560:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  switch (Channel)
 8003562:	290c      	cmp	r1, #12
 8003564:	d84b      	bhi.n	80035fe <HAL_TIMEx_PWMN_Stop_DMA+0x9e>
 8003566:	e8df f001 	tbb	[pc, r1]
 800356a:	4a44      	.short	0x4a44
 800356c:	4a3e4a4a 	.word	0x4a3e4a4a
 8003570:	4a384a4a 	.word	0x4a384a4a
 8003574:	4a4a      	.short	0x4a4a
 8003576:	07          	.byte	0x07
 8003577:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003578:	6803      	ldr	r3, [r0, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003580:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003582:	6a1a      	ldr	r2, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8003584:	2404      	movs	r4, #4
 8003586:	fa04 f101 	lsl.w	r1, r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800358a:	ea22 0101 	bic.w	r1, r2, r1
 800358e:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	621a      	str	r2, [r3, #32]
  
  /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
     
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003594:	6a19      	ldr	r1, [r3, #32]
 8003596:	f241 1211 	movw	r2, #4369	; 0x1111
 800359a:	4211      	tst	r1, r2
 800359c:	d108      	bne.n	80035b0 <HAL_TIMEx_PWMN_Stop_DMA+0x50>
 800359e:	6a19      	ldr	r1, [r3, #32]
 80035a0:	f240 4244 	movw	r2, #1092	; 0x444
 80035a4:	4211      	tst	r1, r2
 80035a6:	d103      	bne.n	80035b0 <HAL_TIMEx_PWMN_Stop_DMA+0x50>
 80035a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035b0:	6a19      	ldr	r1, [r3, #32]
 80035b2:	f241 1211 	movw	r2, #4369	; 0x1111
 80035b6:	4211      	tst	r1, r2
 80035b8:	d108      	bne.n	80035cc <HAL_TIMEx_PWMN_Stop_DMA+0x6c>
 80035ba:	6a19      	ldr	r1, [r3, #32]
 80035bc:	f240 4244 	movw	r2, #1092	; 0x444
 80035c0:	4211      	tst	r1, r2
 80035c2:	d103      	bne.n	80035cc <HAL_TIMEx_PWMN_Stop_DMA+0x6c>
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 80035d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d6:	2000      	movs	r0, #0
 80035d8:	4770      	bx	lr
    break;
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80035da:	6803      	ldr	r3, [r0, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e2:	60da      	str	r2, [r3, #12]
    }
    break;
 80035e4:	e7cd      	b.n	8003582 <HAL_TIMEx_PWMN_Stop_DMA+0x22>
    break;
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80035e6:	6803      	ldr	r3, [r0, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ee:	60da      	str	r2, [r3, #12]
    }
    break;
 80035f0:	e7c7      	b.n	8003582 <HAL_TIMEx_PWMN_Stop_DMA+0x22>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80035f2:	6803      	ldr	r3, [r0, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035fa:	60da      	str	r2, [r3, #12]
    }
    break;
 80035fc:	e7c1      	b.n	8003582 <HAL_TIMEx_PWMN_Stop_DMA+0x22>
 80035fe:	6803      	ldr	r3, [r0, #0]
 8003600:	e7bf      	b.n	8003582 <HAL_TIMEx_PWMN_Stop_DMA+0x22>
 8003602:	bf00      	nop

08003604 <HAL_TIMEx_OCN_Stop_DMA>:
 8003604:	f7ff bfac 	b.w	8003560 <HAL_TIMEx_PWMN_Stop_DMA>

08003608 <HAL_TIMEx_OnePulseN_Start>:
  {
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
  
  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
 8003608:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800360a:	2204      	movs	r2, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800360c:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800360e:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003612:	ea20 0001 	bic.w	r0, r0, r1
 8003616:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003618:	6a1a      	ldr	r2, [r3, #32]
 800361a:	4311      	orrs	r1, r2
 800361c:	6219      	str	r1, [r3, #32]
  
  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800361e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003620:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
}
 8003626:	2000      	movs	r0, #0
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop

0800362c <HAL_TIMEx_OnePulseN_Stop>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Disable the complementary One Pulse output */
    TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800362c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800362e:	2004      	movs	r0, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003630:	6a1a      	ldr	r2, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8003632:	fa00 f101 	lsl.w	r1, r0, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003636:	ea22 0201 	bic.w	r2, r2, r1
 800363a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 800363c:	6a1a      	ldr	r2, [r3, #32]
 800363e:	621a      	str	r2, [r3, #32]

  /* Disable the complementary One Pulse output */
    TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
  
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003640:	6a19      	ldr	r1, [r3, #32]
 8003642:	f241 1211 	movw	r2, #4369	; 0x1111
 8003646:	4211      	tst	r1, r2
 8003648:	d104      	bne.n	8003654 <HAL_TIMEx_OnePulseN_Stop+0x28>
 800364a:	6a19      	ldr	r1, [r3, #32]
 800364c:	f240 4244 	movw	r2, #1092	; 0x444
 8003650:	4211      	tst	r1, r2
 8003652:	d00f      	beq.n	8003674 <HAL_TIMEx_OnePulseN_Stop+0x48>
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim); 
 8003654:	6a19      	ldr	r1, [r3, #32]
 8003656:	f241 1211 	movw	r2, #4369	; 0x1111
 800365a:	4211      	tst	r1, r2
 800365c:	d108      	bne.n	8003670 <HAL_TIMEx_OnePulseN_Stop+0x44>
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	f240 4244 	movw	r2, #1092	; 0x444
 8003664:	4211      	tst	r1, r2
 8003666:	d103      	bne.n	8003670 <HAL_TIMEx_OnePulseN_Stop+0x44>
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
   
  /* Return function status */
  return HAL_OK;
}
 8003670:	2000      	movs	r0, #0
 8003672:	4770      	bx	lr

  /* Disable the complementary One Pulse output */
    TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
  
  /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
 800367c:	e7ea      	b.n	8003654 <HAL_TIMEx_OnePulseN_Stop+0x28>
 800367e:	bf00      	nop

08003680 <HAL_TIMEx_PWMN_Stop>:
 8003680:	f7ff bfd4 	b.w	800362c <HAL_TIMEx_OnePulseN_Stop>

08003684 <HAL_TIMEx_OCN_Stop>:
 8003684:	f7ff bfd2 	b.w	800362c <HAL_TIMEx_OnePulseN_Stop>

08003688 <HAL_TIMEx_OnePulseN_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003688:	6803      	ldr	r3, [r0, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	f042 0202 	orr.w	r2, r2, #2
 8003690:	60da      	str	r2, [r3, #12]
  
  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	f042 0204 	orr.w	r2, r2, #4
 8003698:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 800369a:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 800369c:	2204      	movs	r2, #4
 800369e:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80036a2:	ea20 0001 	bic.w	r0, r0, r1
 80036a6:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	4311      	orrs	r1, r2
 80036ac:	6219      	str	r1, [r3, #32]
  
  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80036ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
  } 
 80036b6:	2000      	movs	r0, #0
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <HAL_TIMEx_OnePulseN_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80036bc:	6803      	ldr	r3, [r0, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	f022 0202 	bic.w	r2, r2, #2
 80036c4:	60da      	str	r2, [r3, #12]
  
  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	f022 0204 	bic.w	r2, r2, #4
 80036cc:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80036ce:	6a1a      	ldr	r2, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 80036d0:	2004      	movs	r0, #4
 80036d2:	fa00 f101 	lsl.w	r1, r0, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80036d6:	ea22 0201 	bic.w	r2, r2, r1
 80036da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80036dc:	6a1a      	ldr	r2, [r3, #32]
 80036de:	621a      	str	r2, [r3, #32]
  
  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80036e0:	6a19      	ldr	r1, [r3, #32]
 80036e2:	f241 1211 	movw	r2, #4369	; 0x1111
 80036e6:	4211      	tst	r1, r2
 80036e8:	d104      	bne.n	80036f4 <HAL_TIMEx_OnePulseN_Stop_IT+0x38>
 80036ea:	6a19      	ldr	r1, [r3, #32]
 80036ec:	f240 4244 	movw	r2, #1092	; 0x444
 80036f0:	4211      	tst	r1, r2
 80036f2:	d00f      	beq.n	8003714 <HAL_TIMEx_OnePulseN_Stop_IT+0x58>
  
  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);  
 80036f4:	6a19      	ldr	r1, [r3, #32]
 80036f6:	f241 1211 	movw	r2, #4369	; 0x1111
 80036fa:	4211      	tst	r1, r2
 80036fc:	d108      	bne.n	8003710 <HAL_TIMEx_OnePulseN_Stop_IT+0x54>
 80036fe:	6a19      	ldr	r1, [r3, #32]
 8003700:	f240 4244 	movw	r2, #1092	; 0x444
 8003704:	4211      	tst	r1, r2
 8003706:	d103      	bne.n	8003710 <HAL_TIMEx_OnePulseN_Stop_IT+0x54>
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8003710:	2000      	movs	r0, #0
 8003712:	4770      	bx	lr
  
  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
  
  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
 800371c:	e7ea      	b.n	80036f4 <HAL_TIMEx_OnePulseN_Stop_IT+0x38>
 800371e:	bf00      	nop

08003720 <HAL_TIMEx_ConfigCommutationEvent>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 8003720:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003724:	2b01      	cmp	r3, #1
 8003726:	d020      	beq.n	800376a <HAL_TIMEx_ConfigCommutationEvent+0x4a>
 8003728:	2301      	movs	r3, #1
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800372a:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800372c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8003730:	f031 0330 	bics.w	r3, r1, #48	; 0x30
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003734:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8003736:	d106      	bne.n	8003746 <HAL_TIMEx_ConfigCommutationEvent+0x26>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003738:	689c      	ldr	r4, [r3, #8]
 800373a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800373e:	609c      	str	r4, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8003740:	689c      	ldr	r4, [r3, #8]
 8003742:	4321      	orrs	r1, r4
 8003744:	6099      	str	r1, [r3, #8]
  }
    
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	f041 0101 	orr.w	r1, r1, #1
 800374c:	6059      	str	r1, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	f021 0104 	bic.w	r1, r1, #4
 8003754:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8003756:	6859      	ldr	r1, [r3, #4]
    
  __HAL_UNLOCK(htim);
 8003758:	2400      	movs	r4, #0
    
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
  htim->Instance->CR2 |= CommutationSource;
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
    
  __HAL_UNLOCK(htim);
 800375e:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  
  return HAL_OK;
}
 8003762:	4620      	mov	r0, r4
 8003764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003768:	4770      	bx	lr
{
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800376a:	2302      	movs	r3, #2
  htim->Instance->CR2 |= CommutationSource;
    
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 800376c:	4618      	mov	r0, r3
 800376e:	4770      	bx	lr

08003770 <HAL_TIMEx_ConfigCommutationEvent_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 8003770:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003774:	2b01      	cmp	r3, #1
 8003776:	d024      	beq.n	80037c2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x52>
 8003778:	2301      	movs	r3, #1
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800377a:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 800377c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8003780:	f031 0330 	bics.w	r3, r1, #48	; 0x30
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003784:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8003786:	d106      	bne.n	8003796 <HAL_TIMEx_ConfigCommutationEvent_IT+0x26>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003788:	689c      	ldr	r4, [r3, #8]
 800378a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800378e:	609c      	str	r4, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8003790:	689c      	ldr	r4, [r3, #8]
 8003792:	4321      	orrs	r1, r4
 8003794:	6099      	str	r1, [r3, #8]
  }
  
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8003796:	6859      	ldr	r1, [r3, #4]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8003798:	f85d 4b04 	ldr.w	r4, [sp], #4
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
    htim->Instance->SMCR |= InputTrigger;
  }
  
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800379c:	f041 0101 	orr.w	r1, r1, #1
 80037a0:	6059      	str	r1, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	f021 0104 	bic.w	r1, r1, #4
 80037a8:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
    
  /* Enable the Commutation Interrupt Request */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 80037b0:	68da      	ldr	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 80037b2:	2100      	movs	r1, #0
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
  htim->Instance->CR2 |= CommutationSource;
    
  /* Enable the Commutation Interrupt Request */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 80037b4:	f042 0220 	orr.w	r2, r2, #32
 80037b8:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 80037ba:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  
  return HAL_OK;
}
 80037be:	4608      	mov	r0, r1
 80037c0:	4770      	bx	lr
{
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 80037c2:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_ConfigCommutationEvent_DMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 80037c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d028      	beq.n	8003822 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x5a>
 80037d0:	2301      	movs	r3, #1
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 80037d2:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 80037d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80037d8:	f031 0330 	bics.w	r3, r1, #48	; 0x30
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80037dc:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
  
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80037de:	d106      	bne.n	80037ee <HAL_TIMEx_ConfigCommutationEvent_DMA+0x26>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
  {    
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80037e0:	689c      	ldr	r4, [r3, #8]
 80037e2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80037e6:	609c      	str	r4, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 80037e8:	689c      	ldr	r4, [r3, #8]
 80037ea:	4321      	orrs	r1, r4
 80037ec:	6099      	str	r1, [r3, #8]
  }
  
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80037ee:	6859      	ldr	r1, [r3, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
  htim->Instance->CR2 |= CommutationSource;
  
  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
 80037f0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80037f2:	4c0d      	ldr	r4, [pc, #52]	; (8003828 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x60>)
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 80037f4:	4e0d      	ldr	r6, [pc, #52]	; (800382c <HAL_TIMEx_ConfigCommutationEvent_DMA+0x64>)
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
    htim->Instance->SMCR |= InputTrigger;
  }
  
  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80037f6:	f041 0101 	orr.w	r1, r1, #1
 80037fa:	6059      	str	r1, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	f021 0104 	bic.w	r1, r1, #4
 8003802:	6059      	str	r1, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
  
  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800380a:	68da      	ldr	r2, [r3, #12]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
  htim->Instance->CR2 |= CommutationSource;
  
  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
 800380c:	63ec      	str	r4, [r5, #60]	; 0x3c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
  
  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800380e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000

  __HAL_UNLOCK(htim);
 8003812:	2400      	movs	r4, #0
  
  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 8003814:	64ee      	str	r6, [r5, #76]	; 0x4c
  
  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8003816:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8003818:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  
  return HAL_OK;
}
 800381c:	4620      	mov	r0, r4
 800381e:	bc70      	pop	{r4, r5, r6}
 8003820:	4770      	bx	lr
{
  /* Check the parameters */
  assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
  
  __HAL_LOCK(htim);
 8003822:	2102      	movs	r1, #2
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8003824:	4608      	mov	r0, r1
 8003826:	4770      	bx	lr
 8003828:	080038ed 	.word	0x080038ed
 800382c:	08002991 	.word	0x08002991

08003830 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003830:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003834:	2b01      	cmp	r3, #1
 8003836:	d01e      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003838:	4602      	mov	r2, r0
  
  htim->State = HAL_TIM_STATE_BUSY;
 800383a:	2002      	movs	r0, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800383c:	6813      	ldr	r3, [r2, #0]
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800383e:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003844:	685c      	ldr	r4, [r3, #4]
 8003846:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800384a:	e891 0060 	ldmia.w	r1, {r5, r6}
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800384e:	605c      	str	r4, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003850:	6858      	ldr	r0, [r3, #4]
 8003852:	4328      	orrs	r0, r5
 8003854:	6058      	str	r0, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003856:	6898      	ldr	r0, [r3, #8]
 8003858:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800385c:	6098      	str	r0, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800385e:	6899      	ldr	r1, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 8003860:	2400      	movs	r4, #0
  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
  
  htim->State = HAL_TIM_STATE_READY;
 8003862:	2501      	movs	r5, #1
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003864:	4331      	orrs	r1, r6
 8003866:	6099      	str	r1, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
 8003868:	4620      	mov	r0, r4
  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
  
  htim->State = HAL_TIM_STATE_READY;
 800386a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800386e:	f882 4038 	strb.w	r4, [r2, #56]	; 0x38
  
  return HAL_OK;
} 
 8003872:	bc70      	pop	{r4, r5, r6}
 8003874:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003876:	2002      	movs	r0, #2
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop

0800387c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800387c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003880:	2b01      	cmp	r3, #1
 8003882:	d01a      	beq.n	80038ba <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                              TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8003884:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8003886:	e891 008c 	ldmia.w	r1, {r2, r3, r7}
                                   sBreakDeadTimeConfig->LockLevel        |
 800388a:	68ce      	ldr	r6, [r1, #12]
                                   sBreakDeadTimeConfig->DeadTime         |
 800388c:	690d      	ldr	r5, [r1, #16]
                                   sBreakDeadTimeConfig->BreakState       |
 800388e:	694c      	ldr	r4, [r1, #20]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8003890:	6989      	ldr	r1, [r1, #24]
  
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 8003892:	4313      	orrs	r3, r2
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8003894:	433b      	orrs	r3, r7
                                   sBreakDeadTimeConfig->LockLevel        |
 8003896:	4333      	orrs	r3, r6
                                   sBreakDeadTimeConfig->DeadTime         |
 8003898:	432b      	orrs	r3, r5
                                   sBreakDeadTimeConfig->BreakState       |
 800389a:	4323      	orrs	r3, r4
  
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 800389c:	6805      	ldr	r5, [r0, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 800389e:	430b      	orrs	r3, r1
                                   sBreakDeadTimeConfig->AutomaticOutput;
  
                                   
  htim->State = HAL_TIM_STATE_READY;                                 
 80038a0:	2401      	movs	r4, #1
  
  __HAL_UNLOCK(htim);
 80038a2:	2100      	movs	r1, #0
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
  
  /* Process Locked */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	2202      	movs	r2, #2
 80038a6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 80038aa:	646b      	str	r3, [r5, #68]	; 0x44
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
                                   sBreakDeadTimeConfig->AutomaticOutput;
  
                                   
  htim->State = HAL_TIM_STATE_READY;                                 
 80038ac:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80038b0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  
  return HAL_OK;
}
 80038b4:	bcf0      	pop	{r4, r5, r6, r7}
 80038b6:	4608      	mov	r0, r1
 80038b8:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80038ba:	2202      	movs	r2, #2
  htim->State = HAL_TIM_STATE_READY;                                 
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 80038bc:	4610      	mov	r0, r2
 80038be:	4770      	bx	lr

080038c0 <HAL_TIMEx_RemapConfig>:
  *                                     (HSE divided by a programmable prescaler)  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
  __HAL_LOCK(htim);
 80038c0:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80038c4:	2a01      	cmp	r2, #1
 80038c6:	d00d      	beq.n	80038e4 <HAL_TIMEx_RemapConfig+0x24>
 80038c8:	4603      	mov	r3, r0
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));
  
  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 80038ca:	6800      	ldr	r0, [r0, #0]
  *            @arg TIM_TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                     (HSE divided by a programmable prescaler)  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80038cc:	b410      	push	{r4}
  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);  
 80038ce:	2200      	movs	r2, #0
  assert_param(IS_TIM_REMAP(Remap));
  
  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
  
  htim->State = HAL_TIM_STATE_READY;
 80038d0:	2401      	movs	r4, #1
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));
  
  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 80038d2:	6501      	str	r1, [r0, #80]	; 0x50
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);  
  
  return HAL_OK;
 80038d4:	4610      	mov	r0, r2
  assert_param(IS_TIM_REMAP(Remap));
  
  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
  
  htim->State = HAL_TIM_STATE_READY;
 80038d6:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);  
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
}
 80038de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038e2:	4770      	bx	lr
  *                                     (HSE divided by a programmable prescaler)  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
  __HAL_LOCK(htim);
 80038e4:	2002      	movs	r0, #2
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIMEx_CommutationCallback>:
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <TIMEx_DMACommutationCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 80038ec:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  htim->State= HAL_TIM_STATE_READY;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    
  HAL_TIMEx_CommutationCallback(htim); 
 80038f6:	f7ff fff7 	bl	80038e8 <HAL_TIMEx_CommutationCallback>
 80038fa:	bd08      	pop	{r3, pc}

080038fc <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop

08003900 <HAL_TIMEx_HallSensor_GetState>:
  *                the configuration information for TIM module.
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
  return htim->State;
 8003900:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop

08003908 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003908:	b084      	sub	sp, #16
 800390a:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800390c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800390e:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003910:	2d01      	cmp	r5, #1
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003912:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8003916:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003918:	d014      	beq.n	8003944 <USB_CoreInit+0x3c>
    USB_CoreReset(USBx); 
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800391a:	68c3      	ldr	r3, [r0, #12]
 800391c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003920:	60c3      	str	r3, [r0, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8003922:	f000 fce3 	bl	80042ec <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800392a:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 800392c:	9b08      	ldr	r3, [sp, #32]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d103      	bne.n	800393a <USB_CoreInit+0x32>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003932:	68a3      	ldr	r3, [r4, #8]
 8003934:	f043 0320 	orr.w	r3, r3, #32
 8003938:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 800393a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800393e:	2000      	movs	r0, #0
 8003940:	b004      	add	sp, #16
 8003942:	4770      	bx	lr
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003944:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if(cfg.use_external_vbus == 1U)
 8003946:	9a11      	ldr	r2, [sp, #68]	; 0x44
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394c:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800394e:	68c3      	ldr	r3, [r0, #12]
 8003950:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003958:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800395a:	68c3      	ldr	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 800395c:	2a01      	cmp	r2, #1

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800395e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003962:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8003964:	d003      	beq.n	800396e <USB_CoreInit+0x66>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003966:	4620      	mov	r0, r4
 8003968:	f000 fcc0 	bl	80042ec <USB_CoreReset>
 800396c:	e7de      	b.n	800392c <USB_CoreInit+0x24>
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if(cfg.use_external_vbus == 1U)
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800396e:	68c3      	ldr	r3, [r0, #12]
 8003970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003974:	60c3      	str	r3, [r0, #12]
 8003976:	e7f6      	b.n	8003966 <USB_CoreInit+0x5e>

08003978 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003978:	4602      	mov	r2, r0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
  return HAL_OK;
}
 800397a:	2000      	movs	r0, #0
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800397c:	6893      	ldr	r3, [r2, #8]
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6093      	str	r3, [r2, #8]
  return HAL_OK;
}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop

08003988 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003988:	4602      	mov	r2, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
  return HAL_OK;
}
 800398a:	2000      	movs	r0, #0
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800398c:	6893      	ldr	r3, [r2, #8]
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6093      	str	r3, [r2, #8]
  return HAL_OK;
}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop

08003998 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8003998:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800399a:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800399c:	2901      	cmp	r1, #1
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800399e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80039a2:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80039a4:	d009      	beq.n	80039ba <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80039a6:	b919      	cbnz	r1, 80039b0 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80039a8:	68c3      	ldr	r3, [r0, #12]
 80039aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039ae:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 80039b0:	2032      	movs	r0, #50	; 0x32
 80039b2:	f7fc fc47 	bl	8000244 <HAL_Delay>
  
  return HAL_OK;
}
 80039b6:	2000      	movs	r0, #0
 80039b8:	bd08      	pop	{r3, pc}
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
  
  if ( mode == USB_OTG_HOST_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80039ba:	68c3      	ldr	r3, [r0, #12]
 80039bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039c0:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 80039c2:	2032      	movs	r0, #50	; 0x32
 80039c4:	f7fc fc3e 	bl	8000244 <HAL_Delay>
  
  return HAL_OK;
}
 80039c8:	2000      	movs	r0, #0
 80039ca:	bd08      	pop	{r3, pc}

080039cc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039cc:	b084      	sub	sp, #16
 80039ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039d2:	ac08      	add	r4, sp, #32
 80039d4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039da:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80039dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80039e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039e4:	468e      	mov	lr, r1
 80039e6:	6383      	str	r3, [r0, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0U)
 80039e8:	b91e      	cbnz	r6, 80039f2 <USB_DevInit+0x26>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039f0:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80039f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039fa:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 80039fe:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003a02:	2b01      	cmp	r3, #1

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a04:	f500 6500 	add.w	r5, r0, #2048	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003a08:	f000 8085 	beq.w	8003b16 <USB_DevInit+0x14a>
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003a0c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003a10:	f043 0303 	orr.w	r3, r3, #3
 8003a14:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0U;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003a18:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003a1c:	6103      	str	r3, [r0, #16]
 8003a1e:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <USB_DevInit+0x168>)
 8003a20:	e001      	b.n	8003a26 <USB_DevInit+0x5a>
 
  do
  {
    if (++count > 200000U)
 8003a22:	3b01      	subs	r3, #1
 8003a24:	d002      	beq.n	8003a2c <USB_DevInit+0x60>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a26:	6902      	ldr	r2, [r0, #16]
 8003a28:	0691      	lsls	r1, r2, #26
 8003a2a:	d4fa      	bmi.n	8003a22 <USB_DevInit+0x56>
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	6103      	str	r3, [r0, #16]
 8003a30:	4b40      	ldr	r3, [pc, #256]	; (8003b34 <USB_DevInit+0x168>)
 8003a32:	e001      	b.n	8003a38 <USB_DevInit+0x6c>
  
  do
  {
    if (++count > 200000U)
 8003a34:	3b01      	subs	r3, #1
 8003a36:	d002      	beq.n	8003a3e <USB_DevInit+0x72>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a38:	6902      	ldr	r2, [r0, #16]
 8003a3a:	06d2      	lsls	r2, r2, #27
 8003a3c:	d4fa      	bmi.n	8003a34 <USB_DevInit+0x68>
  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a3e:	2200      	movs	r2, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a44:	612a      	str	r2, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a46:	616a      	str	r2, [r5, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8003a48:	61ab      	str	r3, [r5, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a4a:	61ea      	str	r2, [r5, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a4c:	f1be 0f00 	cmp.w	lr, #0
 8003a50:	d028      	beq.n	8003aa4 <USB_DevInit+0xd8>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a52:	4614      	mov	r4, r2
 8003a54:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003a58:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8003a5c:	27ff      	movs	r7, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a5e:	6819      	ldr	r1, [r3, #0]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a60:	3201      	adds	r2, #1
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a62:	2900      	cmp	r1, #0
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003a64:	bfb4      	ite	lt
 8003a66:	f8c3 8000 	strlt.w	r8, [r3]
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a6a:	601c      	strge	r4, [r3, #0]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a6c:	4572      	cmp	r2, lr
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a6e:	611c      	str	r4, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8003a70:	609f      	str	r7, [r3, #8]
 8003a72:	f103 0320 	add.w	r3, r3, #32
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a76:	d1f2      	bne.n	8003a5e <USB_DevInit+0x92>
 8003a78:	2100      	movs	r1, #0
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a7a:	460f      	mov	r7, r1
 8003a7c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003a80:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8003a84:	f04f 0cff 	mov.w	ip, #255	; 0xff
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a88:	681c      	ldr	r4, [r3, #0]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a8a:	3101      	adds	r1, #1
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a8c:	2c00      	cmp	r4, #0
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003a8e:	bfb4      	ite	lt
 8003a90:	f8c3 8000 	strlt.w	r8, [r3]
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a94:	601f      	strge	r7, [r3, #0]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a96:	428a      	cmp	r2, r1
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a98:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8003a9a:	f8c3 c008 	str.w	ip, [r3, #8]
 8003a9e:	f103 0320 	add.w	r3, r3, #32
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa2:	d1f1      	bne.n	8003a88 <USB_DevInit+0xbc>
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003aa4:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8003aa6:	f1b9 0f01 	cmp.w	r9, #1
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aae:	612b      	str	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8003ab0:	d022      	beq.n	8003af8 <USB_DevInit+0x12c>
    
    i= USBx_DEVICE->DTHRCTL;
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ab2:	2200      	movs	r2, #0
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ab4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
    
    i= USBx_DEVICE->DTHRCTL;
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ab8:	6182      	str	r2, [r0, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003aba:	6143      	str	r3, [r0, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003abc:	f1b9 0f00 	cmp.w	r9, #0
 8003ac0:	d103      	bne.n	8003aca <USB_DevInit+0xfe>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003ac2:	6983      	ldr	r3, [r0, #24]
 8003ac4:	f043 0310 	orr.w	r3, r3, #16
 8003ac8:	6183      	str	r3, [r0, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003aca:	6981      	ldr	r1, [r0, #24]
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <USB_DevInit+0x16c>)
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8003ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6183      	str	r3, [r0, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8003ad4:	b11a      	cbz	r2, 8003ade <USB_DevInit+0x112>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ad6:	6983      	ldr	r3, [r0, #24]
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	6183      	str	r3, [r0, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8003ade:	2e01      	cmp	r6, #1
 8003ae0:	d105      	bne.n	8003aee <USB_DevInit+0x122>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8003ae2:	6983      	ldr	r3, [r0, #24]
 8003ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6183      	str	r3, [r0, #24]
  }
  
  return HAL_OK;
}
 8003aee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003af2:	2000      	movs	r0, #0
 8003af4:	b004      	add	sp, #16
 8003af6:	4770      	bx	lr
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
  
  if (cfg.dma_enable == 1U)
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003af8:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <USB_DevInit+0x170>)
 8003afa:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003afc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b02:	f043 0303 	orr.w	r3, r3, #3
 8003b06:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b08:	2200      	movs	r2, #0
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b0a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
    
    i= USBx_DEVICE->DTHRCTL;
 8003b0e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b10:	6182      	str	r2, [r0, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b12:	6143      	str	r3, [r0, #20]
 8003b14:	e7d9      	b.n	8003aca <USB_DevInit+0xfe>
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8003b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b18:	b923      	cbnz	r3, 8003b24 <USB_DevInit+0x158>
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003b1a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003b1e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8003b22:	e779      	b.n	8003a18 <USB_DevInit+0x4c>
 8003b24:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8003b30:	e772      	b.n	8003a18 <USB_DevInit+0x4c>
 8003b32:	bf00      	nop
 8003b34:	00030d40 	.word	0x00030d40
 8003b38:	803c3800 	.word	0x803c3800
 8003b3c:	00800100 	.word	0x00800100

08003b40 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0U;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003b40:	0189      	lsls	r1, r1, #6
 8003b42:	f041 0120 	orr.w	r1, r1, #32
 8003b46:	6101      	str	r1, [r0, #16]
 8003b48:	4a05      	ldr	r2, [pc, #20]	; (8003b60 <USB_FlushTxFifo+0x20>)
 8003b4a:	e001      	b.n	8003b50 <USB_FlushTxFifo+0x10>
 
  do
  {
    if (++count > 200000U)
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	d005      	beq.n	8003b5c <USB_FlushTxFifo+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b50:	6903      	ldr	r3, [r0, #16]
 8003b52:	f013 0320 	ands.w	r3, r3, #32
 8003b56:	d1f9      	bne.n	8003b4c <USB_FlushTxFifo+0xc>
  
  return HAL_OK;
 8003b58:	4618      	mov	r0, r3
 8003b5a:	4770      	bx	lr
 
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8003b5c:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
  
  return HAL_OK;
}
 8003b5e:	4770      	bx	lr
 8003b60:	00030d40 	.word	0x00030d40

08003b64 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b64:	2310      	movs	r3, #16
 8003b66:	6103      	str	r3, [r0, #16]
 8003b68:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <USB_FlushRxFifo+0x1c>)
 8003b6a:	e001      	b.n	8003b70 <USB_FlushRxFifo+0xc>
  
  do
  {
    if (++count > 200000U)
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	d005      	beq.n	8003b7c <USB_FlushRxFifo+0x18>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b70:	6903      	ldr	r3, [r0, #16]
 8003b72:	f013 0310 	ands.w	r3, r3, #16
 8003b76:	d1f9      	bne.n	8003b6c <USB_FlushRxFifo+0x8>
  
  return HAL_OK;
 8003b78:	4618      	mov	r0, r3
 8003b7a:	4770      	bx	lr
  
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8003b7c:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
  
  return HAL_OK;
}
 8003b7e:	4770      	bx	lr
 8003b80:	00030d40 	.word	0x00030d40

08003b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8003b84:	4602      	mov	r2, r0
  USBx_DEVICE->DCFG |= speed;
  return HAL_OK;
}
 8003b86:	2000      	movs	r0, #0
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003b88:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8003b8c:	4319      	orrs	r1, r3
 8003b8e:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
  return HAL_OK;
}
 8003b92:	4770      	bx	lr

08003b94 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b94:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003b98:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8003b9c:	f010 0006 	ands.w	r0, r0, #6
 8003ba0:	d012      	beq.n	8003bc8 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003ba2:	6893      	ldr	r3, [r2, #8]
 8003ba4:	f003 0306 	and.w	r3, r3, #6
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d00c      	beq.n	8003bc6 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8003bac:	6893      	ldr	r3, [r2, #8]
 8003bae:	f003 0306 	and.w	r3, r3, #6
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d007      	beq.n	8003bc6 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003bb6:	6893      	ldr	r3, [r2, #8]
 8003bb8:	f003 0306 	and.w	r3, r3, #6
 8003bbc:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8003bbe:	bf14      	ite	ne
 8003bc0:	2000      	movne	r0, #0
 8003bc2:	2002      	moveq	r0, #2
 8003bc4:	4770      	bx	lr
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8003bc6:	2003      	movs	r0, #3
  {
    speed = USB_OTG_SPEED_LOW;
  }
  
  return speed;
}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop

08003bcc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bcc:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8003bce:	784b      	ldrb	r3, [r1, #1]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d020      	beq.n	8003c16 <USB_ActivateEndpoint+0x4a>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003bd4:	780c      	ldrb	r4, [r1, #0]
 8003bd6:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8003bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bde:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003be2:	40a3      	lsls	r3, r4
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003be4:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003be8:	432b      	orrs	r3, r5
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003bee:	61d3      	str	r3, [r2, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bf0:	6803      	ldr	r3, [r0, #0]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	d40c      	bmi.n	8003c10 <USB_ActivateEndpoint+0x44>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003bf6:	688a      	ldr	r2, [r1, #8]
 8003bf8:	78cc      	ldrb	r4, [r1, #3]
 8003bfa:	6801      	ldr	r1, [r0, #0]
 8003bfc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003c00:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8003c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c08:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8003c10:	2000      	movs	r0, #0
 8003c12:	bc30      	pop	{r4, r5}
 8003c14:	4770      	bx	lr
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003c16:	780c      	ldrb	r4, [r1, #0]
 8003c18:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8003c1c:	40a3      	lsls	r3, r4
 8003c1e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003c22:	b29b      	uxth	r3, r3
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c24:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003c28:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c2a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003c2e:	61d3      	str	r3, [r2, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c30:	6803      	ldr	r3, [r0, #0]
 8003c32:	041a      	lsls	r2, r3, #16
 8003c34:	d4ec      	bmi.n	8003c10 <USB_ActivateEndpoint+0x44>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003c36:	688a      	ldr	r2, [r1, #8]
 8003c38:	78cd      	ldrb	r5, [r1, #3]
 8003c3a:	6801      	ldr	r1, [r0, #0]
 8003c3c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003c40:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8003c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c48:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8003c4c:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8003c54:	bc30      	pop	{r4, r5}
 8003c56:	2000      	movs	r0, #0
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop

08003c5c <USB_ActivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  static __IO uint32_t debug = 0U;
  
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c5e:	784b      	ldrb	r3, [r1, #1]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d027      	beq.n	8003cb4 <USB_ActivateDedicatedEndpoint+0x58>
    
   USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c64:	780c      	ldrb	r4, [r1, #0]
 8003c66:	f500 6630 	add.w	r6, r0, #2816	; 0xb00
 8003c6a:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	0412      	lsls	r2, r2, #16
 8003c72:	d509      	bpl.n	8003c88 <USB_ActivateDedicatedEndpoint+0x2c>
      debug = (uint32_t )&USBx_OUTEP(ep->num)->DOEPCTL;
      debug |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP)); 
    } 
    
     USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003c74:	f8d0 283c 	ldr.w	r2, [r0, #2108]	; 0x83c
 8003c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c7c:	40a3      	lsls	r3, r4
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c0 383c 	str.w	r3, [r0, #2108]	; 0x83c
  }

  return HAL_OK;
}
 8003c84:	2000      	movs	r0, #0
 8003c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003c88:	78cf      	ldrb	r7, [r1, #3]
 8003c8a:	688d      	ldr	r5, [r1, #8]
 8003c8c:	6819      	ldr	r1, [r3, #0]
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP));
 8003c8e:	05a2      	lsls	r2, r4, #22
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003c90:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8003c94:	ea42 4287 	orr.w	r2, r2, r7, lsl #18
 8003c98:	432a      	orrs	r2, r5
 8003c9a:	4311      	orrs	r1, r2
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP));
      
      debug = (uint32_t)(((uint32_t )USBx) + USB_OTG_OUT_ENDPOINT_BASE + (0U)*USB_OTG_EP_REG_SIZE);
 8003c9c:	4d1e      	ldr	r5, [pc, #120]	; (8003d18 <USB_ActivateDedicatedEndpoint+0xbc>)
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003c9e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003ca2:	6019      	str	r1, [r3, #0]
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP));
      
      debug = (uint32_t)(((uint32_t )USBx) + USB_OTG_OUT_ENDPOINT_BASE + (0U)*USB_OTG_EP_REG_SIZE);
 8003ca4:	602e      	str	r6, [r5, #0]
      debug = (uint32_t )&USBx_OUTEP(ep->num)->DOEPCTL;
 8003ca6:	602b      	str	r3, [r5, #0]
      debug |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	602a      	str	r2, [r5, #0]
 8003cb2:	e7df      	b.n	8003c74 <USB_ActivateDedicatedEndpoint+0x18>
  static __IO uint32_t debug = 0U;
  
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cb4:	780d      	ldrb	r5, [r1, #0]
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003cb6:	78ce      	ldrb	r6, [r1, #3]
  static __IO uint32_t debug = 0U;
  
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cb8:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 8003cbc:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003cc6:	688b      	ldr	r3, [r1, #8]
  static __IO uint32_t debug = 0U;
  
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cc8:	d121      	bne.n	8003d0e <USB_ActivateDedicatedEndpoint+0xb2>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003cca:	f3c3 0e0a 	ubfx	lr, r3, #0, #11
 8003cce:	f04e 5280 	orr.w	r2, lr, #268435456	; 0x10000000
 8003cd2:	04b6      	lsls	r6, r6, #18
 8003cd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd8:	6821      	ldr	r1, [r4, #0]
 8003cda:	4332      	orrs	r2, r6
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8003cdc:	05af      	lsls	r7, r5, #22
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003cde:	433a      	orrs	r2, r7
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	6022      	str	r2, [r4, #0]
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
    
    
    debug  |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003ce4:	490c      	ldr	r1, [pc, #48]	; (8003d18 <USB_ActivateDedicatedEndpoint+0xbc>)
 8003ce6:	680b      	ldr	r3, [r1, #0]
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf0:	ea43 030e 	orr.w	r3, r3, lr
 8003cf4:	4333      	orrs	r3, r6
 8003cf6:	433b      	orrs	r3, r7
 8003cf8:	600b      	str	r3, [r1, #0]
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    
   USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f8d0 283c 	ldr.w	r2, [r0, #2108]	; 0x83c
 8003d00:	40ab      	lsls	r3, r5
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c0 383c 	str.w	r3, [r0, #2108]	; 0x83c
    
     USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
  }

  return HAL_OK;
}
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0e:	f3c3 0e0a 	ubfx	lr, r3, #0, #11
 8003d12:	04b6      	lsls	r6, r6, #18
 8003d14:	05af      	lsls	r7, r5, #22
 8003d16:	e7e5      	b.n	8003ce4 <USB_ActivateDedicatedEndpoint+0x88>
 8003d18:	2000099c 	.word	0x2000099c

08003d1c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d1c:	b410      	push	{r4}
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d1e:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8003d20:	780c      	ldrb	r4, [r1, #0]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d22:	2b01      	cmp	r3, #1
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8003d24:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d28:	d018      	beq.n	8003d5c <USB_DeactivateEndpoint+0x40>
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 8003d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d2e:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8003d32:	40a3      	lsls	r3, r4
 8003d34:	43db      	mvns	r3, r3
 8003d36:	4019      	ands	r1, r3
 8003d38:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));     
 8003d3c:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003d40:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003d44:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));     
 8003d48:	400b      	ands	r3, r1
 8003d4a:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003d4c:	6803      	ldr	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003d52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d56:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003d58:	2000      	movs	r0, #0
 8003d5a:	4770      	bx	lr
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8003d5c:	40a3      	lsls	r3, r4
 8003d5e:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	4019      	ands	r1, r3
 8003d68:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003d6c:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8003d70:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003d74:	e7e6      	b.n	8003d44 <USB_DeactivateEndpoint+0x28>
 8003d76:	bf00      	nop

08003d78 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d78:	b410      	push	{r4}
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d7a:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8003d7c:	780c      	ldrb	r4, [r1, #0]
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d014      	beq.n	8003dac <USB_DeactivateDedicatedEndpoint+0x34>
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
  }
  else
  {
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP; 
 8003d82:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003d86:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 8003d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
  }
  else
  {
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP; 
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003d94:	6019      	str	r1, [r3, #0]
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 8003d96:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8003d9a:	40a2      	lsls	r2, r4
 8003d9c:	ea23 0302 	bic.w	r3, r3, r2
 8003da0:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
  }
  return HAL_OK;
}
 8003da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003da8:	2000      	movs	r0, #0
 8003daa:	4770      	bx	lr
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8003dac:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8003db0:	eb02 1244 	add.w	r2, r2, r4, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8003db4:	40a3      	lsls	r3, r4
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8003db6:	6811      	ldr	r1, [r2, #0]
  {
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP; 
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
  }
  return HAL_OK;
}
 8003db8:	f85d 4b04 	ldr.w	r4, [sp], #4
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8003dbc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003dc0:	6011      	str	r1, [r2, #0]
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 8003dc2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	ea22 0303 	bic.w	r3, r2, r3
 8003dcc:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
  {
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP; 
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
  }
  return HAL_OK;
}
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	4770      	bx	lr

08003dd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dd8:	784c      	ldrb	r4, [r1, #1]
 8003dda:	2c01      	cmp	r4, #1
 8003ddc:	d03c      	beq.n	8003e58 <USB_EPStartXfer+0x84>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003dde:	780d      	ldrb	r5, [r1, #0]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 

    if (ep->xfer_len == 0U)
 8003de0:	694c      	ldr	r4, [r1, #20]
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003de2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003de6:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8003dea:	691d      	ldr	r5, [r3, #16]
 8003dec:	0ced      	lsrs	r5, r5, #19
 8003dee:	04ed      	lsls	r5, r5, #19
 8003df0:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003df2:	691d      	ldr	r5, [r3, #16]
 8003df4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003df8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003dfc:	611d      	str	r5, [r3, #16]

    if (ep->xfer_len == 0U)
 8003dfe:	b304      	cbz	r4, 8003e42 <USB_EPStartXfer+0x6e>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003e00:	688d      	ldr	r5, [r1, #8]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003e02:	4e62      	ldr	r6, [pc, #392]	; (8003f8c <USB_EPStartXfer+0x1b8>)
 8003e04:	691f      	ldr	r7, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003e06:	442c      	add	r4, r5
 8003e08:	3c01      	subs	r4, #1
 8003e0a:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003e0e:	ea06 46c4 	and.w	r6, r6, r4, lsl #19
 8003e12:	433e      	orrs	r6, r7
 8003e14:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003e16:	b2a4      	uxth	r4, r4
 8003e18:	fb05 f404 	mul.w	r4, r5, r4
 8003e1c:	691d      	ldr	r5, [r3, #16]
 8003e1e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003e22:	432c      	orrs	r4, r5
 8003e24:	611c      	str	r4, [r3, #16]
    }

    if (dma == 1U)
 8003e26:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003e28:	bf04      	itt	eq
 8003e2a:	68ca      	ldreq	r2, [r1, #12]
 8003e2c:	615a      	streq	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8003e2e:	78ca      	ldrb	r2, [r1, #3]
 8003e30:	2a01      	cmp	r2, #1
 8003e32:	d04c      	beq.n	8003ece <USB_EPStartXfer+0xfa>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003e3a:	601a      	str	r2, [r3, #0]
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 

    if (ep->xfer_len == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e42:	688c      	ldr	r4, [r1, #8]
 8003e44:	691d      	ldr	r5, [r3, #16]
 8003e46:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003e4a:	432c      	orrs	r4, r5
 8003e4c:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003e4e:	691c      	ldr	r4, [r3, #16]
 8003e50:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003e54:	611c      	str	r4, [r3, #16]
 8003e56:	e7e6      	b.n	8003e26 <USB_EPStartXfer+0x52>
  
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e58:	694d      	ldr	r5, [r1, #20]
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003e5a:	780e      	ldrb	r6, [r1, #0]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e5c:	2d00      	cmp	r5, #0
 8003e5e:	d042      	beq.n	8003ee6 <USB_EPStartXfer+0x112>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e60:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8003e64:	eb03 1346 	add.w	r3, r3, r6, lsl #5
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003e68:	f8d1 8008 	ldr.w	r8, [r1, #8]
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e6c:	f8d3 c010 	ldr.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003e70:	4f46      	ldr	r7, [pc, #280]	; (8003f8c <USB_EPStartXfer+0x1b8>)
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e72:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8003e76:	ea4f 4ccc 	mov.w	ip, ip, lsl #19
 8003e7a:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003e7e:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8003e82:	f02c 5cff 	bic.w	ip, ip, #534773760	; 0x1fe00000
 8003e86:	f42c 1cc0 	bic.w	ip, ip, #1572864	; 0x180000
 8003e8a:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003e8e:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8003e92:	eb05 0e08 	add.w	lr, r5, r8
 8003e96:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8003e9a:	fbbe fef8 	udiv	lr, lr, r8
 8003e9e:	ea07 47ce 	and.w	r7, r7, lr, lsl #19
 8003ea2:	ea47 070c 	orr.w	r7, r7, ip
 8003ea6:	611f      	str	r7, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003ea8:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8003eac:	f3c5 0712 	ubfx	r7, r5, #0, #19
 8003eb0:	ea47 070e 	orr.w	r7, r7, lr
 8003eb4:	611f      	str	r7, [r3, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8003eb6:	78cf      	ldrb	r7, [r1, #3]
 8003eb8:	2f01      	cmp	r7, #1
 8003eba:	d056      	beq.n	8003f6a <USB_EPStartXfer+0x196>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8003ebc:	2a01      	cmp	r2, #1
 8003ebe:	d061      	beq.n	8003f84 <USB_EPStartXfer+0x1b0>
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003ec0:	40b4      	lsls	r4, r6
 8003ec2:	f8d0 6834 	ldr.w	r6, [r0, #2100]	; 0x834
 8003ec6:	4334      	orrs	r4, r6
 8003ec8:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8003ecc:	e7b2      	b.n	8003e34 <USB_EPStartXfer+0x60>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
    }
    
    if (ep->type == EP_TYPE_ISOC)
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003ece:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003ed2:	f412 7f80 	tst.w	r2, #256	; 0x100
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	bf0c      	ite	eq
 8003eda:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ede:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e7a6      	b.n	8003e34 <USB_EPStartXfer+0x60>
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003ee6:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8003eea:	eb03 1346 	add.w	r3, r3, r6, lsl #5
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8003eee:	2a01      	cmp	r2, #1
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003ef0:	691c      	ldr	r4, [r3, #16]
 8003ef2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003ef6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003efa:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003efc:	691c      	ldr	r4, [r3, #16]
 8003efe:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003f02:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003f04:	691c      	ldr	r4, [r3, #16]
 8003f06:	ea4f 44d4 	mov.w	r4, r4, lsr #19
 8003f0a:	ea4f 44c4 	mov.w	r4, r4, lsl #19
 8003f0e:	611c      	str	r4, [r3, #16]
 8003f10:	78cc      	ldrb	r4, [r1, #3]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8003f12:	d024      	beq.n	8003f5e <USB_EPStartXfer+0x18a>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8003f14:	2c01      	cmp	r4, #1
 8003f16:	d18d      	bne.n	8003e34 <USB_EPStartXfer+0x60>
      }
    }

    if (ep->type == EP_TYPE_ISOC)
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003f18:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003f1c:	f414 7f80 	tst.w	r4, #256	; 0x100
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f20:	681c      	ldr	r4, [r3, #0]
 8003f22:	bf0c      	ite	eq
 8003f24:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f28:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8003f2c:	601c      	str	r4, [r3, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f2e:	681c      	ldr	r4, [r3, #0]
 8003f30:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003f34:	601c      	str	r4, [r3, #0]
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	d180      	bne.n	8003e3c <USB_EPStartXfer+0x68>
  {
    count32b =  (len + 3U) / 4U;
 8003f3a:	b2ad      	uxth	r5, r5
 8003f3c:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++, src += 4U)
 8003f3e:	08ad      	lsrs	r5, r5, #2
 8003f40:	f43f af7c 	beq.w	8003e3c <USB_EPStartXfer+0x68>
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
    
    if (ep->type == EP_TYPE_ISOC)
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003f44:	68cb      	ldr	r3, [r1, #12]
 8003f46:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003f4a:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8003f4e:	eb00 3606 	add.w	r6, r0, r6, lsl #12
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f56:	6032      	str	r2, [r6, #0]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	d1fa      	bne.n	8003f52 <USB_EPStartXfer+0x17e>
 8003f5c:	e76e      	b.n	8003e3c <USB_EPStartXfer+0x68>
      }       
    }

    if (dma == 1U)
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f5e:	690f      	ldr	r7, [r1, #16]
 8003f60:	615f      	str	r7, [r3, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f62:	2c01      	cmp	r4, #1
 8003f64:	f47f af66 	bne.w	8003e34 <USB_EPStartXfer+0x60>
 8003f68:	e7d6      	b.n	8003f18 <USB_EPStartXfer+0x144>
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
      
      if (ep->type == EP_TYPE_ISOC)
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003f6a:	691c      	ldr	r4, [r3, #16]
 8003f6c:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8003f70:	611c      	str	r4, [r3, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003f72:	691c      	ldr	r4, [r3, #16]
      }       
    }

    if (dma == 1U)
 8003f74:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
      
      if (ep->type == EP_TYPE_ISOC)
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003f76:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8003f7a:	611c      	str	r4, [r3, #16]
      }       
    }

    if (dma == 1U)
 8003f7c:	d1cc      	bne.n	8003f18 <USB_EPStartXfer+0x144>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f7e:	690c      	ldr	r4, [r1, #16]
 8003f80:	615c      	str	r4, [r3, #20]
 8003f82:	e7c9      	b.n	8003f18 <USB_EPStartXfer+0x144>
 8003f84:	690a      	ldr	r2, [r1, #16]
 8003f86:	615a      	str	r2, [r3, #20]
 8003f88:	e754      	b.n	8003e34 <USB_EPStartXfer+0x60>
 8003f8a:	bf00      	nop
 8003f8c:	1ff80000 	.word	0x1ff80000

08003f90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f90:	b4f0      	push	{r4, r5, r6, r7}
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f92:	784b      	ldrb	r3, [r1, #1]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d027      	beq.n	8003fe8 <USB_EP0StartXfer+0x58>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003f98:	780b      	ldrb	r3, [r1, #0]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
      
    if (ep->xfer_len > 0U)
 8003f9a:	694c      	ldr	r4, [r1, #20]
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003f9c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003fa0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003fa4:	6903      	ldr	r3, [r0, #16]
 8003fa6:	0cdb      	lsrs	r3, r3, #19
 8003fa8:	04db      	lsls	r3, r3, #19
 8003faa:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003fac:	6903      	ldr	r3, [r0, #16]
 8003fae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fb6:	6103      	str	r3, [r0, #16]
      
    if (ep->xfer_len > 0U)
    {
      ep->xfer_len = ep->maxpacket;
 8003fb8:	688b      	ldr	r3, [r1, #8]
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
      
    if (ep->xfer_len > 0U)
 8003fba:	b99c      	cbnz	r4, 8003fe4 <USB_EP0StartXfer+0x54>
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003fbc:	6904      	ldr	r4, [r0, #16]
 8003fbe:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003fc2:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003fc4:	6904      	ldr	r4, [r0, #16]
 8003fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fca:	4323      	orrs	r3, r4
    

    if (dma == 1U)
 8003fcc:	2a01      	cmp	r2, #1
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003fce:	6103      	str	r3, [r0, #16]
    

    if (dma == 1U)
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fd0:	bf04      	itt	eq
 8003fd2:	68cb      	ldreq	r3, [r1, #12]
 8003fd4:	6143      	streq	r3, [r0, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003fd6:	6803      	ldr	r3, [r0, #0]
 8003fd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fdc:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003fde:	bcf0      	pop	{r4, r5, r6, r7}
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	4770      	bx	lr
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
      
    if (ep->xfer_len > 0U)
    {
      ep->xfer_len = ep->maxpacket;
 8003fe4:	614b      	str	r3, [r1, #20]
 8003fe6:	e7e9      	b.n	8003fbc <USB_EP0StartXfer+0x2c>
{
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fe8:	694c      	ldr	r4, [r1, #20]
 8003fea:	b374      	cbz	r4, 800404a <USB_EP0StartXfer+0xba>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fec:	780f      	ldrb	r7, [r1, #0]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      
      if(ep->xfer_len > ep->maxpacket)
 8003fee:	688e      	ldr	r6, [r1, #8]
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff0:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8003ff4:	eb03 1347 	add.w	r3, r3, r7, lsl #5
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      
      if(ep->xfer_len > ep->maxpacket)
 8003ff8:	42b4      	cmp	r4, r6
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ffa:	691d      	ldr	r5, [r3, #16]
 8003ffc:	ea4f 45d5 	mov.w	r5, r5, lsr #19
 8004000:	ea4f 45c5 	mov.w	r5, r5, lsl #19
 8004004:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004006:	691d      	ldr	r5, [r3, #16]
 8004008:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800400c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004010:	611d      	str	r5, [r3, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8004012:	d934      	bls.n	800407e <USB_EP0StartXfer+0xee>
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004014:	691c      	ldr	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      
      if(ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
 8004016:	614e      	str	r6, [r1, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004018:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800401c:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800401e:	691d      	ldr	r5, [r3, #16]
 8004020:	f3c6 0412 	ubfx	r4, r6, #0, #19
 8004024:	432c      	orrs	r4, r5
    
    }
    
    if (dma == 1)
 8004026:	2a01      	cmp	r2, #1
      if(ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004028:	611c      	str	r4, [r3, #16]
    
    }
    
    if (dma == 1)
 800402a:	d025      	beq.n	8004078 <USB_EP0StartXfer+0xe8>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800402c:	b136      	cbz	r6, 800403c <USB_EP0StartXfer+0xac>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 800402e:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 8004032:	2201      	movs	r2, #1
 8004034:	40ba      	lsls	r2, r7
 8004036:	430a      	orrs	r2, r1
 8004038:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
      }
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8004042:	2000      	movs	r0, #0
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
      }
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8004044:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8004046:	bcf0      	pop	{r4, r5, r6, r7}
 8004048:	4770      	bx	lr
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800404a:	780b      	ldrb	r3, [r1, #0]
 800404c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004050:	eb00 1343 	add.w	r3, r0, r3, lsl #5
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    if (dma == 1)
 8004054:	2a01      	cmp	r2, #1
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004056:	6918      	ldr	r0, [r3, #16]
 8004058:	f020 50ff 	bic.w	r0, r0, #534773760	; 0x1fe00000
 800405c:	f420 10c0 	bic.w	r0, r0, #1572864	; 0x180000
 8004060:	6118      	str	r0, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004062:	6918      	ldr	r0, [r3, #16]
 8004064:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8004068:	6118      	str	r0, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800406a:	6918      	ldr	r0, [r3, #16]
 800406c:	ea4f 40d0 	mov.w	r0, r0, lsr #19
 8004070:	ea4f 40c0 	mov.w	r0, r0, lsl #19
 8004074:	6118      	str	r0, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    if (dma == 1)
 8004076:	d1e1      	bne.n	800403c <USB_EP0StartXfer+0xac>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004078:	690a      	ldr	r2, [r1, #16]
 800407a:	615a      	str	r2, [r3, #20]
 800407c:	e7de      	b.n	800403c <USB_EP0StartXfer+0xac>
      
      if(ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800407e:	691d      	ldr	r5, [r3, #16]
 8004080:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004084:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004086:	691d      	ldr	r5, [r3, #16]
 8004088:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800408c:	432c      	orrs	r4, r5
    
    }
    
    if (dma == 1)
 800408e:	2a01      	cmp	r2, #1
      if(ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004090:	611c      	str	r4, [r3, #16]
    
    }
    
    if (dma == 1)
 8004092:	d1cc      	bne.n	800402e <USB_EP0StartXfer+0x9e>
 8004094:	e7f0      	b.n	8004078 <USB_EP0StartXfer+0xe8>
 8004096:	bf00      	nop

08004098 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004098:	b410      	push	{r4}
 800409a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 800409e:	b96c      	cbnz	r4, 80040bc <USB_WritePacket+0x24>
  {
    count32b =  (len + 3U) / 4U;
 80040a0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	d00a      	beq.n	80040bc <USB_WritePacket+0x24>
 80040a6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80040aa:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80040ae:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80040b2:	f851 3b04 	ldr.w	r3, [r1], #4
 80040b6:	6013      	str	r3, [r2, #0]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 80040b8:	4281      	cmp	r1, r0
 80040ba:	d1fa      	bne.n	80040b2 <USB_WritePacket+0x1a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
    }
  }
  return HAL_OK;
}
 80040bc:	2000      	movs	r0, #0
 80040be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 80040c4:	3203      	adds	r2, #3
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80040c6:	0892      	lsrs	r2, r2, #2
 80040c8:	d008      	beq.n	80040dc <USB_ReadPacket+0x18>
 80040ca:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80040ce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80040d2:	6803      	ldr	r3, [r0, #0]
 80040d4:	f841 3b04 	str.w	r3, [r1], #4
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80040d8:	428a      	cmp	r2, r1
 80040da:	d1fa      	bne.n	80040d2 <USB_ReadPacket+0xe>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
    
  }
  return ((void *)dest);
}
 80040dc:	4608      	mov	r0, r1
 80040de:	4770      	bx	lr

080040e0 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 80040e0:	784b      	ldrb	r3, [r1, #1]
 80040e2:	2b01      	cmp	r3, #1
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 80040e4:	780b      	ldrb	r3, [r1, #0]
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 80040e6:	d010      	beq.n	800410a <USB_EPSetStall+0x2a>
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 80040e8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80040ec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80040f0:	6803      	ldr	r3, [r0, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	db03      	blt.n	80040fe <USB_EPSetStall+0x1e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80040f6:	6803      	ldr	r3, [r0, #0]
 80040f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040fc:	6003      	str	r3, [r0, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040fe:	6803      	ldr	r3, [r0, #0]
 8004100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004104:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8004106:	2000      	movs	r0, #0
 8004108:	4770      	bx	lr
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 800410a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800410e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004112:	6803      	ldr	r3, [r0, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	daee      	bge.n	80040f6 <USB_EPSetStall+0x16>
 8004118:	e7f1      	b.n	80040fe <USB_EPSetStall+0x1e>
 800411a:	bf00      	nop

0800411c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800411c:	784b      	ldrb	r3, [r1, #1]
 800411e:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004120:	780b      	ldrb	r3, [r1, #0]
 8004122:	bf0c      	ite	eq
 8004124:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004128:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 800412c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004130:	6803      	ldr	r3, [r0, #0]
 8004132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004136:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8004138:	78cb      	ldrb	r3, [r1, #3]
 800413a:	3b02      	subs	r3, #2
 800413c:	2b01      	cmp	r3, #1
 800413e:	d803      	bhi.n	8004148 <USB_EPClearStall+0x2c>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004140:	6803      	ldr	r3, [r0, #0]
 8004142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004146:	6003      	str	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8004148:	2000      	movs	r0, #0
 800414a:	4770      	bx	lr

0800414c <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800414c:	b410      	push	{r4}
 800414e:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8004152:	f500 642e 	add.w	r4, r0, #2784	; 0xae0
  uint32_t i;
  
  /* Clear Pending interrupt */
  for (i = 0U; i < 15U ; i++)
  {
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8004156:	22ff      	movs	r2, #255	; 0xff
 8004158:	609a      	str	r2, [r3, #8]
 800415a:	f503 7100 	add.w	r1, r3, #512	; 0x200
 800415e:	3320      	adds	r3, #32
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t i;
  
  /* Clear Pending interrupt */
  for (i = 0U; i < 15U ; i++)
 8004160:	42a3      	cmp	r3, r4
  {
    USBx_INEP(i)->DIEPINT  = 0xFFU;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8004162:	608a      	str	r2, [r1, #8]
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t i;
  
  /* Clear Pending interrupt */
  for (i = 0U; i < 15U ; i++)
 8004164:	d1f8      	bne.n	8004158 <USB_StopDevice+0xc>
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8004166:	2100      	movs	r1, #0
  for (i = 0U; i < 15U ; i++)
  {
    USBx_INEP(i)->DIEPINT  = 0xFFU;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8004168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800416c:	2410      	movs	r4, #16
  for (i = 0U; i < 15U ; i++)
  {
    USBx_INEP(i)->DIEPINT  = 0xFFU;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800416e:	f8c0 3818 	str.w	r3, [r0, #2072]	; 0x818
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8004172:	f8c0 1810 	str.w	r1, [r0, #2064]	; 0x810
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <USB_StopDevice+0x60>)
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
  USBx_DEVICE->DOEPMSK  = 0U;
 8004178:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0U;
 800417c:	f8c0 181c 	str.w	r1, [r0, #2076]	; 0x81c
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004180:	6104      	str	r4, [r0, #16]
 8004182:	e001      	b.n	8004188 <USB_StopDevice+0x3c>
  
  do
  {
    if (++count > 200000U)
 8004184:	3b01      	subs	r3, #1
 8004186:	d002      	beq.n	800418e <USB_StopDevice+0x42>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004188:	6902      	ldr	r2, [r0, #16]
 800418a:	06d1      	lsls	r1, r2, #27
 800418c:	d4fa      	bmi.n	8004184 <USB_StopDevice+0x38>
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0U;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800418e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004192:	6103      	str	r3, [r0, #16]
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <USB_StopDevice+0x60>)
 8004196:	e001      	b.n	800419c <USB_StopDevice+0x50>
 
  do
  {
    if (++count > 200000U)
 8004198:	3b01      	subs	r3, #1
 800419a:	d002      	beq.n	80041a2 <USB_StopDevice+0x56>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800419c:	6902      	ldr	r2, [r0, #16]
 800419e:	0692      	lsls	r2, r2, #26
 80041a0:	d4fa      	bmi.n	8004198 <USB_StopDevice+0x4c>
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
  USB_FlushTxFifo(USBx ,  0x10U);  
  
  return HAL_OK;
}
 80041a2:	2000      	movs	r0, #0
 80041a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	00030d40 	.word	0x00030d40

080041b0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80041b0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80041b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041b8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80041bc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80041c0:	0109      	lsls	r1, r1, #4
 80041c2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80041c6:	4319      	orrs	r1, r3
 80041c8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80041cc:	2000      	movs	r0, #0
 80041ce:	4770      	bx	lr

080041d0 <USB_DevConnect>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80041d0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80041d4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80041d6:	6853      	ldr	r3, [r2, #4]
 80041d8:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 80041dc:	2003      	movs	r0, #3
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80041de:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80041e0:	f7fc f830 	bl	8000244 <HAL_Delay>
  
  return HAL_OK;  
}
 80041e4:	2000      	movs	r0, #0
 80041e6:	bd08      	pop	{r3, pc}

080041e8 <USB_DevDisconnect>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80041e8:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80041ec:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80041ee:	6853      	ldr	r3, [r2, #4]
 80041f0:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 80041f4:	2003      	movs	r0, #3
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80041f6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80041f8:	f7fc f824 	bl	8000244 <HAL_Delay>
  
  return HAL_OK;  
}
 80041fc:	2000      	movs	r0, #0
 80041fe:	bd08      	pop	{r3, pc}

08004200 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8004200:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8004202:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8004204:	4010      	ands	r0, r2
 8004206:	4770      	bx	lr

08004208 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8004208:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800420c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8004210:	69c0      	ldr	r0, [r0, #28]
 8004212:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8004214:	0c00      	lsrs	r0, r0, #16
 8004216:	4770      	bx	lr

08004218 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8004218:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800421c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8004220:	69c0      	ldr	r0, [r0, #28]
 8004222:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8004224:	b280      	uxth	r0, r0
 8004226:	4770      	bx	lr

08004228 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8004228:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800422c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8004230:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8004234:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8004236:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8004238:	4010      	ands	r0, r2
 800423a:	4770      	bx	lr

0800423c <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800423c:	b410      	push	{r4}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 800423e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004242:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004246:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800424a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
{
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800424e:	40cb      	lsrs	r3, r1
 8004250:	01db      	lsls	r3, r3, #7
 8004252:	b2db      	uxtb	r3, r3
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004254:	6880      	ldr	r0, [r0, #8]
{
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8004256:	4323      	orrs	r3, r4
  v = USBx_INEP(epnum)->DIEPINT & msk;
  return v;
}
 8004258:	4018      	ands	r0, r3
 800425a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800425e:	4770      	bx	lr

08004260 <USB_ClearInterrupts>:
  * @param  interrupt : interrupt flag
  * @retval None
  */
void  USB_ClearInterrupts (USB_OTG_GlobalTypeDef *USBx, uint32_t interrupt)
{
  USBx->GINTSTS |= interrupt; 
 8004260:	6943      	ldr	r3, [r0, #20]
 8004262:	4319      	orrs	r1, r3
 8004264:	6141      	str	r1, [r0, #20]
 8004266:	4770      	bx	lr

08004268 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8004268:	6940      	ldr	r0, [r0, #20]
}
 800426a:	f000 0001 	and.w	r0, r0, #1
 800426e:	4770      	bx	lr

08004270 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004270:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004274:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004278:	f023 0307 	bic.w	r3, r3, #7
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800427c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004280:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004284:	6893      	ldr	r3, [r2, #8]
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	2b04      	cmp	r3, #4
 800428c:	d105      	bne.n	800429a <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800428e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004292:	f043 0303 	orr.w	r3, r3, #3
 8004296:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800429a:	6853      	ldr	r3, [r2, #4]
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
}
 80042a2:	2000      	movs	r0, #0
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80042a8:	b410      	push	{r4}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042aa:	2400      	movs	r4, #0
 80042ac:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 80042b0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80042b4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80042b8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042bc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80042c0:	f044 0418 	orr.w	r4, r4, #24
 80042c4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80042c8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 80042cc:	2901      	cmp	r1, #1
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80042ce:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80042d2:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 80042d6:	d105      	bne.n	80042e4 <USB_EP0_OutStart+0x3c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80042d8:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80042dc:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80042e0:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 80042e4:	2000      	movs	r0, #0
 80042e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <USB_CoreReset+0x30>)
 80042ee:	e001      	b.n	80042f4 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80042f0:	3b01      	subs	r3, #1
 80042f2:	d010      	beq.n	8004316 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042f4:	6902      	ldr	r2, [r0, #16]
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	dafa      	bge.n	80042f0 <USB_CoreReset+0x4>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042fa:	6903      	ldr	r3, [r0, #16]
 80042fc:	4a07      	ldr	r2, [pc, #28]	; (800431c <USB_CoreReset+0x30>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6103      	str	r3, [r0, #16]
 8004304:	e001      	b.n	800430a <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 8004306:	3a01      	subs	r2, #1
 8004308:	d005      	beq.n	8004316 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800430a:	6903      	ldr	r3, [r0, #16]
 800430c:	f013 0301 	ands.w	r3, r3, #1
 8004310:	d1f9      	bne.n	8004306 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8004312:	4618      	mov	r0, r3
}
 8004314:	4770      	bx	lr
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8004316:	2003      	movs	r0, #3
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	00030d40 	.word	0x00030d40

08004320 <USB_HostInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004320:	b084      	sub	sp, #16
 8004322:	b530      	push	{r4, r5, lr}
 8004324:	4604      	mov	r4, r0
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004326:	2000      	movs	r0, #0
 8004328:	f8c4 0e00 	str.w	r0, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 800432c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800432e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004332:	63a0      	str	r0, [r4, #56]	; 0x38
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004334:	b083      	sub	sp, #12
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 8004336:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004338:	ad07      	add	r5, sp, #28
 800433a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 800433e:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 8004342:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8004346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004348:	9908      	ldr	r1, [sp, #32]
    defined(STM32F412Rx) || defined(STM32F412Cx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800434a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800434e:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8004350:	2a03      	cmp	r2, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8004352:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8004356:	d057      	beq.n	8004408 <USB_HostInit+0xe8>
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0U;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8004360:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	4b30      	ldr	r3, [pc, #192]	; (8004428 <USB_HostInit+0x108>)
 8004368:	e001      	b.n	800436e <USB_HostInit+0x4e>
 
  do
  {
    if (++count > 200000U)
 800436a:	3b01      	subs	r3, #1
 800436c:	d002      	beq.n	8004374 <USB_HostInit+0x54>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800436e:	6922      	ldr	r2, [r4, #16]
 8004370:	0690      	lsls	r0, r2, #26
 8004372:	d4fa      	bmi.n	800436a <USB_HostInit+0x4a>
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004374:	2310      	movs	r3, #16
 8004376:	6123      	str	r3, [r4, #16]
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <USB_HostInit+0x108>)
 800437a:	e001      	b.n	8004380 <USB_HostInit+0x60>
  
  do
  {
    if (++count > 200000U)
 800437c:	3b01      	subs	r3, #1
 800437e:	d002      	beq.n	8004386 <USB_HostInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004380:	6922      	ldr	r2, [r4, #16]
 8004382:	06d2      	lsls	r2, r2, #27
 8004384:	d4fa      	bmi.n	800437c <USB_HostInit+0x5c>
  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004386:	b161      	cbz	r1, 80043a2 <USB_HostInit+0x82>
 8004388:	2200      	movs	r2, #0
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
 800438a:	4615      	mov	r5, r2
 800438c:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
  USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004394:	3201      	adds	r2, #1
 8004396:	428a      	cmp	r2, r1
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004398:	6098      	str	r0, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800439a:	60dd      	str	r5, [r3, #12]
 800439c:	f103 0320 	add.w	r3, r3, #32
  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80043a0:	d1f8      	bne.n	8004394 <USB_HostInit+0x74>
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80043a2:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80043a6:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80043a8:	9b01      	ldr	r3, [sp, #4]
 80043aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80043ae:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80043b0:	9b01      	ldr	r3, [sp, #4]
 80043b2:	04db      	lsls	r3, r3, #19
 80043b4:	d404      	bmi.n	80043c0 <USB_HostInit+0xa0>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80043b6:	9b01      	ldr	r3, [sp, #4]
 80043b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043bc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
  
  HAL_Delay(200U);
 80043c0:	20c8      	movs	r0, #200	; 0xc8
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80043c2:	9b01      	ldr	r3, [sp, #4]
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
  
  HAL_Delay(200U);
 80043c4:	f7fb ff3e 	bl	8000244 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043c8:	2200      	movs	r2, #0
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  
  if(USBx == USB_OTG_FS)
 80043ce:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USB_DriveVbus(USBx, 1U);
  
  HAL_Delay(200U);
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043d2:	61a2      	str	r2, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80043d4:	6163      	str	r3, [r4, #20]
  
  if(USBx == USB_OTG_FS)
 80043d6:	d01f      	beq.n	8004418 <USB_HostInit+0xf8>
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x200U; 
 80043d8:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <USB_HostInit+0x10c>)
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <USB_HostInit+0x110>)
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x200U; 
 80043e0:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 80043e2:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80043e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80043e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ea:	b91b      	cbnz	r3, 80043f4 <USB_HostInit+0xd4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80043ec:	69a3      	ldr	r3, [r4, #24]
 80043ee:	f043 0310 	orr.w	r3, r3, #16
 80043f2:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80043f4:	69a2      	ldr	r2, [r4, #24]
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <USB_HostInit+0x114>)
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 80043f8:	2000      	movs	r0, #0
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 80043fe:	b003      	add	sp, #12
 8004400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004404:	b004      	add	sp, #16
 8004406:	4770      	bx	lr
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8004408:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800440c:	d0a4      	beq.n	8004358 <USB_HostInit+0x38>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800440e:	f043 0304 	orr.w	r3, r3, #4
 8004412:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8004416:	e7a3      	b.n	8004360 <USB_HostInit+0x40>
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x80U; 
 8004418:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 800441a:	4a07      	ldr	r2, [pc, #28]	; (8004438 <USB_HostInit+0x118>)
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <USB_HostInit+0x11c>)
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x80U; 
 800441e:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8004420:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004422:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004426:	e7df      	b.n	80043e8 <USB_HostInit+0xc8>
 8004428:	00030d40 	.word	0x00030d40
 800442c:	01000200 	.word	0x01000200
 8004430:	00e00300 	.word	0x00e00300
 8004434:	a3200008 	.word	0xa3200008
 8004438:	00600080 	.word	0x00600080
 800443c:	004000e0 	.word	0x004000e0

08004440 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004440:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004444:	f023 0303 	bic.w	r3, r3, #3
 8004448:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800444c:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004450:	f001 0303 	and.w	r3, r1, #3
 8004454:	4313      	orrs	r3, r2
  
  if (freq ==  HCFG_48_MHZ)
 8004456:	2901      	cmp	r1, #1
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8004458:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800445c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
  
  if (freq ==  HCFG_48_MHZ)
 8004460:	d006      	beq.n	8004470 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = (uint32_t)48000U;
  }
  else if (freq ==  HCFG_6_MHZ)
 8004462:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = (uint32_t)6000U;
 8004464:	bf04      	itt	eq
 8004466:	f241 7370 	movweq	r3, #6000	; 0x1770
 800446a:	6043      	streq	r3, [r0, #4]
  } 
  return HAL_OK;  
}
 800446c:	2000      	movs	r0, #0
 800446e:	4770      	bx	lr
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
  
  if (freq ==  HCFG_48_MHZ)
  {
    USBx_HOST->HFIR = (uint32_t)48000U;
 8004470:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004474:	6043      	str	r3, [r0, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = (uint32_t)6000U;
  } 
  return HAL_OK;  
}
 8004476:	2000      	movs	r0, #0
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop

0800447c <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800447c:	b510      	push	{r4, lr}
 800447e:	4604      	mov	r4, r0
 8004480:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004482:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8004486:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8004488:	9b01      	ldr	r3, [sp, #4]
 800448a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800448e:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8004490:	9b01      	ldr	r3, [sp, #4]
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 800449a:	200a      	movs	r0, #10
 800449c:	f7fb fed2 	bl	8000244 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80044a0:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 80044a2:	2000      	movs	r0, #0
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
  HAL_Delay (10U);                                /* See Note #1 */
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80044a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  return HAL_OK;
}
 80044ac:	b002      	add	sp, #8
 80044ae:	bd10      	pop	{r4, pc}

080044b0 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80044b0:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80044b2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80044b6:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80044b8:	9b01      	ldr	r3, [sp, #4]
 80044ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044be:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80044c0:	9b01      	ldr	r3, [sp, #4]
 80044c2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80044c6:	9b01      	ldr	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80044c8:	d101      	bne.n	80044ce <USB_DriveVbus+0x1e>
 80044ca:	2901      	cmp	r1, #1
 80044cc:	d00a      	beq.n	80044e4 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80044ce:	04db      	lsls	r3, r3, #19
 80044d0:	d505      	bpl.n	80044de <USB_DriveVbus+0x2e>
 80044d2:	b921      	cbnz	r1, 80044de <USB_DriveVbus+0x2e>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 80044d4:	9b01      	ldr	r3, [sp, #4]
 80044d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044da:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 80044de:	2000      	movs	r0, #0
 80044e0:	b002      	add	sp, #8
 80044e2:	4770      	bx	lr
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80044e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044e8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80044ec:	9b01      	ldr	r3, [sp, #4]
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
  }
  return HAL_OK; 
}
 80044ee:	2000      	movs	r0, #0
 80044f0:	b002      	add	sp, #8
 80044f2:	4770      	bx	lr

080044f4 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 80044f4:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 80044f6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80044fa:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 80044fc:	9801      	ldr	r0, [sp, #4]
}
 80044fe:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8004502:	b002      	add	sp, #8
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <USB_GetCurrentFrame>:
  * @param  USBx : Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004508:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800450c:	6880      	ldr	r0, [r0, #8]
}
 800450e:	b280      	uxth	r0, r0
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop

08004514 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8004518:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 800451c:	eb04 1441 	add.w	r4, r4, r1, lsl #5
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004520:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8004524:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8004528:	f8bd 6020 	ldrh.w	r6, [sp, #32]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800452c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004530:	f8c4 e008 	str.w	lr, [r4, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8004534:	2d03      	cmp	r5, #3
 8004536:	d865      	bhi.n	8004604 <USB_HC_Init+0xf0>
 8004538:	e8df f005 	tbb	[pc, r5]
 800453c:	02514151 	.word	0x02514151
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8004540:	fa4f fc82 	sxtb.w	ip, r2
    }
    break;
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004544:	f240 6e9d 	movw	lr, #1693	; 0x69d
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8004548:	f1bc 0f00 	cmp.w	ip, #0
    }
    break;
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800454c:	f8c4 e00c 	str.w	lr, [r4, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8004550:	db5b      	blt.n	800460a <USB_HC_Init+0xf6>
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004552:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8004554:	02d2      	lsls	r2, r2, #11
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004556:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 800455a:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800455e:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004562:	431a      	orrs	r2, r3
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004564:	2301      	movs	r3, #1
 8004566:	fa03 f101 	lsl.w	r1, r3, r1
 800456a:	ea41 0108 	orr.w	r1, r1, r8
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 800456e:	f3c6 060a 	ubfx	r6, r6, #0, #11
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004572:	04ab      	lsls	r3, r5, #18
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004574:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8004578:	f1bc 0f00 	cmp.w	ip, #0
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800457c:	ea42 0206 	orr.w	r2, r2, r6
 8004580:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8004584:	bfac      	ite	ge
 8004586:	2100      	movge	r1, #0
 8004588:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800458c:	4313      	orrs	r3, r2
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 800458e:	2f02      	cmp	r7, #2
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004590:	6982      	ldr	r2, [r0, #24]
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004592:	ea43 0301 	orr.w	r3, r3, r1
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8004596:	bf14      	ite	ne
 8004598:	2100      	movne	r1, #0
 800459a:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800459e:	430b      	orrs	r3, r1
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80045a0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
    
  if (ep_type == EP_TYPE_INTR)
 80045a4:	2d03      	cmp	r5, #3
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80045a6:	6182      	str	r2, [r0, #24]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80045a8:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80045ac:	6023      	str	r3, [r4, #0]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
    
  if (ep_type == EP_TYPE_INTR)
 80045ae:	d103      	bne.n	80045b8 <USB_HC_Init+0xa4>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045b6:	6023      	str	r3, [r4, #0]
  }

  return HAL_OK; 
}
 80045b8:	2000      	movs	r0, #0
 80045ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 80045be:	fa4f fc82 	sxtb.w	ip, r2
    }
    
    break;
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80045c2:	f240 2e25 	movw	lr, #549	; 0x225
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 80045c6:	f1bc 0f00 	cmp.w	ip, #0
    }
    
    break;
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80045ca:	f8c4 e00c 	str.w	lr, [r4, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 80045ce:	dac0      	bge.n	8004552 <USB_HC_Init+0x3e>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 80045d0:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80045d4:	f44e 7ec0 	orr.w	lr, lr, #384	; 0x180
 80045d8:	f8c4 e00c 	str.w	lr, [r4, #12]
 80045dc:	e7b9      	b.n	8004552 <USB_HC_Init+0x3e>
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 80045de:	fa4f fc82 	sxtb.w	ip, r2
  switch (ep_type) 
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80045e2:	f240 4e9d 	movw	lr, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 80045e6:	f1bc 0f00 	cmp.w	ip, #0
  switch (ep_type) 
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80045ea:	f8c4 e00c 	str.w	lr, [r4, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 80045ee:	db0c      	blt.n	800460a <USB_HC_Init+0xf6>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
    } 
    else 
    {
      if(USBx != USB_OTG_FS)
 80045f0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80045f4:	d0ad      	beq.n	8004552 <USB_HC_Init+0x3e>
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80045f6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80045fa:	f04e 0e60 	orr.w	lr, lr, #96	; 0x60
 80045fe:	f8c4 e00c 	str.w	lr, [r4, #12]
 8004602:	e7a6      	b.n	8004552 <USB_HC_Init+0x3e>
 8004604:	fa4f fc82 	sxtb.w	ip, r2
 8004608:	e7a3      	b.n	8004552 <USB_HC_Init+0x3e>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800460a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800460e:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 8004612:	f8c4 e00c 	str.w	lr, [r4, #12]
 8004616:	e79c      	b.n	8004552 <USB_HC_Init+0x3e>

08004618 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	4613      	mov	r3, r2
 8004624:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0U; 
 8004626:	2300      	movs	r3, #0
 8004628:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0U;   
 800462a:	2300      	movs	r3, #0
 800462c:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256U;
 8004632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004636:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004642:	d02b      	beq.n	800469c <USB_HC_StartXfer+0x84>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	791b      	ldrb	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d127      	bne.n	800469c <USB_HC_StartXfer+0x84>
  {
    if((dma == 0U) && (hc->do_ping == 1U))
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <USB_HC_StartXfer+0x52>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	795b      	ldrb	r3, [r3, #5]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	4619      	mov	r1, r3
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fa11 	bl	8004a88 <USB_DoPing>
      return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e10d      	b.n	8004886 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1U)
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d115      	bne.n	800469c <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467e:	4619      	mov	r1, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004694:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2200      	movs	r2, #0
 800469a:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d019      	beq.n	80046d8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	8912      	ldrh	r2, [r2, #8]
 80046ac:	4413      	add	r3, r2
 80046ae:	3b01      	subs	r3, #1
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	8912      	ldrh	r2, [r2, #8]
 80046b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046b8:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80046ba:	8bfa      	ldrh	r2, [r7, #30]
 80046bc:	8b3b      	ldrh	r3, [r7, #24]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d90c      	bls.n	80046dc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80046c2:	8b3b      	ldrh	r3, [r7, #24]
 80046c4:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80046c6:	8bfb      	ldrh	r3, [r7, #30]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	8912      	ldrh	r2, [r2, #8]
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e001      	b.n	80046dc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80046d8:	2301      	movs	r3, #1
 80046da:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	78db      	ldrb	r3, [r3, #3]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80046e4:	8bfb      	ldrh	r3, [r7, #30]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	8912      	ldrh	r2, [r2, #8]
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004702:	4619      	mov	r1, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800470c:	8bfb      	ldrh	r3, [r7, #30]
 800470e:	04db      	lsls	r3, r3, #19
 8004710:	4618      	mov	r0, r3
 8004712:	4b5f      	ldr	r3, [pc, #380]	; (8004890 <USB_HC_StartXfer+0x278>)
 8004714:	4003      	ands	r3, r0
  {
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004716:	431a      	orrs	r2, r3
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	7a9b      	ldrb	r3, [r3, #10]
 800471c:	075b      	lsls	r3, r3, #29
 800471e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004722:	4313      	orrs	r3, r2
  {
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004724:	610b      	str	r3, [r1, #16]
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
  
  if (dma)
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	461a      	mov	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01U) ? 0U : 1U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	bf0c      	ite	eq
 8004752:	2301      	moveq	r3, #1
 8004754:	2300      	movne	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004768:	4619      	mov	r1, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800477e:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29U);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478e:	4619      	mov	r1, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	7f7a      	ldrb	r2, [r7, #29]
 80047a2:	0752      	lsls	r2, r2, #29
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047c0:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047c8:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	461a      	mov	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6013      	str	r3, [r2, #0]
  
  if (dma == 0U) /* Slave mode */
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d14f      	bne.n	8004884 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	78db      	ldrb	r3, [r3, #3]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d14b      	bne.n	8004884 <USB_HC_StartXfer+0x26c>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d047      	beq.n	8004884 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	79db      	ldrb	r3, [r3, #7]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d831      	bhi.n	8004860 <USB_HC_StartXfer+0x248>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <USB_HC_StartXfer+0x1ec>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004815 	.word	0x08004815
 8004808:	08004839 	.word	0x08004839
 800480c:	08004815 	.word	0x08004815
 8004810:	08004839 	.word	0x08004839
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3U) / 4U;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	3303      	adds	r3, #3
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800481e:	8b7a      	ldrh	r2, [r7, #26]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	b29b      	uxth	r3, r3
 8004826:	429a      	cmp	r2, r3
 8004828:	d91c      	bls.n	8004864 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]
        }
        break;
 8004836:	e015      	b.n	8004864 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3U) / 4U;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	3303      	adds	r3, #3
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004842:	8b7a      	ldrh	r2, [r7, #26]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	b29b      	uxth	r3, r3
 800484e:	429a      	cmp	r2, r3
 8004850:	d90a      	bls.n	8004868 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	619a      	str	r2, [r3, #24]
        }
        break;
 800485e:	e003      	b.n	8004868 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8004860:	bf00      	nop
 8004862:	e002      	b.n	800486a <USB_HC_StartXfer+0x252>
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
        }
        break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <USB_HC_StartXfer+0x252>
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
        }
        break;
 8004868:	bf00      	nop
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	68d9      	ldr	r1, [r3, #12]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	785a      	ldrb	r2, [r3, #1]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	b298      	uxth	r0, r3
 8004878:	2300      	movs	r3, #0
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4603      	mov	r3, r0
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fc0a 	bl	8004098 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	1ff80000 	.word	0x1ff80000

08004894 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	b29b      	uxth	r3, r3
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	0c9b      	lsrs	r3, r3, #18
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00b      	beq.n	80048f4 <USB_HC_Halt+0x40>
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 80048ea:	0c9b      	lsrs	r3, r3, #18
 80048ec:	f003 0303 	and.w	r3, r3, #3
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
  uint32_t count = 0U;
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d160      	bne.n	80049b6 <USB_HC_Halt+0x102>
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	4619      	mov	r1, r3
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004914:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d135      	bne.n	800498e <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	4619      	mov	r1, r3
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004942:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004950:	4619      	mov	r1, r3
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004964:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3301      	adds	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004972:	d81e      	bhi.n	80049b2 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800498a:	d0ec      	beq.n	8004966 <USB_HC_Halt+0xb2>
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800498c:	e074      	b.n	8004a78 <USB_HC_Halt+0x1c4>
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	4619      	mov	r1, r3
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049ae:	600b      	str	r3, [r1, #0]
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80049b0:	e062      	b.n	8004a78 <USB_HC_Halt+0x1c4>
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
      do 
      {
        if (++count > 1000U) 
        {
          break;
 80049b2:	bf00      	nop
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80049b4:	e060      	b.n	8004a78 <USB_HC_Halt+0x1c4>
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	4619      	mov	r1, r3
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049d6:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d135      	bne.n	8004a52 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f2:	4619      	mov	r1, r3
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a06:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	4619      	mov	r1, r3
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a28:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a36:	d81e      	bhi.n	8004a76 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a4e:	d0ec      	beq.n	8004a2a <USB_HC_Halt+0x176>
 8004a50:	e012      	b.n	8004a78 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5e:	4619      	mov	r1, r3
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a72:	600b      	str	r3, [r1, #0]
 8004a74:	e000      	b.n	8004a78 <USB_HC_Halt+0x1c4>
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
      do 
      {
        if (++count > 1000U) 
        {
          break;
 8004a76:	bf00      	nop
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
    }
  }
  
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop

08004a88 <USB_DoPing>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	04db      	lsls	r3, r3, #19
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4b12      	ldr	r3, [pc, #72]	; (8004afc <USB_DoPing+0x74>)
 8004ab2:	400b      	ands	r3, r1
 8004ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ab8:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ad0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ad8:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	1ff80000 	.word	0x1ff80000

08004b00 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fe ff3b 	bl	8003988 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8004b12:	2110      	movs	r1, #16
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff f813 	bl	8003b40 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff f822 	bl	8003b64 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	75fb      	strb	r3, [r7, #23]
 8004b24:	e01f      	b.n	8004b66 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b3c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b44:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b4c:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6013      	str	r3, [r2, #0]
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
  USB_FlushRxFifo(USBx);
  
  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
 8004b62:	3301      	adds	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	2b0f      	cmp	r3, #15
 8004b6a:	d9dc      	bls.n	8004b26 <USB_StopHost+0x26>
    value &= ~USB_OTG_HCCHAR_EPDIR;
    USBx_HC(i)->HCCHAR = value;
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0U; i <= 15U; i++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]
 8004b70:	e034      	b.n	8004bdc <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b88:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b90:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b98:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb8:	d80c      	bhi.n	8004bd4 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bd0:	d0ec      	beq.n	8004bac <USB_StopHost+0xac>
 8004bd2:	e000      	b.n	8004bd6 <USB_StopHost+0xd6>
    USBx_HC(i)->HCCHAR = value;
    do 
    {
      if (++count > 1000U) 
      {
        break;
 8004bd4:	bf00      	nop
    value &= ~USB_OTG_HCCHAR_EPDIR;
    USBx_HC(i)->HCCHAR = value;
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0U; i <= 15U; i++)
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	75fb      	strb	r3, [r7, #23]
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	2b0f      	cmp	r3, #15
 8004be0:	d9c7      	bls.n	8004b72 <USB_StopHost+0x72>
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be8:	461a      	mov	r2, r3
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bf6:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fe febd 	bl	8003978 <USB_EnableGlobalInt>
  return HAL_OK;  
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004c0c:	f7fb fb14 	bl	8000238 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c10:	2c00      	cmp	r4, #0
 8004c12:	d06f      	beq.n	8004cf4 <HAL_DMA_Init+0xec>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c14:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c16:	6823      	ldr	r3, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c18:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c1c:	681a      	ldr	r2, [r3, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c1e:	2100      	movs	r1, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c20:	f022 0201 	bic.w	r2, r2, #1
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c24:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8004c28:	4605      	mov	r5, r0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c2c:	e005      	b.n	8004c3a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c2e:	f7fb fb03 	bl	8000238 <HAL_GetTick>
 8004c32:	1b40      	subs	r0, r0, r5
 8004c34:	2805      	cmp	r0, #5
 8004c36:	d83b      	bhi.n	8004cb0 <HAL_DMA_Init+0xa8>
 8004c38:	6823      	ldr	r3, [r4, #0]
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	07d1      	lsls	r1, r2, #31
 8004c3e:	d4f6      	bmi.n	8004c2e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c40:	68a7      	ldr	r7, [r4, #8]
 8004c42:	6862      	ldr	r2, [r4, #4]
 8004c44:	68e6      	ldr	r6, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c46:	6925      	ldr	r5, [r4, #16]
 8004c48:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4a:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c4c:	433a      	orrs	r2, r7
 8004c4e:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c50:	432a      	orrs	r2, r5
 8004c52:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c54:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c56:	6a25      	ldr	r5, [r4, #32]
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c58:	681f      	ldr	r7, [r3, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c5a:	4e34      	ldr	r6, [pc, #208]	; (8004d2c <HAL_DMA_Init+0x124>)
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c5c:	4302      	orrs	r2, r0
 8004c5e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c60:	6a61      	ldr	r1, [r4, #36]	; 0x24

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c62:	432a      	orrs	r2, r5
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c64:	403e      	ands	r6, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c66:	2904      	cmp	r1, #4
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c68:	ea42 0206 	orr.w	r2, r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c6c:	d027      	beq.n	8004cbe <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c70:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c72:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c76:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	4d2d      	ldr	r5, [pc, #180]	; (8004d30 <HAL_DMA_Init+0x128>)
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c7c:	6159      	str	r1, [r3, #20]
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c7e:	3a10      	subs	r2, #16
 8004c80:	fba5 1202 	umull	r1, r2, r5, r2
 8004c84:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c86:	482b      	ldr	r0, [pc, #172]	; (8004d34 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c88:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c8c:	5c81      	ldrb	r1, [r0, r2]
 8004c8e:	65e1      	str	r1, [r4, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c90:	f023 0303 	bic.w	r3, r3, #3
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
 8004c94:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c96:	bf88      	it	hi
 8004c98:	3304      	addhi	r3, #4
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c9a:	223f      	movs	r2, #63	; 0x3f
 8004c9c:	408a      	lsls	r2, r1

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	2501      	movs	r5, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca0:	2100      	movs	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ca2:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
 8004ca4:	4608      	mov	r0, r1
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca8:	6561      	str	r1, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004caa:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35

  return HAL_OK;
 8004cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	6562      	str	r2, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
      
      return HAL_TIMEOUT;
 8004cb6:	4618      	mov	r0, r3
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cb8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cc0:	6b21      	ldr	r1, [r4, #48]	; 0x30

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cc2:	6aa5      	ldr	r5, [r4, #40]	; 0x28

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cc4:	4331      	orrs	r1, r6
 8004cc6:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cca:	695a      	ldr	r2, [r3, #20]

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ccc:	f045 0104 	orr.w	r1, r5, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cd0:	f022 0207 	bic.w	r2, r2, #7

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cd4:	4311      	orrs	r1, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cd6:	b978      	cbnz	r0, 8004cf8 <HAL_DMA_Init+0xf0>
  {
    switch (tmp)
 8004cd8:	2d01      	cmp	r5, #1
 8004cda:	d023      	beq.n	8004d24 <HAL_DMA_Init+0x11c>
 8004cdc:	d301      	bcc.n	8004ce2 <HAL_DMA_Init+0xda>
 8004cde:	2d02      	cmp	r5, #2
 8004ce0:	d1ca      	bne.n	8004c78 <HAL_DMA_Init+0x70>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce2:	01f2      	lsls	r2, r6, #7
 8004ce4:	d5c8      	bpl.n	8004c78 <HAL_DMA_Init+0x70>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce6:	2301      	movs	r3, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ce8:	2240      	movs	r2, #64	; 0x40
 8004cea:	6562      	str	r2, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
      
      return HAL_ERROR; 
 8004cec:	4618      	mov	r0, r3
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8004cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cf8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004cfc:	d004      	beq.n	8004d08 <HAL_DMA_Init+0x100>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cfe:	2d02      	cmp	r5, #2
 8004d00:	d9f1      	bls.n	8004ce6 <HAL_DMA_Init+0xde>
 8004d02:	2d03      	cmp	r5, #3
 8004d04:	d1b8      	bne.n	8004c78 <HAL_DMA_Init+0x70>
 8004d06:	e7ec      	b.n	8004ce2 <HAL_DMA_Init+0xda>
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
  {
    switch (tmp)
 8004d08:	2d03      	cmp	r5, #3
 8004d0a:	d8b5      	bhi.n	8004c78 <HAL_DMA_Init+0x70>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <HAL_DMA_Init+0x10c>)
 8004d0e:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004ce7 	.word	0x08004ce7
 8004d18:	08004ce3 	.word	0x08004ce3
 8004d1c:	08004ce7 	.word	0x08004ce7
 8004d20:	08004d25 	.word	0x08004d25
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d24:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8004d28:	d1a6      	bne.n	8004c78 <HAL_DMA_Init+0x70>
 8004d2a:	e7dc      	b.n	8004ce6 <HAL_DMA_Init+0xde>
 8004d2c:	f010803f 	.word	0xf010803f
 8004d30:	aaaaaaab 	.word	0xaaaaaaab
 8004d34:	080074a4 	.word	0x080074a4

08004d38 <HAL_DMA_DeInit>:
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d02f      	beq.n	8004d9c <HAL_DMA_DeInit+0x64>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004d3c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d02b      	beq.n	8004d9e <HAL_DMA_DeInit+0x66>
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004d46:	6803      	ldr	r3, [r0, #0]
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d48:	4916      	ldr	r1, [pc, #88]	; (8004da4 <HAL_DMA_DeInit+0x6c>)
 8004d4a:	b2da      	uxtb	r2, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b470      	push	{r4, r5, r6}
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d4e:	3a10      	subs	r2, #16
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004d50:	681c      	ldr	r4, [r3, #0]
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d52:	4d15      	ldr	r5, [pc, #84]	; (8004da8 <HAL_DMA_DeInit+0x70>)
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d54:	fba1 1202 	umull	r1, r2, r1, r2
 8004d58:	0912      	lsrs	r2, r2, #4

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004d5a:	2100      	movs	r1, #0
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004d5c:	f024 0401 	bic.w	r4, r4, #1
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004d60:	2621      	movs	r6, #33	; 0x21
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004d62:	601c      	str	r4, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004d64:	6019      	str	r1, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004d66:	6059      	str	r1, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004d68:	6099      	str	r1, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004d6a:	60d9      	str	r1, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004d6c:	6119      	str	r1, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004d6e:	615e      	str	r6, [r3, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d70:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d74:	5cad      	ldrb	r5, [r5, r2]
 8004d76:	65c5      	str	r5, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d78:	f023 0303 	bic.w	r3, r3, #3
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
 8004d7c:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d7e:	bf88      	it	hi
 8004d80:	3304      	addhi	r3, #4
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d82:	213f      	movs	r1, #63	; 0x3f

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d84:	2200      	movs	r2, #0
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d86:	40a9      	lsls	r1, r5
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d88:	6583      	str	r3, [r0, #88]	; 0x58

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8004d8a:	bc70      	pop	{r4, r5, r6}
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d8c:	6099      	str	r1, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d8e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d90:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004d94:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4770      	bx	lr
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	aaaaaaab 	.word	0xaaaaaaab
 8004da8:	080074a4 	.word	0x080074a4

08004dac <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dac:	b470      	push	{r4, r5, r6}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dae:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004db2:	2c01      	cmp	r4, #1
 8004db4:	d00c      	beq.n	8004dd0 <HAL_DMA_Start+0x24>

  if(HAL_DMA_STATE_READY == hdma->State)
 8004db6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dba:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dbc:	42ac      	cmp	r4, r5
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dbe:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dc2:	d008      	beq.n	8004dd6 <HAL_DMA_Start+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004dca:	2002      	movs	r0, #2
  } 
  return status; 
}
 8004dcc:	bc70      	pop	{r4, r5, r6}
 8004dce:	4770      	bx	lr
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dd0:	2002      	movs	r0, #2
    
    /* Return error status */
    status = HAL_BUSY;
  } 
  return status; 
}
 8004dd2:	bc70      	pop	{r4, r5, r6}
 8004dd4:	4770      	bx	lr
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dd6:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dd8:	2602      	movs	r6, #2
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dda:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ddc:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de0:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004de2:	6825      	ldr	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004de4:	6886      	ldr	r6, [r0, #8]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004de6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dea:	2e40      	cmp	r6, #64	; 0x40
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dec:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dee:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004df0:	bf0b      	itete	eq
 8004df2:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004df4:	60a1      	strne	r1, [r4, #8]
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004df6:	60e1      	streq	r1, [r4, #12]
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004df8:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2000      	movs	r0, #0
 8004e04:	e7e2      	b.n	8004dcc <HAL_DMA_Start+0x20>
 8004e06:	bf00      	nop

08004e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e08:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e0a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004e0e:	2c01      	cmp	r4, #1
 8004e10:	d00d      	beq.n	8004e2e <HAL_DMA_Start_IT+0x26>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e12:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e16:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e18:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e1a:	42ac      	cmp	r4, r5
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e1c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e20:	d008      	beq.n	8004e34 <HAL_DMA_Start_IT+0x2c>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e22:	2300      	movs	r3, #0
 8004e24:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e28:	2002      	movs	r0, #2
  }
  
  return status;
}
 8004e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8004e2c:	4770      	bx	lr
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e2e:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8004e30:	bcf0      	pop	{r4, r5, r6, r7}
 8004e32:	4770      	bx	lr
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e34:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e36:	2702      	movs	r7, #2
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e38:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e3a:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e3e:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e40:	6825      	ldr	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e42:	6887      	ldr	r7, [r0, #8]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e44:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e48:	2f40      	cmp	r7, #64	; 0x40
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e4a:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e4c:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e4e:	bf0a      	itet	eq
 8004e50:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004e52:	60a1      	strne	r1, [r4, #8]
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e54:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e56:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004e58:	bf18      	it	ne
 8004e5a:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e5c:	233f      	movs	r3, #63	; 0x3f
 8004e5e:	408b      	lsls	r3, r1
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
    hdma->Instance->FCR |= DMA_IT_FE;
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e60:	6c02      	ldr	r2, [r0, #64]	; 0x40
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e62:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	f043 0316 	orr.w	r3, r3, #22
 8004e6a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e6c:	6963      	ldr	r3, [r4, #20]
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e72:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e74:	b11a      	cbz	r2, 8004e7e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	f043 0308 	orr.w	r3, r3, #8
 8004e7c:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2000      	movs	r0, #0
 8004e88:	e7cf      	b.n	8004e2a <HAL_DMA_Start_IT+0x22>
 8004e8a:	bf00      	nop

08004e8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e90:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004e92:	f7fb f9d1 	bl	8000238 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e96:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d006      	beq.n	8004eac <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e9e:	2280      	movs	r2, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea0:	2300      	movs	r3, #0
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea2:	6562      	str	r2, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eac:	6823      	ldr	r3, [r4, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eae:	6c21      	ldr	r1, [r4, #64]	; 0x40
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	f022 0216 	bic.w	r2, r2, #22
 8004eb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ec2:	b331      	cbz	r1, 8004f12 <HAL_DMA_Abort+0x86>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	f022 0208 	bic.w	r2, r2, #8
 8004eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ed4:	e005      	b.n	8004ee2 <HAL_DMA_Abort+0x56>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ed6:	f7fb f9af 	bl	8000238 <HAL_GetTick>
 8004eda:	1b40      	subs	r0, r0, r5
 8004edc:	2805      	cmp	r0, #5
 8004ede:	d80f      	bhi.n	8004f00 <HAL_DMA_Abort+0x74>
 8004ee0:	6823      	ldr	r3, [r4, #0]
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f013 0301 	ands.w	r3, r3, #1
 8004ee8:	d1f5      	bne.n	8004ed6 <HAL_DMA_Abort+0x4a>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004eec:	223f      	movs	r2, #63	; 0x3f
 8004eee:	408a      	lsls	r2, r1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ef0:	2101      	movs	r1, #1
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ef2:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
  }
  return HAL_OK;
 8004ef4:	4618      	mov	r0, r3
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004efa:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f00:	2220      	movs	r2, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f02:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f04:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f06:	6562      	str	r2, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f0c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004f10:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
    hdma->Instance->FCR &= ~(DMA_IT_FE);
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	d1d5      	bne.n	8004ec4 <HAL_DMA_Abort+0x38>
 8004f18:	e7d8      	b.n	8004ecc <HAL_DMA_Abort+0x40>
 8004f1a:	bf00      	nop

08004f1c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f1c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d003      	beq.n	8004f2c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004f28:	2001      	movs	r0, #1
 8004f2a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f2c:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f2e:	2305      	movs	r3, #5
 8004f30:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f34:	6813      	ldr	r3, [r2, #0]
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f3c:	2000      	movs	r0, #0
}
 8004f3e:	4770      	bx	lr

08004f40 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	b083      	sub	sp, #12
 8004f48:	4692      	mov	sl, r2
 8004f4a:	9100      	str	r1, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK; 
  uint32_t temp;
  uint32_t tickstart = HAL_GetTick(); 
 8004f4c:	f7fb f974 	bl	8000238 <HAL_GetTick>
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;
  
  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	05dd      	lsls	r5, r3, #23
 8004f56:	d44a      	bmi.n	8004fee <HAL_DMA_PollForTransfer+0xae>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8004f58:	9b00      	ldr	r3, [sp, #0]
 8004f5a:	4681      	mov	r9, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d042      	beq.n	8004fe6 <HAL_DMA_PollForTransfer+0xa6>
    temp = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f60:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004f62:	2110      	movs	r1, #16
 8004f64:	4099      	lsls	r1, r3
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f66:	6da5      	ldr	r5, [r4, #88]	; 0x58
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f68:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8005078 <HAL_DMA_PollForTransfer+0x138>
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
 8004f6c:	f8d5 b000 	ldr.w	fp, [r5]
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f70:	4f40      	ldr	r7, [pc, #256]	; (8005074 <HAL_DMA_PollForTransfer+0x134>)
 8004f72:	ea01 020b 	and.w	r2, r1, fp
 8004f76:	9201      	str	r2, [sp, #4]
 8004f78:	4652      	mov	r2, sl
 8004f7a:	46a2      	mov	sl, r4
 8004f7c:	4614      	mov	r4, r2
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while((tmpisr & temp) == RESET )
 8004f7e:	9a01      	ldr	r2, [sp, #4]
        
        return HAL_TIMEOUT;
      }
    }
    
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f80:	2608      	movs	r6, #8
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while((tmpisr & temp) == RESET )
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	d147      	bne.n	8005016 <HAL_DMA_PollForTransfer+0xd6>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8004f86:	1c61      	adds	r1, r4, #1
 8004f88:	d008      	beq.n	8004f9c <HAL_DMA_PollForTransfer+0x5c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004f8a:	b3bc      	cbz	r4, 8004ffc <HAL_DMA_PollForTransfer+0xbc>
 8004f8c:	f7fb f954 	bl	8000238 <HAL_GetTick>
 8004f90:	eba0 0009 	sub.w	r0, r0, r9
 8004f94:	4284      	cmp	r4, r0
 8004f96:	d331      	bcc.n	8004ffc <HAL_DMA_PollForTransfer+0xbc>
 8004f98:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
        
        return HAL_TIMEOUT;
      }
    }
    
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9c:	fa06 f003 	lsl.w	r0, r6, r3
 8004fa0:	ea1b 0f00 	tst.w	fp, r0
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa4:	fa08 f103 	lsl.w	r1, r8, r3
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa8:	fa07 f203 	lsl.w	r2, r7, r3
        
        return HAL_TIMEOUT;
      }
    }
    
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fac:	d006      	beq.n	8004fbc <HAL_DMA_PollForTransfer+0x7c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fae:	f8da e054 	ldr.w	lr, [sl, #84]	; 0x54
 8004fb2:	f04e 0e01 	orr.w	lr, lr, #1
 8004fb6:	f8ca e054 	str.w	lr, [sl, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fba:	60a8      	str	r0, [r5, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fbc:	ea1b 0f01 	tst.w	fp, r1
 8004fc0:	d006      	beq.n	8004fd0 <HAL_DMA_PollForTransfer+0x90>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fc2:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 8004fc6:	f040 0002 	orr.w	r0, r0, #2
 8004fca:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fce:	60a9      	str	r1, [r5, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fd0:	ea1b 0f02 	tst.w	fp, r2
 8004fd4:	d0d7      	beq.n	8004f86 <HAL_DMA_PollForTransfer+0x46>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fd6:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
 8004fda:	f041 0104 	orr.w	r1, r1, #4
 8004fde:	f8ca 1054 	str.w	r1, [sl, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fe2:	60aa      	str	r2, [r5, #8]
 8004fe4:	e7cb      	b.n	8004f7e <HAL_DMA_PollForTransfer+0x3e>
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fe6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004fe8:	2120      	movs	r1, #32
 8004fea:	4099      	lsls	r1, r3
 8004fec:	e7bb      	b.n	8004f66 <HAL_DMA_PollForTransfer+0x26>
  DMA_Base_Registers *regs;
  
  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ff2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004ff4:	2001      	movs	r0, #1
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
  }
  
  return status;
}
 8004ff6:	b003      	add	sp, #12
 8004ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ffc:	2120      	movs	r1, #32

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ffe:	2200      	movs	r2, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005000:	2301      	movs	r3, #1
        
        return HAL_TIMEOUT;
 8005002:	2003      	movs	r0, #3
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005004:	f8ca 1054 	str.w	r1, [sl, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005008:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800500c:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
  }
  
  return status;
}
 8005010:	b003      	add	sp, #12
 8005012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005016:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 800501a:	4654      	mov	r4, sl
 800501c:	b120      	cbz	r0, 8005028 <HAL_DMA_PollForTransfer+0xe8>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800501e:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8005022:	07d2      	lsls	r2, r2, #31
 8005024:	d415      	bmi.n	8005052 <HAL_DMA_PollForTransfer+0x112>
      hdma->State= HAL_DMA_STATE_READY;

      return HAL_ERROR;
   }

   status = HAL_ERROR;
 8005026:	2001      	movs	r0, #1
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8005028:	9a00      	ldr	r2, [sp, #0]
 800502a:	b132      	cbz	r2, 800503a <HAL_DMA_PollForTransfer+0xfa>
    hdma->State = HAL_DMA_STATE_READY;
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 800502c:	2210      	movs	r2, #16
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	60ab      	str	r3, [r5, #8]
  }
  
  return status;
}
 8005034:	b003      	add	sp, #12
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800503a:	2230      	movs	r2, #48	; 0x30
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    hdma->State = HAL_DMA_STATE_READY;
 8005042:	2201      	movs	r2, #1
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005044:	f89d 3000 	ldrb.w	r3, [sp]
 8005048:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 800504c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8005050:	e7d1      	b.n	8004ff6 <HAL_DMA_PollForTransfer+0xb6>
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      HAL_DMA_Abort(hdma);
 8005052:	4650      	mov	r0, sl
 8005054:	f7ff ff1a 	bl	8004e8c <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8005058:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
 800505c:	2330      	movs	r3, #48	; 0x30
 800505e:	4093      	lsls	r3, r2
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005060:	2100      	movs	r1, #0

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8005062:	2201      	movs	r2, #1
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      HAL_DMA_Abort(hdma);
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8005064:	60ab      	str	r3, [r5, #8]
      __HAL_UNLOCK(hdma);

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;

      return HAL_ERROR;
 8005066:	4610      	mov	r0, r2
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005068:	f88a 1034 	strb.w	r1, [sl, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800506c:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35

      return HAL_ERROR;
 8005070:	e7c1      	b.n	8004ff6 <HAL_DMA_PollForTransfer+0xb6>
 8005072:	bf00      	nop
 8005074:	00800004 	.word	0x00800004
 8005078:	00800001 	.word	0x00800001

0800507c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507e:	b083      	sub	sp, #12
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005080:	2300      	movs	r3, #0
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005082:	6d87      	ldr	r7, [r0, #88]	; 0x58
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005084:	9301      	str	r3, [sp, #4]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005086:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8005088:	683d      	ldr	r5, [r7, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 800508a:	4962      	ldr	r1, [pc, #392]	; (8005214 <HAL_DMA_IRQHandler+0x198>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800508c:	2208      	movs	r2, #8
 800508e:	409a      	lsls	r2, r3
 8005090:	4215      	tst	r5, r2
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005092:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8005094:	680e      	ldr	r6, [r1, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005096:	d003      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x24>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005098:	6801      	ldr	r1, [r0, #0]
 800509a:	6808      	ldr	r0, [r1, #0]
 800509c:	0740      	lsls	r0, r0, #29
 800509e:	d476      	bmi.n	800518e <HAL_DMA_IRQHandler+0x112>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050a0:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_DMA_IRQHandler+0x19c>)
 80050a2:	409a      	lsls	r2, r3
 80050a4:	4215      	tst	r5, r2
 80050a6:	d003      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050a8:	6821      	ldr	r1, [r4, #0]
 80050aa:	6949      	ldr	r1, [r1, #20]
 80050ac:	0608      	lsls	r0, r1, #24
 80050ae:	d468      	bmi.n	8005182 <HAL_DMA_IRQHandler+0x106>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050b0:	4a5a      	ldr	r2, [pc, #360]	; (800521c <HAL_DMA_IRQHandler+0x1a0>)
 80050b2:	409a      	lsls	r2, r3
 80050b4:	4215      	tst	r5, r2
 80050b6:	d003      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x44>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050b8:	6821      	ldr	r1, [r4, #0]
 80050ba:	6809      	ldr	r1, [r1, #0]
 80050bc:	0789      	lsls	r1, r1, #30
 80050be:	d45a      	bmi.n	8005176 <HAL_DMA_IRQHandler+0xfa>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050c0:	2210      	movs	r2, #16
 80050c2:	409a      	lsls	r2, r3
 80050c4:	4215      	tst	r5, r2
 80050c6:	d003      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x54>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050c8:	6821      	ldr	r1, [r4, #0]
 80050ca:	6808      	ldr	r0, [r1, #0]
 80050cc:	0700      	lsls	r0, r0, #28
 80050ce:	d43f      	bmi.n	8005150 <HAL_DMA_IRQHandler+0xd4>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050d0:	2220      	movs	r2, #32
 80050d2:	409a      	lsls	r2, r3
 80050d4:	4215      	tst	r5, r2
 80050d6:	d003      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050d8:	6821      	ldr	r1, [r4, #0]
 80050da:	6808      	ldr	r0, [r1, #0]
 80050dc:	06c0      	lsls	r0, r0, #27
 80050de:	d425      	bmi.n	800512c <HAL_DMA_IRQHandler+0xb0>
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050e2:	b30b      	cbz	r3, 8005128 <HAL_DMA_IRQHandler+0xac>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050e6:	07da      	lsls	r2, r3, #31
 80050e8:	d51a      	bpl.n	8005120 <HAL_DMA_IRQHandler+0xa4>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050ea:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050ec:	6821      	ldr	r1, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050f2:	680b      	ldr	r3, [r1, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 80050f4:	4a4a      	ldr	r2, [pc, #296]	; (8005220 <HAL_DMA_IRQHandler+0x1a4>)
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050f6:	f023 0301 	bic.w	r3, r3, #1
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 80050fa:	fba2 0206 	umull	r0, r2, r2, r6
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050fe:	600b      	str	r3, [r1, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8005100:	0a92      	lsrs	r2, r2, #10
 8005102:	e002      	b.n	800510a <HAL_DMA_IRQHandler+0x8e>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005104:	680b      	ldr	r3, [r1, #0]
 8005106:	07db      	lsls	r3, r3, #31
 8005108:	d504      	bpl.n	8005114 <HAL_DMA_IRQHandler+0x98>
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	3301      	adds	r3, #1
 800510e:	429a      	cmp	r2, r3
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	d2f7      	bcs.n	8005104 <HAL_DMA_IRQHandler+0x88>
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005114:	2200      	movs	r2, #0

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005116:	2301      	movs	r3, #1
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005118:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800511c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005120:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005122:	b10b      	cbz	r3, 8005128 <HAL_DMA_IRQHandler+0xac>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005124:	4620      	mov	r0, r4
 8005126:	4798      	blx	r3
    }
  }
}
 8005128:	b003      	add	sp, #12
 800512a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800512c:	60ba      	str	r2, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800512e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005132:	2a05      	cmp	r2, #5
 8005134:	d03b      	beq.n	80051ae <HAL_DMA_IRQHandler+0x132>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005136:	680b      	ldr	r3, [r1, #0]
 8005138:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800513c:	680b      	ldr	r3, [r1, #0]
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800513e:	d054      	beq.n	80051ea <HAL_DMA_IRQHandler+0x16e>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005140:	0319      	lsls	r1, r3, #12
 8005142:	d55f      	bpl.n	8005204 <HAL_DMA_IRQHandler+0x188>

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
        }

        if(hdma->XferCpltCallback != NULL)
 8005144:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ca      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x64>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800514a:	4620      	mov	r0, r4
 800514c:	4798      	blx	r3
 800514e:	e7c7      	b.n	80050e0 <HAL_DMA_IRQHandler+0x64>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005150:	60ba      	str	r2, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005152:	680a      	ldr	r2, [r1, #0]
 8005154:	f412 2f80 	tst.w	r2, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005158:	680a      	ldr	r2, [r1, #0]
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800515a:	d122      	bne.n	80051a2 <HAL_DMA_IRQHandler+0x126>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800515c:	05d2      	lsls	r2, r2, #23
 800515e:	d403      	bmi.n	8005168 <HAL_DMA_IRQHandler+0xec>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005160:	680a      	ldr	r2, [r1, #0]
 8005162:	f022 0208 	bic.w	r2, r2, #8
 8005166:	600a      	str	r2, [r1, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005168:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800516a:	2a00      	cmp	r2, #0
 800516c:	d0b0      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x54>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800516e:	4620      	mov	r0, r4
 8005170:	4790      	blx	r2
 8005172:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005174:	e7ac      	b.n	80050d0 <HAL_DMA_IRQHandler+0x54>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005176:	60ba      	str	r2, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005178:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800517a:	f042 0204 	orr.w	r2, r2, #4
 800517e:	6562      	str	r2, [r4, #84]	; 0x54
 8005180:	e79e      	b.n	80050c0 <HAL_DMA_IRQHandler+0x44>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005182:	60ba      	str	r2, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005184:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005186:	f042 0202 	orr.w	r2, r2, #2
 800518a:	6562      	str	r2, [r4, #84]	; 0x54
 800518c:	e790      	b.n	80050b0 <HAL_DMA_IRQHandler+0x34>
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800518e:	6808      	ldr	r0, [r1, #0]
 8005190:	f020 0004 	bic.w	r0, r0, #4
 8005194:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005196:	60ba      	str	r2, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005198:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	6562      	str	r2, [r4, #84]	; 0x54
 80051a0:	e77e      	b.n	80050a0 <HAL_DMA_IRQHandler+0x24>
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051a2:	0311      	lsls	r1, r2, #12
 80051a4:	d5e0      	bpl.n	8005168 <HAL_DMA_IRQHandler+0xec>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80051a8:	2a00      	cmp	r2, #0
 80051aa:	d1e0      	bne.n	800516e <HAL_DMA_IRQHandler+0xf2>
 80051ac:	e790      	b.n	80050d0 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ae:	680a      	ldr	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051b2:	f022 0216 	bic.w	r2, r2, #22
 80051b6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051b8:	694a      	ldr	r2, [r1, #20]
 80051ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051be:	614a      	str	r2, [r1, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051c0:	b320      	cbz	r0, 800520c <HAL_DMA_IRQHandler+0x190>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051c2:	680a      	ldr	r2, [r1, #0]
 80051c4:	f022 0208 	bic.w	r2, r2, #8
 80051c8:	600a      	str	r2, [r1, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051ca:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;

        if(hdma->XferAbortCallback != NULL)
 80051cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051d2:	2000      	movs	r0, #0

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051d4:	2201      	movs	r2, #1
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d6:	60bb      	str	r3, [r7, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051d8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051dc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80051e0:	2900      	cmp	r1, #0
 80051e2:	d0a1      	beq.n	8005128 <HAL_DMA_IRQHandler+0xac>
        {
          hdma->XferAbortCallback(hdma);
 80051e4:	4620      	mov	r0, r4
 80051e6:	4788      	blx	r1
 80051e8:	e79e      	b.n	8005128 <HAL_DMA_IRQHandler+0xac>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ea:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80051ee:	d1a9      	bne.n	8005144 <HAL_DMA_IRQHandler+0xc8>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051f0:	680a      	ldr	r2, [r1, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f2:	2001      	movs	r0, #1
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051f4:	f022 0210 	bic.w	r2, r2, #16
 80051f8:	600a      	str	r2, [r1, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8005202:	e79f      	b.n	8005144 <HAL_DMA_IRQHandler+0xc8>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005204:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005206:	2b00      	cmp	r3, #0
 8005208:	d19f      	bne.n	800514a <HAL_DMA_IRQHandler+0xce>
 800520a:	e769      	b.n	80050e0 <HAL_DMA_IRQHandler+0x64>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
        hdma->Instance->FCR &= ~(DMA_IT_FE);
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800520c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800520e:	2a00      	cmp	r2, #0
 8005210:	d1d7      	bne.n	80051c2 <HAL_DMA_IRQHandler+0x146>
 8005212:	e7da      	b.n	80051ca <HAL_DMA_IRQHandler+0x14e>
 8005214:	20000434 	.word	0x20000434
 8005218:	00800001 	.word	0x00800001
 800521c:	00800004 	.word	0x00800004
 8005220:	1b4e81b5 	.word	0x1b4e81b5

08005224 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8005224:	4603      	mov	r3, r0

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8005226:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800522a:	2801      	cmp	r0, #1
 800522c:	d00d      	beq.n	800524a <HAL_DMA_RegisterCallback+0x26>
  * @param  pCallback:            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800522e:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
 8005230:	f893 4035 	ldrb.w	r4, [r3, #53]	; 0x35
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8005234:	2001      	movs	r0, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8005236:	4284      	cmp	r4, r0
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8005238:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800523c:	d007      	beq.n	800524e <HAL_DMA_RegisterCallback+0x2a>
    /* Return error status */
    status =  HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
}
 8005244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005248:	4770      	bx	lr
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 800524a:	2002      	movs	r0, #2
 800524c:	4770      	bx	lr

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    switch (CallbackID)
 800524e:	2905      	cmp	r1, #5
 8005250:	d816      	bhi.n	8005280 <HAL_DMA_RegisterCallback+0x5c>
 8005252:	e8df f001 	tbb	[pc, r1]
 8005256:	0f12      	.short	0x0f12
 8005258:	0306090c 	.word	0x0306090c
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
      break;

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 800525c:	651a      	str	r2, [r3, #80]	; 0x50
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 800525e:	2000      	movs	r0, #0
      hdma->XferErrorCallback = pCallback;
      break;

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
      break;
 8005260:	e7ed      	b.n	800523e <HAL_DMA_RegisterCallback+0x1a>
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8005262:	64da      	str	r2, [r3, #76]	; 0x4c
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2000      	movs	r0, #0
      hdma->XferM1HalfCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
      break;
 8005266:	e7ea      	b.n	800523e <HAL_DMA_RegisterCallback+0x1a>
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8005268:	649a      	str	r2, [r3, #72]	; 0x48
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 800526a:	2000      	movs	r0, #0
      hdma->XferM1CpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
      break;
 800526c:	e7e7      	b.n	800523e <HAL_DMA_RegisterCallback+0x1a>
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 8005270:	2000      	movs	r0, #0
      hdma->XferHalfCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
      break;
 8005272:	e7e4      	b.n	800523e <HAL_DMA_RegisterCallback+0x1a>
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2000      	movs	r0, #0
      hdma->XferCpltCallback = pCallback;
      break;

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
      break;
 8005278:	e7e1      	b.n	800523e <HAL_DMA_RegisterCallback+0x1a>
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    switch (CallbackID)
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 800527c:	2000      	movs	r0, #0
  {
    switch (CallbackID)
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
      break;
 800527e:	e7de      	b.n	800523e <HAL_DMA_RegisterCallback+0x1a>
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2000      	movs	r0, #0
 8005282:	e7dc      	b.n	800523e <HAL_DMA_RegisterCallback+0x1a>

08005284 <HAL_DMA_UnRegisterCallback>:
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005284:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005288:	2b01      	cmp	r3, #1
  * @param  CallbackID:           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800528a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800528c:	d00b      	beq.n	80052a6 <HAL_DMA_UnRegisterCallback+0x22>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800528e:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005292:	2301      	movs	r3, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005294:	4298      	cmp	r0, r3
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005296:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800529a:	d006      	beq.n	80052aa <HAL_DMA_UnRegisterCallback+0x26>
      hdma->XferErrorCallback = NULL;
      hdma->XferAbortCallback = NULL;
      break; 
      
    default:
      status = HAL_ERROR;
 800529c:	2001      	movs	r0, #1
  {
    status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800529e:	2300      	movs	r3, #0
 80052a0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  
  return status;
 80052a4:	4770      	bx	lr
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80052a6:	2002      	movs	r0, #2
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
  
  return status;
}
 80052a8:	4770      	bx	lr
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    switch (CallbackID)
 80052aa:	2906      	cmp	r1, #6
 80052ac:	d8f6      	bhi.n	800529c <HAL_DMA_UnRegisterCallback+0x18>
 80052ae:	e8df f001 	tbb	[pc, r1]
 80052b2:	181b      	.short	0x181b
 80052b4:	0c0f1215 	.word	0x0c0f1215
 80052b8:	04          	.byte	0x04
 80052b9:	00          	.byte	0x00
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
      break; 
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80052ba:	2000      	movs	r0, #0
 80052bc:	63d0      	str	r0, [r2, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 80052be:	6410      	str	r0, [r2, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80052c0:	6450      	str	r0, [r2, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80052c2:	6490      	str	r0, [r2, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 80052c4:	64d0      	str	r0, [r2, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80052c6:	6510      	str	r0, [r2, #80]	; 0x50
      break; 
 80052c8:	e7e9      	b.n	800529e <HAL_DMA_UnRegisterCallback+0x1a>
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80052ca:	2000      	movs	r0, #0
 80052cc:	6510      	str	r0, [r2, #80]	; 0x50
      break; 
 80052ce:	e7e6      	b.n	800529e <HAL_DMA_UnRegisterCallback+0x1a>
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80052d0:	2000      	movs	r0, #0
 80052d2:	64d0      	str	r0, [r2, #76]	; 0x4c
      break;
 80052d4:	e7e3      	b.n	800529e <HAL_DMA_UnRegisterCallback+0x1a>
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80052d6:	2000      	movs	r0, #0
 80052d8:	6490      	str	r0, [r2, #72]	; 0x48
      break;
 80052da:	e7e0      	b.n	800529e <HAL_DMA_UnRegisterCallback+0x1a>
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 80052dc:	2000      	movs	r0, #0
 80052de:	6450      	str	r0, [r2, #68]	; 0x44
      break;
 80052e0:	e7dd      	b.n	800529e <HAL_DMA_UnRegisterCallback+0x1a>
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
      break;
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80052e2:	2000      	movs	r0, #0
 80052e4:	6410      	str	r0, [r2, #64]	; 0x40
      break;
 80052e6:	e7da      	b.n	800529e <HAL_DMA_UnRegisterCallback+0x1a>
  if(HAL_DMA_STATE_READY == hdma->State)
  {
    switch (CallbackID)
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80052e8:	2000      	movs	r0, #0
 80052ea:	63d0      	str	r0, [r2, #60]	; 0x3c
      break;
 80052ec:	e7d7      	b.n	800529e <HAL_DMA_UnRegisterCallback+0x1a>
 80052ee:	bf00      	nop

080052f0 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 80052f0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop

080052f8 <HAL_DMA_GetError>:
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
  return hdma->ErrorCode;
 80052f8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80052fa:	4770      	bx	lr

080052fc <__do_global_dtors_aux>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4c05      	ldr	r4, [pc, #20]	; (8005314 <__do_global_dtors_aux+0x18>)
 8005300:	7822      	ldrb	r2, [r4, #0]
 8005302:	b932      	cbnz	r2, 8005312 <__do_global_dtors_aux+0x16>
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <__do_global_dtors_aux+0x1c>)
 8005306:	b113      	cbz	r3, 800530e <__do_global_dtors_aux+0x12>
 8005308:	4804      	ldr	r0, [pc, #16]	; (800531c <__do_global_dtors_aux+0x20>)
 800530a:	f3af 8000 	nop.w
 800530e:	2301      	movs	r3, #1
 8005310:	7023      	strb	r3, [r4, #0]
 8005312:	bd10      	pop	{r4, pc}
 8005314:	200009a0 	.word	0x200009a0
 8005318:	00000000 	.word	0x00000000
 800531c:	0800747c 	.word	0x0800747c

08005320 <frame_dummy>:
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <frame_dummy+0x20>)
 8005322:	b510      	push	{r4, lr}
 8005324:	b11b      	cbz	r3, 800532e <frame_dummy+0xe>
 8005326:	4907      	ldr	r1, [pc, #28]	; (8005344 <frame_dummy+0x24>)
 8005328:	4807      	ldr	r0, [pc, #28]	; (8005348 <frame_dummy+0x28>)
 800532a:	f3af 8000 	nop.w
 800532e:	4807      	ldr	r0, [pc, #28]	; (800534c <frame_dummy+0x2c>)
 8005330:	6803      	ldr	r3, [r0, #0]
 8005332:	b123      	cbz	r3, 800533e <frame_dummy+0x1e>
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <frame_dummy+0x30>)
 8005336:	b113      	cbz	r3, 800533e <frame_dummy+0x1e>
 8005338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533c:	4718      	bx	r3
 800533e:	bd10      	pop	{r4, pc}
 8005340:	00000000 	.word	0x00000000
 8005344:	200009a4 	.word	0x200009a4
 8005348:	0800747c 	.word	0x0800747c
 800534c:	2000099c 	.word	0x2000099c
 8005350:	00000000 	.word	0x00000000

08005354 <atexit>:
 8005354:	2300      	movs	r3, #0
 8005356:	4601      	mov	r1, r0
 8005358:	461a      	mov	r2, r3
 800535a:	4618      	mov	r0, r3
 800535c:	f000 b842 	b.w	80053e4 <__register_exitproc>

08005360 <__libc_fini_array>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4c0a      	ldr	r4, [pc, #40]	; (800538c <__libc_fini_array+0x2c>)
 8005364:	4d0a      	ldr	r5, [pc, #40]	; (8005390 <__libc_fini_array+0x30>)
 8005366:	1b64      	subs	r4, r4, r5
 8005368:	10a4      	asrs	r4, r4, #2
 800536a:	d00a      	beq.n	8005382 <__libc_fini_array+0x22>
 800536c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8005370:	3b01      	subs	r3, #1
 8005372:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8005376:	3c01      	subs	r4, #1
 8005378:	f855 3904 	ldr.w	r3, [r5], #-4
 800537c:	4798      	blx	r3
 800537e:	2c00      	cmp	r4, #0
 8005380:	d1f9      	bne.n	8005376 <__libc_fini_array+0x16>
 8005382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005386:	f002 b87f 	b.w	8007488 <_fini>
 800538a:	bf00      	nop
 800538c:	08007510 	.word	0x08007510
 8005390:	0800750c 	.word	0x0800750c

08005394 <__libc_init_array>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4e0f      	ldr	r6, [pc, #60]	; (80053d4 <__libc_init_array+0x40>)
 8005398:	4d0f      	ldr	r5, [pc, #60]	; (80053d8 <__libc_init_array+0x44>)
 800539a:	1b76      	subs	r6, r6, r5
 800539c:	10b6      	asrs	r6, r6, #2
 800539e:	bf18      	it	ne
 80053a0:	2400      	movne	r4, #0
 80053a2:	d005      	beq.n	80053b0 <__libc_init_array+0x1c>
 80053a4:	3401      	adds	r4, #1
 80053a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053aa:	4798      	blx	r3
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d1f9      	bne.n	80053a4 <__libc_init_array+0x10>
 80053b0:	4e0a      	ldr	r6, [pc, #40]	; (80053dc <__libc_init_array+0x48>)
 80053b2:	4d0b      	ldr	r5, [pc, #44]	; (80053e0 <__libc_init_array+0x4c>)
 80053b4:	1b76      	subs	r6, r6, r5
 80053b6:	f002 f861 	bl	800747c <_init>
 80053ba:	10b6      	asrs	r6, r6, #2
 80053bc:	bf18      	it	ne
 80053be:	2400      	movne	r4, #0
 80053c0:	d006      	beq.n	80053d0 <__libc_init_array+0x3c>
 80053c2:	3401      	adds	r4, #1
 80053c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c8:	4798      	blx	r3
 80053ca:	42a6      	cmp	r6, r4
 80053cc:	d1f9      	bne.n	80053c2 <__libc_init_array+0x2e>
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
 80053d2:	bf00      	nop
 80053d4:	08007504 	.word	0x08007504
 80053d8:	08007504 	.word	0x08007504
 80053dc:	0800750c 	.word	0x0800750c
 80053e0:	08007504 	.word	0x08007504

080053e4 <__register_exitproc>:
 80053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	4c25      	ldr	r4, [pc, #148]	; (8005480 <__register_exitproc+0x9c>)
 80053ea:	6825      	ldr	r5, [r4, #0]
 80053ec:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80053f0:	4606      	mov	r6, r0
 80053f2:	4688      	mov	r8, r1
 80053f4:	4692      	mov	sl, r2
 80053f6:	4699      	mov	r9, r3
 80053f8:	b3c4      	cbz	r4, 800546c <__register_exitproc+0x88>
 80053fa:	6860      	ldr	r0, [r4, #4]
 80053fc:	281f      	cmp	r0, #31
 80053fe:	dc17      	bgt.n	8005430 <__register_exitproc+0x4c>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	b176      	cbz	r6, 8005422 <__register_exitproc+0x3e>
 8005404:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8005408:	2201      	movs	r2, #1
 800540a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800540e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 8005412:	4082      	lsls	r2, r0
 8005414:	4311      	orrs	r1, r2
 8005416:	2e02      	cmp	r6, #2
 8005418:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 800541c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8005420:	d01e      	beq.n	8005460 <__register_exitproc+0x7c>
 8005422:	3002      	adds	r0, #2
 8005424:	6063      	str	r3, [r4, #4]
 8005426:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800542a:	2000      	movs	r0, #0
 800542c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005430:	4b14      	ldr	r3, [pc, #80]	; (8005484 <__register_exitproc+0xa0>)
 8005432:	b303      	cbz	r3, 8005476 <__register_exitproc+0x92>
 8005434:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005438:	f001 fc14 	bl	8006c64 <malloc>
 800543c:	4604      	mov	r4, r0
 800543e:	b1d0      	cbz	r0, 8005476 <__register_exitproc+0x92>
 8005440:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8005444:	2700      	movs	r7, #0
 8005446:	e880 0088 	stmia.w	r0, {r3, r7}
 800544a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800544e:	4638      	mov	r0, r7
 8005450:	2301      	movs	r3, #1
 8005452:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8005456:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800545a:	2e00      	cmp	r6, #0
 800545c:	d0e1      	beq.n	8005422 <__register_exitproc+0x3e>
 800545e:	e7d1      	b.n	8005404 <__register_exitproc+0x20>
 8005460:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8005464:	430a      	orrs	r2, r1
 8005466:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800546a:	e7da      	b.n	8005422 <__register_exitproc+0x3e>
 800546c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8005470:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8005474:	e7c1      	b.n	80053fa <__register_exitproc+0x16>
 8005476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800547a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547e:	bf00      	nop
 8005480:	080074ac 	.word	0x080074ac
 8005484:	08006c65 	.word	0x08006c65

08005488 <register_fini>:
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <register_fini+0xc>)
 800548a:	b113      	cbz	r3, 8005492 <register_fini+0xa>
 800548c:	4802      	ldr	r0, [pc, #8]	; (8005498 <register_fini+0x10>)
 800548e:	f7ff bf61 	b.w	8005354 <atexit>
 8005492:	4770      	bx	lr
 8005494:	00000000 	.word	0x00000000
 8005498:	08005361 	.word	0x08005361

0800549c <_sbrk>:
 800549c:	4a0e      	ldr	r2, [pc, #56]	; (80054d8 <_sbrk+0x3c>)
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	b510      	push	{r4, lr}
 80054a2:	b1ab      	cbz	r3, 80054d0 <_sbrk+0x34>
 80054a4:	4418      	add	r0, r3
 80054a6:	4669      	mov	r1, sp
 80054a8:	4288      	cmp	r0, r1
 80054aa:	d809      	bhi.n	80054c0 <_sbrk+0x24>
 80054ac:	490b      	ldr	r1, [pc, #44]	; (80054dc <_sbrk+0x40>)
 80054ae:	4c0c      	ldr	r4, [pc, #48]	; (80054e0 <_sbrk+0x44>)
 80054b0:	6809      	ldr	r1, [r1, #0]
 80054b2:	42a1      	cmp	r1, r4
 80054b4:	d001      	beq.n	80054ba <_sbrk+0x1e>
 80054b6:	4288      	cmp	r0, r1
 80054b8:	d802      	bhi.n	80054c0 <_sbrk+0x24>
 80054ba:	6010      	str	r0, [r2, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	f001 fbca 	bl	8006c58 <__errno>
 80054c4:	230c      	movs	r3, #12
 80054c6:	6003      	str	r3, [r0, #0]
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054cc:	4618      	mov	r0, r3
 80054ce:	bd10      	pop	{r4, pc}
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <_sbrk+0x48>)
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e7e6      	b.n	80054a4 <_sbrk+0x8>
 80054d6:	bf00      	nop
 80054d8:	200009bc 	.word	0x200009bc
 80054dc:	20000430 	.word	0x20000430
 80054e0:	cafedead 	.word	0xcafedead
 80054e4:	20001220 	.word	0x20001220

080054e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005520 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80054ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80054ee:	e003      	b.n	80054f8 <LoopCopyDataInit>

080054f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80054f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80054f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80054f6:	3104      	adds	r1, #4

080054f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80054f8:	480b      	ldr	r0, [pc, #44]	; (8005528 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80054fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80054fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005500:	d3f6      	bcc.n	80054f0 <CopyDataInit>
  ldr  r2, =_sbss
 8005502:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005504:	e002      	b.n	800550c <LoopFillZerobss>

08005506 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005506:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005508:	f842 3b04 	str.w	r3, [r2], #4

0800550c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800550e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005510:	d3f9      	bcc.n	8005506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005512:	f000 f9bd 	bl	8005890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005516:	f7ff ff3d 	bl	8005394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800551a:	f000 f89b 	bl	8005654 <main>
  bx  lr    
 800551e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005520:	2001ffff 	.word	0x2001ffff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005524:	08007510 	.word	0x08007510
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005528:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800552c:	2000099c 	.word	0x2000099c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005530:	2000099c 	.word	0x2000099c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005534:	20001220 	.word	0x20001220

08005538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005538:	e7fe      	b.n	8005538 <ADC_IRQHandler>
	...

0800553c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800553c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005540:	4801      	ldr	r0, [pc, #4]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8005542:	f7fb ba11 	b.w	8000968 <HAL_GPIO_TogglePin>
 8005546:	bf00      	nop
 8005548:	40020c00 	.word	0x40020c00

0800554c <HAL_TIM_IC_CaptureCallback>:
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800554c:	4770      	bx	lr
	...

08005550 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8005550:	b530      	push	{r4, r5, lr}
 8005552:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005554:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <SystemClock_Config+0xa0>)
 8005556:	2100      	movs	r1, #0
 8005558:	9101      	str	r1, [sp, #4]
 800555a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800555c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800556c:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <SystemClock_Config+0xa4>)
 800556e:	9102      	str	r1, [sp, #8]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557e:	9302      	str	r3, [sp, #8]
 8005580:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005582:	2301      	movs	r3, #1
 8005584:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005586:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005588:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800558c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 72;
 800558e:	2348      	movs	r3, #72	; 0x48

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005590:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005592:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005594:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005596:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005598:	2303      	movs	r3, #3

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800559a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 800559c:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800559e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80055a0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055a2:	f7fb fa33 	bl	8000a0c <HAL_RCC_OscConfig>
 80055a6:	b100      	cbz	r0, 80055aa <SystemClock_Config+0x5a>
 80055a8:	e7fe      	b.n	80055a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055aa:	230f      	movs	r3, #15
 80055ac:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055ae:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055b4:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055b6:	4621      	mov	r1, r4
 80055b8:	a803      	add	r0, sp, #12
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055ba:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80055bc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055be:	f7fb fc43 	bl	8000e48 <HAL_RCC_ClockConfig>
 80055c2:	4604      	mov	r4, r0
 80055c4:	b100      	cbz	r0, 80055c8 <SystemClock_Config+0x78>
 80055c6:	e7fe      	b.n	80055c6 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80055c8:	f7fb fcf6 	bl	8000fb8 <HAL_RCC_GetHCLKFreq>
 80055cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80055d4:	f7fa ff24 	bl	8000420 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80055d8:	4628      	mov	r0, r5
 80055da:	f7fa ffd5 	bl	8000588 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80055de:	4622      	mov	r2, r4
 80055e0:	4621      	mov	r1, r4
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e6:	f7fa feb9 	bl	800035c <HAL_NVIC_SetPriority>
}
 80055ea:	b015      	add	sp, #84	; 0x54
 80055ec:	bd30      	pop	{r4, r5, pc}
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40007000 	.word	0x40007000

080055f8 <LEDsInit>:
		while (x-- > 0)
			__asm("nop");
	}
}

void LEDsInit(void) {
 80055f8:	b570      	push	{r4, r5, r6, lr}
	
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055fa:	4c15      	ldr	r4, [pc, #84]	; (8005650 <LEDsInit+0x58>)
		while (x-- > 0)
			__asm("nop");
	}
}

void LEDsInit(void) {
 80055fc:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055fe:	2601      	movs	r6, #1
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005600:	2500      	movs	r5, #0
}

void LEDsInit(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005606:	a901      	add	r1, sp, #4
 8005608:	4620      	mov	r0, r4
}

void LEDsInit(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800560a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800560c:	9602      	str	r6, [sp, #8]
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560e:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005610:	f7fa ffcc 	bl	80005ac <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005618:	a901      	add	r1, sp, #4
 800561a:	4620      	mov	r0, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
	
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800561c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800561e:	9602      	str	r6, [sp, #8]
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005620:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005622:	f7fa ffc3 	bl	80005ac <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005626:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800562a:	a901      	add	r1, sp, #4
 800562c:	4620      	mov	r0, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
	
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 800562e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005630:	9602      	str	r6, [sp, #8]
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005632:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005634:	f7fa ffba 	bl	80005ac <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800563c:	a901      	add	r1, sp, #4
 800563e:	4620      	mov	r0, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
	
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005640:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005642:	9602      	str	r6, [sp, #8]
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005644:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005646:	f7fa ffb1 	bl	80005ac <HAL_GPIO_Init>
}
 800564a:	b006      	add	sp, #24
 800564c:	bd70      	pop	{r4, r5, r6, pc}
 800564e:	bf00      	nop
 8005650:	40020c00 	.word	0x40020c00

08005654 <main>:
	}
}
/* USER CODE END 0 */

int main(void)
{
 8005654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005658:	b08f      	sub	sp, #60	; 0x3c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800565a:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800565c:	f7fa fdca 	bl	80001f4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8005660:	f7ff ff76 	bl	8005550 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005664:	4b7f      	ldr	r3, [pc, #508]	; (8005864 <main+0x210>)
 8005666:	9401      	str	r4, [sp, #4]
 8005668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800566a:	487f      	ldr	r0, [pc, #508]	; (8005868 <main+0x214>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800566c:	f042 0210 	orr.w	r2, r2, #16
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
 8005672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005674:	f002 0210 	and.w	r2, r2, #16
 8005678:	9201      	str	r2, [sp, #4]
 800567a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800567c:	9402      	str	r4, [sp, #8]
 800567e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005680:	f042 0204 	orr.w	r2, r2, #4
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
 8005686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005688:	f002 0204 	and.w	r2, r2, #4
 800568c:	9202      	str	r2, [sp, #8]
 800568e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005690:	9403      	str	r4, [sp, #12]
 8005692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005694:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
 800569a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80056a0:	9203      	str	r2, [sp, #12]
 80056a2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a4:	9404      	str	r4, [sp, #16]
 80056a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
 80056ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b0:	f002 0201 	and.w	r2, r2, #1
 80056b4:	9204      	str	r2, [sp, #16]
 80056b6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056b8:	9405      	str	r4, [sp, #20]
 80056ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056bc:	f042 0202 	orr.w	r2, r2, #2
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
 80056c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c4:	f002 0202 	and.w	r2, r2, #2
 80056c8:	9205      	str	r2, [sp, #20]
 80056ca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056cc:	9406      	str	r4, [sp, #24]
 80056ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d0:	f042 0208 	orr.w	r2, r2, #8
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80056de:	4622      	mov	r2, r4
 80056e0:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056e2:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80056e4:	f7fb f93c 	bl	8000960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80056e8:	4622      	mov	r2, r4
 80056ea:	2101      	movs	r1, #1
 80056ec:	485f      	ldr	r0, [pc, #380]	; (800586c <main+0x218>)
 80056ee:	f7fb f937 	bl	8000960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80056f2:	4622      	mov	r2, r4
 80056f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80056f8:	485d      	ldr	r0, [pc, #372]	; (8005870 <main+0x21c>)
 80056fa:	f7fb f931 	bl	8000960 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056fe:	2601      	movs	r6, #1
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005700:	2508      	movs	r5, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005702:	a909      	add	r1, sp, #36	; 0x24
 8005704:	4858      	ldr	r0, [pc, #352]	; (8005868 <main+0x214>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005706:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005708:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800570e:	f7fa ff4d 	bl	80005ac <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005712:	a909      	add	r1, sp, #36	; 0x24
 8005714:	4855      	ldr	r0, [pc, #340]	; (800586c <main+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8005716:	9609      	str	r6, [sp, #36]	; 0x24
  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005718:	2705      	movs	r7, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800571a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800571e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005720:	f7fa ff44 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8005724:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005726:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005728:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800572a:	4850      	ldr	r0, [pc, #320]	; (800586c <main+0x218>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572c:	950a      	str	r5, [sp, #40]	; 0x28
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800572e:	f04f 0906 	mov.w	r9, #6
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005732:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005734:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005736:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005738:	f7fa ff38 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800573c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573e:	a909      	add	r1, sp, #36	; 0x24
 8005740:	484c      	ldr	r0, [pc, #304]	; (8005874 <main+0x220>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005742:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005744:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005746:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005748:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800574a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800574e:	f7fa ff2d 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005752:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005754:	a909      	add	r1, sp, #36	; 0x24
 8005756:	4847      	ldr	r0, [pc, #284]	; (8005874 <main+0x220>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005758:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800575c:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005760:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005762:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005764:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005766:	f7fa ff21 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800576a:	a909      	add	r1, sp, #36	; 0x24
 800576c:	4842      	ldr	r0, [pc, #264]	; (8005878 <main+0x224>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800576e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005772:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005774:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8005776:	f7fa ff19 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800577a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800577e:	a909      	add	r1, sp, #36	; 0x24
 8005780:	483d      	ldr	r0, [pc, #244]	; (8005878 <main+0x224>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8005782:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005784:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005786:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005788:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800578a:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800578c:	f7fa ff0e 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8005790:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005794:	a909      	add	r1, sp, #36	; 0x24
 8005796:	4836      	ldr	r0, [pc, #216]	; (8005870 <main+0x21c>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8005798:	9309      	str	r3, [sp, #36]	; 0x24
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800579a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057a0:	f7fa ff04 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 80057a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a8:	a909      	add	r1, sp, #36	; 0x24
 80057aa:	4830      	ldr	r0, [pc, #192]	; (800586c <main+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 80057ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ae:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057b2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80057b4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057b8:	f7fa fef8 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80057bc:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80057be:	a909      	add	r1, sp, #36	; 0x24
 80057c0:	482b      	ldr	r0, [pc, #172]	; (8005870 <main+0x21c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80057c2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057c4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80057c8:	f7fa fef0 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80057cc:	f44f 7310 	mov.w	r3, #576	; 0x240
 80057d0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057d4:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d6:	4828      	ldr	r0, [pc, #160]	; (8005878 <main+0x224>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057d8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057da:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057dc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057de:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e2:	f7fa fee3 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80057e6:	4b25      	ldr	r3, [pc, #148]	; (800587c <main+0x228>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 80057e8:	481f      	ldr	r0, [pc, #124]	; (8005868 <main+0x214>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80057ea:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 80057ec:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 80057ee:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 80057f2:	f7fa fedb 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80057f6:	4b22      	ldr	r3, [pc, #136]	; (8005880 <main+0x22c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80057f8:	481b      	ldr	r0, [pc, #108]	; (8005868 <main+0x214>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80057fa:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80057fc:	a909      	add	r1, sp, #36	; 0x24
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80057fe:	4d21      	ldr	r5, [pc, #132]	; (8005884 <main+0x230>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005800:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005802:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8005804:	f7fa fed2 	bl	80005ac <HAL_GPIO_Init>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <main+0x234>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800580a:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
 800580c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005810:	e885 000c 	stmia.w	r5, {r2, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 499;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005814:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 499;
 8005816:	f240 13f3 	movw	r3, #499	; 0x1f3
 800581a:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800581c:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800581e:	f7fd f949 	bl	8002ab4 <HAL_TIM_Base_Init>
 8005822:	b100      	cbz	r0, 8005826 <main+0x1d2>
 8005824:	e7fe      	b.n	8005824 <main+0x1d0>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800582a:	a909      	add	r1, sp, #36	; 0x24
 800582c:	4628      	mov	r0, r5
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800582e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005830:	f7fc fe68 	bl	8002504 <HAL_TIM_ConfigClockSource>
 8005834:	b100      	cbz	r0, 8005838 <main+0x1e4>
 8005836:	e7fe      	b.n	8005836 <main+0x1e2>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005838:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800583a:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800583c:	a907      	add	r1, sp, #28
 800583e:	4628      	mov	r0, r5
 8005840:	f7fd fff6 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 8005844:	b100      	cbz	r0, 8005848 <main+0x1f4>
 8005846:	e7fe      	b.n	8005846 <main+0x1f2>
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_USB_DEVICE_Init();
 8005848:	f000 fce6 	bl	8006218 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
	LEDsInit();
 800584c:	f7ff fed4 	bl	80055f8 <LEDsInit>
  /* USER CODE BEGIN 3 */
	HAL_Delay(20);
	
	//HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_12);
	//HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_13);
	HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_14);
 8005850:	4c07      	ldr	r4, [pc, #28]	; (8005870 <main+0x21c>)
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	HAL_Delay(20);
 8005852:	2014      	movs	r0, #20
 8005854:	f7fa fcf6 	bl	8000244 <HAL_Delay>
	
	//HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_12);
	//HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_13);
	HAL_GPIO_TogglePin(GPIOD , GPIO_PIN_14);
 8005858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800585c:	4620      	mov	r0, r4
 800585e:	f7fb f883 	bl	8000968 <HAL_GPIO_TogglePin>
 8005862:	e7f6      	b.n	8005852 <main+0x1fe>
 8005864:	40023800 	.word	0x40023800
 8005868:	40021000 	.word	0x40021000
 800586c:	40020800 	.word	0x40020800
 8005870:	40020c00 	.word	0x40020c00
 8005874:	40020000 	.word	0x40020000
 8005878:	40020400 	.word	0x40020400
 800587c:	10110000 	.word	0x10110000
 8005880:	10120000 	.word	0x10120000
 8005884:	200009f8 	.word	0x200009f8
 8005888:	40000400 	.word	0x40000400

0800588c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800588c:	e7fe      	b.n	800588c <Error_Handler>
	...

08005890 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005890:	490f      	ldr	r1, [pc, #60]	; (80058d0 <SystemInit+0x40>)
 8005892:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800589e:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <SystemInit+0x44>)
 80058a0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058a2:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058aa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80058b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058b6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80058b8:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <SystemInit+0x48>)
 80058ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058c2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80058c4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058ca:	608b      	str	r3, [r1, #8]
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000ed00 	.word	0xe000ed00
 80058d4:	40023800 	.word	0x40023800
 80058d8:	24003010 	.word	0x24003010

080058dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80058dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058de:	f7fa fca3 	bl	8000228 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80058e6:	f7fa be5d 	b.w	80005a4 <HAL_SYSTICK_IRQHandler>

080058ea <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 80058ea:	4770      	bx	lr

080058ec <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80058ec:	4801      	ldr	r0, [pc, #4]	; (80058f4 <TIM3_IRQHandler+0x8>)
 80058ee:	f7fc bf9b 	b.w	8002828 <HAL_TIM_IRQHandler>
 80058f2:	bf00      	nop
 80058f4:	200009f8 	.word	0x200009f8

080058f8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <OTG_FS_IRQHandler+0x8>)
 80058fa:	f000 be5e 	b.w	80065ba <HAL_PCD_IRQHandler>
 80058fe:	bf00      	nop
 8005900:	20000a34 	.word	0x20000a34

08005904 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005904:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8005906:	6803      	ldr	r3, [r0, #0]
 8005908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800590c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800590e:	d12d      	bne.n	800596c <HAL_PCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005910:	2400      	movs	r4, #0
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005912:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005916:	a901      	add	r1, sp, #4
 8005918:	4815      	ldr	r0, [pc, #84]	; (8005970 <HAL_PCD_MspInit+0x6c>)
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800591a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800591c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005920:	f7fa fe44 	bl	80005ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005924:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005928:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800592a:	2302      	movs	r3, #2
 800592c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800592e:	a901      	add	r1, sp, #4

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005930:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005932:	480f      	ldr	r0, [pc, #60]	; (8005970 <HAL_PCD_MspInit+0x6c>)

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005934:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005938:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800593a:	f7fa fe37 	bl	80005ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800593e:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <HAL_PCD_MspInit+0x70>)
 8005940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005946:	635a      	str	r2, [r3, #52]	; 0x34
 8005948:	9400      	str	r4, [sp, #0]
 800594a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800594c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
 8005952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005958:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800595a:	2043      	movs	r0, #67	; 0x43
 800595c:	4622      	mov	r2, r4
 800595e:	4621      	mov	r1, r4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005960:	9b00      	ldr	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005962:	f7fa fcfb 	bl	800035c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005966:	2043      	movs	r0, #67	; 0x43
 8005968:	f7fa fd2e 	bl	80003c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800596c:	b006      	add	sp, #24
 800596e:	bd10      	pop	{r4, pc}
 8005970:	40020000 	.word	0x40020000
 8005974:	40023800 	.word	0x40023800

08005978 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8005978:	f500 7161 	add.w	r1, r0, #900	; 0x384
 800597c:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8005980:	f000 b909 	b.w	8005b96 <USBD_LL_SetupStage>

08005984 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005984:	231c      	movs	r3, #28
 8005986:	fb03 0301 	mla	r3, r3, r1, r0
 800598a:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 800598e:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8005992:	f000 b92d 	b.w	8005bf0 <USBD_LL_DataOutStage>

08005996 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005996:	231c      	movs	r3, #28
 8005998:	fb03 0301 	mla	r3, r3, r1, r0
 800599c:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 80059a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a2:	f000 b957 	b.w	8005c54 <USBD_LL_DataInStage>

080059a6 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80059a6:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 80059aa:	f000 b9d3 	b.w	8005d54 <USBD_LL_SOF>

080059ae <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80059ae:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 80059b0:	68c1      	ldr	r1, [r0, #12]
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80059b2:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 80059b4:	3100      	adds	r1, #0
 80059b6:	bf18      	it	ne
 80059b8:	2101      	movne	r1, #1
 80059ba:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 80059be:	f000 f9b7 	bl	8005d30 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 80059c2:	f8d4 03b4 	ldr.w	r0, [r4, #948]	; 0x3b4
}
 80059c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 80059ca:	f000 b992 	b.w	8005cf2 <USBD_LL_Reset>
	...

080059d0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 80059d0:	b510      	push	{r4, lr}
 80059d2:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 80059d4:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 80059d8:	f000 f9ad 	bl	8005d36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80059ea:	6a23      	ldr	r3, [r4, #32]
 80059ec:	b123      	cbz	r3, 80059f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80059ee:	4a03      	ldr	r2, [pc, #12]	; (80059fc <HAL_PCD_SuspendCallback+0x2c>)
 80059f0:	6913      	ldr	r3, [r2, #16]
 80059f2:	f043 0306 	orr.w	r3, r3, #6
 80059f6:	6113      	str	r3, [r2, #16]
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	bf00      	nop
 80059fc:	e000ed00 	.word	0xe000ed00

08005a00 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume(hpcd->pData);
 8005a00:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8005a04:	f000 b9a0 	b.w	8005d48 <USBD_LL_Resume>

08005a08 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8005a08:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8005a0c:	f000 b9b0 	b.w	8005d70 <USBD_LL_IsoOUTIncomplete>

08005a10 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8005a10:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8005a14:	f000 b9aa 	b.w	8005d6c <USBD_LL_IsoINIncomplete>

08005a18 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8005a18:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8005a1c:	f000 b9aa 	b.w	8005d74 <USBD_LL_DevConnected>

08005a20 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8005a20:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 8005a24:	f000 b9a8 	b.w	8005d78 <USBD_LL_DevDisconnected>

08005a28 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8005a28:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8005a2a:	7802      	ldrb	r2, [r0, #0]
 8005a2c:	bb42      	cbnz	r2, 8005a80 <USBD_LL_Init+0x58>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005a30:	2104      	movs	r1, #4
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8005a32:	f8c3 03b4 	str.w	r0, [r3, #948]	; 0x3b4
  pdev->pData = &hpcd_USB_OTG_FS; 
 8005a36:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005a3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005a3e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005a42:	2102      	movs	r1, #2
 8005a44:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005a46:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005a48:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005a4a:	2101      	movs	r1, #1
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005a4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005a4e:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005a50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005a52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005a56:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005a5a:	f000 fd2d 	bl	80064b8 <HAL_PCD_Init>
 8005a5e:	b108      	cbz	r0, 8005a64 <USBD_LL_Init+0x3c>
  {
    Error_Handler();
 8005a60:	f7ff ff14 	bl	800588c <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005a64:	2180      	movs	r1, #128	; 0x80
 8005a66:	4807      	ldr	r0, [pc, #28]	; (8005a84 <USBD_LL_Init+0x5c>)
 8005a68:	f7fa ffca 	bl	8000a00 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005a6c:	2240      	movs	r2, #64	; 0x40
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4804      	ldr	r0, [pc, #16]	; (8005a84 <USBD_LL_Init+0x5c>)
 8005a72:	f7fa ffa1 	bl	80009b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005a76:	2280      	movs	r2, #128	; 0x80
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4802      	ldr	r0, [pc, #8]	; (8005a84 <USBD_LL_Init+0x5c>)
 8005a7c:	f7fa ff9c 	bl	80009b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8005a80:	2000      	movs	r0, #0
 8005a82:	bd08      	pop	{r3, pc}
 8005a84:	20000a34 	.word	0x20000a34

08005a88 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a88:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8005a8a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005a8e:	f000 fd7f 	bl	8006590 <HAL_PCD_Start>
  return USBD_OK; 
}
 8005a92:	2000      	movs	r0, #0
 8005a94:	bd08      	pop	{r3, pc}

08005a96 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8005a96:	b510      	push	{r4, lr}
 8005a98:	461c      	mov	r4, r3

  HAL_PCD_EP_Open(pdev->pData, 
 8005a9a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	f000 ffd1 	bl	8006a48 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
}
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005aaa:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005aac:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ab0:	f000 fff8 	bl	8006aa4 <HAL_PCD_EP_Close>
  return USBD_OK; 
}
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	bd08      	pop	{r3, pc}

08005ab8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005ab8:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005aba:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005abe:	f001 f87a 	bl	8006bb6 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
}
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	bd08      	pop	{r3, pc}

08005ac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005ac6:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005ac8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005acc:	f001 f89f 	bl	8006c0e <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	bd08      	pop	{r3, pc}

08005ad4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
  
  if((ep_addr & 0x80) == 0x80)
 8005ad4:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 8005ad8:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8005adc:	f04f 021c 	mov.w	r2, #28
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005ae0:	bf1b      	ittet	ne
 8005ae2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8005ae6:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005aea:	fb02 3101 	mlaeq	r1, r2, r1, r3
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005aee:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005af2:	bf08      	it	eq
 8005af4:	f891 01de 	ldrbeq.w	r0, [r1, #478]	; 0x1de
  }
}
 8005af8:	4770      	bx	lr

08005afa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8005afa:	b508      	push	{r3, lr}
  
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005afc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b00:	f000 ff90 	bl	8006a24 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8005b04:	2000      	movs	r0, #0
 8005b06:	bd08      	pop	{r3, pc}

08005b08 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8005b08:	b508      	push	{r3, lr}

  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005b0a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b0e:	f001 f825 	bl	8006b5c <HAL_PCD_EP_Transmit>
  return USBD_OK;   
}
 8005b12:	2000      	movs	r0, #0
 8005b14:	bd08      	pop	{r3, pc}

08005b16 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8005b16:	b508      	push	{r3, lr}

  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005b18:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b1c:	f000 ffe5 	bl	8006aea <HAL_PCD_EP_Receive>
  return USBD_OK;   
}
 8005b20:	2000      	movs	r0, #0
 8005b22:	bd08      	pop	{r3, pc}

08005b24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8005b24:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8005b26:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b2a:	f001 f80f 	bl	8006b4c <HAL_PCD_EP_GetRxCount>
}
 8005b2e:	bd08      	pop	{r3, pc}

08005b30 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b30:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005b32:	b180      	cbz	r0, 8005b56 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005b34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005b38:	b113      	cbz	r3, 8005b40 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005b40:	b109      	cbz	r1, 8005b46 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005b42:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8005b4c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005b4e:	f7ff ff6b 	bl	8005a28 <USBD_LL_Init>
  
  return USBD_OK; 
 8005b52:	2000      	movs	r0, #0
 8005b54:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8005b56:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 8005b58:	bd08      	pop	{r3, pc}

08005b5a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8005b5a:	b119      	cbz	r1, 8005b64 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005b5c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8005b60:	2000      	movs	r0, #0
 8005b62:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8005b64:	2002      	movs	r0, #2
  }
  
  return status;
}
 8005b66:	4770      	bx	lr

08005b68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005b68:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005b6a:	f7ff ff8d 	bl	8005a88 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8005b6e:	2000      	movs	r0, #0
 8005b70:	bd08      	pop	{r3, pc}

08005b72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b72:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8005b74:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005b78:	b90b      	cbnz	r3, 8005b7e <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005b7a:	2002      	movs	r0, #2
 8005b7c:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4798      	blx	r3
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d1f9      	bne.n	8005b7a <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8005b86:	bd08      	pop	{r3, pc}

08005b88 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b88:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005b8a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4798      	blx	r3
  return USBD_OK;
}
 8005b92:	2000      	movs	r0, #0
 8005b94:	bd08      	pop	{r3, pc}

08005b96 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b96:	b538      	push	{r3, r4, r5, lr}
 8005b98:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b9a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fa75 	bl	800608e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005ba4:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005ba6:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005baa:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005bae:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8005bb2:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005bb6:	f001 031f 	and.w	r3, r1, #31
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d00e      	beq.n	8005bdc <USBD_LL_SetupStage+0x46>
 8005bbe:	d307      	bcc.n	8005bd0 <USBD_LL_SetupStage+0x3a>
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d010      	beq.n	8005be6 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005bc4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7ff ff75 	bl	8005ab8 <USBD_LL_StallEP>
    break;
 8005bce:	e003      	b.n	8005bd8 <USBD_LL_SetupStage+0x42>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 f8e6 	bl	8005da4 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 8005bd8:	2000      	movs	r0, #0
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4620      	mov	r0, r4
 8005be0:	f000 f9da 	bl	8005f98 <USBD_StdItfReq>
    break;
 8005be4:	e7f8      	b.n	8005bd8 <USBD_LL_SetupStage+0x42>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005be6:	4629      	mov	r1, r5
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 f9ed 	bl	8005fc8 <USBD_StdEPReq>
    break;
 8005bee:	e7f3      	b.n	8005bd8 <USBD_LL_SetupStage+0x42>

08005bf0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005bf6:	bb11      	cbnz	r1, 8005c3e <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005bf8:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d10f      	bne.n	8005c20 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8005c00:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8005c04:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d90b      	bls.n	8005c24 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8005c0c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	bf28      	it	cs
 8005c12:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8005c14:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8005c18:	b292      	uxth	r2, r2
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f000 fa8b 	bl	8006136 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8005c20:	2000      	movs	r0, #0
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005c24:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	b123      	cbz	r3, 8005c36 <USBD_LL_DataOutStage+0x46>
 8005c2c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005c30:	2a03      	cmp	r2, #3
 8005c32:	d100      	bne.n	8005c36 <USBD_LL_DataOutStage+0x46>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005c34:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 fa85 	bl	8006146 <USBD_CtlSendStatus>
 8005c3c:	e7f0      	b.n	8005c20 <USBD_LL_DataOutStage+0x30>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005c3e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0eb      	beq.n	8005c20 <USBD_LL_DataOutStage+0x30>
 8005c48:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005c4c:	2a03      	cmp	r2, #3
 8005c4e:	d1e7      	bne.n	8005c20 <USBD_LL_DataOutStage+0x30>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8005c50:	4798      	blx	r3
 8005c52:	e7e5      	b.n	8005c20 <USBD_LL_DataOutStage+0x30>

08005c54 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	4613      	mov	r3, r2
 8005c58:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005c5a:	460e      	mov	r6, r1
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	d13d      	bne.n	8005cdc <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c60:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8005c64:	2a02      	cmp	r2, #2
 8005c66:	d10f      	bne.n	8005c88 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8005c68:	69c5      	ldr	r5, [r0, #28]
 8005c6a:	6a02      	ldr	r2, [r0, #32]
 8005c6c:	4295      	cmp	r5, r2
 8005c6e:	d914      	bls.n	8005c9a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8005c70:	1aaa      	subs	r2, r5, r2
 8005c72:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8005c74:	4619      	mov	r1, r3
 8005c76:	b292      	uxth	r2, r2
 8005c78:	f000 fa46 	bl	8006108 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005c7c:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005c7e:	461a      	mov	r2, r3
 8005c80:	4619      	mov	r1, r3
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7ff ff47 	bl	8005b16 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005c88:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d102      	bne.n	8005c96 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8005c96:	2000      	movs	r0, #0
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005c9a:	6983      	ldr	r3, [r0, #24]
 8005c9c:	fbb3 f5f2 	udiv	r5, r3, r2
 8005ca0:	fb02 3515 	mls	r5, r2, r5, r3
 8005ca4:	b965      	cbnz	r5, 8005cc0 <USBD_LL_DataInStage+0x6c>
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d80a      	bhi.n	8005cc0 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8005caa:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d206      	bcs.n	8005cc0 <USBD_LL_DataInStage+0x6c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	f000 fa28 	bl	8006108 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005cb8:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	e7de      	b.n	8005c7e <USBD_LL_DataInStage+0x2a>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005cc0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	b12b      	cbz	r3, 8005cd4 <USBD_LL_DataInStage+0x80>
 8005cc8:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8005ccc:	2a03      	cmp	r2, #3
 8005cce:	d101      	bne.n	8005cd4 <USBD_LL_DataInStage+0x80>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 fa41 	bl	800615c <USBD_CtlReceiveStatus>
 8005cda:	e7d5      	b.n	8005c88 <USBD_LL_DataInStage+0x34>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005cdc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0d7      	beq.n	8005c96 <USBD_LL_DataInStage+0x42>
 8005ce6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005cea:	2a03      	cmp	r2, #3
 8005cec:	d1d3      	bne.n	8005c96 <USBD_LL_DataInStage+0x42>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005cee:	4798      	blx	r3
 8005cf0:	e7d1      	b.n	8005c96 <USBD_LL_DataInStage+0x42>

08005cf2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005cf2:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005cf4:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005cf6:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005cf8:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cfa:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005cfc:	2340      	movs	r3, #64	; 0x40
 8005cfe:	f7ff feca 	bl	8005a96 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005d02:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d04:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2180      	movs	r1, #128	; 0x80
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7ff fec2 	bl	8005a96 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8005d18:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d1c:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8005d1e:	b12b      	cbz	r3, 8005d2c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005d20:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005d24:	7921      	ldrb	r1, [r4, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4620      	mov	r0, r4
 8005d2a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}

08005d30 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005d30:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8005d32:	2000      	movs	r0, #0
 8005d34:	4770      	bx	lr

08005d36 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005d36:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005d3a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005d3e:	2304      	movs	r3, #4
 8005d40:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8005d44:	2000      	movs	r0, #0
 8005d46:	4770      	bx	lr

08005d48 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8005d48:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8005d4c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8005d50:	2000      	movs	r0, #0
 8005d52:	4770      	bx	lr

08005d54 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005d54:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d56:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005d5a:	2a03      	cmp	r2, #3
 8005d5c:	d104      	bne.n	8005d68 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8005d5e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	b103      	cbz	r3, 8005d68 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005d66:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8005d68:	2000      	movs	r0, #0
 8005d6a:	bd08      	pop	{r3, pc}

08005d6c <USBD_LL_IsoINIncomplete>:
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	4770      	bx	lr

08005d70 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8005d70:	2000      	movs	r0, #0
 8005d72:	4770      	bx	lr

08005d74 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8005d74:	2000      	movs	r0, #0
 8005d76:	4770      	bx	lr

08005d78 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005d78:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005d80:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8005d84:	7901      	ldrb	r1, [r0, #4]
 8005d86:	6852      	ldr	r2, [r2, #4]
 8005d88:	4790      	blx	r2
   
  return USBD_OK;
}
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	bd08      	pop	{r3, pc}

08005d8e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8005d8e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8005d90:	2180      	movs	r1, #128	; 0x80
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8005d92:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8005d94:	f7ff fe90 	bl	8005ab8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8005d98:	4620      	mov	r0, r4
 8005d9a:	2100      	movs	r1, #0
}
 8005d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8005da0:	f7ff be8a 	b.w	8005ab8 <USBD_LL_StallEP>

08005da4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8005da6:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005da8:	4604      	mov	r4, r0
 8005daa:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	d879      	bhi.n	8005ea4 <USBD_StdDevReq+0x100>
 8005db0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005db4:	00e500c9 	.word	0x00e500c9
 8005db8:	00d90078 	.word	0x00d90078
 8005dbc:	006d0078 	.word	0x006d0078
 8005dc0:	0078000a 	.word	0x0078000a
 8005dc4:	008d00b9 	.word	0x008d00b9
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005dc8:	884b      	ldrh	r3, [r1, #2]
 8005dca:	0a1a      	lsrs	r2, r3, #8
 8005dcc:	3a01      	subs	r2, #1
 8005dce:	2a06      	cmp	r2, #6
 8005dd0:	d868      	bhi.n	8005ea4 <USBD_StdDevReq+0x100>
 8005dd2:	e8df f002 	tbb	[pc, r2]
 8005dd6:	1c04      	.short	0x1c04
 8005dd8:	49676729 	.word	0x49676729
 8005ddc:	52          	.byte	0x52
 8005ddd:	00          	.byte	0x00
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005dde:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005de2:	681b      	ldr	r3, [r3, #0]
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005de4:	7c20      	ldrb	r0, [r4, #16]
 8005de6:	f10d 0106 	add.w	r1, sp, #6
 8005dea:	4798      	blx	r3
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8005dec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d067      	beq.n	8005ec4 <USBD_StdDevReq+0x120>
 8005df4:	88eb      	ldrh	r3, [r5, #6]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d064      	beq.n	8005ec4 <USBD_StdDevReq+0x120>
  {
    
    len = MIN(len , req->wLength);
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	bf28      	it	cs
 8005dfe:	461a      	movcs	r2, r3
 8005e00:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 8005e04:	4601      	mov	r1, r0
    if (pdev->dev_remote_wakeup) 
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
    }
    
    USBD_CtlSendData (pdev, 
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 f971 	bl	80060ee <USBD_CtlSendData>
 8005e0c:	e05a      	b.n	8005ec4 <USBD_StdDevReq+0x120>
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005e0e:	7c02      	ldrb	r2, [r0, #16]
 8005e10:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005e14:	b932      	cbnz	r2, 8005e24 <USBD_StdDevReq+0x80>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e18:	f10d 0006 	add.w	r0, sp, #6
 8005e1c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e1e:	2302      	movs	r3, #2

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e20:	7043      	strb	r3, [r0, #1]
 8005e22:	e7e3      	b.n	8005dec <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	e7f7      	b.n	8005e18 <USBD_StdDevReq+0x74>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d83a      	bhi.n	8005ea4 <USBD_StdDevReq+0x100>
 8005e2e:	e8df f003 	tbb	[pc, r3]
 8005e32:	0703      	.short	0x0703
 8005e34:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005e38:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	e7d1      	b.n	8005de4 <USBD_StdDevReq+0x40>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e40:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	e7cd      	b.n	8005de4 <USBD_StdDevReq+0x40>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e48:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	e7c9      	b.n	8005de4 <USBD_StdDevReq+0x40>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e50:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	e7c5      	b.n	8005de4 <USBD_StdDevReq+0x40>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e58:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	e7c1      	b.n	8005de4 <USBD_StdDevReq+0x40>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e60:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	e7bd      	b.n	8005de4 <USBD_StdDevReq+0x40>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005e68:	7c03      	ldrb	r3, [r0, #16]
 8005e6a:	b9db      	cbnz	r3, 8005ea4 <USBD_StdDevReq+0x100>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e6c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005e70:	f10d 0006 	add.w	r0, sp, #6
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	4798      	blx	r3
 8005e78:	e7b8      	b.n	8005dec <USBD_StdDevReq+0x48>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005e7a:	7c03      	ldrb	r3, [r0, #16]
 8005e7c:	b993      	cbnz	r3, 8005ea4 <USBD_StdDevReq+0x100>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e7e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005e82:	f10d 0006 	add.w	r0, sp, #6
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e8a:	2307      	movs	r3, #7
 8005e8c:	e7c8      	b.n	8005e20 <USBD_StdDevReq+0x7c>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005e8e:	888b      	ldrh	r3, [r1, #4]
 8005e90:	b943      	cbnz	r3, 8005ea4 <USBD_StdDevReq+0x100>
 8005e92:	88cb      	ldrh	r3, [r1, #6]
 8005e94:	b933      	cbnz	r3, 8005ea4 <USBD_StdDevReq+0x100>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005e96:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005e9a:	788d      	ldrb	r5, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005e9c:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005e9e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005ea2:	d103      	bne.n	8005eac <USBD_StdDevReq+0x108>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff ff72 	bl	8005d8e <USBD_CtlError.constprop.0>
    break;
 8005eaa:	e00b      	b.n	8005ec4 <USBD_StdDevReq+0x120>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005eac:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	f7ff fe22 	bl	8005afa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 f945 	bl	8006146 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8005ebc:	b12d      	cbz	r5, 8005eca <USBD_StdDevReq+0x126>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005ebe:	2302      	movs	r3, #2
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005ec0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
    USBD_CtlError(pdev , req);
    break;
  }
  
  return ret;
}
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	b003      	add	sp, #12
 8005ec8:	bd30      	pop	{r4, r5, pc}
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e7f8      	b.n	8005ec0 <USBD_StdDevReq+0x11c>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005ece:	7889      	ldrb	r1, [r1, #2]
 8005ed0:	4d30      	ldr	r5, [pc, #192]	; (8005f94 <USBD_StdDevReq+0x1f0>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005ed2:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005ed4:	7029      	strb	r1, [r5, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005ed6:	d8e5      	bhi.n	8005ea4 <USBD_StdDevReq+0x100>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8005ed8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d00c      	beq.n	8005efa <USBD_StdDevReq+0x156>
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d1df      	bne.n	8005ea4 <USBD_StdDevReq+0x100>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005ee4:	b9b1      	cbnz	r1, 8005f14 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8005eec:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005eee:	f7ff fe4b 	bl	8005b88 <USBD_ClrClassConfig>
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev_remote_wakeup = 0; 
      pdev->pClass->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f927 	bl	8006146 <USBD_CtlSendStatus>
 8005ef8:	e7e4      	b.n	8005ec4 <USBD_StdDevReq+0x120>
  else 
  {
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8005efa:	2900      	cmp	r1, #0
 8005efc:	d0f9      	beq.n	8005ef2 <USBD_StdDevReq+0x14e>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005efe:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f00:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005f02:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f04:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f7ff fe32 	bl	8005b72 <USBD_SetClassConfig>
 8005f0e:	2802      	cmp	r0, #2
 8005f10:	d1ef      	bne.n	8005ef2 <USBD_StdDevReq+0x14e>
 8005f12:	e7c7      	b.n	8005ea4 <USBD_StdDevReq+0x100>
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8005f14:	6841      	ldr	r1, [r0, #4]
 8005f16:	2901      	cmp	r1, #1
 8005f18:	d0eb      	beq.n	8005ef2 <USBD_StdDevReq+0x14e>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005f1a:	b2c9      	uxtb	r1, r1
 8005f1c:	f7ff fe34 	bl	8005b88 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8005f20:	7829      	ldrb	r1, [r5, #0]
 8005f22:	6061      	str	r1, [r4, #4]
 8005f24:	e7f0      	b.n	8005f08 <USBD_StdDevReq+0x164>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8005f26:	88ca      	ldrh	r2, [r1, #6]
 8005f28:	2a01      	cmp	r2, #1
 8005f2a:	d1bb      	bne.n	8005ea4 <USBD_StdDevReq+0x100>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8005f2c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d003      	beq.n	8005f3c <USBD_StdDevReq+0x198>
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d1b5      	bne.n	8005ea4 <USBD_StdDevReq+0x100>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8005f38:	1d01      	adds	r1, r0, #4
 8005f3a:	e764      	b.n	8005e06 <USBD_StdDevReq+0x62>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8005f3c:	4601      	mov	r1, r0
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f841 3f08 	str.w	r3, [r1, #8]!
 8005f44:	e75f      	b.n	8005e06 <USBD_StdDevReq+0x62>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8005f46:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005f4a:	3b02      	subs	r3, #2
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d8a9      	bhi.n	8005ea4 <USBD_StdDevReq+0x100>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8005f50:	2301      	movs	r3, #1
 8005f52:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005f54:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8005f58:	b10b      	cbz	r3, 8005f5e <USBD_StdDevReq+0x1ba>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f104 010c 	add.w	r1, r4, #12
 8005f64:	e74f      	b.n	8005e06 <USBD_StdDevReq+0x62>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f66:	884b      	ldrh	r3, [r1, #2]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d1ab      	bne.n	8005ec4 <USBD_StdDevReq+0x120>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev_remote_wakeup = 0; 
 8005f6c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8005f70:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005f74:	4629      	mov	r1, r5
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4798      	blx	r3
 8005f7c:	e7b9      	b.n	8005ef2 <USBD_StdDevReq+0x14e>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8005f7e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005f82:	3b02      	subs	r3, #2
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d88d      	bhi.n	8005ea4 <USBD_StdDevReq+0x100>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8005f88:	884b      	ldrh	r3, [r1, #2]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d19a      	bne.n	8005ec4 <USBD_StdDevReq+0x120>
    {
      pdev->dev_remote_wakeup = 0; 
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e7ec      	b.n	8005f6c <USBD_StdDevReq+0x1c8>
 8005f92:	bf00      	nop
 8005f94:	200009c0 	.word	0x200009c0

08005f98 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005f98:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8005f9a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005f9e:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8005fa4:	d10d      	bne.n	8005fc2 <USBD_StdItfReq+0x2a>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005fa6:	790b      	ldrb	r3, [r1, #4]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d80a      	bhi.n	8005fc2 <USBD_StdItfReq+0x2a>
    {
      pdev->pClass->Setup (pdev, req); 
 8005fac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005fb4:	88eb      	ldrh	r3, [r5, #6]
 8005fb6:	b913      	cbnz	r3, 8005fbe <USBD_StdItfReq+0x26>
      {
         USBD_CtlSendStatus(pdev);
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 f8c4 	bl	8006146 <USBD_CtlSendStatus>
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return USBD_OK;
}
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8005fc2:	f7ff fee4 	bl	8005d8e <USBD_CtlError.constprop.0>
    break;
 8005fc6:	e7fa      	b.n	8005fbe <USBD_StdItfReq+0x26>

08005fc8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005fc8:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005fca:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005fcc:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005fce:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8005fd2:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005fd8:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005fda:	d105      	bne.n	8005fe8 <USBD_StdEPReq+0x20>
  {
    pdev->pClass->Setup (pdev, req);
 8005fdc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	4798      	blx	r3
    
  default:
    break;
  }
  return ret;
}
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
    
    return USBD_OK;
  }
  
  switch (req->bRequest) 
 8005fe8:	784a      	ldrb	r2, [r1, #1]
 8005fea:	2a01      	cmp	r2, #1
 8005fec:	d01c      	beq.n	8006028 <USBD_StdEPReq+0x60>
 8005fee:	d32a      	bcc.n	8006046 <USBD_StdEPReq+0x7e>
 8005ff0:	2a03      	cmp	r2, #3
 8005ff2:	d1f7      	bne.n	8005fe4 <USBD_StdEPReq+0x1c>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8005ff4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005ff8:	2a02      	cmp	r2, #2
 8005ffa:	d040      	beq.n	800607e <USBD_StdEPReq+0xb6>
 8005ffc:	2a03      	cmp	r2, #3
 8005ffe:	d002      	beq.n	8006006 <USBD_StdEPReq+0x3e>
                        (uint8_t *)&pep->status,
                        2);
      break;
      
    default:                         
      USBD_CtlError(pdev , req);
 8006000:	f7ff fec5 	bl	8005d8e <USBD_CtlError.constprop.0>
      break;
 8006004:	e7ee      	b.n	8005fe4 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006006:	884a      	ldrh	r2, [r1, #2]
 8006008:	b922      	cbnz	r2, 8006014 <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800600a:	065e      	lsls	r6, r3, #25
 800600c:	d002      	beq.n	8006014 <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 800600e:	4619      	mov	r1, r3
 8006010:	f7ff fd52 	bl	8005ab8 <USBD_LL_StallEP>
      if (req->wValue == USB_FEATURE_EP_HALT)
      {
        if ((ep_addr & 0x7F) != 0x00) 
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
          pdev->pClass->Setup (pdev, req);
 8006014:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006018:	4629      	mov	r1, r5
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4620      	mov	r0, r4
 800601e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006020:	4620      	mov	r0, r4
 8006022:	f000 f890 	bl	8006146 <USBD_CtlSendStatus>
 8006026:	e7dd      	b.n	8005fe4 <USBD_StdEPReq+0x1c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8006028:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800602c:	2a02      	cmp	r2, #2
 800602e:	d026      	beq.n	800607e <USBD_StdEPReq+0xb6>
 8006030:	2a03      	cmp	r2, #3
 8006032:	d1e5      	bne.n	8006000 <USBD_StdEPReq+0x38>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006034:	884a      	ldrh	r2, [r1, #2]
 8006036:	2a00      	cmp	r2, #0
 8006038:	d1d4      	bne.n	8005fe4 <USBD_StdEPReq+0x1c>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 800603a:	0659      	lsls	r1, r3, #25
 800603c:	d0f0      	beq.n	8006020 <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800603e:	4619      	mov	r1, r3
 8006040:	f7ff fd41 	bl	8005ac6 <USBD_LL_ClearStallEP>
 8006044:	e7e6      	b.n	8006014 <USBD_StdEPReq+0x4c>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8006046:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800604a:	2a02      	cmp	r2, #2
 800604c:	d017      	beq.n	800607e <USBD_StdEPReq+0xb6>
 800604e:	2a03      	cmp	r2, #3
 8006050:	d1d6      	bne.n	8006000 <USBD_StdEPReq+0x38>
 8006052:	f003 057f 	and.w	r5, r3, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006056:	f016 0f80 	tst.w	r6, #128	; 0x80
 800605a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800605e:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006060:	bf14      	ite	ne
 8006062:	3514      	addne	r5, #20
 8006064:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006068:	f7ff fd34 	bl	8005ad4 <USBD_LL_IsStallEP>
 800606c:	b168      	cbz	r0, 800608a <USBD_StdEPReq+0xc2>
      {
        pep->status = 0x0001;     
 800606e:	2301      	movs	r3, #1
 8006070:	602b      	str	r3, [r5, #0]
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
 8006072:	2202      	movs	r2, #2
 8006074:	4629      	mov	r1, r5
 8006076:	4620      	mov	r0, r4
 8006078:	f000 f839 	bl	80060ee <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 800607c:	e7b2      	b.n	8005fe4 <USBD_StdEPReq+0x1c>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 800607e:	065a      	lsls	r2, r3, #25
 8006080:	d0b0      	beq.n	8005fe4 <USBD_StdEPReq+0x1c>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8006082:	4619      	mov	r1, r3
 8006084:	f7ff fd18 	bl	8005ab8 <USBD_LL_StallEP>
 8006088:	e7ac      	b.n	8005fe4 <USBD_StdEPReq+0x1c>
      {
        pep->status = 0x0001;     
      }
      else
      {
        pep->status = 0x0000;  
 800608a:	6028      	str	r0, [r5, #0]
 800608c:	e7f1      	b.n	8006072 <USBD_StdEPReq+0xaa>

0800608e <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 800608e:	780b      	ldrb	r3, [r1, #0]
 8006090:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006092:	784b      	ldrb	r3, [r1, #1]
 8006094:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006096:	78ca      	ldrb	r2, [r1, #3]
 8006098:	788b      	ldrb	r3, [r1, #2]
 800609a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800609e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80060a0:	794a      	ldrb	r2, [r1, #5]
 80060a2:	790b      	ldrb	r3, [r1, #4]
 80060a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80060a8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80060aa:	79ca      	ldrb	r2, [r1, #7]
 80060ac:	798b      	ldrb	r3, [r1, #6]
 80060ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80060b2:	80c3      	strh	r3, [r0, #6]
 80060b4:	4770      	bx	lr

080060b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060b6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80060b8:	b188      	cbz	r0, 80060de <USBD_GetString+0x28>
 80060ba:	4605      	mov	r5, r0
 80060bc:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80060be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	d1f9      	bne.n	80060bc <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	3302      	adds	r3, #2
 80060cc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80060ce:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80060d0:	2303      	movs	r3, #3
 80060d2:	704b      	strb	r3, [r1, #1]
 80060d4:	3801      	subs	r0, #1
 80060d6:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 80060d8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80060dc:	b905      	cbnz	r5, 80060e0 <USBD_GetString+0x2a>
 80060de:	bd30      	pop	{r4, r5, pc}
    {
      unicode[idx++] = *desc++;
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 80060e6:	3302      	adds	r3, #2
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	548c      	strb	r4, [r1, r2]
 80060ec:	e7f4      	b.n	80060d8 <USBD_GetString+0x22>

080060ee <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80060ee:	b510      	push	{r4, lr}
 80060f0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80060f2:	2202      	movs	r2, #2
 80060f4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80060f8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80060fa:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80060fc:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80060fe:	2100      	movs	r1, #0
 8006100:	f7ff fd02 	bl	8005b08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8006104:	2000      	movs	r0, #0
 8006106:	bd10      	pop	{r4, pc}

08006108 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006108:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800610a:	4613      	mov	r3, r2
 800610c:	460a      	mov	r2, r1
 800610e:	2100      	movs	r1, #0
 8006110:	f7ff fcfa 	bl	8005b08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8006114:	2000      	movs	r0, #0
 8006116:	bd08      	pop	{r3, pc}

08006118 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006118:	b510      	push	{r4, lr}
 800611a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800611c:	2203      	movs	r2, #3
 800611e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8006122:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8006126:	460a      	mov	r2, r1
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8006128:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800612c:	2100      	movs	r1, #0
 800612e:	f7ff fcf2 	bl	8005b16 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8006132:	2000      	movs	r0, #0
 8006134:	bd10      	pop	{r4, pc}

08006136 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006136:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8006138:	4613      	mov	r3, r2
 800613a:	460a      	mov	r2, r1
 800613c:	2100      	movs	r1, #0
 800613e:	f7ff fcea 	bl	8005b16 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8006142:	2000      	movs	r0, #0
 8006144:	bd08      	pop	{r3, pc}

08006146 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006146:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006148:	2304      	movs	r3, #4
 800614a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800614e:	2300      	movs	r3, #0
 8006150:	461a      	mov	r2, r3
 8006152:	4619      	mov	r1, r3
 8006154:	f7ff fcd8 	bl	8005b08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8006158:	2000      	movs	r0, #0
 800615a:	bd08      	pop	{r3, pc}

0800615c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800615c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800615e:	2305      	movs	r3, #5
 8006160:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8006164:	2300      	movs	r3, #0
 8006166:	461a      	mov	r2, r3
 8006168:	4619      	mov	r1, r3
 800616a:	f7ff fcd4 	bl	8005b16 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800616e:	2000      	movs	r0, #0
 8006170:	bd08      	pop	{r3, pc}
	...

08006174 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8006174:	2312      	movs	r3, #18
 8006176:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006178:	4800      	ldr	r0, [pc, #0]	; (800617c <USBD_FS_DeviceDescriptor+0x8>)
 800617a:	4770      	bx	lr
 800617c:	20000454 	.word	0x20000454

08006180 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8006180:	2304      	movs	r3, #4
 8006182:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006184:	4800      	ldr	r0, [pc, #0]	; (8006188 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006186:	4770      	bx	lr
 8006188:	20000468 	.word	0x20000468

0800618c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800618c:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800618e:	4c04      	ldr	r4, [pc, #16]	; (80061a0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006190:	4804      	ldr	r0, [pc, #16]	; (80061a4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006192:	460a      	mov	r2, r1
 8006194:	4621      	mov	r1, r4
 8006196:	f7ff ff8e 	bl	80060b6 <USBD_GetString>
  return USBD_StrDesc;
}
 800619a:	4620      	mov	r0, r4
 800619c:	bd10      	pop	{r4, pc}
 800619e:	bf00      	nop
 80061a0:	20000dec 	.word	0x20000dec
 80061a4:	080074cd 	.word	0x080074cd

080061a8 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80061a8:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061aa:	4c04      	ldr	r4, [pc, #16]	; (80061bc <USBD_FS_ProductStrDescriptor+0x14>)
 80061ac:	4804      	ldr	r0, [pc, #16]	; (80061c0 <USBD_FS_ProductStrDescriptor+0x18>)
 80061ae:	460a      	mov	r2, r1
 80061b0:	4621      	mov	r1, r4
 80061b2:	f7ff ff80 	bl	80060b6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 80061b6:	4620      	mov	r0, r4
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	bf00      	nop
 80061bc:	20000dec 	.word	0x20000dec
 80061c0:	080074e0 	.word	0x080074e0

080061c4 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80061c4:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80061c6:	4c04      	ldr	r4, [pc, #16]	; (80061d8 <USBD_FS_SerialStrDescriptor+0x14>)
 80061c8:	4804      	ldr	r0, [pc, #16]	; (80061dc <USBD_FS_SerialStrDescriptor+0x18>)
 80061ca:	460a      	mov	r2, r1
 80061cc:	4621      	mov	r1, r4
 80061ce:	f7ff ff72 	bl	80060b6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 80061d2:	4620      	mov	r0, r4
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	bf00      	nop
 80061d8:	20000dec 	.word	0x20000dec
 80061dc:	080074f6 	.word	0x080074f6

080061e0 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80061e0:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061e2:	4c04      	ldr	r4, [pc, #16]	; (80061f4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80061e4:	4804      	ldr	r0, [pc, #16]	; (80061f8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80061e6:	460a      	mov	r2, r1
 80061e8:	4621      	mov	r1, r4
 80061ea:	f7ff ff64 	bl	80060b6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 80061ee:	4620      	mov	r0, r4
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	bf00      	nop
 80061f4:	20000dec 	.word	0x20000dec
 80061f8:	080074b4 	.word	0x080074b4

080061fc <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80061fc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061fe:	4c04      	ldr	r4, [pc, #16]	; (8006210 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006200:	4804      	ldr	r0, [pc, #16]	; (8006214 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006202:	460a      	mov	r2, r1
 8006204:	4621      	mov	r1, r4
 8006206:	f7ff ff56 	bl	80060b6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 800620a:	4620      	mov	r0, r4
 800620c:	bd10      	pop	{r4, pc}
 800620e:	bf00      	nop
 8006210:	20000dec 	.word	0x20000dec
 8006214:	080074bf 	.word	0x080074bf

08006218 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8006218:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800621a:	4c09      	ldr	r4, [pc, #36]	; (8006240 <MX_USB_DEVICE_Init+0x28>)
 800621c:	4909      	ldr	r1, [pc, #36]	; (8006244 <MX_USB_DEVICE_Init+0x2c>)
 800621e:	2200      	movs	r2, #0
 8006220:	4620      	mov	r0, r4
 8006222:	f7ff fc85 	bl	8005b30 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8006226:	4908      	ldr	r1, [pc, #32]	; (8006248 <MX_USB_DEVICE_Init+0x30>)
 8006228:	4620      	mov	r0, r4
 800622a:	f7ff fc96 	bl	8005b5a <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800622e:	4620      	mov	r0, r4
 8006230:	4906      	ldr	r1, [pc, #24]	; (800624c <MX_USB_DEVICE_Init+0x34>)
 8006232:	f000 f8f2 	bl	800641a <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8006236:	4620      	mov	r0, r4

}
 8006238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 800623c:	f7ff bc94 	b.w	8005b68 <USBD_Start>
 8006240:	20000fec 	.word	0x20000fec
 8006244:	20000438 	.word	0x20000438
 8006248:	2000046c 	.word	0x2000046c
 800624c:	2000057c 	.word	0x2000057c

08006250 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006250:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8006254:	b11b      	cbz	r3, 800625e <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8006256:	2000      	movs	r0, #0
 8006258:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800625c:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800625e:	2002      	movs	r0, #2
  }
}
 8006260:	4770      	bx	lr

08006262 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8006262:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8006266:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006268:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800626c:	b15b      	cbz	r3, 8006286 <USBD_CDC_EP0_RxReady+0x24>
 800626e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006272:	28ff      	cmp	r0, #255	; 0xff
 8006274:	d007      	beq.n	8006286 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800627c:	4621      	mov	r1, r4
 800627e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8006280:	23ff      	movs	r3, #255	; 0xff
 8006282:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8006286:	2000      	movs	r0, #0
 8006288:	bd10      	pop	{r4, pc}
	...

0800628c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800628c:	2343      	movs	r3, #67	; 0x43
 800628e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8006290:	4800      	ldr	r0, [pc, #0]	; (8006294 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006292:	4770      	bx	lr
 8006294:	200004a4 	.word	0x200004a4

08006298 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006298:	2343      	movs	r3, #67	; 0x43
 800629a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800629c:	4800      	ldr	r0, [pc, #0]	; (80062a0 <USBD_CDC_GetHSCfgDesc+0x8>)
 800629e:	4770      	bx	lr
 80062a0:	200004e8 	.word	0x200004e8

080062a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80062a4:	2343      	movs	r3, #67	; 0x43
 80062a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80062a8:	4800      	ldr	r0, [pc, #0]	; (80062ac <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80062aa:	4770      	bx	lr
 80062ac:	20000538 	.word	0x20000538

080062b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80062b0:	230a      	movs	r3, #10
 80062b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80062b4:	4800      	ldr	r0, [pc, #0]	; (80062b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80062b6:	4770      	bx	lr
 80062b8:	2000052c 	.word	0x2000052c

080062bc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80062c0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80062c4:	f7ff fc2e 	bl	8005b24 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80062c8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80062cc:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80062d0:	b14b      	cbz	r3, 80062e6 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062d2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80062d6:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80062e0:	4798      	blx	r3

    return USBD_OK;
 80062e2:	2000      	movs	r0, #0
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 80062e6:	2002      	movs	r0, #2
  }
}
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080062ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ee:	780f      	ldrb	r7, [r1, #0]
 80062f0:	f017 0360 	ands.w	r3, r7, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80062f4:	4606      	mov	r6, r0
 80062f6:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062f8:	d023      	beq.n	8006342 <USBD_CDC_Setup+0x56>
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d119      	bne.n	8006332 <USBD_CDC_Setup+0x46>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80062fe:	88ca      	ldrh	r2, [r1, #6]
 8006300:	784b      	ldrb	r3, [r1, #1]
 8006302:	b1c2      	cbz	r2, 8006336 <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 8006304:	0639      	lsls	r1, r7, #24
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006306:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
 800630a:	d50b      	bpl.n	8006324 <USBD_CDC_Setup+0x38>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800630c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8006310:	4618      	mov	r0, r3
 8006312:	688f      	ldr	r7, [r1, #8]
 8006314:	4629      	mov	r1, r5
 8006316:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8006318:	88e2      	ldrh	r2, [r4, #6]
 800631a:	4629      	mov	r1, r5
 800631c:	4630      	mov	r0, r6

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 800631e:	f7ff fee6 	bl	80060ee <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 8006322:	e006      	b.n	8006332 <USBD_CDC_Setup+0x46>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8006324:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8006328:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 800632c:	4629      	mov	r1, r5
 800632e:	f7ff fef3 	bl	8006118 <USBD_CtlPrepareRx>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8006332:	2000      	movs	r0, #0
 8006334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006336:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800633a:	6884      	ldr	r4, [r0, #8]
 800633c:	4618      	mov	r0, r3
 800633e:	47a0      	blx	r4
 8006340:	e7f7      	b.n	8006332 <USBD_CDC_Setup+0x46>
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006342:	784b      	ldrb	r3, [r1, #1]
 8006344:	2b0a      	cmp	r3, #10
 8006346:	d1f4      	bne.n	8006332 <USBD_CDC_Setup+0x46>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8006348:	2201      	movs	r2, #1
 800634a:	4901      	ldr	r1, [pc, #4]	; (8006350 <USBD_CDC_Setup+0x64>)
 800634c:	e7e7      	b.n	800631e <USBD_CDC_Setup+0x32>
 800634e:	bf00      	nop
 8006350:	200009c1 	.word	0x200009c1

08006354 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8006354:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8006356:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8006358:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800635a:	f7ff fba6 	bl	8005aaa <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800635e:	2101      	movs	r1, #1
 8006360:	4620      	mov	r0, r4
 8006362:	f7ff fba2 	bl	8005aaa <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8006366:	2182      	movs	r1, #130	; 0x82
 8006368:	4620      	mov	r0, r4
 800636a:	f7ff fb9e 	bl	8005aaa <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800636e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8006372:	b153      	cbz	r3, 800638a <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006374:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800637c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8006380:	f000 fc78 	bl	8006c74 <free>
    pdev->pClassData = NULL;
 8006384:	2300      	movs	r3, #0
 8006386:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 800638a:	2000      	movs	r0, #0
 800638c:	bd10      	pop	{r4, pc}

0800638e <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800638e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006390:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8006392:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006394:	bb7b      	cbnz	r3, 80063f6 <USBD_CDC_Init+0x68>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8006396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800639a:	2202      	movs	r2, #2
 800639c:	2181      	movs	r1, #129	; 0x81
 800639e:	f7ff fb7a 	bl	8005a96 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80063a2:	f44f 7300 	mov.w	r3, #512	; 0x200
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80063a6:	2202      	movs	r2, #2
 80063a8:	2101      	movs	r1, #1
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7ff fb73 	bl	8005a96 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80063b0:	2308      	movs	r3, #8
 80063b2:	2203      	movs	r2, #3
 80063b4:	2182      	movs	r1, #130	; 0x82
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7ff fb6d 	bl	8005a96 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80063bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063c0:	f000 fc50 	bl	8006c64 <malloc>
 80063c4:	4606      	mov	r6, r0
 80063c6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80063ca:	b320      	cbz	r0, 8006416 <USBD_CDC_Init+0x88>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063cc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80063d4:	7c27      	ldrb	r7, [r4, #16]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80063d6:	2500      	movs	r5, #0
 80063d8:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80063dc:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80063e0:	b987      	cbnz	r7, 8006404 <USBD_CDC_Init+0x76>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80063ea:	2101      	movs	r1, #1
 80063ec:	4620      	mov	r0, r4
 80063ee:	f7ff fb92 	bl	8005b16 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80063f2:	4638      	mov	r0, r7
 80063f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80063f6:	2340      	movs	r3, #64	; 0x40
 80063f8:	2202      	movs	r2, #2
 80063fa:	2181      	movs	r1, #129	; 0x81
 80063fc:	f7ff fb4b 	bl	8005a96 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	e7d0      	b.n	80063a6 <USBD_CDC_Init+0x18>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006404:	2340      	movs	r3, #64	; 0x40
 8006406:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800640a:	2101      	movs	r1, #1
 800640c:	4620      	mov	r0, r4
 800640e:	f7ff fb82 	bl	8005b16 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8006412:	4628      	mov	r0, r5
 8006414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8006416:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8006418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800641a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800641a:	b119      	cbz	r1, 8006424 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800641c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8006420:	2000      	movs	r0, #0
 8006422:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8006424:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 8006426:	4770      	bx	lr

08006428 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006428:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800642c:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 800642e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8006432:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8006436:	4770      	bx	lr

08006438 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8006438:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800643c:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800643e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8006442:	4770      	bx	lr

08006444 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006444:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8006448:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800644a:	b162      	cbz	r2, 8006466 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800644c:	7c04      	ldrb	r4, [r0, #16]
 800644e:	b944      	cbnz	r4, 8006462 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006450:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006454:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006458:	2101      	movs	r1, #1
 800645a:	f7ff fb5c 	bl	8005b16 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800645e:	2000      	movs	r0, #0
 8006460:	bd10      	pop	{r4, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006462:	2340      	movs	r3, #64	; 0x40
 8006464:	e7f6      	b.n	8006454 <USBD_CDC_ReceivePacket+0x10>
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8006466:	2002      	movs	r0, #2
  }
}
 8006468:	bd10      	pop	{r4, pc}

0800646a <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 800646a:	2000      	movs	r0, #0
 800646c:	4770      	bx	lr

0800646e <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800646e:	2000      	movs	r0, #0
 8006470:	4770      	bx	lr
	...

08006474 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8006474:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006476:	4c05      	ldr	r4, [pc, #20]	; (800648c <CDC_Receive_FS+0x18>)
 8006478:	4601      	mov	r1, r0
 800647a:	4620      	mov	r0, r4
 800647c:	f7ff ffdc 	bl	8006438 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006480:	4620      	mov	r0, r4
 8006482:	f7ff ffdf 	bl	8006444 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 8006486:	2000      	movs	r0, #0
 8006488:	bd10      	pop	{r4, pc}
 800648a:	bf00      	nop
 800648c:	20000fec 	.word	0x20000fec

08006490 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8006490:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006492:	4c06      	ldr	r4, [pc, #24]	; (80064ac <CDC_Init_FS+0x1c>)
 8006494:	4906      	ldr	r1, [pc, #24]	; (80064b0 <CDC_Init_FS+0x20>)
 8006496:	2200      	movs	r2, #0
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff ffc5 	bl	8006428 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800649e:	4905      	ldr	r1, [pc, #20]	; (80064b4 <CDC_Init_FS+0x24>)
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff ffc9 	bl	8006438 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 80064a6:	2000      	movs	r0, #0
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	bf00      	nop
 80064ac:	20000fec 	.word	0x20000fec
 80064b0:	20001214 	.word	0x20001214
 80064b4:	20001210 	.word	0x20001210

080064b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80064ba:	4606      	mov	r6, r0
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80064bc:	b08b      	sub	sp, #44	; 0x2c
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80064be:	2800      	cmp	r0, #0
 80064c0:	d064      	beq.n	800658c <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064c2:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80064c4:	4634      	mov	r4, r6
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064c6:	f880 3381 	strb.w	r3, [r0, #897]	; 0x381
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80064ca:	f7ff fa1b 	bl	8005904 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80064ce:	f854 0b10 	ldr.w	r0, [r4], #16
 80064d2:	f7fd fa59 	bl	8003988 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80064d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064d8:	466d      	mov	r5, sp
 80064da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80064e8:	1d37      	adds	r7, r6, #4
 80064ea:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80064ee:	6830      	ldr	r0, [r6, #0]
 80064f0:	f7fd fa0a 	bl	8003908 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80064f4:	2100      	movs	r1, #0
 80064f6:	6830      	ldr	r0, [r6, #0]
 80064f8:	f7fd fa4e 	bl	8003998 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80064fc:	2100      	movs	r1, #0
 80064fe:	4633      	mov	r3, r6
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8006500:	4632      	mov	r2, r6
 8006502:	f106 0410 	add.w	r4, r6, #16
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8006506:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006508:	4608      	mov	r0, r1
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
   hpcd->IN_ep[i].num = i;
 800650a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 800650e:	87d1      	strh	r1, [r2, #62]	; 0x3e
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8006510:	3101      	adds	r1, #1
 8006512:	290f      	cmp	r1, #15
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8006514:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006518:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 800651c:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 800651e:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8006520:	64d0      	str	r0, [r2, #76]	; 0x4c
 8006522:	f102 021c 	add.w	r2, r2, #28
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8006526:	d1f0      	bne.n	800650a <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8006528:	2200      	movs	r2, #0
 800652a:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 800652e:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8006530:	f102 0040 	add.w	r0, r2, #64	; 0x40
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
   hpcd->OUT_ep[i].num = i;
 8006534:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
   hpcd->IN_ep[i].tx_fifo_num = i;
 8006538:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 800653a:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 800653e:	3201      	adds	r2, #1
 8006540:	2a0f      	cmp	r2, #15
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8006542:	f883 11dd 	strb.w	r1, [r3, #477]	; 0x1dd
   hpcd->OUT_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006546:	f883 11df 	strb.w	r1, [r3, #479]	; 0x1df
   hpcd->OUT_ep[i].maxpacket = 0U;
 800654a:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800654e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0U;
 8006552:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8006556:	6041      	str	r1, [r0, #4]
 8006558:	f103 031c 	add.w	r3, r3, #28
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 800655c:	d1e8      	bne.n	8006530 <HAL_PCD_Init+0x78>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800655e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006560:	466d      	mov	r5, sp
 8006562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006568:	e894 0003 	ldmia.w	r4, {r0, r1}
 800656c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006570:	4670      	mov	r0, lr
 8006572:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006576:	f7fd fa29 	bl	80039cc <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 800657a:	2301      	movs	r3, #1
 800657c:	f886 3381 	strb.w	r3, [r6, #897]	; 0x381
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8006580:	6830      	ldr	r0, [r6, #0]
 8006582:	f7fd fe31 	bl	80041e8 <USB_DevDisconnect>
 return HAL_OK;
 8006586:	2000      	movs	r0, #0
}
 8006588:	b00b      	add	sp, #44	; 0x2c
 800658a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 800658c:	2001      	movs	r0, #1
 800658e:	e7fb      	b.n	8006588 <HAL_PCD_Init+0xd0>

08006590 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8006590:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 8006594:	2b01      	cmp	r3, #1
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8006596:	b510      	push	{r4, lr}
 8006598:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800659a:	d00c      	beq.n	80065b6 <HAL_PCD_Start+0x26>
 800659c:	2301      	movs	r3, #1
 800659e:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_DevConnect (hpcd->Instance);  
 80065a2:	6800      	ldr	r0, [r0, #0]
 80065a4:	f7fd fe14 	bl	80041d0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80065a8:	6820      	ldr	r0, [r4, #0]
 80065aa:	f7fd f9e5 	bl	8003978 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80065ae:	2000      	movs	r0, #0
 80065b0:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 80065b4:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80065b6:	2002      	movs	r0, #2
  USB_DevConnect (hpcd->Instance);  
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd); 
  return HAL_OK;
}
 80065b8:	bd10      	pop	{r4, pc}

080065ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065be:	f8d0 9000 	ldr.w	r9, [r0]
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065c2:	b087      	sub	sp, #28
 80065c4:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80065c6:	4648      	mov	r0, r9
 80065c8:	f7fd fe4e 	bl	8004268 <USB_GetMode>
 80065cc:	9002      	str	r0, [sp, #8]
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f040 812e 	bne.w	8006830 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 80065d4:	6820      	ldr	r0, [r4, #0]
 80065d6:	f7fd fe13 	bl	8004200 <USB_ReadInterrupts>
 80065da:	2800      	cmp	r0, #0
 80065dc:	f000 8128 	beq.w	8006830 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80065e0:	6820      	ldr	r0, [r4, #0]
 80065e2:	f7fd fe0d 	bl	8004200 <USB_ReadInterrupts>
 80065e6:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80065e8:	bf48      	it	mi
 80065ea:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80065ec:	6820      	ldr	r0, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80065ee:	bf42      	ittt	mi
 80065f0:	6953      	ldrmi	r3, [r2, #20]
 80065f2:	f003 0302 	andmi.w	r3, r3, #2
 80065f6:	6153      	strmi	r3, [r2, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80065f8:	f7fd fe02 	bl	8004200 <USB_ReadInterrupts>
 80065fc:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8006600:	d00a      	beq.n	8006618 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006602:	6820      	ldr	r0, [r4, #0]
 8006604:	f7fd fe00 	bl	8004208 <USB_ReadDevAllOutEpInterrupt>
 8006608:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 800660c:	4607      	mov	r7, r0
 800660e:	46a2      	mov	sl, r4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 8006610:	2500      	movs	r5, #0
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 8006612:	2f00      	cmp	r7, #0
 8006614:	f040 810f 	bne.w	8006836 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006618:	6820      	ldr	r0, [r4, #0]
 800661a:	f7fd fdf1 	bl	8004200 <USB_ReadInterrupts>
 800661e:	0341      	lsls	r1, r0, #13
 8006620:	d50b      	bpl.n	800663a <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	f7fd fdf8 	bl	8004218 <USB_ReadDevAllInEpInterrupt>
 8006628:	4626      	mov	r6, r4
 800662a:	9003      	str	r0, [sp, #12]
 800662c:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8006630:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8006632:	9b03      	ldr	r3, [sp, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 813f 	bne.w	80068b8 <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	f7fd fde0 	bl	8004200 <USB_ReadInterrupts>
 8006640:	2800      	cmp	r0, #0
 8006642:	da0d      	bge.n	8006660 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006644:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8006650:	4620      	mov	r0, r4
 8006652:	f7ff f9d5 	bl	8005a00 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	6953      	ldr	r3, [r2, #20]
 800665a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800665e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	f7fd fdcd 	bl	8004200 <USB_ReadInterrupts>
 8006666:	0506      	lsls	r6, r0, #20
 8006668:	d50b      	bpl.n	8006682 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800666a:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 800666e:	07d8      	lsls	r0, r3, #31
 8006670:	d502      	bpl.n	8006678 <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8006672:	4620      	mov	r0, r4
 8006674:	f7ff f9ac 	bl	80059d0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	6953      	ldr	r3, [r2, #20]
 800667c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006680:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006682:	6820      	ldr	r0, [r4, #0]
 8006684:	f7fd fdbc 	bl	8004200 <USB_ReadInterrupts>
 8006688:	04c1      	lsls	r1, r0, #19
 800668a:	d537      	bpl.n	80066fc <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 800668c:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8006690:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 8006692:	6820      	ldr	r0, [r4, #0]
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 800669a:	2100      	movs	r1, #0
 800669c:	f7fd fa50 	bl	8003b40 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066a0:	6861      	ldr	r1, [r4, #4]
 80066a2:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80066a6:	22ff      	movs	r2, #255	; 0xff
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066a8:	9802      	ldr	r0, [sp, #8]
 80066aa:	4288      	cmp	r0, r1
 80066ac:	f040 8192 	bne.w	80069d4 <HAL_PCD_IRQHandler+0x41a>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066b4:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066b6:	69f3      	ldr	r3, [r6, #28]
 80066b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80066bc:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 80066be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 818f 	beq.w	80069e4 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 80066c6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80066ca:	f043 030b 	orr.w	r3, r3, #11
 80066ce:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80066d2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80066d4:	f043 030b 	orr.w	r3, r3, #11
 80066d8:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80066da:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80066de:	7c21      	ldrb	r1, [r4, #16]
 80066e0:	6820      	ldr	r0, [r4, #0]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80066e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066e6:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80066ea:	f504 7261 	add.w	r2, r4, #900	; 0x384
 80066ee:	f7fd fddb 	bl	80042a8 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	6953      	ldr	r3, [r2, #20]
 80066f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066fa:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	f7fd fd7f 	bl	8004200 <USB_ReadInterrupts>
 8006702:	0482      	lsls	r2, r0, #18
 8006704:	d51d      	bpl.n	8006742 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8006706:	6820      	ldr	r0, [r4, #0]
 8006708:	f7fd fdb2 	bl	8004270 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	68c3      	ldr	r3, [r0, #12]
 8006710:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8006714:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8006716:	f7fd fa3d 	bl	8003b94 <USB_GetDevSpeed>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	2800      	cmp	r0, #0
 800671e:	f040 816a 	bne.w	80069f6 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8006722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006726:	6162      	str	r2, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8006728:	68da      	ldr	r2, [r3, #12]
      USB_ActivateSetup(hpcd->Instance);
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800672a:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800672c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8006730:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8006732:	4620      	mov	r0, r4
 8006734:	f7ff f93b 	bl	80059ae <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	6953      	ldr	r3, [r2, #20]
 800673c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006740:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	f7fd fd5c 	bl	8004200 <USB_ReadInterrupts>
 8006748:	06c3      	lsls	r3, r0, #27
 800674a:	d52b      	bpl.n	80067a4 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	6993      	ldr	r3, [r2, #24]
 8006750:	f023 0310 	bic.w	r3, r3, #16
 8006754:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8006756:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800675a:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800675e:	2b02      	cmp	r3, #2
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
      
      temp = USBx->GRXSTSP;
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006760:	f006 080f 	and.w	r8, r6, #15
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8006764:	f040 814f 	bne.w	8006a06 <HAL_PCD_IRQHandler+0x44c>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006768:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800676c:	421e      	tst	r6, r3
 800676e:	d014      	beq.n	800679a <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8006770:	271c      	movs	r7, #28
 8006772:	fb07 4708 	mla	r7, r7, r8, r4
 8006776:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800677a:	4632      	mov	r2, r6
 800677c:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8006780:	4648      	mov	r0, r9
 8006782:	f7fd fc9f 	bl	80040c4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8006786:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800678a:	4433      	add	r3, r6
 800678c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8006790:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006794:	441e      	add	r6, r3
 8006796:	f8c7 61f4 	str.w	r6, [r7, #500]	; 0x1f4
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	6993      	ldr	r3, [r2, #24]
 800679e:	f043 0310 	orr.w	r3, r3, #16
 80067a2:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	f7fd fd2b 	bl	8004200 <USB_ReadInterrupts>
 80067aa:	0707      	lsls	r7, r0, #28
 80067ac:	d507      	bpl.n	80067be <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7ff f8f9 	bl	80059a6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	6953      	ldr	r3, [r2, #20]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	f7fd fd1e 	bl	8004200 <USB_ReadInterrupts>
 80067c4:	02c6      	lsls	r6, r0, #11
 80067c6:	d508      	bpl.n	80067da <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80067c8:	b2e9      	uxtb	r1, r5
 80067ca:	4620      	mov	r0, r4
 80067cc:	f7ff f920 	bl	8005a10 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	6953      	ldr	r3, [r2, #20]
 80067d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067d8:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	f7fd fd10 	bl	8004200 <USB_ReadInterrupts>
 80067e0:	0280      	lsls	r0, r0, #10
 80067e2:	d508      	bpl.n	80067f6 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80067e4:	b2e9      	uxtb	r1, r5
 80067e6:	4620      	mov	r0, r4
 80067e8:	f7ff f90e 	bl	8005a08 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80067ec:	6822      	ldr	r2, [r4, #0]
 80067ee:	6953      	ldr	r3, [r2, #20]
 80067f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067f4:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	f7fd fd02 	bl	8004200 <USB_ReadInterrupts>
 80067fc:	0041      	lsls	r1, r0, #1
 80067fe:	d507      	bpl.n	8006810 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8006800:	4620      	mov	r0, r4
 8006802:	f7ff f909 	bl	8005a18 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006806:	6822      	ldr	r2, [r4, #0]
 8006808:	6953      	ldr	r3, [r2, #20]
 800680a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800680e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	f7fd fcf5 	bl	8004200 <USB_ReadInterrupts>
 8006816:	0742      	lsls	r2, r0, #29
 8006818:	d50a      	bpl.n	8006830 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800681e:	076b      	lsls	r3, r5, #29
 8006820:	d502      	bpl.n	8006828 <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8006822:	4620      	mov	r0, r4
 8006824:	f7ff f8fc 	bl	8005a20 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	4315      	orrs	r5, r2
 800682e:	605d      	str	r5, [r3, #4]
    }
  }
}
 8006830:	b007      	add	sp, #28
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U)
 8006836:	07f8      	lsls	r0, r7, #31
 8006838:	d538      	bpl.n	80068ac <HAL_PCD_IRQHandler+0x2f2>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 800683a:	fa5f fb85 	uxtb.w	fp, r5
 800683e:	4659      	mov	r1, fp
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	f7fd fcf1 	bl	8004228 <USB_ReadDevOutEPInterrupt>
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006846:	f010 0f01 	tst.w	r0, #1
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U)
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 800684a:	4680      	mov	r8, r0
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800684c:	d021      	beq.n	8006892 <HAL_PCD_IRQHandler+0x2d8>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            
            if(hpcd->Init.dma_enable == 1U)
 800684e:	6921      	ldr	r1, [r4, #16]
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006850:	2301      	movs	r3, #1
            
            if(hpcd->Init.dma_enable == 1U)
 8006852:	4299      	cmp	r1, r3
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006854:	60b3      	str	r3, [r6, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8006856:	d10c      	bne.n	8006872 <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8006858:	6931      	ldr	r1, [r6, #16]
 800685a:	f8da 01e4 	ldr.w	r0, [sl, #484]	; 0x1e4
 800685e:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8006862:	1a41      	subs	r1, r0, r1
 8006864:	f8ca 11f4 	str.w	r1, [sl, #500]	; 0x1f4
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8006868:	f8da 11e8 	ldr.w	r1, [sl, #488]	; 0x1e8
 800686c:	4408      	add	r0, r1
 800686e:	f8ca 01e8 	str.w	r0, [sl, #488]	; 0x1e8
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8006872:	4659      	mov	r1, fp
 8006874:	4620      	mov	r0, r4
 8006876:	f7ff f885 	bl	8005984 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 800687a:	6921      	ldr	r1, [r4, #16]
 800687c:	2901      	cmp	r1, #1
 800687e:	d108      	bne.n	8006892 <HAL_PCD_IRQHandler+0x2d8>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006880:	b93d      	cbnz	r5, 8006892 <HAL_PCD_IRQHandler+0x2d8>
 8006882:	f8d4 21f0 	ldr.w	r2, [r4, #496]	; 0x1f0
 8006886:	b922      	cbnz	r2, 8006892 <HAL_PCD_IRQHandler+0x2d8>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006888:	f504 7261 	add.w	r2, r4, #900	; 0x384
 800688c:	6820      	ldr	r0, [r4, #0]
 800688e:	f7fd fd0b 	bl	80042a8 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006892:	f018 0f08 	tst.w	r8, #8
 8006896:	d004      	beq.n	80068a2 <HAL_PCD_IRQHandler+0x2e8>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8006898:	4620      	mov	r0, r4
 800689a:	f7ff f86d 	bl	8005978 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800689e:	2308      	movs	r3, #8
 80068a0:	60b3      	str	r3, [r6, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80068a2:	f018 0f10 	tst.w	r8, #16
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80068a6:	bf1c      	itt	ne
 80068a8:	2310      	movne	r3, #16
 80068aa:	60b3      	strne	r3, [r6, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 80068ac:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80068ae:	087f      	lsrs	r7, r7, #1
 80068b0:	3620      	adds	r6, #32
 80068b2:	f10a 0a1c 	add.w	sl, sl, #28
 80068b6:	e6ac      	b.n	8006612 <HAL_PCD_IRQHandler+0x58>
      
      epnum = 0U;
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U) /* In ITR */
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	07da      	lsls	r2, r3, #31
 80068bc:	d558      	bpl.n	8006970 <HAL_PCD_IRQHandler+0x3b6>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80068be:	fa5f fb85 	uxtb.w	fp, r5
 80068c2:	4659      	mov	r1, fp
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	f7fd fcb9 	bl	800423c <USB_ReadDevInEPInterrupt>

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80068ca:	07c3      	lsls	r3, r0, #31
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80068cc:	4607      	mov	r7, r0

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80068ce:	d520      	bpl.n	8006912 <HAL_PCD_IRQHandler+0x358>
          {
            fifoemptymsk = 0x1U << epnum;
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068d0:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
          {
            fifoemptymsk = 0x1U << epnum;
 80068d4:	2101      	movs	r1, #1
 80068d6:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068d8:	ea23 0301 	bic.w	r3, r3, r1
 80068dc:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80068e0:	2301      	movs	r3, #1
 80068e2:	f8c8 3008 	str.w	r3, [r8, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	2b01      	cmp	r3, #1
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 80068ea:	bf01      	itttt	eq
 80068ec:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 80068ee:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 80068f0:	189b      	addeq	r3, r3, r2
 80068f2:	6473      	streq	r3, [r6, #68]	; 0x44
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80068f4:	4659      	mov	r1, fp
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff f84d 	bl	8005996 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 80068fc:	6921      	ldr	r1, [r4, #16]
 80068fe:	2901      	cmp	r1, #1
 8006900:	d107      	bne.n	8006912 <HAL_PCD_IRQHandler+0x358>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006902:	b935      	cbnz	r5, 8006912 <HAL_PCD_IRQHandler+0x358>
 8006904:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006906:	b923      	cbnz	r3, 8006912 <HAL_PCD_IRQHandler+0x358>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006908:	f504 7261 	add.w	r2, r4, #900	; 0x384
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	f7fd fccb 	bl	80042a8 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006912:	0738      	lsls	r0, r7, #28
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006914:	bf44      	itt	mi
 8006916:	2308      	movmi	r3, #8
 8006918:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800691c:	06f9      	lsls	r1, r7, #27
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800691e:	bf44      	itt	mi
 8006920:	2310      	movmi	r3, #16
 8006922:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006926:	067a      	lsls	r2, r7, #25
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006928:	bf44      	itt	mi
 800692a:	2340      	movmi	r3, #64	; 0x40
 800692c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006930:	07bb      	lsls	r3, r7, #30
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006932:	bf44      	itt	mi
 8006934:	2302      	movmi	r3, #2
 8006936:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800693a:	063f      	lsls	r7, r7, #24
 800693c:	d518      	bpl.n	8006970 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8006942:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8006944:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006946:	1aff      	subs	r7, r7, r3
 8006948:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800694a:	429f      	cmp	r7, r3
 800694c:	bf28      	it	cs
 800694e:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8006950:	9b04      	ldr	r3, [sp, #16]
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 8006956:	f107 0a03 	add.w	sl, r7, #3
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800695a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 800695e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	b29b      	uxth	r3, r3
 800696a:	4553      	cmp	r3, sl
 800696c:	d808      	bhi.n	8006980 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 800696e:	b32f      	cbz	r7, 80069bc <HAL_PCD_IRQHandler+0x402>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
        ep_intr >>= 1U;
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	085b      	lsrs	r3, r3, #1
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
 8006974:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8006976:	9303      	str	r3, [sp, #12]
 8006978:	361c      	adds	r6, #28
 800697a:	f108 0820 	add.w	r8, r8, #32
 800697e:	e658      	b.n	8006632 <HAL_PCD_IRQHandler+0x78>
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
          ep->xfer_count < ep->xfer_len &&
 8006980:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8006982:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8006984:	4293      	cmp	r3, r2
 8006986:	d9f2      	bls.n	800696e <HAL_PCD_IRQHandler+0x3b4>
          ep->xfer_count < ep->xfer_len &&
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <HAL_PCD_IRQHandler+0x3b4>
 800698c:	6c37      	ldr	r7, [r6, #64]	; 0x40
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 800698e:	9804      	ldr	r0, [sp, #16]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0U)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006990:	1a9b      	subs	r3, r3, r2
 8006992:	429f      	cmp	r7, r3
 8006994:	bf28      	it	cs
 8006996:	461f      	movcs	r7, r3
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8006998:	7c23      	ldrb	r3, [r4, #16]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	465a      	mov	r2, fp
 800699e:	b2bb      	uxth	r3, r7
 80069a0:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80069a2:	f7fd fb79 	bl	8004098 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 80069a6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80069a8:	443b      	add	r3, r7
 80069aa:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 80069ac:	6d33      	ldr	r3, [r6, #80]	; 0x50
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80069ae:	f107 0a03 	add.w	sl, r7, #3
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 80069b2:	443b      	add	r3, r7
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80069b4:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 80069b8:	6533      	str	r3, [r6, #80]	; 0x50
 80069ba:	e7d3      	b.n	8006964 <HAL_PCD_IRQHandler+0x3aa>
  }
  
  if(len <= 0U)
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069bc:	9b04      	ldr	r3, [sp, #16]
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
  {
    fifoemptymsk = 0x1U << epnum;
 80069be:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069c0:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 80069c4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
  {
    fifoemptymsk = 0x1U << epnum;
 80069c8:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069ca:	ea23 0302 	bic.w	r3, r3, r2
 80069ce:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 80069d2:	e7cd      	b.n	8006970 <HAL_PCD_IRQHandler+0x3b6>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069d4:	9802      	ldr	r0, [sp, #8]
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80069d6:	609a      	str	r2, [r3, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069d8:	3001      	adds	r0, #1
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80069da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069de:	9002      	str	r0, [sp, #8]
 80069e0:	3320      	adds	r3, #32
 80069e2:	e661      	b.n	80066a8 <HAL_PCD_IRQHandler+0xee>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80069e4:	6973      	ldr	r3, [r6, #20]
 80069e6:	f043 030b 	orr.w	r3, r3, #11
 80069ea:	6173      	str	r3, [r6, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80069ec:	6933      	ldr	r3, [r6, #16]
 80069ee:	f043 030b 	orr.w	r3, r3, #11
 80069f2:	6133      	str	r3, [r6, #16]
 80069f4:	e671      	b.n	80066da <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80069f6:	2203      	movs	r2, #3
 80069f8:	60e2      	str	r2, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	6162      	str	r2, [r4, #20]
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8006a04:	e694      	b.n	8006730 <HAL_PCD_IRQHandler+0x176>
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	f47f aec7 	bne.w	800679a <HAL_PCD_IRQHandler+0x1e0>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	f504 7161 	add.w	r1, r4, #900	; 0x384
 8006a12:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8006a14:	271c      	movs	r7, #28
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a16:	f7fd fb55 	bl	80040c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8006a1a:	fb07 4708 	mla	r7, r7, r8, r4
 8006a1e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8006a22:	e6b5      	b.n	8006790 <HAL_PCD_IRQHandler+0x1d6>

08006a24 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8006a24:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 8006a28:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8006a2e:	d009      	beq.n	8006a44 <HAL_PCD_SetAddress+0x20>
 8006a30:	2301      	movs	r3, #1
 8006a32:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_SetDevAddress(hpcd->Instance, address);
 8006a36:	6800      	ldr	r0, [r0, #0]
 8006a38:	f7fd fbba 	bl	80041b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 8006a42:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8006a44:	2002      	movs	r0, #2
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8006a46:	bd10      	pop	{r4, pc}

08006a48 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006a48:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8006a4a:	b24e      	sxtb	r6, r1
 8006a4c:	2e00      	cmp	r6, #0
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006a4e:	4604      	mov	r4, r0
 8006a50:	f04f 051c 	mov.w	r5, #28
 8006a54:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006a58:	bfb5      	itete	lt
 8006a5a:	fb05 4100 	mlalt	r1, r5, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8006a5e:	fb05 4101 	mlage	r1, r5, r1, r4
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006a62:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8006a64:	f501 71ee 	addge.w	r1, r1, #476	; 0x1dc
  }
  ep->num   = ep_addr & 0x7FU;
 8006a68:	b2c0      	uxtb	r0, r0
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  if (ep->is_in)
 8006a6a:	2e00      	cmp	r6, #0
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a6c:	bfb8      	it	lt
 8006a6e:	80c8      	strhlt	r0, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8006a70:	2b02      	cmp	r3, #2
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8006a72:	70cb      	strb	r3, [r1, #3]
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8006a74:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->tx_fifo_num = ep->num;
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
 8006a78:	bf04      	itt	eq
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	710b      	strbeq	r3, [r1, #4]
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  }
  ep->num   = ep_addr & 0x7FU;
 8006a7e:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8006a80:	704d      	strb	r5, [r1, #1]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8006a82:	f894 3380 	ldrb.w	r3, [r4, #896]	; 0x380
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  ep->maxpacket = ep_mps;
 8006a86:	608a      	str	r2, [r1, #8]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d009      	beq.n	8006aa0 <HAL_PCD_EP_Open+0x58>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8006a92:	6820      	ldr	r0, [r4, #0]
 8006a94:	f7fd f89a 	bl	8003bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8006a98:	2000      	movs	r0, #0
 8006a9a:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return ret;
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8006aa0:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}

08006aa4 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8006aa4:	b24b      	sxtb	r3, r1
 8006aa6:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	f04f 021c 	mov.w	r2, #28
 8006aae:	4604      	mov	r4, r0
 8006ab0:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006ab4:	bfb5      	itete	lt
 8006ab6:	fb02 4100 	mlalt	r1, r2, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8006aba:	fb02 4101 	mlage	r1, r2, r1, r4
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006abe:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8006ac0:	f501 71ee 	addge.w	r1, r1, #476	; 0x1dc
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8006ac4:	0fdb      	lsrs	r3, r3, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  }
  ep->num   = ep_addr & 0x7FU;
 8006ac6:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8006ac8:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8006aca:	f894 3380 	ldrb.w	r3, [r4, #896]	; 0x380
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d009      	beq.n	8006ae6 <HAL_PCD_EP_Close+0x42>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8006ad8:	6820      	ldr	r0, [r4, #0]
 8006ada:	f7fd f91f 	bl	8003d1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 8006ae4:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  
  __HAL_LOCK(hpcd); 
 8006ae6:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8006ae8:	bd10      	pop	{r4, pc}

08006aea <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006aea:	b538      	push	{r3, r4, r5, lr}
 8006aec:	4604      	mov	r4, r0
 8006aee:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8006af2:	201c      	movs	r0, #28
 8006af4:	fb00 4005 	mla	r0, r0, r5, r4
  ep->xfer_len = len;
 8006af8:	f8c0 31f0 	str.w	r3, [r0, #496]	; 0x1f0
  ep->xfer_count = 0U;
 8006afc:	2300      	movs	r3, #0
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8006afe:	f8c0 21e8 	str.w	r2, [r0, #488]	; 0x1e8
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8006b02:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  ep->is_in = 0U;
 8006b06:	f880 31dd 	strb.w	r3, [r0, #477]	; 0x1dd
  ep->num = ep_addr & 0x7FU;
 8006b0a:	f880 51dc 	strb.w	r5, [r0, #476]	; 0x1dc
  
  if (hpcd->Init.dma_enable == 1U)
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8006b12:	bf08      	it	eq
 8006b14:	f8c0 21ec 	streq.w	r2, [r0, #492]	; 0x1ec
  }
  
  __HAL_LOCK(hpcd); 
 8006b18:	f894 2380 	ldrb.w	r2, [r4, #896]	; 0x380
 8006b1c:	2a01      	cmp	r2, #1
 8006b1e:	d013      	beq.n	8006b48 <HAL_PCD_EP_Receive+0x5e>
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8006b20:	211c      	movs	r1, #28
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 8006b22:	2201      	movs	r2, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8006b24:	fb01 4105 	mla	r1, r1, r5, r4
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 8006b28:	f884 2380 	strb.w	r2, [r4, #896]	; 0x380
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8006b2c:	f501 71ee 	add.w	r1, r1, #476	; 0x1dc
 8006b30:	b2da      	uxtb	r2, r3
  
  __HAL_LOCK(hpcd); 
  
  if ((ep_addr & 0x7FU) == 0U)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8006b32:	6820      	ldr	r0, [r4, #0]
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
  
  if ((ep_addr & 0x7FU) == 0U)
 8006b34:	b92d      	cbnz	r5, 8006b42 <HAL_PCD_EP_Receive+0x58>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8006b36:	f7fd fa2b 	bl	8003f90 <USB_EP0StartXfer>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
  }
  __HAL_UNLOCK(hpcd); 
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  
  return HAL_OK;
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8006b42:	f7fd f947 	bl	8003dd4 <USB_EPStartXfer>
 8006b46:	e7f8      	b.n	8006b3a <HAL_PCD_EP_Receive+0x50>
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 8006b48:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}

08006b4c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8006b4c:	231c      	movs	r3, #28
 8006b4e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006b52:	fb03 0101 	mla	r1, r3, r1, r0
}
 8006b56:	f8b1 01f4 	ldrh.w	r0, [r1, #500]	; 0x1f4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4604      	mov	r4, r0
 8006b60:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8006b64:	201c      	movs	r0, #28
 8006b66:	fb00 4005 	mla	r0, r0, r5, r4
  ep->xfer_len = len;
 8006b6a:	64c3      	str	r3, [r0, #76]	; 0x4c
  ep->xfer_count = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	6503      	str	r3, [r0, #80]	; 0x50
  ep->is_in = 1U;
 8006b70:	2301      	movs	r3, #1
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8006b72:	6442      	str	r2, [r0, #68]	; 0x44
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 8006b74:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  ep->num = ep_addr & 0x7FU;
 8006b78:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  
  if (hpcd->Init.dma_enable == 1U)
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8006b80:	bf08      	it	eq
 8006b82:	6482      	streq	r2, [r0, #72]	; 0x48
  }
  
  __HAL_LOCK(hpcd); 
 8006b84:	f894 2380 	ldrb.w	r2, [r4, #896]	; 0x380
 8006b88:	2a01      	cmp	r2, #1
 8006b8a:	d012      	beq.n	8006bb2 <HAL_PCD_EP_Transmit+0x56>
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006b8c:	211c      	movs	r1, #28
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 8006b8e:	2201      	movs	r2, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006b90:	fb01 4105 	mla	r1, r1, r5, r4
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 8006b94:	f884 2380 	strb.w	r2, [r4, #896]	; 0x380
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006b98:	3138      	adds	r1, #56	; 0x38
 8006b9a:	b2da      	uxtb	r2, r3
  
  __HAL_LOCK(hpcd); 
  
  if ((ep_addr & 0x7FU) == 0U)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8006b9c:	6820      	ldr	r0, [r4, #0]
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
  
  if ((ep_addr & 0x7FU) == 0U)
 8006b9e:	b92d      	cbnz	r5, 8006bac <HAL_PCD_EP_Transmit+0x50>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8006ba0:	f7fd f9f6 	bl	8003f90 <USB_EP0StartXfer>
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
  }
  
  __HAL_UNLOCK(hpcd);
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
     
  return HAL_OK;
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8006bac:	f7fd f912 	bl	8003dd4 <USB_EPStartXfer>
 8006bb0:	e7f8      	b.n	8006ba4 <HAL_PCD_EP_Transmit+0x48>
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 8006bb2:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 8006bb4:	bd38      	pop	{r3, r4, r5, pc}

08006bb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bb6:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8006bb8:	b24b      	sxtb	r3, r1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8006bc0:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006bc4:	bfb5      	itete	lt
 8006bc6:	fb02 0105 	mlalt	r1, r2, r5, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bca:	fb02 0101 	mlage	r1, r2, r1, r0
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006bce:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bd0:	f501 71ee 	addge.w	r1, r1, #476	; 0x1dc
  }
  
  ep->is_stall = 1U;
 8006bd4:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8006bd6:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7FU;
 8006bd8:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
 8006bda:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8006bdc:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8006bde:	704b      	strb	r3, [r1, #1]
  
  
  __HAL_LOCK(hpcd); 
 8006be0:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 8006be4:	4293      	cmp	r3, r2
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006be6:	4604      	mov	r4, r0
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
  
  
  __HAL_LOCK(hpcd); 
 8006be8:	d00f      	beq.n	8006c0a <HAL_PCD_EP_SetStall+0x54>
 8006bea:	f880 2380 	strb.w	r2, [r0, #896]	; 0x380
  USB_EPSetStall(hpcd->Instance , ep);
 8006bee:	6800      	ldr	r0, [r0, #0]
 8006bf0:	f7fd fa76 	bl	80040e0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8006bf4:	b92d      	cbnz	r5, 8006c02 <HAL_PCD_EP_SetStall+0x4c>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006bf6:	f504 7261 	add.w	r2, r4, #900	; 0x384
 8006bfa:	7c21      	ldrb	r1, [r4, #16]
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	f7fd fb53 	bl	80042a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8006c02:	2000      	movs	r0, #0
 8006c04:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  
  return HAL_OK;
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
  
  
  __HAL_LOCK(hpcd); 
 8006c0a:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8006c0c:	bd38      	pop	{r3, r4, r5, pc}

08006c0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c0e:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8006c10:	b24b      	sxtb	r3, r1
 8006c12:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c14:	4605      	mov	r5, r0
 8006c16:	f04f 021c 	mov.w	r2, #28
 8006c1a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006c1e:	bfb5      	itete	lt
 8006c20:	fb02 5100 	mlalt	r1, r2, r0, r5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c24:	fb02 5101 	mlage	r1, r2, r1, r5
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8006c28:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c2a:	f501 71ee 	addge.w	r1, r1, #476	; 0x1dc
  }
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8006c2e:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0U;
 8006c30:	2400      	movs	r4, #0
 8006c32:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8006c34:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8006c36:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8006c38:	f895 3380 	ldrb.w	r3, [r5, #896]	; 0x380
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d009      	beq.n	8006c54 <HAL_PCD_EP_ClrStall+0x46>
 8006c40:	2301      	movs	r3, #1
 8006c42:	f885 3380 	strb.w	r3, [r5, #896]	; 0x380
  USB_EPClearStall(hpcd->Instance , ep);
 8006c46:	6828      	ldr	r0, [r5, #0]
 8006c48:	f7fd fa68 	bl	800411c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8006c4c:	f885 4380 	strb.w	r4, [r5, #896]	; 0x380
    
  return HAL_OK;
 8006c50:	4620      	mov	r0, r4
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
  
  __HAL_LOCK(hpcd); 
 8006c54:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8006c56:	bd38      	pop	{r3, r4, r5, pc}

08006c58 <__errno>:
 8006c58:	4b01      	ldr	r3, [pc, #4]	; (8006c60 <__errno+0x8>)
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000000 	.word	0x20000000

08006c64 <malloc>:
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <malloc+0xc>)
 8006c66:	4601      	mov	r1, r0
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	f000 b80b 	b.w	8006c84 <_malloc_r>
 8006c6e:	bf00      	nop
 8006c70:	20000000 	.word	0x20000000

08006c74 <free>:
 8006c74:	4b02      	ldr	r3, [pc, #8]	; (8006c80 <free+0xc>)
 8006c76:	4601      	mov	r1, r0
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	f000 bb19 	b.w	80072b0 <_free_r>
 8006c7e:	bf00      	nop
 8006c80:	20000000 	.word	0x20000000

08006c84 <_malloc_r>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	f101 060b 	add.w	r6, r1, #11
 8006c8c:	2e16      	cmp	r6, #22
 8006c8e:	b083      	sub	sp, #12
 8006c90:	4605      	mov	r5, r0
 8006c92:	f240 809e 	bls.w	8006dd2 <_malloc_r+0x14e>
 8006c96:	f036 0607 	bics.w	r6, r6, #7
 8006c9a:	f100 80bd 	bmi.w	8006e18 <_malloc_r+0x194>
 8006c9e:	42b1      	cmp	r1, r6
 8006ca0:	f200 80ba 	bhi.w	8006e18 <_malloc_r+0x194>
 8006ca4:	f000 fa9e 	bl	80071e4 <__malloc_lock>
 8006ca8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8006cac:	f0c0 8293 	bcc.w	80071d6 <_malloc_r+0x552>
 8006cb0:	0a73      	lsrs	r3, r6, #9
 8006cb2:	f000 80b8 	beq.w	8006e26 <_malloc_r+0x1a2>
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	f200 8179 	bhi.w	8006fae <_malloc_r+0x32a>
 8006cbc:	09b3      	lsrs	r3, r6, #6
 8006cbe:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8006cc2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 8006cc6:	00c3      	lsls	r3, r0, #3
 8006cc8:	4fbf      	ldr	r7, [pc, #764]	; (8006fc8 <_malloc_r+0x344>)
 8006cca:	443b      	add	r3, r7
 8006ccc:	f1a3 0108 	sub.w	r1, r3, #8
 8006cd0:	685c      	ldr	r4, [r3, #4]
 8006cd2:	42a1      	cmp	r1, r4
 8006cd4:	d106      	bne.n	8006ce4 <_malloc_r+0x60>
 8006cd6:	e00c      	b.n	8006cf2 <_malloc_r+0x6e>
 8006cd8:	2a00      	cmp	r2, #0
 8006cda:	f280 80aa 	bge.w	8006e32 <_malloc_r+0x1ae>
 8006cde:	68e4      	ldr	r4, [r4, #12]
 8006ce0:	42a1      	cmp	r1, r4
 8006ce2:	d006      	beq.n	8006cf2 <_malloc_r+0x6e>
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	1b9a      	subs	r2, r3, r6
 8006cec:	2a0f      	cmp	r2, #15
 8006cee:	ddf3      	ble.n	8006cd8 <_malloc_r+0x54>
 8006cf0:	4670      	mov	r0, lr
 8006cf2:	693c      	ldr	r4, [r7, #16]
 8006cf4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 8006fdc <_malloc_r+0x358>
 8006cf8:	4574      	cmp	r4, lr
 8006cfa:	f000 81ab 	beq.w	8007054 <_malloc_r+0x3d0>
 8006cfe:	6863      	ldr	r3, [r4, #4]
 8006d00:	f023 0303 	bic.w	r3, r3, #3
 8006d04:	1b9a      	subs	r2, r3, r6
 8006d06:	2a0f      	cmp	r2, #15
 8006d08:	f300 8190 	bgt.w	800702c <_malloc_r+0x3a8>
 8006d0c:	2a00      	cmp	r2, #0
 8006d0e:	f8c7 e014 	str.w	lr, [r7, #20]
 8006d12:	f8c7 e010 	str.w	lr, [r7, #16]
 8006d16:	f280 809d 	bge.w	8006e54 <_malloc_r+0x1d0>
 8006d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1e:	f080 8161 	bcs.w	8006fe4 <_malloc_r+0x360>
 8006d22:	08db      	lsrs	r3, r3, #3
 8006d24:	f103 0c01 	add.w	ip, r3, #1
 8006d28:	1099      	asrs	r1, r3, #2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 8006d30:	f8c4 8008 	str.w	r8, [r4, #8]
 8006d34:	2301      	movs	r3, #1
 8006d36:	408b      	lsls	r3, r1
 8006d38:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	3908      	subs	r1, #8
 8006d40:	60e1      	str	r1, [r4, #12]
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8006d48:	f8c8 400c 	str.w	r4, [r8, #12]
 8006d4c:	1082      	asrs	r2, r0, #2
 8006d4e:	2401      	movs	r4, #1
 8006d50:	4094      	lsls	r4, r2
 8006d52:	429c      	cmp	r4, r3
 8006d54:	f200 808b 	bhi.w	8006e6e <_malloc_r+0x1ea>
 8006d58:	421c      	tst	r4, r3
 8006d5a:	d106      	bne.n	8006d6a <_malloc_r+0xe6>
 8006d5c:	f020 0003 	bic.w	r0, r0, #3
 8006d60:	0064      	lsls	r4, r4, #1
 8006d62:	421c      	tst	r4, r3
 8006d64:	f100 0004 	add.w	r0, r0, #4
 8006d68:	d0fa      	beq.n	8006d60 <_malloc_r+0xdc>
 8006d6a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8006d6e:	46cc      	mov	ip, r9
 8006d70:	4680      	mov	r8, r0
 8006d72:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8006d76:	459c      	cmp	ip, r3
 8006d78:	d107      	bne.n	8006d8a <_malloc_r+0x106>
 8006d7a:	e16d      	b.n	8007058 <_malloc_r+0x3d4>
 8006d7c:	2a00      	cmp	r2, #0
 8006d7e:	f280 817b 	bge.w	8007078 <_malloc_r+0x3f4>
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	459c      	cmp	ip, r3
 8006d86:	f000 8167 	beq.w	8007058 <_malloc_r+0x3d4>
 8006d8a:	6859      	ldr	r1, [r3, #4]
 8006d8c:	f021 0103 	bic.w	r1, r1, #3
 8006d90:	1b8a      	subs	r2, r1, r6
 8006d92:	2a0f      	cmp	r2, #15
 8006d94:	ddf2      	ble.n	8006d7c <_malloc_r+0xf8>
 8006d96:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006d9a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	199c      	adds	r4, r3, r6
 8006da2:	4628      	mov	r0, r5
 8006da4:	f046 0601 	orr.w	r6, r6, #1
 8006da8:	f042 0501 	orr.w	r5, r2, #1
 8006dac:	605e      	str	r6, [r3, #4]
 8006dae:	f8c8 c00c 	str.w	ip, [r8, #12]
 8006db2:	f8cc 8008 	str.w	r8, [ip, #8]
 8006db6:	617c      	str	r4, [r7, #20]
 8006db8:	613c      	str	r4, [r7, #16]
 8006dba:	f8c4 e00c 	str.w	lr, [r4, #12]
 8006dbe:	f8c4 e008 	str.w	lr, [r4, #8]
 8006dc2:	6065      	str	r5, [r4, #4]
 8006dc4:	505a      	str	r2, [r3, r1]
 8006dc6:	f000 fa0f 	bl	80071e8 <__malloc_unlock>
 8006dca:	9b00      	ldr	r3, [sp, #0]
 8006dcc:	f103 0408 	add.w	r4, r3, #8
 8006dd0:	e01e      	b.n	8006e10 <_malloc_r+0x18c>
 8006dd2:	2910      	cmp	r1, #16
 8006dd4:	d820      	bhi.n	8006e18 <_malloc_r+0x194>
 8006dd6:	f000 fa05 	bl	80071e4 <__malloc_lock>
 8006dda:	2610      	movs	r6, #16
 8006ddc:	2318      	movs	r3, #24
 8006dde:	2002      	movs	r0, #2
 8006de0:	4f79      	ldr	r7, [pc, #484]	; (8006fc8 <_malloc_r+0x344>)
 8006de2:	443b      	add	r3, r7
 8006de4:	f1a3 0208 	sub.w	r2, r3, #8
 8006de8:	685c      	ldr	r4, [r3, #4]
 8006dea:	4294      	cmp	r4, r2
 8006dec:	f000 813d 	beq.w	800706a <_malloc_r+0x3e6>
 8006df0:	6863      	ldr	r3, [r4, #4]
 8006df2:	68e1      	ldr	r1, [r4, #12]
 8006df4:	68a6      	ldr	r6, [r4, #8]
 8006df6:	f023 0303 	bic.w	r3, r3, #3
 8006dfa:	4423      	add	r3, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	60f1      	str	r1, [r6, #12]
 8006e02:	f042 0201 	orr.w	r2, r2, #1
 8006e06:	608e      	str	r6, [r1, #8]
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	f000 f9ed 	bl	80071e8 <__malloc_unlock>
 8006e0e:	3408      	adds	r4, #8
 8006e10:	4620      	mov	r0, r4
 8006e12:	b003      	add	sp, #12
 8006e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e18:	2400      	movs	r4, #0
 8006e1a:	230c      	movs	r3, #12
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	b003      	add	sp, #12
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	2040      	movs	r0, #64	; 0x40
 8006e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8006e30:	e74a      	b.n	8006cc8 <_malloc_r+0x44>
 8006e32:	4423      	add	r3, r4
 8006e34:	68e1      	ldr	r1, [r4, #12]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	68a6      	ldr	r6, [r4, #8]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	60f1      	str	r1, [r6, #12]
 8006e40:	4628      	mov	r0, r5
 8006e42:	608e      	str	r6, [r1, #8]
 8006e44:	605a      	str	r2, [r3, #4]
 8006e46:	f000 f9cf 	bl	80071e8 <__malloc_unlock>
 8006e4a:	3408      	adds	r4, #8
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	b003      	add	sp, #12
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	4423      	add	r3, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	605a      	str	r2, [r3, #4]
 8006e60:	f000 f9c2 	bl	80071e8 <__malloc_unlock>
 8006e64:	3408      	adds	r4, #8
 8006e66:	4620      	mov	r0, r4
 8006e68:	b003      	add	sp, #12
 8006e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6e:	68bc      	ldr	r4, [r7, #8]
 8006e70:	6863      	ldr	r3, [r4, #4]
 8006e72:	f023 0803 	bic.w	r8, r3, #3
 8006e76:	45b0      	cmp	r8, r6
 8006e78:	d304      	bcc.n	8006e84 <_malloc_r+0x200>
 8006e7a:	eba8 0306 	sub.w	r3, r8, r6
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	f300 8085 	bgt.w	8006f8e <_malloc_r+0x30a>
 8006e84:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8006fe0 <_malloc_r+0x35c>
 8006e88:	4b50      	ldr	r3, [pc, #320]	; (8006fcc <_malloc_r+0x348>)
 8006e8a:	f8d9 2000 	ldr.w	r2, [r9]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3201      	adds	r2, #1
 8006e92:	4433      	add	r3, r6
 8006e94:	eb04 0a08 	add.w	sl, r4, r8
 8006e98:	f000 8155 	beq.w	8007146 <_malloc_r+0x4c2>
 8006e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea0:	330f      	adds	r3, #15
 8006ea2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 8006ea6:	f02b 0b0f 	bic.w	fp, fp, #15
 8006eaa:	4659      	mov	r1, fp
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 f99d 	bl	80071ec <_sbrk_r>
 8006eb2:	1c41      	adds	r1, r0, #1
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	f000 80fc 	beq.w	80070b2 <_malloc_r+0x42e>
 8006eba:	4582      	cmp	sl, r0
 8006ebc:	f200 80f7 	bhi.w	80070ae <_malloc_r+0x42a>
 8006ec0:	4b43      	ldr	r3, [pc, #268]	; (8006fd0 <_malloc_r+0x34c>)
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	4459      	add	r1, fp
 8006ec6:	6019      	str	r1, [r3, #0]
 8006ec8:	f000 814d 	beq.w	8007166 <_malloc_r+0x4e2>
 8006ecc:	f8d9 0000 	ldr.w	r0, [r9]
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	bf1b      	ittet	ne
 8006ed4:	eba2 0a0a 	subne.w	sl, r2, sl
 8006ed8:	4451      	addne	r1, sl
 8006eda:	f8c9 2000 	streq.w	r2, [r9]
 8006ede:	6019      	strne	r1, [r3, #0]
 8006ee0:	f012 0107 	ands.w	r1, r2, #7
 8006ee4:	f000 8115 	beq.w	8007112 <_malloc_r+0x48e>
 8006ee8:	f1c1 0008 	rsb	r0, r1, #8
 8006eec:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8006ef0:	4402      	add	r2, r0
 8006ef2:	3108      	adds	r1, #8
 8006ef4:	eb02 090b 	add.w	r9, r2, fp
 8006ef8:	f3c9 090b 	ubfx	r9, r9, #0, #12
 8006efc:	eba1 0909 	sub.w	r9, r1, r9
 8006f00:	4649      	mov	r1, r9
 8006f02:	4628      	mov	r0, r5
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	9200      	str	r2, [sp, #0]
 8006f08:	f000 f970 	bl	80071ec <_sbrk_r>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8006f12:	f000 8143 	beq.w	800719c <_malloc_r+0x518>
 8006f16:	1a80      	subs	r0, r0, r2
 8006f18:	4448      	add	r0, r9
 8006f1a:	f040 0001 	orr.w	r0, r0, #1
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	60ba      	str	r2, [r7, #8]
 8006f22:	4449      	add	r1, r9
 8006f24:	42bc      	cmp	r4, r7
 8006f26:	6050      	str	r0, [r2, #4]
 8006f28:	6019      	str	r1, [r3, #0]
 8006f2a:	d017      	beq.n	8006f5c <_malloc_r+0x2d8>
 8006f2c:	f1b8 0f0f 	cmp.w	r8, #15
 8006f30:	f240 80fb 	bls.w	800712a <_malloc_r+0x4a6>
 8006f34:	6860      	ldr	r0, [r4, #4]
 8006f36:	f1a8 020c 	sub.w	r2, r8, #12
 8006f3a:	f022 0207 	bic.w	r2, r2, #7
 8006f3e:	eb04 0e02 	add.w	lr, r4, r2
 8006f42:	f000 0001 	and.w	r0, r0, #1
 8006f46:	f04f 0c05 	mov.w	ip, #5
 8006f4a:	4310      	orrs	r0, r2
 8006f4c:	2a0f      	cmp	r2, #15
 8006f4e:	6060      	str	r0, [r4, #4]
 8006f50:	f8ce c004 	str.w	ip, [lr, #4]
 8006f54:	f8ce c008 	str.w	ip, [lr, #8]
 8006f58:	f200 8117 	bhi.w	800718a <_malloc_r+0x506>
 8006f5c:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <_malloc_r+0x350>)
 8006f5e:	68bc      	ldr	r4, [r7, #8]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4291      	cmp	r1, r2
 8006f64:	bf88      	it	hi
 8006f66:	6019      	strhi	r1, [r3, #0]
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <_malloc_r+0x354>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4291      	cmp	r1, r2
 8006f6e:	6862      	ldr	r2, [r4, #4]
 8006f70:	bf88      	it	hi
 8006f72:	6019      	strhi	r1, [r3, #0]
 8006f74:	f022 0203 	bic.w	r2, r2, #3
 8006f78:	4296      	cmp	r6, r2
 8006f7a:	eba2 0306 	sub.w	r3, r2, r6
 8006f7e:	d801      	bhi.n	8006f84 <_malloc_r+0x300>
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	dc04      	bgt.n	8006f8e <_malloc_r+0x30a>
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 f92f 	bl	80071e8 <__malloc_unlock>
 8006f8a:	2400      	movs	r4, #0
 8006f8c:	e740      	b.n	8006e10 <_malloc_r+0x18c>
 8006f8e:	19a2      	adds	r2, r4, r6
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	f046 0601 	orr.w	r6, r6, #1
 8006f98:	6066      	str	r6, [r4, #4]
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	60ba      	str	r2, [r7, #8]
 8006f9e:	6053      	str	r3, [r2, #4]
 8006fa0:	f000 f922 	bl	80071e8 <__malloc_unlock>
 8006fa4:	3408      	adds	r4, #8
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	b003      	add	sp, #12
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	2b14      	cmp	r3, #20
 8006fb0:	d971      	bls.n	8007096 <_malloc_r+0x412>
 8006fb2:	2b54      	cmp	r3, #84	; 0x54
 8006fb4:	f200 80a3 	bhi.w	80070fe <_malloc_r+0x47a>
 8006fb8:	0b33      	lsrs	r3, r6, #12
 8006fba:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8006fbe:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 8006fc2:	00c3      	lsls	r3, r0, #3
 8006fc4:	e680      	b.n	8006cc8 <_malloc_r+0x44>
 8006fc6:	bf00      	nop
 8006fc8:	2000058c 	.word	0x2000058c
 8006fcc:	200009f4 	.word	0x200009f4
 8006fd0:	200009c4 	.word	0x200009c4
 8006fd4:	200009ec 	.word	0x200009ec
 8006fd8:	200009f0 	.word	0x200009f0
 8006fdc:	20000594 	.word	0x20000594
 8006fe0:	20000994 	.word	0x20000994
 8006fe4:	0a5a      	lsrs	r2, r3, #9
 8006fe6:	2a04      	cmp	r2, #4
 8006fe8:	d95b      	bls.n	80070a2 <_malloc_r+0x41e>
 8006fea:	2a14      	cmp	r2, #20
 8006fec:	f200 80ae 	bhi.w	800714c <_malloc_r+0x4c8>
 8006ff0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8006ff4:	00c9      	lsls	r1, r1, #3
 8006ff6:	325b      	adds	r2, #91	; 0x5b
 8006ff8:	eb07 0c01 	add.w	ip, r7, r1
 8006ffc:	5879      	ldr	r1, [r7, r1]
 8006ffe:	f1ac 0c08 	sub.w	ip, ip, #8
 8007002:	458c      	cmp	ip, r1
 8007004:	f000 8088 	beq.w	8007118 <_malloc_r+0x494>
 8007008:	684a      	ldr	r2, [r1, #4]
 800700a:	f022 0203 	bic.w	r2, r2, #3
 800700e:	4293      	cmp	r3, r2
 8007010:	d273      	bcs.n	80070fa <_malloc_r+0x476>
 8007012:	6889      	ldr	r1, [r1, #8]
 8007014:	458c      	cmp	ip, r1
 8007016:	d1f7      	bne.n	8007008 <_malloc_r+0x384>
 8007018:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60e2      	str	r2, [r4, #12]
 8007020:	f8c4 c008 	str.w	ip, [r4, #8]
 8007024:	6094      	str	r4, [r2, #8]
 8007026:	f8cc 400c 	str.w	r4, [ip, #12]
 800702a:	e68f      	b.n	8006d4c <_malloc_r+0xc8>
 800702c:	19a1      	adds	r1, r4, r6
 800702e:	f046 0c01 	orr.w	ip, r6, #1
 8007032:	f042 0601 	orr.w	r6, r2, #1
 8007036:	f8c4 c004 	str.w	ip, [r4, #4]
 800703a:	4628      	mov	r0, r5
 800703c:	6179      	str	r1, [r7, #20]
 800703e:	6139      	str	r1, [r7, #16]
 8007040:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007044:	f8c1 e008 	str.w	lr, [r1, #8]
 8007048:	604e      	str	r6, [r1, #4]
 800704a:	50e2      	str	r2, [r4, r3]
 800704c:	f000 f8cc 	bl	80071e8 <__malloc_unlock>
 8007050:	3408      	adds	r4, #8
 8007052:	e6dd      	b.n	8006e10 <_malloc_r+0x18c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	e679      	b.n	8006d4c <_malloc_r+0xc8>
 8007058:	f108 0801 	add.w	r8, r8, #1
 800705c:	f018 0f03 	tst.w	r8, #3
 8007060:	f10c 0c08 	add.w	ip, ip, #8
 8007064:	f47f ae85 	bne.w	8006d72 <_malloc_r+0xee>
 8007068:	e02d      	b.n	80070c6 <_malloc_r+0x442>
 800706a:	68dc      	ldr	r4, [r3, #12]
 800706c:	42a3      	cmp	r3, r4
 800706e:	bf08      	it	eq
 8007070:	3002      	addeq	r0, #2
 8007072:	f43f ae3e 	beq.w	8006cf2 <_malloc_r+0x6e>
 8007076:	e6bb      	b.n	8006df0 <_malloc_r+0x16c>
 8007078:	4419      	add	r1, r3
 800707a:	461c      	mov	r4, r3
 800707c:	684a      	ldr	r2, [r1, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f854 6f08 	ldr.w	r6, [r4, #8]!
 8007084:	f042 0201 	orr.w	r2, r2, #1
 8007088:	604a      	str	r2, [r1, #4]
 800708a:	4628      	mov	r0, r5
 800708c:	60f3      	str	r3, [r6, #12]
 800708e:	609e      	str	r6, [r3, #8]
 8007090:	f000 f8aa 	bl	80071e8 <__malloc_unlock>
 8007094:	e6bc      	b.n	8006e10 <_malloc_r+0x18c>
 8007096:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800709a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 800709e:	00c3      	lsls	r3, r0, #3
 80070a0:	e612      	b.n	8006cc8 <_malloc_r+0x44>
 80070a2:	099a      	lsrs	r2, r3, #6
 80070a4:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80070a8:	00c9      	lsls	r1, r1, #3
 80070aa:	3238      	adds	r2, #56	; 0x38
 80070ac:	e7a4      	b.n	8006ff8 <_malloc_r+0x374>
 80070ae:	42bc      	cmp	r4, r7
 80070b0:	d054      	beq.n	800715c <_malloc_r+0x4d8>
 80070b2:	68bc      	ldr	r4, [r7, #8]
 80070b4:	6862      	ldr	r2, [r4, #4]
 80070b6:	f022 0203 	bic.w	r2, r2, #3
 80070ba:	e75d      	b.n	8006f78 <_malloc_r+0x2f4>
 80070bc:	f859 3908 	ldr.w	r3, [r9], #-8
 80070c0:	4599      	cmp	r9, r3
 80070c2:	f040 8086 	bne.w	80071d2 <_malloc_r+0x54e>
 80070c6:	f010 0f03 	tst.w	r0, #3
 80070ca:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80070ce:	d1f5      	bne.n	80070bc <_malloc_r+0x438>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	ea23 0304 	bic.w	r3, r3, r4
 80070d6:	607b      	str	r3, [r7, #4]
 80070d8:	0064      	lsls	r4, r4, #1
 80070da:	429c      	cmp	r4, r3
 80070dc:	f63f aec7 	bhi.w	8006e6e <_malloc_r+0x1ea>
 80070e0:	2c00      	cmp	r4, #0
 80070e2:	f43f aec4 	beq.w	8006e6e <_malloc_r+0x1ea>
 80070e6:	421c      	tst	r4, r3
 80070e8:	4640      	mov	r0, r8
 80070ea:	f47f ae3e 	bne.w	8006d6a <_malloc_r+0xe6>
 80070ee:	0064      	lsls	r4, r4, #1
 80070f0:	421c      	tst	r4, r3
 80070f2:	f100 0004 	add.w	r0, r0, #4
 80070f6:	d0fa      	beq.n	80070ee <_malloc_r+0x46a>
 80070f8:	e637      	b.n	8006d6a <_malloc_r+0xe6>
 80070fa:	468c      	mov	ip, r1
 80070fc:	e78c      	b.n	8007018 <_malloc_r+0x394>
 80070fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007102:	d815      	bhi.n	8007130 <_malloc_r+0x4ac>
 8007104:	0bf3      	lsrs	r3, r6, #15
 8007106:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800710a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 800710e:	00c3      	lsls	r3, r0, #3
 8007110:	e5da      	b.n	8006cc8 <_malloc_r+0x44>
 8007112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007116:	e6ed      	b.n	8006ef4 <_malloc_r+0x270>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	1092      	asrs	r2, r2, #2
 800711c:	2101      	movs	r1, #1
 800711e:	fa01 f202 	lsl.w	r2, r1, r2
 8007122:	4313      	orrs	r3, r2
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	4662      	mov	r2, ip
 8007128:	e779      	b.n	800701e <_malloc_r+0x39a>
 800712a:	2301      	movs	r3, #1
 800712c:	6053      	str	r3, [r2, #4]
 800712e:	e729      	b.n	8006f84 <_malloc_r+0x300>
 8007130:	f240 5254 	movw	r2, #1364	; 0x554
 8007134:	4293      	cmp	r3, r2
 8007136:	d822      	bhi.n	800717e <_malloc_r+0x4fa>
 8007138:	0cb3      	lsrs	r3, r6, #18
 800713a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800713e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 8007142:	00c3      	lsls	r3, r0, #3
 8007144:	e5c0      	b.n	8006cc8 <_malloc_r+0x44>
 8007146:	f103 0b10 	add.w	fp, r3, #16
 800714a:	e6ae      	b.n	8006eaa <_malloc_r+0x226>
 800714c:	2a54      	cmp	r2, #84	; 0x54
 800714e:	d829      	bhi.n	80071a4 <_malloc_r+0x520>
 8007150:	0b1a      	lsrs	r2, r3, #12
 8007152:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8007156:	00c9      	lsls	r1, r1, #3
 8007158:	326e      	adds	r2, #110	; 0x6e
 800715a:	e74d      	b.n	8006ff8 <_malloc_r+0x374>
 800715c:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <_malloc_r+0x55c>)
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	4459      	add	r1, fp
 8007162:	6019      	str	r1, [r3, #0]
 8007164:	e6b2      	b.n	8006ecc <_malloc_r+0x248>
 8007166:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800716a:	2800      	cmp	r0, #0
 800716c:	f47f aeae 	bne.w	8006ecc <_malloc_r+0x248>
 8007170:	eb08 030b 	add.w	r3, r8, fp
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	f043 0301 	orr.w	r3, r3, #1
 800717a:	6053      	str	r3, [r2, #4]
 800717c:	e6ee      	b.n	8006f5c <_malloc_r+0x2d8>
 800717e:	207f      	movs	r0, #127	; 0x7f
 8007180:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8007184:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8007188:	e59e      	b.n	8006cc8 <_malloc_r+0x44>
 800718a:	f104 0108 	add.w	r1, r4, #8
 800718e:	4628      	mov	r0, r5
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	f000 f88d 	bl	80072b0 <_free_r>
 8007196:	9b00      	ldr	r3, [sp, #0]
 8007198:	6819      	ldr	r1, [r3, #0]
 800719a:	e6df      	b.n	8006f5c <_malloc_r+0x2d8>
 800719c:	2001      	movs	r0, #1
 800719e:	f04f 0900 	mov.w	r9, #0
 80071a2:	e6bc      	b.n	8006f1e <_malloc_r+0x29a>
 80071a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80071a8:	d805      	bhi.n	80071b6 <_malloc_r+0x532>
 80071aa:	0bda      	lsrs	r2, r3, #15
 80071ac:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80071b0:	00c9      	lsls	r1, r1, #3
 80071b2:	3277      	adds	r2, #119	; 0x77
 80071b4:	e720      	b.n	8006ff8 <_malloc_r+0x374>
 80071b6:	f240 5154 	movw	r1, #1364	; 0x554
 80071ba:	428a      	cmp	r2, r1
 80071bc:	d805      	bhi.n	80071ca <_malloc_r+0x546>
 80071be:	0c9a      	lsrs	r2, r3, #18
 80071c0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80071c4:	00c9      	lsls	r1, r1, #3
 80071c6:	327c      	adds	r2, #124	; 0x7c
 80071c8:	e716      	b.n	8006ff8 <_malloc_r+0x374>
 80071ca:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80071ce:	227e      	movs	r2, #126	; 0x7e
 80071d0:	e712      	b.n	8006ff8 <_malloc_r+0x374>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	e780      	b.n	80070d8 <_malloc_r+0x454>
 80071d6:	08f0      	lsrs	r0, r6, #3
 80071d8:	f106 0308 	add.w	r3, r6, #8
 80071dc:	e600      	b.n	8006de0 <_malloc_r+0x15c>
 80071de:	bf00      	nop
 80071e0:	200009c4 	.word	0x200009c4

080071e4 <__malloc_lock>:
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop

080071e8 <__malloc_unlock>:
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop

080071ec <_sbrk_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4c07      	ldr	r4, [pc, #28]	; (800720c <_sbrk_r+0x20>)
 80071f0:	2300      	movs	r3, #0
 80071f2:	4605      	mov	r5, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	f7fe f950 	bl	800549c <_sbrk>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d000      	beq.n	8007202 <_sbrk_r+0x16>
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0fb      	beq.n	8007200 <_sbrk_r+0x14>
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	2000121c 	.word	0x2000121c

08007210 <_malloc_trim_r>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	4f24      	ldr	r7, [pc, #144]	; (80072a4 <_malloc_trim_r+0x94>)
 8007214:	460c      	mov	r4, r1
 8007216:	4606      	mov	r6, r0
 8007218:	f7ff ffe4 	bl	80071e4 <__malloc_lock>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	685d      	ldr	r5, [r3, #4]
 8007220:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 8007224:	310f      	adds	r1, #15
 8007226:	f025 0503 	bic.w	r5, r5, #3
 800722a:	4429      	add	r1, r5
 800722c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8007230:	f021 010f 	bic.w	r1, r1, #15
 8007234:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8007238:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800723c:	db07      	blt.n	800724e <_malloc_trim_r+0x3e>
 800723e:	2100      	movs	r1, #0
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff ffd3 	bl	80071ec <_sbrk_r>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	442b      	add	r3, r5
 800724a:	4298      	cmp	r0, r3
 800724c:	d004      	beq.n	8007258 <_malloc_trim_r+0x48>
 800724e:	4630      	mov	r0, r6
 8007250:	f7ff ffca 	bl	80071e8 <__malloc_unlock>
 8007254:	2000      	movs	r0, #0
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	4261      	negs	r1, r4
 800725a:	4630      	mov	r0, r6
 800725c:	f7ff ffc6 	bl	80071ec <_sbrk_r>
 8007260:	3001      	adds	r0, #1
 8007262:	d00d      	beq.n	8007280 <_malloc_trim_r+0x70>
 8007264:	4b10      	ldr	r3, [pc, #64]	; (80072a8 <_malloc_trim_r+0x98>)
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	6819      	ldr	r1, [r3, #0]
 800726a:	1b2d      	subs	r5, r5, r4
 800726c:	f045 0501 	orr.w	r5, r5, #1
 8007270:	4630      	mov	r0, r6
 8007272:	1b09      	subs	r1, r1, r4
 8007274:	6055      	str	r5, [r2, #4]
 8007276:	6019      	str	r1, [r3, #0]
 8007278:	f7ff ffb6 	bl	80071e8 <__malloc_unlock>
 800727c:	2001      	movs	r0, #1
 800727e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007280:	2100      	movs	r1, #0
 8007282:	4630      	mov	r0, r6
 8007284:	f7ff ffb2 	bl	80071ec <_sbrk_r>
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	1a83      	subs	r3, r0, r2
 800728c:	2b0f      	cmp	r3, #15
 800728e:	ddde      	ble.n	800724e <_malloc_trim_r+0x3e>
 8007290:	4c06      	ldr	r4, [pc, #24]	; (80072ac <_malloc_trim_r+0x9c>)
 8007292:	4905      	ldr	r1, [pc, #20]	; (80072a8 <_malloc_trim_r+0x98>)
 8007294:	6824      	ldr	r4, [r4, #0]
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	1b00      	subs	r0, r0, r4
 800729c:	6053      	str	r3, [r2, #4]
 800729e:	6008      	str	r0, [r1, #0]
 80072a0:	e7d5      	b.n	800724e <_malloc_trim_r+0x3e>
 80072a2:	bf00      	nop
 80072a4:	2000058c 	.word	0x2000058c
 80072a8:	200009c4 	.word	0x200009c4
 80072ac:	20000994 	.word	0x20000994

080072b0 <_free_r>:
 80072b0:	2900      	cmp	r1, #0
 80072b2:	d044      	beq.n	800733e <_free_r+0x8e>
 80072b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b8:	460d      	mov	r5, r1
 80072ba:	4680      	mov	r8, r0
 80072bc:	f7ff ff92 	bl	80071e4 <__malloc_lock>
 80072c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80072c4:	4969      	ldr	r1, [pc, #420]	; (800746c <_free_r+0x1bc>)
 80072c6:	f027 0301 	bic.w	r3, r7, #1
 80072ca:	f1a5 0408 	sub.w	r4, r5, #8
 80072ce:	18e2      	adds	r2, r4, r3
 80072d0:	688e      	ldr	r6, [r1, #8]
 80072d2:	6850      	ldr	r0, [r2, #4]
 80072d4:	42b2      	cmp	r2, r6
 80072d6:	f020 0003 	bic.w	r0, r0, #3
 80072da:	d05e      	beq.n	800739a <_free_r+0xea>
 80072dc:	07fe      	lsls	r6, r7, #31
 80072de:	6050      	str	r0, [r2, #4]
 80072e0:	d40b      	bmi.n	80072fa <_free_r+0x4a>
 80072e2:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80072e6:	1be4      	subs	r4, r4, r7
 80072e8:	f101 0e08 	add.w	lr, r1, #8
 80072ec:	68a5      	ldr	r5, [r4, #8]
 80072ee:	4575      	cmp	r5, lr
 80072f0:	443b      	add	r3, r7
 80072f2:	d06d      	beq.n	80073d0 <_free_r+0x120>
 80072f4:	68e7      	ldr	r7, [r4, #12]
 80072f6:	60ef      	str	r7, [r5, #12]
 80072f8:	60bd      	str	r5, [r7, #8]
 80072fa:	1815      	adds	r5, r2, r0
 80072fc:	686d      	ldr	r5, [r5, #4]
 80072fe:	07ed      	lsls	r5, r5, #31
 8007300:	d53e      	bpl.n	8007380 <_free_r+0xd0>
 8007302:	f043 0201 	orr.w	r2, r3, #1
 8007306:	6062      	str	r2, [r4, #4]
 8007308:	50e3      	str	r3, [r4, r3]
 800730a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730e:	d217      	bcs.n	8007340 <_free_r+0x90>
 8007310:	08db      	lsrs	r3, r3, #3
 8007312:	1c58      	adds	r0, r3, #1
 8007314:	109a      	asrs	r2, r3, #2
 8007316:	684d      	ldr	r5, [r1, #4]
 8007318:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 800731c:	60a7      	str	r7, [r4, #8]
 800731e:	2301      	movs	r3, #1
 8007320:	4093      	lsls	r3, r2
 8007322:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8007326:	432b      	orrs	r3, r5
 8007328:	3a08      	subs	r2, #8
 800732a:	60e2      	str	r2, [r4, #12]
 800732c:	604b      	str	r3, [r1, #4]
 800732e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 8007332:	60fc      	str	r4, [r7, #12]
 8007334:	4640      	mov	r0, r8
 8007336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800733a:	f7ff bf55 	b.w	80071e8 <__malloc_unlock>
 800733e:	4770      	bx	lr
 8007340:	0a5a      	lsrs	r2, r3, #9
 8007342:	2a04      	cmp	r2, #4
 8007344:	d852      	bhi.n	80073ec <_free_r+0x13c>
 8007346:	099a      	lsrs	r2, r3, #6
 8007348:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800734c:	00ff      	lsls	r7, r7, #3
 800734e:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8007352:	19c8      	adds	r0, r1, r7
 8007354:	59ca      	ldr	r2, [r1, r7]
 8007356:	3808      	subs	r0, #8
 8007358:	4290      	cmp	r0, r2
 800735a:	d04f      	beq.n	80073fc <_free_r+0x14c>
 800735c:	6851      	ldr	r1, [r2, #4]
 800735e:	f021 0103 	bic.w	r1, r1, #3
 8007362:	428b      	cmp	r3, r1
 8007364:	d232      	bcs.n	80073cc <_free_r+0x11c>
 8007366:	6892      	ldr	r2, [r2, #8]
 8007368:	4290      	cmp	r0, r2
 800736a:	d1f7      	bne.n	800735c <_free_r+0xac>
 800736c:	68c3      	ldr	r3, [r0, #12]
 800736e:	60a0      	str	r0, [r4, #8]
 8007370:	60e3      	str	r3, [r4, #12]
 8007372:	609c      	str	r4, [r3, #8]
 8007374:	60c4      	str	r4, [r0, #12]
 8007376:	4640      	mov	r0, r8
 8007378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800737c:	f7ff bf34 	b.w	80071e8 <__malloc_unlock>
 8007380:	6895      	ldr	r5, [r2, #8]
 8007382:	4f3b      	ldr	r7, [pc, #236]	; (8007470 <_free_r+0x1c0>)
 8007384:	42bd      	cmp	r5, r7
 8007386:	4403      	add	r3, r0
 8007388:	d040      	beq.n	800740c <_free_r+0x15c>
 800738a:	68d0      	ldr	r0, [r2, #12]
 800738c:	60e8      	str	r0, [r5, #12]
 800738e:	f043 0201 	orr.w	r2, r3, #1
 8007392:	6085      	str	r5, [r0, #8]
 8007394:	6062      	str	r2, [r4, #4]
 8007396:	50e3      	str	r3, [r4, r3]
 8007398:	e7b7      	b.n	800730a <_free_r+0x5a>
 800739a:	07ff      	lsls	r7, r7, #31
 800739c:	4403      	add	r3, r0
 800739e:	d407      	bmi.n	80073b0 <_free_r+0x100>
 80073a0:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80073a4:	1aa4      	subs	r4, r4, r2
 80073a6:	4413      	add	r3, r2
 80073a8:	68a0      	ldr	r0, [r4, #8]
 80073aa:	68e2      	ldr	r2, [r4, #12]
 80073ac:	60c2      	str	r2, [r0, #12]
 80073ae:	6090      	str	r0, [r2, #8]
 80073b0:	4a30      	ldr	r2, [pc, #192]	; (8007474 <_free_r+0x1c4>)
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	f043 0001 	orr.w	r0, r3, #1
 80073b8:	4293      	cmp	r3, r2
 80073ba:	6060      	str	r0, [r4, #4]
 80073bc:	608c      	str	r4, [r1, #8]
 80073be:	d3b9      	bcc.n	8007334 <_free_r+0x84>
 80073c0:	4b2d      	ldr	r3, [pc, #180]	; (8007478 <_free_r+0x1c8>)
 80073c2:	4640      	mov	r0, r8
 80073c4:	6819      	ldr	r1, [r3, #0]
 80073c6:	f7ff ff23 	bl	8007210 <_malloc_trim_r>
 80073ca:	e7b3      	b.n	8007334 <_free_r+0x84>
 80073cc:	4610      	mov	r0, r2
 80073ce:	e7cd      	b.n	800736c <_free_r+0xbc>
 80073d0:	1811      	adds	r1, r2, r0
 80073d2:	6849      	ldr	r1, [r1, #4]
 80073d4:	07c9      	lsls	r1, r1, #31
 80073d6:	d444      	bmi.n	8007462 <_free_r+0x1b2>
 80073d8:	6891      	ldr	r1, [r2, #8]
 80073da:	68d2      	ldr	r2, [r2, #12]
 80073dc:	60ca      	str	r2, [r1, #12]
 80073de:	4403      	add	r3, r0
 80073e0:	f043 0001 	orr.w	r0, r3, #1
 80073e4:	6091      	str	r1, [r2, #8]
 80073e6:	6060      	str	r0, [r4, #4]
 80073e8:	50e3      	str	r3, [r4, r3]
 80073ea:	e7a3      	b.n	8007334 <_free_r+0x84>
 80073ec:	2a14      	cmp	r2, #20
 80073ee:	d816      	bhi.n	800741e <_free_r+0x16e>
 80073f0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80073f4:	00ff      	lsls	r7, r7, #3
 80073f6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80073fa:	e7aa      	b.n	8007352 <_free_r+0xa2>
 80073fc:	10aa      	asrs	r2, r5, #2
 80073fe:	2301      	movs	r3, #1
 8007400:	684d      	ldr	r5, [r1, #4]
 8007402:	4093      	lsls	r3, r2
 8007404:	432b      	orrs	r3, r5
 8007406:	604b      	str	r3, [r1, #4]
 8007408:	4603      	mov	r3, r0
 800740a:	e7b0      	b.n	800736e <_free_r+0xbe>
 800740c:	f043 0201 	orr.w	r2, r3, #1
 8007410:	614c      	str	r4, [r1, #20]
 8007412:	610c      	str	r4, [r1, #16]
 8007414:	60e5      	str	r5, [r4, #12]
 8007416:	60a5      	str	r5, [r4, #8]
 8007418:	6062      	str	r2, [r4, #4]
 800741a:	50e3      	str	r3, [r4, r3]
 800741c:	e78a      	b.n	8007334 <_free_r+0x84>
 800741e:	2a54      	cmp	r2, #84	; 0x54
 8007420:	d806      	bhi.n	8007430 <_free_r+0x180>
 8007422:	0b1a      	lsrs	r2, r3, #12
 8007424:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8007428:	00ff      	lsls	r7, r7, #3
 800742a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800742e:	e790      	b.n	8007352 <_free_r+0xa2>
 8007430:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007434:	d806      	bhi.n	8007444 <_free_r+0x194>
 8007436:	0bda      	lsrs	r2, r3, #15
 8007438:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800743c:	00ff      	lsls	r7, r7, #3
 800743e:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8007442:	e786      	b.n	8007352 <_free_r+0xa2>
 8007444:	f240 5054 	movw	r0, #1364	; 0x554
 8007448:	4282      	cmp	r2, r0
 800744a:	d806      	bhi.n	800745a <_free_r+0x1aa>
 800744c:	0c9a      	lsrs	r2, r3, #18
 800744e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8007452:	00ff      	lsls	r7, r7, #3
 8007454:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8007458:	e77b      	b.n	8007352 <_free_r+0xa2>
 800745a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800745e:	257e      	movs	r5, #126	; 0x7e
 8007460:	e777      	b.n	8007352 <_free_r+0xa2>
 8007462:	f043 0101 	orr.w	r1, r3, #1
 8007466:	6061      	str	r1, [r4, #4]
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	e763      	b.n	8007334 <_free_r+0x84>
 800746c:	2000058c 	.word	0x2000058c
 8007470:	20000594 	.word	0x20000594
 8007474:	20000998 	.word	0x20000998
 8007478:	200009f4 	.word	0x200009f4

0800747c <_init>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr

08007488 <_fini>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr
